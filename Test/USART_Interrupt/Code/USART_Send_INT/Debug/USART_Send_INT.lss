
USART_Send_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004dd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00004dd6  00004e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800182  00800182  00004f8c  2**0
                  ALLOC
  3 .stab         00005acc  00000000  00000000  00004f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e4d  00000000  00000000  0000aa58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000d8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000da65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000dc79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0001028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00011759  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00012c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00012f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__vector_1>
       8:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__vector_2>
       c:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__vector_3>
      10:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_4>
      14:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_5>
      18:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_6>
      1c:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_7>
      20:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_8>
      24:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__vector_9>
      28:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_10>
      2c:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_11>
      30:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__vector_12>
      34:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_13>
      38:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_14>
      3c:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_15>
      40:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 26 	call	0x4cce	; 0x4cce <main>
      8a:	0c 94 e9 26 	jmp	0x4dd2	; 0x4dd2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 26 	jmp	0x4d64	; 0x4d64 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 26 	jmp	0x4d9c	; 0x4d9c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 26 	jmp	0x4d7c	; 0x4d7c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 26 	jmp	0x4d7c	; 0x4d7c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 26 	jmp	0x4d64	; 0x4d64 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 26 	jmp	0x4d9c	; 0x4d9c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 26 	jmp	0x4d74	; 0x4d74 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 be 26 	jmp	0x4d7c	; 0x4d7c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 be 26 	jmp	0x4d7c	; 0x4d7c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 be 26 	jmp	0x4d7c	; 0x4d7c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bb 26 	jmp	0x4d76	; 0x4d76 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 d7 26 	jmp	0x4dae	; 0x4dae <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 ba 26 	jmp	0x4d74	; 0x4d74 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <USART_init>:
static void (*TXC_CallBackFunc)(void);
static void (*RXC_CallBackFunc)(void);
static void (*UDRE_CallBackFunc)(void);

void USART_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <USART_init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
   u16 UBBR_Temp = 0;
     ef4:	1a 82       	std	Y+2, r1	; 0x02
     ef6:	19 82       	std	Y+1, r1	; 0x01
	//Enable USART Mode
	#if defined USART_Tx_Only
	SET_BIT(UCSRB,TXEN);
     ef8:	aa e2       	ldi	r26, 0x2A	; 42
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ea e2       	ldi	r30, 0x2A	; 42
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	8c 93       	st	X, r24
	#elif defined USART_Rx_InterruptEnable
    SET_BIT(UCSRB,RXCIE);
	#elif defined USART_Tx_InterruptEnable
    SET_BIT(UCSRB,TXCIE);
	#elif defined USART_UDRE_InterruptEnable
    SET_BIT(UCSRB,UDRIE);
     f06:	aa e2       	ldi	r26, 0x2A	; 42
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea e2       	ldi	r30, 0x2A	; 42
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	8c 93       	st	X, r24
    SET_BIT(UCSRB,TXCIE);
    SET_BIT(UCSRB,UDRIE);
	#endif
    //ProcessorType
	#if defined USART_SingleProcessor
    CLEAR_BIT(UCSRA,MPCM);
     f14:	ab e2       	ldi	r26, 0x2B	; 43
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	eb e2       	ldi	r30, 0x2B	; 43
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8e 7f       	andi	r24, 0xFE	; 254
     f20:	8c 93       	st	X, r24
    SET_BIT(UCSRA,MPCM);
    #endif

    //OperationMode
    #if defined USART_Asynchronus_NormalSpeed
    UBBR_Temp=((f32)F_CPU) /((16.0)*(BaudRate))-0.5;
     f22:	83 e3       	ldi	r24, 0x33	; 51
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(UCSRC,URSEL);
     f2a:	a0 e4       	ldi	r26, 0x40	; 64
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e0 e4       	ldi	r30, 0x40	; 64
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 68       	ori	r24, 0x80	; 128
     f36:	8c 93       	st	X, r24
    SET_BIT(UCSRC,URSEL);
    SET_BIT(UCSRC,UMSEL);
	#endif

    //Set BaudRate Value in UBRR Register
    UBRRH = (u16)(UBBR_Temp>>8);
     f38:	e0 e4       	ldi	r30, 0x40	; 64
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	89 2f       	mov	r24, r25
     f42:	99 27       	eor	r25, r25
     f44:	80 83       	st	Z, r24
    UBRRL = (u8)UBBR_Temp;
     f46:	e9 e2       	ldi	r30, 0x29	; 41
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	80 83       	st	Z, r24

    //ClockPolarity
	#if defined USART_Recieve_Sample_OnFalling_Transmit_Sample_OnRising
    CLEAR_BIT(UCSRC,UCPOL);
	#elif defined USART_Recieve_Sample_OnRising_Transmit_Sample_OnFalling
    SET_BIT(UCSRC,UCPOL);
     f4e:	a0 e4       	ldi	r26, 0x40	; 64
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	8c 93       	st	X, r24
    #endif
    //ControlFrame
    //StopBit Number
    #if defined USART_Frame_1StopBit
    CLEAR_BIT(UCSRC,USBS);
     f5c:	a0 e4       	ldi	r26, 0x40	; 64
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e0 e4       	ldi	r30, 0x40	; 64
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	87 7f       	andi	r24, 0xF7	; 247
     f68:	8c 93       	st	X, r24
    #elif defined USART_Frame_2StopBit
    SET_BIT(UCSRC,USBS);
    #endif
    //Parity
    #if defined USART_Frame_DisableParity
    CLEAR_BIT(UCSRC,UPM0);
     f6a:	a0 e4       	ldi	r26, 0x40	; 64
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e0 e4       	ldi	r30, 0x40	; 64
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8f 7e       	andi	r24, 0xEF	; 239
     f76:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC,UPM1);
     f78:	a0 e4       	ldi	r26, 0x40	; 64
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e0 e4       	ldi	r30, 0x40	; 64
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 7d       	andi	r24, 0xDF	; 223
     f84:	8c 93       	st	X, r24
	#elif defined USART_7DataBit
    CLEAR_BIT(UCSRC,UCSZ0);
    SET_BIT(UCSRC,UCSZ1);
    CLEAR_BIT(UCSRC,UCSZ2);
	#elif defined USART_8DataBit
    SET_BIT(UCSRC,UCSZ0);
     f86:	a0 e4       	ldi	r26, 0x40	; 64
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e0 e4       	ldi	r30, 0x40	; 64
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	8c 93       	st	X, r24
    SET_BIT(UCSRC,UCSZ1);
     f94:	a0 e4       	ldi	r26, 0x40	; 64
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e0 e4       	ldi	r30, 0x40	; 64
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC,UCSZ2);
     fa2:	a0 e4       	ldi	r26, 0x40	; 64
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e0 e4       	ldi	r30, 0x40	; 64
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8b 7f       	andi	r24, 0xFB	; 251
     fae:	8c 93       	st	X, r24
    SET_BIT(UCSRC,UCSZ0);
    SET_BIT(UCSRC,UCSZ1);
    SET_BIT(UCSRC,UCSZ2);
    #endif

}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <USART_Transmit_Data_Polling>:

void USART_Transmit_Data_Polling(u8 Tx_Data)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01
	/* by using interrupt method when the UDRE ready and equal 1 start to transmit*/
	while(IS_BIT_CLEAR(UCSRA, UDRE));
     fc6:	eb e2       	ldi	r30, 0x2B	; 43
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	80 72       	andi	r24, 0x20	; 32
     fd2:	90 70       	andi	r25, 0x00	; 0
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	b9 f3       	breq	.-18     	; 0xfc6 <USART_Transmit_Data_Polling+0xc>
		#elif defined USART_6DataBit
		UDR = Tx_Data;
		#elif defined USART_7DataBit
		UDR = Tx_Data;
		#elif defined USART_8DataBit
		UDR = Tx_Data;
     fd8:	ec e2       	ldi	r30, 0x2C	; 44
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	80 83       	st	Z, r24
		/*Clear bit of TXB8 and select bit no of Data 9 and shifted it TXB8 bit*/
		UCSRB |= (UCSRB & CLEAR_TXB8) | ((Tx_Data&(Select_bit_9))>>Shift_No_from_9th_DataBit_to_TXB8_bit);
		/*Rest of 9 bit data stored in the UDR Register*/
		UDR = Tx_Data;
		#endif
}
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <USART_Receive_Data_Polling>:
STD_Return USART_Receive_Data_Polling(u8 *Rx_Data)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <USART_Receive_Data_Polling+0x6>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01

	while(IS_BIT_CLEAR(UCSRA,RXC));
     ff8:	eb e2       	ldi	r30, 0x2B	; 43
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	88 23       	and	r24, r24
    1000:	dc f7       	brge	.-10     	; 0xff8 <USART_Receive_Data_Polling+0x10>
		//Error found solve by users
			if ((IS_BIT_SET(UCSRA,FE))||(IS_BIT_SET(UCSRA,DOR))||(IS_BIT_SET(UCSRA,PE)))
    1002:	eb e2       	ldi	r30, 0x2B	; 43
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	80 71       	andi	r24, 0x10	; 16
    100e:	90 70       	andi	r25, 0x00	; 0
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	91 f4       	brne	.+36     	; 0x1038 <USART_Receive_Data_Polling+0x50>
    1014:	eb e2       	ldi	r30, 0x2B	; 43
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	88 70       	andi	r24, 0x08	; 8
    1020:	90 70       	andi	r25, 0x00	; 0
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	49 f4       	brne	.+18     	; 0x1038 <USART_Receive_Data_Polling+0x50>
    1026:	eb e2       	ldi	r30, 0x2B	; 43
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	84 70       	andi	r24, 0x04	; 4
    1032:	90 70       	andi	r25, 0x00	; 0
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	11 f0       	breq	.+4      	; 0x103c <USART_Receive_Data_Polling+0x54>
			{
				return E_OK;
    1038:	1b 82       	std	Y+3, r1	; 0x03
    103a:	08 c0       	rjmp	.+16     	; 0x104c <USART_Receive_Data_Polling+0x64>
					#elif defined USART_6DataBit
					*Rx_Data = UDR;
					#elif defined USART_7DataBit
					*Rx_Data = UDR;
					#elif defined USART_8DataBit
					*Rx_Data = UDR;
    103c:	ec e2       	ldi	r30, 0x2C	; 44
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	e9 81       	ldd	r30, Y+1	; 0x01
    1044:	fa 81       	ldd	r31, Y+2	; 0x02
    1046:	80 83       	st	Z, r24
					#elif defined USART_9DataBit
					*Rx_Data |= ((UCSRB&Select_bit_RXB8)<<Shift_No_from_RXB8_to_9th_DataBit);
					*Rx_Data |= UDR;
					#endif
	}
	return E_NOK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	8b 83       	std	Y+3, r24	; 0x03
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <USART_Transmit_Data_Interrupt>:

void USART_Transmit_Data_Interrupt(u8 Tx_Data)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
	#elif defined USART_6DataBit
	UDR = Tx_Data;
	#elif defined USART_7DataBit
	UDR = Tx_Data;
	#elif defined USART_8DataBit
	UDR = Tx_Data;
    1066:	ec e2       	ldi	r30, 0x2C	; 44
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	80 83       	st	Z, r24
	UCSRB |= (UCSRB & CLEAR_TXB8) | ((Tx_Data&(Select_bit_9))>>Shift_No_from_9th_DataBit_to_TXB8_bit);
	/*Rest of 9 bit data stored in the UDR Register*/
	UDR = Tx_Data;
	#endif

}
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <USART_Receive_Data_Interrupt>:
STD_Return USART_Receive_Data_Interrupt(u8 *Rx_Data)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <USART_Receive_Data_Interrupt+0x6>
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
		//Error found solve by users
			if ((IS_BIT_SET(UCSRA,FE))||(IS_BIT_SET(UCSRA,DOR))||(IS_BIT_SET(UCSRA,PE)))
    1086:	eb e2       	ldi	r30, 0x2B	; 43
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	80 71       	andi	r24, 0x10	; 16
    1092:	90 70       	andi	r25, 0x00	; 0
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	91 f4       	brne	.+36     	; 0x10bc <USART_Receive_Data_Interrupt+0x46>
    1098:	eb e2       	ldi	r30, 0x2B	; 43
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	88 70       	andi	r24, 0x08	; 8
    10a4:	90 70       	andi	r25, 0x00	; 0
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	49 f4       	brne	.+18     	; 0x10bc <USART_Receive_Data_Interrupt+0x46>
    10aa:	eb e2       	ldi	r30, 0x2B	; 43
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	84 70       	andi	r24, 0x04	; 4
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <USART_Receive_Data_Interrupt+0x4a>
			{
				return E_OK;
    10bc:	1b 82       	std	Y+3, r1	; 0x03
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <USART_Receive_Data_Interrupt+0x5a>
					#elif defined USART_6DataBit
					*Rx_Data = UDR;
					#elif defined USART_7DataBit
					*Rx_Data = UDR;
					#elif defined USART_8DataBit
					*Rx_Data = UDR;
    10c0:	ec e2       	ldi	r30, 0x2C	; 44
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	e9 81       	ldd	r30, Y+1	; 0x01
    10c8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
					#elif defined USART_9DataBit
					*Rx_Data |= ((UCSRB&Select_bit_RXB8)<<Shift_No_from_RXB8_to_9th_DataBit);
					*Rx_Data |= UDR;
					#endif
			}
	return E_NOK;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	8b 83       	std	Y+3, r24	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <TXC_Callback>:
void TXC_Callback(void(*Func_PTR)(void))
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <TXC_Callback+0x6>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	TXC_CallBackFunc = Func_PTR;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	90 93 83 01 	sts	0x0183, r25
    10f4:	80 93 82 01 	sts	0x0182, r24
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <__vector_15>:
ISR(USART_TXC_vect)
{
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	(*TXC_CallBackFunc)();
    112c:	e0 91 82 01 	lds	r30, 0x0182
    1130:	f0 91 83 01 	lds	r31, 0x0183
    1134:	09 95       	icall
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <RXC_Callback>:

void RXC_Callback(void(*Func_PTR)(void))
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <RXC_Callback+0x6>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	9a 83       	std	Y+2, r25	; 0x02
    1168:	89 83       	std	Y+1, r24	; 0x01
	RXC_CallBackFunc = Func_PTR;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	90 93 85 01 	sts	0x0185, r25
    1172:	80 93 84 01 	sts	0x0184, r24
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <__vector_13>:
ISR(USART_RXC_vect)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	(*RXC_CallBackFunc)();
    11aa:	e0 91 84 01 	lds	r30, 0x0184
    11ae:	f0 91 85 01 	lds	r31, 0x0185
    11b2:	09 95       	icall
}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <UDRE_Callback>:

void UDRE_Callback(void(*Func_PTR)(void))
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <UDRE_Callback+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
	UDRE_CallBackFunc = Func_PTR;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	90 93 87 01 	sts	0x0187, r25
    11f0:	80 93 86 01 	sts	0x0186, r24
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <__vector_14>:

ISR(USART_UDRE_vect)
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	(*UDRE_CallBackFunc)();
    1228:	e0 91 86 01 	lds	r30, 0x0186
    122c:	f0 91 87 01 	lds	r31, 0x0187
    1230:	09 95       	icall
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti

00001258 <Timer0_init>:
static void (*Timer1_ICU_CallBackFunc)(void);
static void (*Timer2_OVF_CallBack_Func)(void);
static void (*Timer2_CTC_CallBack_Func)(void);

void Timer0_init(void)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
						SET_BIT(TCCR0,COM00);
						SET_BIT(TCCR0,COM01);
		#endif

#elif  defined Timer0_Fast_PWM_Mode
		SET_BIT(TCCR0,WGM00);
    1260:	a3 e5       	ldi	r26, 0x53	; 83
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e3 e5       	ldi	r30, 0x53	; 83
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 64       	ori	r24, 0x40	; 64
    126c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    126e:	a3 e5       	ldi	r26, 0x53	; 83
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e3 e5       	ldi	r30, 0x53	; 83
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	88 60       	ori	r24, 0x08	; 8
    127a:	8c 93       	st	X, r24
		/*OC0 -> PINB3 in Atmega32*/
		#if defined Normal_PORT_Operation //OC0 Disconnected
				CLEAR_BIT(TCCR0,COM00);
				CLEAR_BIT(TCCR0,COM01);
		#elif defined ClearCompareMatch_SetTop_OCO	//Non_Inverted Mode
				CLEAR_BIT(TCCR0,COM00);
    127c:	a3 e5       	ldi	r26, 0x53	; 83
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e3 e5       	ldi	r30, 0x53	; 83
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8f 7e       	andi	r24, 0xEF	; 239
    1288:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
    128a:	a3 e5       	ldi	r26, 0x53	; 83
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e3 e5       	ldi	r30, 0x53	; 83
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_No_Prescaler
				SET_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
		#elif defined Timer0_CLK_8_Prescaler
				CLEAR_BIT(TCCR0,CS00);
    1298:	a3 e5       	ldi	r26, 0x53	; 83
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e3 e5       	ldi	r30, 0x53	; 83
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8e 7f       	andi	r24, 0xFE	; 254
    12a4:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    12a6:	a3 e5       	ldi	r26, 0x53	; 83
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e3 e5       	ldi	r30, 0x53	; 83
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
    12b4:	a3 e5       	ldi	r26, 0x53	; 83
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e3 e5       	ldi	r30, 0x53	; 83
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8b 7f       	andi	r24, 0xFB	; 251
    12c0:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_External_RisingEdge_CounterMode //On Pin T0
				SET_BIT(TCCR0,CS00);
				SET_BIT(TCCR0,CS01);
				SET_BIT(TCCR0,CS02);
		#endif
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <Timer0_SetValue>:
void Timer0_SetValue(u8 Value)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	0f 92       	push	r0
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer0_CTC_Timer_Mode
	OCR0 = Value; //Set Compare Output Value
#elif defined Timer0_PhaseCorrect_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer0_Fast_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
    12d4:	ec e5       	ldi	r30, 0x5C	; 92
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	80 83       	st	Z, r24
#endif
}
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <Timer0_CallBack>:

void Timer0_CallBack(void (*FUNC_PTR)(void))
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <Timer0_CallBack+0x6>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer0_Normal_Timer_Mode
		Timer0_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer0_CTC_Timer_Mode
		Timer0_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	Timer0_OVF_CallBack_Func();
    1326:	e0 91 88 01 	lds	r30, 0x0188
    132a:	f0 91 89 01 	lds	r31, 0x0189
    132e:	09 95       	icall
}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	ff 91       	pop	r31
    1336:	ef 91       	pop	r30
    1338:	bf 91       	pop	r27
    133a:	af 91       	pop	r26
    133c:	9f 91       	pop	r25
    133e:	8f 91       	pop	r24
    1340:	7f 91       	pop	r23
    1342:	6f 91       	pop	r22
    1344:	5f 91       	pop	r21
    1346:	4f 91       	pop	r20
    1348:	3f 91       	pop	r19
    134a:	2f 91       	pop	r18
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_CallBack_Func();
    1380:	e0 91 8a 01 	lds	r30, 0x018A
    1384:	f0 91 8b 01 	lds	r31, 0x018B
    1388:	09 95       	icall
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <Timer1_init>:


void Timer1_init(void)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	#elif defined Timer1_CLK_No_Prescaler
			SET_BIT(TCCR1B,CS10);
			CLEAR_BIT(TCCR1B,CS11);
			CLEAR_BIT(TCCR1B,CS12);
	#elif defined Timer1_CLK_8_Prescaler
			CLEAR_BIT(TCCR1B,CS10);
    13b8:	ae e4       	ldi	r26, 0x4E	; 78
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ee e4       	ldi	r30, 0x4E	; 78
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8e 7f       	andi	r24, 0xFE	; 254
    13c4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    13c6:	ae e4       	ldi	r26, 0x4E	; 78
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ee e4       	ldi	r30, 0x4E	; 78
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	82 60       	ori	r24, 0x02	; 2
    13d2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS12);
    13d4:	ae e4       	ldi	r26, 0x4E	; 78
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ee e4       	ldi	r30, 0x4E	; 78
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8b 7f       	andi	r24, 0xFB	; 251
    13e0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
	#endif

/*********************************WaveMode Generation Mode Selection************************************/
#if defined Timer1_Normal_Timer_Mode
				CLEAR_BIT(TCCR1A,WGM10);
    13e2:	af e4       	ldi	r26, 0x4F	; 79
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ef e4       	ldi	r30, 0x4F	; 79
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8e 7f       	andi	r24, 0xFE	; 254
    13ee:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    13f0:	af e4       	ldi	r26, 0x4F	; 79
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ef e4       	ldi	r30, 0x4F	; 79
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8d 7f       	andi	r24, 0xFD	; 253
    13fc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM12);
    13fe:	ae e4       	ldi	r26, 0x4E	; 78
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ee e4       	ldi	r30, 0x4E	; 78
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	87 7f       	andi	r24, 0xF7	; 247
    140a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    140c:	ae e4       	ldi	r26, 0x4E	; 78
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ee e4       	ldi	r30, 0x4E	; 78
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7e       	andi	r24, 0xEF	; 239
    1418:	8c 93       	st	X, r24
				SET_BIT(TIMSK,TOIE1);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	84 60       	ori	r24, 0x04	; 4
    1426:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
			CLEAR_BIT(TCCR1A,WGM11);
			SET_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
#endif
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <Timer1_SetValueChannelA>:

void Timer1_SetValueChannelA(u16 Value)	//to Set value of timer ChannelA
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <Timer1_SetValueChannelA+0x6>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
#if defined TIMER1_ChannelA
	#if defined Timer1_Normal_Timer_Mode
		TCNT1 = Value; //Set Overflow Value
    143c:	ec e4       	ldi	r30, 0x4C	; 76
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
		OCR1A = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelA
		OCR1A=Value;
	#endif
#endif
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <Timer1_SetValueChannelB>:
void Timer1_SetValueChannelB(u16 Value)	//to Set value of timer ChannelB
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <Timer1_SetValueChannelB+0x6>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelB
		OCR1B=Value;
	#endif
#endif
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <Timer1_ReadValueChannelA>:

void Timer1_ReadValueChannelA(u16 *value)	//to Read value of timer
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <Timer1_ReadValueChannelA+0x6>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
#if defined TIMER1_ChannelA
#if defined Timer1_Normal_Timer_Mode
	*value=TCNT1; //Set Overflow Value
    1478:	ec e4       	ldi	r30, 0x4C	; 76
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	80 83       	st	Z, r24
			*value=OCR1A;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
			*value=OCR1A;
#endif
#endif
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <Timer1_ReadValueChannelB>:

void Timer1_ReadValueChannelB(u16 *value)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <Timer1_ReadValueChannelB+0x6>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
	*value=OCR1B;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
	*value=OCR1B;
#endif
#endif
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <Timer1_ICU_EdgeSelection>:

STD_Return Timer1_ICU_EdgeSelection(ICU_Edge_Control_t State) //for Edge Selection which ICU will used
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <Timer1_ICU_EdgeSelection+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <Timer1_ICU_EdgeSelection+0x8>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3c 83       	std	Y+4, r19	; 0x04
    14c0:	2b 83       	std	Y+3, r18	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f0       	breq	.+26     	; 0x14e4 <Timer1_ICU_EdgeSelection+0x3a>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	21 30       	cpi	r18, 0x01	; 1
    14d0:	31 05       	cpc	r19, r1
    14d2:	81 f4       	brne	.+32     	; 0x14f4 <Timer1_ICU_EdgeSelection+0x4a>
	{
		case ICU_Rising_Edge:
			SET_BIT(TCCR1B,ICES1);
    14d4:	ae e4       	ldi	r26, 0x4E	; 78
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ee e4       	ldi	r30, 0x4E	; 78
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 64       	ori	r24, 0x40	; 64
    14e0:	8c 93       	st	X, r24
    14e2:	0a c0       	rjmp	.+20     	; 0x14f8 <Timer1_ICU_EdgeSelection+0x4e>
			break;
		case ICU_Falling_Edge:
			CLEAR_BIT(TCCR1B,ICES1);
    14e4:	ae e4       	ldi	r26, 0x4E	; 78
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ee e4       	ldi	r30, 0x4E	; 78
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7b       	andi	r24, 0xBF	; 191
    14f0:	8c 93       	st	X, r24
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <Timer1_ICU_EdgeSelection+0x4e>
			break;
		default:
			return E_OK;
    14f4:	1a 82       	std	Y+2, r1	; 0x02
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <Timer1_ICU_EdgeSelection+0x52>
	}
	return E_NOK;
    14f8:	31 e0       	ldi	r19, 0x01	; 1
    14fa:	3a 83       	std	Y+2, r19	; 0x02
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <Timer1_ICU_Interrupt>:
STD_Return Timer1_ICU_Interrupt(ICU_Interrupt_State State) //Enable or Disable ICU interrupt
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <Timer1_ICU_Interrupt+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <Timer1_ICU_Interrupt+0x8>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3c 83       	std	Y+4, r19	; 0x04
    1522:	2b 83       	std	Y+3, r18	; 0x03
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	31 f0       	breq	.+12     	; 0x1538 <Timer1_ICU_Interrupt+0x2c>
    152c:	2b 81       	ldd	r18, Y+3	; 0x03
    152e:	3c 81       	ldd	r19, Y+4	; 0x04
    1530:	21 30       	cpi	r18, 0x01	; 1
    1532:	31 05       	cpc	r19, r1
    1534:	49 f0       	breq	.+18     	; 0x1548 <Timer1_ICU_Interrupt+0x3c>
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <Timer1_ICU_Interrupt+0x4c>
	{
	//receive the ICU  result on the ICP pin => pin 6 portD
	case Enable_ICU_Interrupt:
		//Enable Input Capture Interrupt
		SET_BIT(TIMSK,TICIE1);
    1538:	a9 e5       	ldi	r26, 0x59	; 89
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e9 e5       	ldi	r30, 0x59	; 89
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 62       	ori	r24, 0x20	; 32
    1544:	8c 93       	st	X, r24
    1546:	0a c0       	rjmp	.+20     	; 0x155c <Timer1_ICU_Interrupt+0x50>
		break;
	case Disable_ICU_Interrupt:
		//disable Input Capture Interrupt
		CLEAR_BIT(TIMSK,TICIE1);
    1548:	a9 e5       	ldi	r26, 0x59	; 89
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e9 e5       	ldi	r30, 0x59	; 89
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8f 7d       	andi	r24, 0xDF	; 223
    1554:	8c 93       	st	X, r24
    1556:	02 c0       	rjmp	.+4      	; 0x155c <Timer1_ICU_Interrupt+0x50>
		break;
	default:
		return E_OK;
    1558:	1a 82       	std	Y+2, r1	; 0x02
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <Timer1_ICU_Interrupt+0x54>
	}
return E_NOK;
    155c:	31 e0       	ldi	r19, 0x01	; 1
    155e:	3a 83       	std	Y+2, r19	; 0x02
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <Timer1_SetICR1_TopValue>:

void Timer1_SetICR1_TopValue(u16 Top_Value) //ICR1
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Timer1_SetICR1_TopValue+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Top_Value;
    157e:	e6 e4       	ldi	r30, 0x46	; 70
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <Timer1_Read_ICR_Value>:

void Timer1_Read_ICR_Value(u16  *value)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <Timer1_Read_ICR_Value+0x6>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
	//Store value of InputCaptureRegister & get it back
	*value=ICR1;
    15a2:	e6 e4       	ldi	r30, 0x46	; 70
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	e9 81       	ldd	r30, Y+1	; 0x01
    15ac:	fa 81       	ldd	r31, Y+2	; 0x02
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <ICU_CallBack_Func>:
void ICU_CallBack_Func(void(*PTR_Func)(void))
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <ICU_CallBack_Func+0x6>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_CallBackFunc=PTR_Func;
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	90 93 93 01 	sts	0x0193, r25
    15d2:	80 93 92 01 	sts	0x0192, r24
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <Timer1_CallBack>:

void Timer1_CallBack(void (*FUNC_PTR)(void))
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <Timer1_CallBack+0x6>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer1_Normal_Timer_Mode
	Timer1_OVF_CallBack_Func = FUNC_PTR;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	90 93 8d 01 	sts	0x018D, r25
    15f6:	80 93 8c 01 	sts	0x018C, r24
		Timer1_CTC_A_CallBack_Func = FUNC_PTR;
	#elif defined TIMER1_ChannelB
		Timer1_CTC_B_CallBack_Func = FUNC_PTR;
	#endif
		#endif
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <__vector_9>:
//ISR of OVF
ISR(TIMER1_OVF_vect)
{
    1604:	1f 92       	push	r1
    1606:	0f 92       	push	r0
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	0f 92       	push	r0
    160c:	11 24       	eor	r1, r1
    160e:	2f 93       	push	r18
    1610:	3f 93       	push	r19
    1612:	4f 93       	push	r20
    1614:	5f 93       	push	r21
    1616:	6f 93       	push	r22
    1618:	7f 93       	push	r23
    161a:	8f 93       	push	r24
    161c:	9f 93       	push	r25
    161e:	af 93       	push	r26
    1620:	bf 93       	push	r27
    1622:	ef 93       	push	r30
    1624:	ff 93       	push	r31
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
	Timer1_OVF_CallBack_Func();
    162e:	e0 91 8c 01 	lds	r30, 0x018C
    1632:	f0 91 8d 01 	lds	r31, 0x018D
    1636:	09 95       	icall
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <__vector_7>:
//ISR of COMP_ChannelA
ISR(TIMER1_COMPA_vect)
{
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	2f 93       	push	r18
    166a:	3f 93       	push	r19
    166c:	4f 93       	push	r20
    166e:	5f 93       	push	r21
    1670:	6f 93       	push	r22
    1672:	7f 93       	push	r23
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	af 93       	push	r26
    167a:	bf 93       	push	r27
    167c:	ef 93       	push	r30
    167e:	ff 93       	push	r31
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_A_CallBack_Func();
    1688:	e0 91 8e 01 	lds	r30, 0x018E
    168c:	f0 91 8f 01 	lds	r31, 0x018F
    1690:	09 95       	icall
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_8>:
//ISR of COMP_ChannelB
ISR(TIMER1_COMPB_vect)
{
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	2f 93       	push	r18
    16c4:	3f 93       	push	r19
    16c6:	4f 93       	push	r20
    16c8:	5f 93       	push	r21
    16ca:	6f 93       	push	r22
    16cc:	7f 93       	push	r23
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
    16d6:	ef 93       	push	r30
    16d8:	ff 93       	push	r31
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_B_CallBack_Func();
    16e2:	e0 91 90 01 	lds	r30, 0x0190
    16e6:	f0 91 91 01 	lds	r31, 0x0191
    16ea:	09 95       	icall
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_6>:
//ISR of ICU
ISR(TIMER1_ICU_vect)
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	Timer1_ICU_CallBackFunc();
    173c:	e0 91 92 01 	lds	r30, 0x0192
    1740:	f0 91 93 01 	lds	r31, 0x0193
    1744:	09 95       	icall
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <Timer2_init>:
void Timer2_init(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
		#elif defined Timer2_CLK_External_RisingEdge_CounterMode //On Pin T2
				SET_BIT(TCCR2,CS20);
				SET_BIT(TCCR2,CS21);
				SET_BIT(TCCR2,CS22);
		#endif
}
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <Timer2_SetValue>:
void Timer2_SetValue(u8 Value)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer2_PhaseCorrect_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer2_Fast_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#endif
}
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <Timer2_CallBack>:

void Timer2_CallBack(void (*FUNC_PTR)(void))
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <Timer2_CallBack+0x6>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	9a 83       	std	Y+2, r25	; 0x02
    179a:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer2_Normal_Timer_Mode
		Timer2_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer2_CTC_Timer_Mode
		Timer2_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	2f 93       	push	r18
    17b2:	3f 93       	push	r19
    17b4:	4f 93       	push	r20
    17b6:	5f 93       	push	r21
    17b8:	6f 93       	push	r22
    17ba:	7f 93       	push	r23
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	af 93       	push	r26
    17c2:	bf 93       	push	r27
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	Timer2_OVF_CallBack_Func();
    17d0:	e0 91 94 01 	lds	r30, 0x0194
    17d4:	f0 91 95 01 	lds	r31, 0x0195
    17d8:	09 95       	icall
}
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	ff 91       	pop	r31
    17e0:	ef 91       	pop	r30
    17e2:	bf 91       	pop	r27
    17e4:	af 91       	pop	r26
    17e6:	9f 91       	pop	r25
    17e8:	8f 91       	pop	r24
    17ea:	7f 91       	pop	r23
    17ec:	6f 91       	pop	r22
    17ee:	5f 91       	pop	r21
    17f0:	4f 91       	pop	r20
    17f2:	3f 91       	pop	r19
    17f4:	2f 91       	pop	r18
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
	Timer2_CTC_CallBack_Func();
    182a:	e0 91 96 01 	lds	r30, 0x0196
    182e:	f0 91 97 01 	lds	r31, 0x0197
    1832:	09 95       	icall
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <SPI_init>:
#include "SPI.h"

static void (*STC_Callback_Func)(void);

void SPI_init(void)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(SPCR,SPE);
    1862:	ad e2       	ldi	r26, 0x2D	; 45
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	ed e2       	ldi	r30, 0x2D	; 45
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	80 64       	ori	r24, 0x40	; 64
    186e:	8c 93       	st	X, r24
	    #if defined DataOrder_MSB
	    CLEAR_BIT(SPCR,DORD);	//leave it cleared by default or CLEAR_BIT
	    #elif defined DataOrder_LSB
	    SET_BIT(SPCR,DORD);
    1870:	ad e2       	ldi	r26, 0x2D	; 45
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ed e2       	ldi	r30, 0x2D	; 45
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 62       	ori	r24, 0x20	; 32
    187c:	8c 93       	st	X, r24
	    #endif

	    #if defined SCK_FREQUENCY_4
	    //leave it cleared by default
	    #elif defined SCK_FREQUENCY_16
	    SET_BIT(SPCR,SPR0);
    187e:	ad e2       	ldi	r26, 0x2D	; 45
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ed e2       	ldi	r30, 0x2D	; 45
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	8c 93       	st	X, r24
	    SET_BIT(SPCR,SPR0);
	    SET_BIT(SPCR,SPR1);
	    #endif

	    #if defined Leading_Edge_Rising_Trailling_Edge_Falling
			CLEAR_BIT(SPCR,CPOL);
    188c:	ad e2       	ldi	r26, 0x2D	; 45
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ed e2       	ldi	r30, 0x2D	; 45
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	87 7f       	andi	r24, 0xF7	; 247
    1898:	8c 93       	st	X, r24
			SET_BIT(SPCR,CPOL);
		#endif

		//Clock phase selection
		#if defined Receive_First_Send_Second
			CLEAR_BIT(SPCR,CPHA);
    189a:	ad e2       	ldi	r26, 0x2D	; 45
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ed e2       	ldi	r30, 0x2D	; 45
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8b 7f       	andi	r24, 0xFB	; 251
    18a6:	8c 93       	st	X, r24
		#elif defined Send_First_Receive_Second
			SET_BIT(SPCR,CPHA);
		#endif
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <SPI_Interrupt_State>:

STD_Return SPI_Interrupt_State(SPI_Interrupt_State_t state)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <SPI_Interrupt_State+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <SPI_Interrupt_State+0x8>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3c 83       	std	Y+4, r19	; 0x04
    18c4:	2b 83       	std	Y+3, r18	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	31 f0       	breq	.+12     	; 0x18da <SPI_Interrupt_State+0x2c>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	21 30       	cpi	r18, 0x01	; 1
    18d4:	31 05       	cpc	r19, r1
    18d6:	49 f0       	breq	.+18     	; 0x18ea <SPI_Interrupt_State+0x3c>
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <SPI_Interrupt_State+0x4c>
		{
			case SPI_Interrupt_Enable:
				SET_BIT(SPCR,SPIE);
    18da:	ad e2       	ldi	r26, 0x2D	; 45
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ed e2       	ldi	r30, 0x2D	; 45
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	80 68       	ori	r24, 0x80	; 128
    18e6:	8c 93       	st	X, r24
    18e8:	0a c0       	rjmp	.+20     	; 0x18fe <SPI_Interrupt_State+0x50>
				break;
			case SPI_Interrupt_Disable:
				CLEAR_BIT(SPCR,SPIE);
    18ea:	ad e2       	ldi	r26, 0x2D	; 45
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ed e2       	ldi	r30, 0x2D	; 45
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 77       	andi	r24, 0x7F	; 127
    18f6:	8c 93       	st	X, r24
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <SPI_Interrupt_State+0x50>
				break;
			default:
		       return E_OK;
    18fa:	1a 82       	std	Y+2, r1	; 0x02
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <SPI_Interrupt_State+0x54>
		}
	return E_NOK;
    18fe:	31 e0       	ldi	r19, 0x01	; 1
    1900:	3a 83       	std	Y+2, r19	; 0x02
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <SPI_MasterSlave_Selection>:
STD_Return SPI_MasterSlave_Selection(SPI_Mode_Selection_t mode)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <SPI_MasterSlave_Selection+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <SPI_MasterSlave_Selection+0x8>
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3c 83       	std	Y+4, r19	; 0x04
    1928:	2b 83       	std	Y+3, r18	; 0x03
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	31 f0       	breq	.+12     	; 0x193e <SPI_MasterSlave_Selection+0x2c>
    1932:	2b 81       	ldd	r18, Y+3	; 0x03
    1934:	3c 81       	ldd	r19, Y+4	; 0x04
    1936:	21 30       	cpi	r18, 0x01	; 1
    1938:	31 05       	cpc	r19, r1
    193a:	c1 f0       	breq	.+48     	; 0x196c <SPI_MasterSlave_Selection+0x5a>
    193c:	24 c0       	rjmp	.+72     	; 0x1986 <SPI_MasterSlave_Selection+0x74>
		{
			case SPI_SLAVE:
				CLEAR_BIT(SPCR,MSTR);
    193e:	ad e2       	ldi	r26, 0x2D	; 45
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ed e2       	ldi	r30, 0x2D	; 45
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8f 7e       	andi	r24, 0xEF	; 239
    194a:	8c 93       	st	X, r24
				DIO_SetPinDirection(MOSI_PORT,MOSI_PIN,DIO_INPUT);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	65 e0       	ldi	r22, 0x05	; 5
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
				DIO_SetPinDirection(SS_PORT,SS_PIN,DIO_INPUT);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	64 e0       	ldi	r22, 0x04	; 4
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
				DIO_SetPinDirection(SCK_PORT,SCK_PIN,DIO_INPUT);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	67 e0       	ldi	r22, 0x07	; 7
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
    196a:	0f c0       	rjmp	.+30     	; 0x198a <SPI_MasterSlave_Selection+0x78>
				break;
			case SPI_MASTER:
				SET_BIT(SPCR,MSTR);
    196c:	ad e2       	ldi	r26, 0x2D	; 45
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ed e2       	ldi	r30, 0x2D	; 45
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 61       	ori	r24, 0x10	; 16
    1978:	8c 93       	st	X, r24
				DIO_SetPinDirection(MISO_PORT,MISO_PIN,DIO_INPUT);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	66 e0       	ldi	r22, 0x06	; 6
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
    1984:	02 c0       	rjmp	.+4      	; 0x198a <SPI_MasterSlave_Selection+0x78>
				break;
			default:
				return E_OK;
    1986:	1a 82       	std	Y+2, r1	; 0x02
    1988:	02 c0       	rjmp	.+4      	; 0x198e <SPI_MasterSlave_Selection+0x7c>
		}
	return E_NOK;
    198a:	31 e0       	ldi	r19, 0x01	; 1
    198c:	3a 83       	std	Y+2, r19	; 0x02
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <SPI_Transmit_Data>:

void SPI_Transmit_Data(u8 Trasnsmitted_Data)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	0f 92       	push	r0
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinValue(SS_PORT,SS_PIN,DIO_LOW); //ENABLE SLAVE
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	64 e0       	ldi	r22, 0x04	; 4
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
	SPDR= Trasnsmitted_Data;
    19b4:	ef e2       	ldi	r30, 0x2F	; 47
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	80 83       	st	Z, r24
	if(GET_BIT(SPSR,SPIF)==1)
    19bc:	ee e2       	ldi	r30, 0x2E	; 46
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	88 1f       	adc	r24, r24
    19c4:	88 27       	eor	r24, r24
    19c6:	88 1f       	adc	r24, r24
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <SPI_Transmit_Data+0x38>
		{
			DIO_SetPinValue(SS_PORT,SS_PIN,DIO_HIGH); //DISABLE SLAVE
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	64 e0       	ldi	r22, 0x04	; 4
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
		}
}
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <SPI_Receive_Data>:
void SPI_Receive_Data(u8 *Received_Data)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <SPI_Receive_Data+0x6>
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(SPSR,SPIF)==1)
    19ec:	ee e2       	ldi	r30, 0x2E	; 46
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	88 1f       	adc	r24, r24
    19f4:	88 27       	eor	r24, r24
    19f6:	88 1f       	adc	r24, r24
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	31 f4       	brne	.+12     	; 0x1a08 <SPI_Receive_Data+0x2a>
		{
			*Received_Data=SPDR;
    19fc:	ef e2       	ldi	r30, 0x2F	; 47
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	e9 81       	ldd	r30, Y+1	; 0x01
    1a04:	fa 81       	ldd	r31, Y+2	; 0x02
    1a06:	80 83       	st	Z, r24
		}
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <STC_Callback>:

void STC_Callback(void(*func_ptr)(void))
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <STC_Callback+0x6>
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	STC_Callback_Func=func_ptr;
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	90 93 99 01 	sts	0x0199, r25
    1a28:	80 93 98 01 	sts	0x0198, r24
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <__vector_12>:

ISR(SPI_STC_vect)
{
    1a36:	1f 92       	push	r1
    1a38:	0f 92       	push	r0
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	0f 92       	push	r0
    1a3e:	11 24       	eor	r1, r1
    1a40:	2f 93       	push	r18
    1a42:	3f 93       	push	r19
    1a44:	4f 93       	push	r20
    1a46:	5f 93       	push	r21
    1a48:	6f 93       	push	r22
    1a4a:	7f 93       	push	r23
    1a4c:	8f 93       	push	r24
    1a4e:	9f 93       	push	r25
    1a50:	af 93       	push	r26
    1a52:	bf 93       	push	r27
    1a54:	ef 93       	push	r30
    1a56:	ff 93       	push	r31
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
	(*STC_Callback_Func)();
    1a60:	e0 91 98 01 	lds	r30, 0x0198
    1a64:	f0 91 99 01 	lds	r31, 0x0199
    1a68:	09 95       	icall
}
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	ff 91       	pop	r31
    1a70:	ef 91       	pop	r30
    1a72:	bf 91       	pop	r27
    1a74:	af 91       	pop	r26
    1a76:	9f 91       	pop	r25
    1a78:	8f 91       	pop	r24
    1a7a:	7f 91       	pop	r23
    1a7c:	6f 91       	pop	r22
    1a7e:	5f 91       	pop	r21
    1a80:	4f 91       	pop	r20
    1a82:	3f 91       	pop	r19
    1a84:	2f 91       	pop	r18
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	0f 90       	pop	r0
    1a8c:	1f 90       	pop	r1
    1a8e:	18 95       	reti

00001a90 <I2C_init>:
 *      Author: Seko
 */
#include "I2C.h"

void I2C_init(u8 address)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	0f 92       	push	r0
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	89 83       	std	Y+1, r24	; 0x01
	#if defined Master_Mode
	#if defined Prescaler_0
		CLEAR_BIT(TWSR,TWPS0);
    1a9c:	a1 e2       	ldi	r26, 0x21	; 33
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e1 e2       	ldi	r30, 0x21	; 33
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8e 7f       	andi	r24, 0xFE	; 254
    1aa8:	8c 93       	st	X, r24
		CLEAR_BIT(TWSR,TWPS1);
    1aaa:	a1 e2       	ldi	r26, 0x21	; 33
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e1 e2       	ldi	r30, 0x21	; 33
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8d 7f       	andi	r24, 0xFD	; 253
    1ab6:	8c 93       	st	X, r24
		SET_BIT(TWAR,TWGCE);
		#elif Slave_defined Not_Recognize_GeneralCall
		CLEAR_BIT(TWAR,TWGCE);
#endif
		#endif
	SET_BIT(TWCR,TWEN);
    1ab8:	a6 e5       	ldi	r26, 0x56	; 86
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e6 e5       	ldi	r30, 0x56	; 86
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	84 60       	ori	r24, 0x04	; 4
    1ac4:	8c 93       	st	X, r24
}
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <I2C_Interrupt_Enable>:

STD_Return I2C_Interrupt_Enable(I2C_Interrupt_Enable_t state)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <I2C_Interrupt_Enable+0x6>
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <I2C_Interrupt_Enable+0x8>
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3c 83       	std	Y+4, r19	; 0x04
    1ae4:	2b 83       	std	Y+3, r18	; 0x03
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	31 f0       	breq	.+12     	; 0x1afa <I2C_Interrupt_Enable+0x2c>
    1aee:	2b 81       	ldd	r18, Y+3	; 0x03
    1af0:	3c 81       	ldd	r19, Y+4	; 0x04
    1af2:	21 30       	cpi	r18, 0x01	; 1
    1af4:	31 05       	cpc	r19, r1
    1af6:	49 f0       	breq	.+18     	; 0x1b0a <I2C_Interrupt_Enable+0x3c>
    1af8:	10 c0       	rjmp	.+32     	; 0x1b1a <I2C_Interrupt_Enable+0x4c>
	{
		case I2C_Enable:
			SET_BIT(TWCR,TWIE);
    1afa:	a6 e5       	ldi	r26, 0x56	; 86
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e6 e5       	ldi	r30, 0x56	; 86
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	81 60       	ori	r24, 0x01	; 1
    1b06:	8c 93       	st	X, r24
    1b08:	0a c0       	rjmp	.+20     	; 0x1b1e <I2C_Interrupt_Enable+0x50>
			break;
		case I2C_Disable:
			CLEAR_BIT(TWCR,TWIE);
    1b0a:	a6 e5       	ldi	r26, 0x56	; 86
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e6 e5       	ldi	r30, 0x56	; 86
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8e 7f       	andi	r24, 0xFE	; 254
    1b16:	8c 93       	st	X, r24
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <I2C_Interrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    1b1a:	1a 82       	std	Y+2, r1	; 0x02
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <I2C_Interrupt_Enable+0x54>
	}
	return E_NOK;
    1b1e:	31 e0       	ldi	r19, 0x01	; 1
    1b20:	3a 83       	std	Y+2, r19	; 0x02
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <I2C_ACK_Mode>:

STD_Return I2C_ACK_Mode(I2C_ACK_State_t state)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <I2C_ACK_Mode+0x6>
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <I2C_ACK_Mode+0x8>
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	3c 83       	std	Y+4, r19	; 0x04
    1b48:	2b 83       	std	Y+3, r18	; 0x03
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	31 f0       	breq	.+12     	; 0x1b5e <I2C_ACK_Mode+0x2c>
    1b52:	2b 81       	ldd	r18, Y+3	; 0x03
    1b54:	3c 81       	ldd	r19, Y+4	; 0x04
    1b56:	21 30       	cpi	r18, 0x01	; 1
    1b58:	31 05       	cpc	r19, r1
    1b5a:	49 f0       	breq	.+18     	; 0x1b6e <I2C_ACK_Mode+0x3c>
    1b5c:	10 c0       	rjmp	.+32     	; 0x1b7e <I2C_ACK_Mode+0x4c>
	{
		case I2C_ACK:
			SET_BIT(TWCR,TWEA);
    1b5e:	a6 e5       	ldi	r26, 0x56	; 86
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e6 e5       	ldi	r30, 0x56	; 86
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	80 64       	ori	r24, 0x40	; 64
    1b6a:	8c 93       	st	X, r24
    1b6c:	0a c0       	rjmp	.+20     	; 0x1b82 <I2C_ACK_Mode+0x50>
			break;
		case I2C_NACK:
			CLEAR_BIT(TWCR,TWEA);
    1b6e:	a6 e5       	ldi	r26, 0x56	; 86
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e6 e5       	ldi	r30, 0x56	; 86
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	8f 7b       	andi	r24, 0xBF	; 191
    1b7a:	8c 93       	st	X, r24
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <I2C_ACK_Mode+0x50>
			break;
		default:
			return E_OK;
    1b7e:	1a 82       	std	Y+2, r1	; 0x02
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <I2C_ACK_Mode+0x54>
	}
	return E_NOK;
    1b82:	31 e0       	ldi	r19, 0x01	; 1
    1b84:	3a 83       	std	Y+2, r19	; 0x02
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <I2C_Send_Condtion>:

STD_Return I2C_Send_Condtion(I2C_Condition_State_t State)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <I2C_Send_Condtion+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <I2C_Send_Condtion+0x8>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3c 83       	std	Y+4, r19	; 0x04
    1bac:	2b 83       	std	Y+3, r18	; 0x03
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	51 f1       	breq	.+84     	; 0x1c0c <I2C_Send_Condtion+0x76>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	22 30       	cpi	r18, 0x02	; 2
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <I2C_Send_Condtion+0x2e>
    1bc2:	43 c0       	rjmp	.+134    	; 0x1c4a <I2C_Send_Condtion+0xb4>
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	09 f0       	breq	.+2      	; 0x1bce <I2C_Send_Condtion+0x38>
    1bcc:	4d c0       	rjmp	.+154    	; 0x1c68 <I2C_Send_Condtion+0xd2>
	{
		case I2C_Start_Condition:
			/* Send Start condition*/
			SET_BIT(TWCR,TWSTA);
    1bce:	a6 e5       	ldi	r26, 0x56	; 86
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e6 e5       	ldi	r30, 0x56	; 86
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	80 62       	ori	r24, 0x20	; 32
    1bda:	8c 93       	st	X, r24
			/* Clear the interrupt flag to operate the start condition*/
			SET_BIT(TWCR,TWINT);
    1bdc:	a6 e5       	ldi	r26, 0x56	; 86
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e6 e5       	ldi	r30, 0x56	; 86
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	80 68       	ori	r24, 0x80	; 128
    1be8:	8c 93       	st	X, r24
			/*wait until the interrupt flag raise again and previous operation is completed*/
			while((GET_BIT(TWCR,TWINT))==0);
    1bea:	e6 e5       	ldi	r30, 0x56	; 86
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	88 23       	and	r24, r24
    1bf2:	dc f7       	brge	.-10     	; 0x1bea <I2C_Send_Condtion+0x54>
			/* check operation status register*/
			if ((TWSR & Mask_Selected_Bit) != START_ACK)
    1bf4:	e1 e2       	ldi	r30, 0x21	; 33
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	88 7f       	andi	r24, 0xF8	; 248
    1c00:	90 70       	andi	r25, 0x00	; 0
    1c02:	88 30       	cpi	r24, 0x08	; 8
    1c04:	91 05       	cpc	r25, r1
    1c06:	91 f1       	breq	.+100    	; 0x1c6c <I2C_Send_Condtion+0xd6>
			{
				return E_OK;
    1c08:	1a 82       	std	Y+2, r1	; 0x02
    1c0a:	32 c0       	rjmp	.+100    	; 0x1c70 <I2C_Send_Condtion+0xda>
			}
			break;
		case I2C_RepeatedStart_Condition:
			/* Send Repeated Start condition*/
			SET_BIT(TWCR,TWSTA);
    1c0c:	a6 e5       	ldi	r26, 0x56	; 86
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e6 e5       	ldi	r30, 0x56	; 86
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	80 62       	ori	r24, 0x20	; 32
    1c18:	8c 93       	st	X, r24
			/* Clear the interrupt flag to operate the start condition*/
			SET_BIT(TWCR,TWINT);
    1c1a:	a6 e5       	ldi	r26, 0x56	; 86
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e6 e5       	ldi	r30, 0x56	; 86
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	80 68       	ori	r24, 0x80	; 128
    1c26:	8c 93       	st	X, r24
			/*wait until the interrupt flag raise again and previous operation is completed*/
			while((GET_BIT(TWCR,TWINT))==0);
    1c28:	e6 e5       	ldi	r30, 0x56	; 86
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	88 23       	and	r24, r24
    1c30:	dc f7       	brge	.-10     	; 0x1c28 <I2C_Send_Condtion+0x92>
			/* check operation status register*/
			if ((TWSR & Mask_Selected_Bit) != REP_START_ACK)
    1c32:	e1 e2       	ldi	r30, 0x21	; 33
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	88 7f       	andi	r24, 0xF8	; 248
    1c3e:	90 70       	andi	r25, 0x00	; 0
    1c40:	80 31       	cpi	r24, 0x10	; 16
    1c42:	91 05       	cpc	r25, r1
    1c44:	99 f0       	breq	.+38     	; 0x1c6c <I2C_Send_Condtion+0xd6>
			{
				return E_OK;
    1c46:	1a 82       	std	Y+2, r1	; 0x02
    1c48:	13 c0       	rjmp	.+38     	; 0x1c70 <I2C_Send_Condtion+0xda>
			}
			break;
		case I2C_Stop_Condition:
			SET_BIT(TWCR,TWSTO);
    1c4a:	a6 e5       	ldi	r26, 0x56	; 86
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e6 e5       	ldi	r30, 0x56	; 86
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 61       	ori	r24, 0x10	; 16
    1c56:	8c 93       	st	X, r24
			/* Clear the interrupt flag to operate the stop condition*/
			SET_BIT(TWCR,TWINT);
    1c58:	a6 e5       	ldi	r26, 0x56	; 86
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e6 e5       	ldi	r30, 0x56	; 86
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 68       	ori	r24, 0x80	; 128
    1c64:	8c 93       	st	X, r24
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <I2C_Send_Condtion+0xd6>
			break;
		default:
			return E_OK;
    1c68:	1a 82       	std	Y+2, r1	; 0x02
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <I2C_Send_Condtion+0xda>
	}
	return E_NOK;
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <I2C_Slave_Address_Mode>:

STD_Return I2C_Slave_Address_Mode(I2C_SlaveAddress_State_t State,u8 address)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <I2C_Slave_Address_Mode+0x6>
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <I2C_Slave_Address_Mode+0x8>
    1c88:	0f 92       	push	r0
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	6a 83       	std	Y+2, r22	; 0x02
	switch (State)
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3d 83       	std	Y+5, r19	; 0x05
    1c9a:	2c 83       	std	Y+4, r18	; 0x04
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	31 f0       	breq	.+12     	; 0x1cb0 <I2C_Slave_Address_Mode+0x30>
    1ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca8:	21 30       	cpi	r18, 0x01	; 1
    1caa:	31 05       	cpc	r19, r1
    1cac:	29 f1       	breq	.+74     	; 0x1cf8 <I2C_Slave_Address_Mode+0x78>
    1cae:	48 c0       	rjmp	.+144    	; 0x1d40 <I2C_Slave_Address_Mode+0xc0>
	{
		case I2C_SlaveAddress_Read:
			SET_BIT(TWDR,Read_Write);
    1cb0:	a3 e2       	ldi	r26, 0x23	; 35
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e3 e2       	ldi	r30, 0x23	; 35
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	81 60       	ori	r24, 0x01	; 1
    1cbc:	8c 93       	st	X, r24
			/*Set the Slave Address in the MSB 7 bits in data register*/
			TWDR = address << 1;
    1cbe:	e3 e2       	ldi	r30, 0x23	; 35
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	88 0f       	add	r24, r24
    1cc6:	80 83       	st	Z, r24
			/* Clear the interrupt flag to operate the Slave Start Read*/
			SET_BIT(TWCR,TWINT);
    1cc8:	a6 e5       	ldi	r26, 0x56	; 86
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e6 e5       	ldi	r30, 0x56	; 86
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 68       	ori	r24, 0x80	; 128
    1cd4:	8c 93       	st	X, r24
			/*wait until the interrupt flag raise again and previous operation is completed*/
			while((GET_BIT(TWCR,TWINT))==0);
    1cd6:	e6 e5       	ldi	r30, 0x56	; 86
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	88 23       	and	r24, r24
    1cde:	dc f7       	brge	.-10     	; 0x1cd6 <I2C_Slave_Address_Mode+0x56>
#if defined Status_With_ACK
			/* check operation status register*/
			if ((TWSR & Mask_Selected_Bit) != MasterSend_SLA_RDR_ACK)
    1ce0:	e1 e2       	ldi	r30, 0x21	; 33
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	88 7f       	andi	r24, 0xF8	; 248
    1cec:	90 70       	andi	r25, 0x00	; 0
    1cee:	80 34       	cpi	r24, 0x40	; 64
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	41 f1       	breq	.+80     	; 0x1d44 <I2C_Slave_Address_Mode+0xc4>
			{
				return E_OK;
    1cf4:	1b 82       	std	Y+3, r1	; 0x03
    1cf6:	28 c0       	rjmp	.+80     	; 0x1d48 <I2C_Slave_Address_Mode+0xc8>
		return E_OK;
	}
#endif
			break;
		case I2C_SlaveAddress_Write:
			CLEAR_BIT(TWDR,Read_Write);
    1cf8:	a3 e2       	ldi	r26, 0x23	; 35
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e3 e2       	ldi	r30, 0x23	; 35
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8e 7f       	andi	r24, 0xFE	; 254
    1d04:	8c 93       	st	X, r24
			/*Set the Slave Address in the MSB 7 bits in data register*/
			TWDR = address << 1;
    1d06:	e3 e2       	ldi	r30, 0x23	; 35
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	88 0f       	add	r24, r24
    1d0e:	80 83       	st	Z, r24
			/* Clear the interrupt flag to operate the start Slave Start Write*/
			SET_BIT(TWCR,TWINT);
    1d10:	a6 e5       	ldi	r26, 0x56	; 86
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e6 e5       	ldi	r30, 0x56	; 86
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 68       	ori	r24, 0x80	; 128
    1d1c:	8c 93       	st	X, r24
			/*wait until the interrupt flag raise again and previous operation is completed*/
			while((GET_BIT(TWCR,TWINT))==0);
    1d1e:	e6 e5       	ldi	r30, 0x56	; 86
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	88 23       	and	r24, r24
    1d26:	dc f7       	brge	.-10     	; 0x1d1e <I2C_Slave_Address_Mode+0x9e>
#if defined Status_With_ACK
			/* check operation status register*/
			if ((TWSR & Mask_Selected_Bit) != MasterSend_SLA_WRR_ACK)
    1d28:	e1 e2       	ldi	r30, 0x21	; 33
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	88 7f       	andi	r24, 0xF8	; 248
    1d34:	90 70       	andi	r25, 0x00	; 0
    1d36:	88 31       	cpi	r24, 0x18	; 24
    1d38:	91 05       	cpc	r25, r1
    1d3a:	21 f0       	breq	.+8      	; 0x1d44 <I2C_Slave_Address_Mode+0xc4>
			{
				return E_OK;
    1d3c:	1b 82       	std	Y+3, r1	; 0x03
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <I2C_Slave_Address_Mode+0xc8>
		return E_OK;
	}
#endif
			break;
		default:
			return E_OK;
    1d40:	1b 82       	std	Y+3, r1	; 0x03
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <I2C_Slave_Address_Mode+0xc8>
	}

	return E_NOK;
    1d44:	31 e0       	ldi	r19, 0x01	; 1
    1d46:	3b 83       	std	Y+3, r19	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <I2C_Master_WriteData_Mode>:

STD_Return I2C_Master_WriteData_Mode(u8 Data)
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <I2C_Master_WriteData_Mode+0x6>
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	89 83       	std	Y+1, r24	; 0x01
	/*Write Data byte*/
	TWDR = Data;
    1d66:	e3 e2       	ldi	r30, 0x23	; 35
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	80 83       	st	Z, r24
	/* Clear the interrupt flag to operate the Master Sending Data*/
	SET_BIT(TWCR,TWINT);
    1d6e:	a6 e5       	ldi	r26, 0x56	; 86
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e6 e5       	ldi	r30, 0x56	; 86
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 68       	ori	r24, 0x80	; 128
    1d7a:	8c 93       	st	X, r24
	/*wait until the interrupt flag rise again and previous operation is completed*/
	while((GET_BIT(TWCR,TWINT))==0);
    1d7c:	e6 e5       	ldi	r30, 0x56	; 86
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	88 23       	and	r24, r24
    1d84:	dc f7       	brge	.-10     	; 0x1d7c <I2C_Master_WriteData_Mode+0x22>
	/* check operation status register*/

#if defined Status_With_ACK
	if ((TWSR & Mask_Selected_Bit) != MasterSend_DataByte_ACK)
    1d86:	e1 e2       	ldi	r30, 0x21	; 33
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	88 7f       	andi	r24, 0xF8	; 248
    1d92:	90 70       	andi	r25, 0x00	; 0
    1d94:	88 32       	cpi	r24, 0x28	; 40
    1d96:	91 05       	cpc	r25, r1
    1d98:	11 f0       	breq	.+4      	; 0x1d9e <I2C_Master_WriteData_Mode+0x44>
	{
		return E_OK;
    1d9a:	1a 82       	std	Y+2, r1	; 0x02
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <I2C_Master_WriteData_Mode+0x48>
	if ((TWSR & Mask_Selected_Bit) != MasterSend_DataByte_NACK)
	{
		return E_OK;
	}
#endif
	return E_NOK;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	8a 83       	std	Y+2, r24	; 0x02
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <I2C_Master_ReceiveData_Mode>:
STD_Return I2C_Master_ReceiveData_Mode(u8 *Data)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <I2C_Master_ReceiveData_Mode+0x6>
    1db4:	0f 92       	push	r0
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
	/* Clear the interrupt flag to operate the Slave Sending data Operation*/
	SET_BIT(TWCR,TWINT);
    1dbe:	a6 e5       	ldi	r26, 0x56	; 86
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e6 e5       	ldi	r30, 0x56	; 86
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 68       	ori	r24, 0x80	; 128
    1dca:	8c 93       	st	X, r24
	/*wait until the interrupt flag raise again and previous operation is completed*/
	while((GET_BIT(TWCR,TWINT))==0);
    1dcc:	e6 e5       	ldi	r30, 0x56	; 86
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	88 23       	and	r24, r24
    1dd4:	dc f7       	brge	.-10     	; 0x1dcc <I2C_Master_ReceiveData_Mode+0x1e>

#if defined Status_With_ACK
	/* check operation status register*/
	if ((TWSR & Mask_Selected_Bit) != MasterReceive_DataByte_ACK)
    1dd6:	e1 e2       	ldi	r30, 0x21	; 33
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	88 7f       	andi	r24, 0xF8	; 248
    1de2:	90 70       	andi	r25, 0x00	; 0
    1de4:	80 35       	cpi	r24, 0x50	; 80
    1de6:	91 05       	cpc	r25, r1
    1de8:	11 f0       	breq	.+4      	; 0x1dee <I2C_Master_ReceiveData_Mode+0x40>
	{
		return E_OK;
    1dea:	1b 82       	std	Y+3, r1	; 0x03
    1dec:	08 c0       	rjmp	.+16     	; 0x1dfe <I2C_Master_ReceiveData_Mode+0x50>
	}
	else
		{
			/*Read Data byte after flag cleared*/
			 *Data = TWDR;
    1dee:	e3 e2       	ldi	r30, 0x23	; 35
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	e9 81       	ldd	r30, Y+1	; 0x01
    1df6:	fa 81       	ldd	r31, Y+2	; 0x02
    1df8:	80 83       	st	Z, r24
		/*Read Data byte after flag cleared*/
		 *Data = TWDR;
	}
#endif

	return E_NOK;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	8b 83       	std	Y+3, r24	; 0x03
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <__vector_1>:
static void (*External_Function0)(void);
static void (*External_Function1)(void);
static void (*External_Function2)(void);
/****************************************ISR for INT0*************************************************/
ISR(INT0_Vect)
{
    1e0c:	1f 92       	push	r1
    1e0e:	0f 92       	push	r0
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	0f 92       	push	r0
    1e14:	11 24       	eor	r1, r1
    1e16:	2f 93       	push	r18
    1e18:	3f 93       	push	r19
    1e1a:	4f 93       	push	r20
    1e1c:	5f 93       	push	r21
    1e1e:	6f 93       	push	r22
    1e20:	7f 93       	push	r23
    1e22:	8f 93       	push	r24
    1e24:	9f 93       	push	r25
    1e26:	af 93       	push	r26
    1e28:	bf 93       	push	r27
    1e2a:	ef 93       	push	r30
    1e2c:	ff 93       	push	r31
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
	(*External_Function0)();
    1e36:	e0 91 9a 01 	lds	r30, 0x019A
    1e3a:	f0 91 9b 01 	lds	r31, 0x019B
    1e3e:	09 95       	icall
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	0f 90       	pop	r0
    1e62:	1f 90       	pop	r1
    1e64:	18 95       	reti

00001e66 <__vector_2>:
/****************************************ISR for INT1*************************************************/
ISR(INT1_Vect)
{
    1e66:	1f 92       	push	r1
    1e68:	0f 92       	push	r0
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	0f 92       	push	r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	2f 93       	push	r18
    1e72:	3f 93       	push	r19
    1e74:	4f 93       	push	r20
    1e76:	5f 93       	push	r21
    1e78:	6f 93       	push	r22
    1e7a:	7f 93       	push	r23
    1e7c:	8f 93       	push	r24
    1e7e:	9f 93       	push	r25
    1e80:	af 93       	push	r26
    1e82:	bf 93       	push	r27
    1e84:	ef 93       	push	r30
    1e86:	ff 93       	push	r31
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
	(*External_Function1)();
    1e90:	e0 91 9c 01 	lds	r30, 0x019C
    1e94:	f0 91 9d 01 	lds	r31, 0x019D
    1e98:	09 95       	icall
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	ff 91       	pop	r31
    1ea0:	ef 91       	pop	r30
    1ea2:	bf 91       	pop	r27
    1ea4:	af 91       	pop	r26
    1ea6:	9f 91       	pop	r25
    1ea8:	8f 91       	pop	r24
    1eaa:	7f 91       	pop	r23
    1eac:	6f 91       	pop	r22
    1eae:	5f 91       	pop	r21
    1eb0:	4f 91       	pop	r20
    1eb2:	3f 91       	pop	r19
    1eb4:	2f 91       	pop	r18
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	0f 90       	pop	r0
    1ebc:	1f 90       	pop	r1
    1ebe:	18 95       	reti

00001ec0 <__vector_3>:
/****************************************ISR for INT2*************************************************/
ISR(INT2_Vect)
{
    1ec0:	1f 92       	push	r1
    1ec2:	0f 92       	push	r0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	0f 92       	push	r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	2f 93       	push	r18
    1ecc:	3f 93       	push	r19
    1ece:	4f 93       	push	r20
    1ed0:	5f 93       	push	r21
    1ed2:	6f 93       	push	r22
    1ed4:	7f 93       	push	r23
    1ed6:	8f 93       	push	r24
    1ed8:	9f 93       	push	r25
    1eda:	af 93       	push	r26
    1edc:	bf 93       	push	r27
    1ede:	ef 93       	push	r30
    1ee0:	ff 93       	push	r31
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
	(*External_Function2)();
    1eea:	e0 91 9e 01 	lds	r30, 0x019E
    1eee:	f0 91 9f 01 	lds	r31, 0x019F
    1ef2:	09 95       	icall
}
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	ff 91       	pop	r31
    1efa:	ef 91       	pop	r30
    1efc:	bf 91       	pop	r27
    1efe:	af 91       	pop	r26
    1f00:	9f 91       	pop	r25
    1f02:	8f 91       	pop	r24
    1f04:	7f 91       	pop	r23
    1f06:	6f 91       	pop	r22
    1f08:	5f 91       	pop	r21
    1f0a:	4f 91       	pop	r20
    1f0c:	3f 91       	pop	r19
    1f0e:	2f 91       	pop	r18
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	0f 90       	pop	r0
    1f16:	1f 90       	pop	r1
    1f18:	18 95       	reti

00001f1a <Enable_Global_Interrupt>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return Enable_Global_Interrupt(Global_Interrupt_State_t state)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <Enable_Global_Interrupt+0x6>
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <Enable_Global_Interrupt+0x8>
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	3c 83       	std	Y+4, r19	; 0x04
    1f30:	2b 83       	std	Y+3, r18	; 0x03
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	31 f0       	breq	.+12     	; 0x1f46 <Enable_Global_Interrupt+0x2c>
    1f3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3e:	21 30       	cpi	r18, 0x01	; 1
    1f40:	31 05       	cpc	r19, r1
    1f42:	49 f0       	breq	.+18     	; 0x1f56 <Enable_Global_Interrupt+0x3c>
    1f44:	10 c0       	rjmp	.+32     	; 0x1f66 <Enable_Global_Interrupt+0x4c>
		{
			case Enable_GIE_Interrupt:
				SET_BIT(SREG,GIE);
    1f46:	af e5       	ldi	r26, 0x5F	; 95
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	ef e5       	ldi	r30, 0x5F	; 95
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	80 68       	ori	r24, 0x80	; 128
    1f52:	8c 93       	st	X, r24
    1f54:	0a c0       	rjmp	.+20     	; 0x1f6a <Enable_Global_Interrupt+0x50>
				break;
			case Disable_GIE_Interrupt:
				CLEAR_BIT(SREG,GIE);
    1f56:	af e5       	ldi	r26, 0x5F	; 95
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	ef e5       	ldi	r30, 0x5F	; 95
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	8f 77       	andi	r24, 0x7F	; 127
    1f62:	8c 93       	st	X, r24
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <Enable_Global_Interrupt+0x50>
				break;
			default:
				return E_OK;
    1f66:	1a 82       	std	Y+2, r1	; 0x02
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <Enable_Global_Interrupt+0x54>
		}
	return E_NOK;
    1f6a:	31 e0       	ldi	r19, 0x01	; 1
    1f6c:	3a 83       	std	Y+2, r19	; 0x02
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <Enable_External_INT0>:
/*****************************************************************************************************/
STD_Return Enable_External_INT0(Peripheral_Interrupt_State_t State)
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <Enable_External_INT0+0x6>
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <Enable_External_INT0+0x8>
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	3c 83       	std	Y+4, r19	; 0x04
    1f94:	2b 83       	std	Y+3, r18	; 0x03
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	31 f0       	breq	.+12     	; 0x1faa <Enable_External_INT0+0x2c>
    1f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa2:	21 30       	cpi	r18, 0x01	; 1
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	49 f0       	breq	.+18     	; 0x1fba <Enable_External_INT0+0x3c>
    1fa8:	10 c0       	rjmp	.+32     	; 0x1fca <Enable_External_INT0+0x4c>
	{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT0);
    1faa:	ab e5       	ldi	r26, 0x5B	; 91
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	eb e5       	ldi	r30, 0x5B	; 91
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	80 64       	ori	r24, 0x40	; 64
    1fb6:	8c 93       	st	X, r24
    1fb8:	0a c0       	rjmp	.+20     	; 0x1fce <Enable_External_INT0+0x50>

	break;
	case Disable_PIE_Interrupt:
		CLEAR_BIT(GICR,INT0);
    1fba:	ab e5       	ldi	r26, 0x5B	; 91
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	eb e5       	ldi	r30, 0x5B	; 91
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8f 7b       	andi	r24, 0xBF	; 191
    1fc6:	8c 93       	st	X, r24
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <Enable_External_INT0+0x50>
	break;
	default:
		return E_OK;
    1fca:	1a 82       	std	Y+2, r1	; 0x02
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <Enable_External_INT0+0x54>
	}
	return E_NOK;
    1fce:	31 e0       	ldi	r19, 0x01	; 1
    1fd0:	3a 83       	std	Y+2, r19	; 0x02
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <External_Int0_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int0_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <External_Int0_EdgeSelection+0x6>
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <External_Int0_EdgeSelection+0x8>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	89 83       	std	Y+1, r24	; 0x01
			switch(SenseLevel)
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	3c 83       	std	Y+4, r19	; 0x04
    1ff8:	2b 83       	std	Y+3, r18	; 0x03
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	a1 f0       	breq	.+40     	; 0x202a <External_Int0_EdgeSelection+0x48>
    2002:	2b 81       	ldd	r18, Y+3	; 0x03
    2004:	3c 81       	ldd	r19, Y+4	; 0x04
    2006:	21 30       	cpi	r18, 0x01	; 1
    2008:	31 05       	cpc	r19, r1
    200a:	f1 f4       	brne	.+60     	; 0x2048 <External_Int0_EdgeSelection+0x66>
				{
					case Rising_Edge_Sense:
							SET_BIT(MCUCR,ISC00);
    200c:	a5 e5       	ldi	r26, 0x55	; 85
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e5 e5       	ldi	r30, 0x55	; 85
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	81 60       	ori	r24, 0x01	; 1
    2018:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    201a:	a5 e5       	ldi	r26, 0x55	; 85
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e5 e5       	ldi	r30, 0x55	; 85
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	82 60       	ori	r24, 0x02	; 2
    2026:	8c 93       	st	X, r24
    2028:	11 c0       	rjmp	.+34     	; 0x204c <External_Int0_EdgeSelection+0x6a>
							break;
					case Falling_Edge_Sense:
							CLEAR_BIT(MCUCR,ISC00);
    202a:	a5 e5       	ldi	r26, 0x55	; 85
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e5 e5       	ldi	r30, 0x55	; 85
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8e 7f       	andi	r24, 0xFE	; 254
    2036:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    2038:	a5 e5       	ldi	r26, 0x55	; 85
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e5 e5       	ldi	r30, 0x55	; 85
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	82 60       	ori	r24, 0x02	; 2
    2044:	8c 93       	st	X, r24
    2046:	02 c0       	rjmp	.+4      	; 0x204c <External_Int0_EdgeSelection+0x6a>
							break;
					default:
						return E_OK;
    2048:	1a 82       	std	Y+2, r1	; 0x02
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <External_Int0_EdgeSelection+0x6e>
				}
	return E_NOK;
    204c:	31 e0       	ldi	r19, 0x01	; 1
    204e:	3a 83       	std	Y+2, r19	; 0x02
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <CallBack_Int0>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int0(void (*Func_Ptr)(void))
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <CallBack_Int0+0x6>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	89 83       	std	Y+1, r24	; 0x01
	External_Function0=Func_Ptr;
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	90 93 9b 01 	sts	0x019B, r25
    2076:	80 93 9a 01 	sts	0x019A, r24
	return E_NOK;
    207a:	81 e0       	ldi	r24, 0x01	; 1
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <Enable_External_INT1>:
/*****************************************************************************************************/
STD_Return Enable_External_INT1(Peripheral_Interrupt_State_t State)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <Enable_External_INT1+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <Enable_External_INT1+0x8>
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	3c 83       	std	Y+4, r19	; 0x04
    209c:	2b 83       	std	Y+3, r18	; 0x03
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	31 f0       	breq	.+12     	; 0x20b2 <Enable_External_INT1+0x2c>
    20a6:	2b 81       	ldd	r18, Y+3	; 0x03
    20a8:	3c 81       	ldd	r19, Y+4	; 0x04
    20aa:	21 30       	cpi	r18, 0x01	; 1
    20ac:	31 05       	cpc	r19, r1
    20ae:	49 f0       	breq	.+18     	; 0x20c2 <Enable_External_INT1+0x3c>
    20b0:	10 c0       	rjmp	.+32     	; 0x20d2 <Enable_External_INT1+0x4c>
		{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT1);
    20b2:	ab e5       	ldi	r26, 0x5B	; 91
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	eb e5       	ldi	r30, 0x5B	; 91
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	80 68       	ori	r24, 0x80	; 128
    20be:	8c 93       	st	X, r24
    20c0:	0a c0       	rjmp	.+20     	; 0x20d6 <Enable_External_INT1+0x50>
		break;
		case Disable_PIE_Interrupt:
			CLEAR_BIT(GICR,INT1);
    20c2:	ab e5       	ldi	r26, 0x5B	; 91
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	eb e5       	ldi	r30, 0x5B	; 91
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	8f 77       	andi	r24, 0x7F	; 127
    20ce:	8c 93       	st	X, r24
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <Enable_External_INT1+0x50>
		break;
		default:
			return E_OK;
    20d2:	1a 82       	std	Y+2, r1	; 0x02
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <Enable_External_INT1+0x54>
		}
	return E_NOK;
    20d6:	31 e0       	ldi	r19, 0x01	; 1
    20d8:	3a 83       	std	Y+2, r19	; 0x02
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <External_Int1_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int1_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <External_Int1_EdgeSelection+0x6>
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <External_Int1_EdgeSelection+0x8>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	3c 83       	std	Y+4, r19	; 0x04
    2100:	2b 83       	std	Y+3, r18	; 0x03
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	b1 f0       	breq	.+44     	; 0x2136 <External_Int1_EdgeSelection+0x4c>
    210a:	2b 81       	ldd	r18, Y+3	; 0x03
    210c:	3c 81       	ldd	r19, Y+4	; 0x04
    210e:	21 30       	cpi	r18, 0x01	; 1
    2110:	31 05       	cpc	r19, r1
    2112:	11 f5       	brne	.+68     	; 0x2158 <External_Int1_EdgeSelection+0x6e>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCR,ISC10);
    2114:	a5 e5       	ldi	r26, 0x55	; 85
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e5 e5       	ldi	r30, 0x55	; 85
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	84 60       	ori	r24, 0x04	; 4
    2120:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    2122:	a5 e5       	ldi	r26, 0x55	; 85
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e5 e5       	ldi	r30, 0x55	; 85
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	88 60       	ori	r24, 0x08	; 8
    212e:	8c 93       	st	X, r24
								return E_NOK;
    2130:	31 e0       	ldi	r19, 0x01	; 1
    2132:	3a 83       	std	Y+2, r19	; 0x02
    2134:	12 c0       	rjmp	.+36     	; 0x215a <External_Int1_EdgeSelection+0x70>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCR,ISC10);
    2136:	a5 e5       	ldi	r26, 0x55	; 85
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e5 e5       	ldi	r30, 0x55	; 85
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	8b 7f       	andi	r24, 0xFB	; 251
    2142:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    2144:	a5 e5       	ldi	r26, 0x55	; 85
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e5 e5       	ldi	r30, 0x55	; 85
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	88 60       	ori	r24, 0x08	; 8
    2150:	8c 93       	st	X, r24
								return E_NOK;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	8a 83       	std	Y+2, r24	; 0x02
    2156:	01 c0       	rjmp	.+2      	; 0x215a <External_Int1_EdgeSelection+0x70>
								break;
						default:
							return E_OK;
    2158:	1a 82       	std	Y+2, r1	; 0x02
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
					}
		return E_NOK;
}
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <CallBack_Int1>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int1(void (*Func_Ptr)(void))
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <CallBack_Int1+0x6>
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
	External_Function1=Func_Ptr;
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	90 93 9d 01 	sts	0x019D, r25
    2180:	80 93 9c 01 	sts	0x019C, r24
	return E_NOK;
    2184:	81 e0       	ldi	r24, 0x01	; 1
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <Enable_External_INT2>:
/*****************************************************************************************************/

STD_Return Enable_External_INT2(Peripheral_Interrupt_State_t State)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <Enable_External_INT2+0x6>
    2196:	00 d0       	rcall	.+0      	; 0x2198 <Enable_External_INT2+0x8>
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	3c 83       	std	Y+4, r19	; 0x04
    21a6:	2b 83       	std	Y+3, r18	; 0x03
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	31 f0       	breq	.+12     	; 0x21bc <Enable_External_INT2+0x2c>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	21 30       	cpi	r18, 0x01	; 1
    21b6:	31 05       	cpc	r19, r1
    21b8:	49 f0       	breq	.+18     	; 0x21cc <Enable_External_INT2+0x3c>
    21ba:	10 c0       	rjmp	.+32     	; 0x21dc <Enable_External_INT2+0x4c>
		{
			case Enable_PIE_Interrupt:
				SET_BIT(GICR,INT2);
    21bc:	ab e5       	ldi	r26, 0x5B	; 91
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	eb e5       	ldi	r30, 0x5B	; 91
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	80 62       	ori	r24, 0x20	; 32
    21c8:	8c 93       	st	X, r24
    21ca:	0a c0       	rjmp	.+20     	; 0x21e0 <Enable_External_INT2+0x50>
				break;
				case Disable_PIE_Interrupt:
					CLEAR_BIT(GICR,INT1);
    21cc:	ab e5       	ldi	r26, 0x5B	; 91
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	eb e5       	ldi	r30, 0x5B	; 91
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	8f 77       	andi	r24, 0x7F	; 127
    21d8:	8c 93       	st	X, r24
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <Enable_External_INT2+0x50>
				break;
				default:
					return E_OK;
    21dc:	1a 82       	std	Y+2, r1	; 0x02
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <Enable_External_INT2+0x54>
		 	}
	return E_NOK;
    21e0:	31 e0       	ldi	r19, 0x01	; 1
    21e2:	3a 83       	std	Y+2, r19	; 0x02
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <External_Int2_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int2_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <External_Int2_EdgeSelection+0x6>
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <External_Int2_EdgeSelection+0x8>
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	3c 83       	std	Y+4, r19	; 0x04
    220a:	2b 83       	std	Y+3, r18	; 0x03
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	79 f0       	breq	.+30     	; 0x2232 <External_Int2_EdgeSelection+0x3e>
    2214:	2b 81       	ldd	r18, Y+3	; 0x03
    2216:	3c 81       	ldd	r19, Y+4	; 0x04
    2218:	21 30       	cpi	r18, 0x01	; 1
    221a:	31 05       	cpc	r19, r1
    221c:	a1 f4       	brne	.+40     	; 0x2246 <External_Int2_EdgeSelection+0x52>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCSR,ISC2);
    221e:	a4 e5       	ldi	r26, 0x54	; 84
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e4 e5       	ldi	r30, 0x54	; 84
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	80 64       	ori	r24, 0x40	; 64
    222a:	8c 93       	st	X, r24
								return E_NOK;
    222c:	31 e0       	ldi	r19, 0x01	; 1
    222e:	3a 83       	std	Y+2, r19	; 0x02
    2230:	0b c0       	rjmp	.+22     	; 0x2248 <External_Int2_EdgeSelection+0x54>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCSR,ISC2);
    2232:	a4 e5       	ldi	r26, 0x54	; 84
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e4 e5       	ldi	r30, 0x54	; 84
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	8f 7b       	andi	r24, 0xBF	; 191
    223e:	8c 93       	st	X, r24
								return E_NOK;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	8a 83       	std	Y+2, r24	; 0x02
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <External_Int2_EdgeSelection+0x54>
								break;
						default:
							return E_OK;
    2246:	1a 82       	std	Y+2, r1	; 0x02
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
					}

		return E_NOK;
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <CallBack_Int2>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int2(void (*Func_Ptr)(void))
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	00 d0       	rcall	.+0      	; 0x225e <CallBack_Int2+0x6>
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
	External_Function2=Func_Ptr;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	90 93 9f 01 	sts	0x019F, r25
    226e:	80 93 9e 01 	sts	0x019E, r24
	return E_NOK;
    2272:	81 e0       	ldi	r24, 0x01	; 1
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <DIO_init>:
 * 
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 **/
void DIO_init(void)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    // initializing all pins are input
    DDRA=0;
    2286:	ea e3       	ldi	r30, 0x3A	; 58
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	10 82       	st	Z, r1
    DDRB=0;
    228c:	e7 e3       	ldi	r30, 0x37	; 55
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	10 82       	st	Z, r1
    DDRC=0;
    2292:	e4 e3       	ldi	r30, 0x34	; 52
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	10 82       	st	Z, r1
    DDRD=0;
    2298:	e1 e3       	ldi	r30, 0x31	; 49
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	10 82       	st	Z, r1

    PORTA=0;
    229e:	eb e3       	ldi	r30, 0x3B	; 59
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	10 82       	st	Z, r1
    PORTB=0;
    22a4:	e8 e3       	ldi	r30, 0x38	; 56
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	10 82       	st	Z, r1
    PORTC=0;
    22aa:	e5 e3       	ldi	r30, 0x35	; 53
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	10 82       	st	Z, r1
    PORTD=0;
    22b0:	e2 e3       	ldi	r30, 0x32	; 50
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	10 82       	st	Z, r1
    //enable the internal pull up resistor
    CLEAR_BIT(SFIOR,PUD);
    22b6:	a0 e5       	ldi	r26, 0x50	; 80
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e0 e5       	ldi	r30, 0x50	; 80
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	8b 7f       	andi	r24, 0xFB	; 251
    22c2:	8c 93       	st	X, r24
}
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <DIO_SetPinDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinDirection(DIO_Ports_t PORT, u8 PIN, DIO_Direction_t Direction)
	{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	2e 97       	sbiw	r28, 0x0e	; 14
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	6a 83       	std	Y+2, r22	; 0x02
    22e2:	4b 83       	std	Y+3, r20	; 0x03
		// check for safety
		if(PIN>MAX_PinNum)
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	88 30       	cpi	r24, 0x08	; 8
    22e8:	10 f0       	brcs	.+4      	; 0x22ee <DIO_SetPinDirection+0x24>
			{
				return E_OK;
    22ea:	1e 86       	std	Y+14, r1	; 0x0e
    22ec:	0e c1       	rjmp	.+540    	; 0x250a <DIO_SetPinDirection+0x240>
			}
		else
			{
				switch(PORT)
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	3d 87       	std	Y+13, r19	; 0x0d
    22f6:	2c 87       	std	Y+12, r18	; 0x0c
    22f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    22fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	91 05       	cpc	r25, r1
    2300:	09 f4       	brne	.+2      	; 0x2304 <DIO_SetPinDirection+0x3a>
    2302:	51 c0       	rjmp	.+162    	; 0x23a6 <DIO_SetPinDirection+0xdc>
    2304:	2c 85       	ldd	r18, Y+12	; 0x0c
    2306:	3d 85       	ldd	r19, Y+13	; 0x0d
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	2c f4       	brge	.+10     	; 0x2318 <DIO_SetPinDirection+0x4e>
    230e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2310:	9d 85       	ldd	r25, Y+13	; 0x0d
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	71 f0       	breq	.+28     	; 0x2332 <DIO_SetPinDirection+0x68>
    2316:	f5 c0       	rjmp	.+490    	; 0x2502 <DIO_SetPinDirection+0x238>
    2318:	2c 85       	ldd	r18, Y+12	; 0x0c
    231a:	3d 85       	ldd	r19, Y+13	; 0x0d
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	09 f4       	brne	.+2      	; 0x2324 <DIO_SetPinDirection+0x5a>
    2322:	7b c0       	rjmp	.+246    	; 0x241a <DIO_SetPinDirection+0x150>
    2324:	8c 85       	ldd	r24, Y+12	; 0x0c
    2326:	9d 85       	ldd	r25, Y+13	; 0x0d
    2328:	83 30       	cpi	r24, 0x03	; 3
    232a:	91 05       	cpc	r25, r1
    232c:	09 f4       	brne	.+2      	; 0x2330 <DIO_SetPinDirection+0x66>
    232e:	af c0       	rjmp	.+350    	; 0x248e <DIO_SetPinDirection+0x1c4>
    2330:	e8 c0       	rjmp	.+464    	; 0x2502 <DIO_SetPinDirection+0x238>
					{
						case DIO_PORTA:
							switch (Direction)
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3b 87       	std	Y+11, r19	; 0x0b
    233a:	2a 87       	std	Y+10, r18	; 0x0a
    233c:	8a 85       	ldd	r24, Y+10	; 0x0a
    233e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	31 f0       	breq	.+12     	; 0x2350 <DIO_SetPinDirection+0x86>
    2344:	2a 85       	ldd	r18, Y+10	; 0x0a
    2346:	3b 85       	ldd	r19, Y+11	; 0x0b
    2348:	21 30       	cpi	r18, 0x01	; 1
    234a:	31 05       	cpc	r19, r1
    234c:	b1 f0       	breq	.+44     	; 0x237a <DIO_SetPinDirection+0xb0>
    234e:	29 c0       	rjmp	.+82     	; 0x23a2 <DIO_SetPinDirection+0xd8>
								{
									case DIO_INPUT:
									CLEAR_BIT(DDRA,PIN);
    2350:	aa e3       	ldi	r26, 0x3A	; 58
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	ea e3       	ldi	r30, 0x3A	; 58
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	48 2f       	mov	r20, r24
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	02 2e       	mov	r0, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <DIO_SetPinDirection+0xa4>
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	0a 94       	dec	r0
    2370:	e2 f7       	brpl	.-8      	; 0x236a <DIO_SetPinDirection+0xa0>
    2372:	80 95       	com	r24
    2374:	84 23       	and	r24, r20
    2376:	8c 93       	st	X, r24
    2378:	c6 c0       	rjmp	.+396    	; 0x2506 <DIO_SetPinDirection+0x23c>
									break;
									case DIO_OUTPUT:
									SET_BIT(DDRA,PIN);
    237a:	aa e3       	ldi	r26, 0x3A	; 58
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	ea e3       	ldi	r30, 0x3A	; 58
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	48 2f       	mov	r20, r24
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	02 2e       	mov	r0, r18
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <DIO_SetPinDirection+0xce>
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	0a 94       	dec	r0
    239a:	e2 f7       	brpl	.-8      	; 0x2394 <DIO_SetPinDirection+0xca>
    239c:	84 2b       	or	r24, r20
    239e:	8c 93       	st	X, r24
    23a0:	b2 c0       	rjmp	.+356    	; 0x2506 <DIO_SetPinDirection+0x23c>
									break;
									default:
									return E_OK;
    23a2:	1e 86       	std	Y+14, r1	; 0x0e
    23a4:	b2 c0       	rjmp	.+356    	; 0x250a <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTB:
							switch (Direction)
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	39 87       	std	Y+9, r19	; 0x09
    23ae:	28 87       	std	Y+8, r18	; 0x08
    23b0:	88 85       	ldd	r24, Y+8	; 0x08
    23b2:	99 85       	ldd	r25, Y+9	; 0x09
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	31 f0       	breq	.+12     	; 0x23c4 <DIO_SetPinDirection+0xfa>
    23b8:	28 85       	ldd	r18, Y+8	; 0x08
    23ba:	39 85       	ldd	r19, Y+9	; 0x09
    23bc:	21 30       	cpi	r18, 0x01	; 1
    23be:	31 05       	cpc	r19, r1
    23c0:	b1 f0       	breq	.+44     	; 0x23ee <DIO_SetPinDirection+0x124>
    23c2:	29 c0       	rjmp	.+82     	; 0x2416 <DIO_SetPinDirection+0x14c>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRB,PIN);
    23c4:	a7 e3       	ldi	r26, 0x37	; 55
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e7 e3       	ldi	r30, 0x37	; 55
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	48 2f       	mov	r20, r24
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	02 2e       	mov	r0, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <DIO_SetPinDirection+0x118>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <DIO_SetPinDirection+0x114>
    23e6:	80 95       	com	r24
    23e8:	84 23       	and	r24, r20
    23ea:	8c 93       	st	X, r24
    23ec:	8c c0       	rjmp	.+280    	; 0x2506 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRB,PIN);
    23ee:	a7 e3       	ldi	r26, 0x37	; 55
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e7 e3       	ldi	r30, 0x37	; 55
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	48 2f       	mov	r20, r24
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	02 2e       	mov	r0, r18
    2406:	02 c0       	rjmp	.+4      	; 0x240c <DIO_SetPinDirection+0x142>
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	0a 94       	dec	r0
    240e:	e2 f7       	brpl	.-8      	; 0x2408 <DIO_SetPinDirection+0x13e>
    2410:	84 2b       	or	r24, r20
    2412:	8c 93       	st	X, r24
    2414:	78 c0       	rjmp	.+240    	; 0x2506 <DIO_SetPinDirection+0x23c>
										break;
									default:
									return E_OK;
    2416:	1e 86       	std	Y+14, r1	; 0x0e
    2418:	78 c0       	rjmp	.+240    	; 0x250a <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTC:
							switch (Direction)
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	3f 83       	std	Y+7, r19	; 0x07
    2422:	2e 83       	std	Y+6, r18	; 0x06
    2424:	8e 81       	ldd	r24, Y+6	; 0x06
    2426:	9f 81       	ldd	r25, Y+7	; 0x07
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	31 f0       	breq	.+12     	; 0x2438 <DIO_SetPinDirection+0x16e>
    242c:	2e 81       	ldd	r18, Y+6	; 0x06
    242e:	3f 81       	ldd	r19, Y+7	; 0x07
    2430:	21 30       	cpi	r18, 0x01	; 1
    2432:	31 05       	cpc	r19, r1
    2434:	b1 f0       	breq	.+44     	; 0x2462 <DIO_SetPinDirection+0x198>
    2436:	29 c0       	rjmp	.+82     	; 0x248a <DIO_SetPinDirection+0x1c0>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRC,PIN);
    2438:	a4 e3       	ldi	r26, 0x34	; 52
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e4 e3       	ldi	r30, 0x34	; 52
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	48 2f       	mov	r20, r24
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	02 2e       	mov	r0, r18
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <DIO_SetPinDirection+0x18c>
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	0a 94       	dec	r0
    2458:	e2 f7       	brpl	.-8      	; 0x2452 <DIO_SetPinDirection+0x188>
    245a:	80 95       	com	r24
    245c:	84 23       	and	r24, r20
    245e:	8c 93       	st	X, r24
    2460:	52 c0       	rjmp	.+164    	; 0x2506 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRC,PIN);
    2462:	a4 e3       	ldi	r26, 0x34	; 52
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e4 e3       	ldi	r30, 0x34	; 52
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	48 2f       	mov	r20, r24
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	02 2e       	mov	r0, r18
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <DIO_SetPinDirection+0x1b6>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	0a 94       	dec	r0
    2482:	e2 f7       	brpl	.-8      	; 0x247c <DIO_SetPinDirection+0x1b2>
    2484:	84 2b       	or	r24, r20
    2486:	8c 93       	st	X, r24
    2488:	3e c0       	rjmp	.+124    	; 0x2506 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    248a:	1e 86       	std	Y+14, r1	; 0x0e
    248c:	3e c0       	rjmp	.+124    	; 0x250a <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTD:
							switch (Direction)
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	3d 83       	std	Y+5, r19	; 0x05
    2496:	2c 83       	std	Y+4, r18	; 0x04
    2498:	8c 81       	ldd	r24, Y+4	; 0x04
    249a:	9d 81       	ldd	r25, Y+5	; 0x05
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	31 f0       	breq	.+12     	; 0x24ac <DIO_SetPinDirection+0x1e2>
    24a0:	2c 81       	ldd	r18, Y+4	; 0x04
    24a2:	3d 81       	ldd	r19, Y+5	; 0x05
    24a4:	21 30       	cpi	r18, 0x01	; 1
    24a6:	31 05       	cpc	r19, r1
    24a8:	b1 f0       	breq	.+44     	; 0x24d6 <DIO_SetPinDirection+0x20c>
    24aa:	29 c0       	rjmp	.+82     	; 0x24fe <DIO_SetPinDirection+0x234>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRD,PIN);
    24ac:	a1 e3       	ldi	r26, 0x31	; 49
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e1 e3       	ldi	r30, 0x31	; 49
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	48 2f       	mov	r20, r24
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	02 2e       	mov	r0, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <DIO_SetPinDirection+0x200>
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <DIO_SetPinDirection+0x1fc>
    24ce:	80 95       	com	r24
    24d0:	84 23       	and	r24, r20
    24d2:	8c 93       	st	X, r24
    24d4:	18 c0       	rjmp	.+48     	; 0x2506 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRD,PIN);
    24d6:	a1 e3       	ldi	r26, 0x31	; 49
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e1 e3       	ldi	r30, 0x31	; 49
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	48 2f       	mov	r20, r24
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 2e       	mov	r0, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <DIO_SetPinDirection+0x22a>
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <DIO_SetPinDirection+0x226>
    24f8:	84 2b       	or	r24, r20
    24fa:	8c 93       	st	X, r24
    24fc:	04 c0       	rjmp	.+8      	; 0x2506 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    24fe:	1e 86       	std	Y+14, r1	; 0x0e
    2500:	04 c0       	rjmp	.+8      	; 0x250a <DIO_SetPinDirection+0x240>
								}
							break;
							default:
								return E_OK;
    2502:	1e 86       	std	Y+14, r1	; 0x0e
    2504:	02 c0       	rjmp	.+4      	; 0x250a <DIO_SetPinDirection+0x240>
					}
			}
	return E_NOK;
    2506:	31 e0       	ldi	r19, 0x01	; 1
    2508:	3e 87       	std	Y+14, r19	; 0x0e
    250a:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    250c:	2e 96       	adiw	r28, 0x0e	; 14
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <DIO_SetPortDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortDirection(DIO_Ports_t PORT,u8 Direction)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	00 d0       	rcall	.+0      	; 0x2524 <DIO_SetPortDirection+0x6>
    2524:	00 d0       	rcall	.+0      	; 0x2526 <DIO_SetPortDirection+0x8>
    2526:	0f 92       	push	r0
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	89 83       	std	Y+1, r24	; 0x01
    252e:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	3d 83       	std	Y+5, r19	; 0x05
    2538:	2c 83       	std	Y+4, r18	; 0x04
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	9d 81       	ldd	r25, Y+5	; 0x05
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	91 05       	cpc	r25, r1
    2542:	d1 f0       	breq	.+52     	; 0x2578 <DIO_SetPortDirection+0x5a>
    2544:	2c 81       	ldd	r18, Y+4	; 0x04
    2546:	3d 81       	ldd	r19, Y+5	; 0x05
    2548:	22 30       	cpi	r18, 0x02	; 2
    254a:	31 05       	cpc	r19, r1
    254c:	2c f4       	brge	.+10     	; 0x2558 <DIO_SetPortDirection+0x3a>
    254e:	8c 81       	ldd	r24, Y+4	; 0x04
    2550:	9d 81       	ldd	r25, Y+5	; 0x05
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	61 f0       	breq	.+24     	; 0x256e <DIO_SetPortDirection+0x50>
    2556:	1f c0       	rjmp	.+62     	; 0x2596 <DIO_SetPortDirection+0x78>
    2558:	2c 81       	ldd	r18, Y+4	; 0x04
    255a:	3d 81       	ldd	r19, Y+5	; 0x05
    255c:	22 30       	cpi	r18, 0x02	; 2
    255e:	31 05       	cpc	r19, r1
    2560:	81 f0       	breq	.+32     	; 0x2582 <DIO_SetPortDirection+0x64>
    2562:	8c 81       	ldd	r24, Y+4	; 0x04
    2564:	9d 81       	ldd	r25, Y+5	; 0x05
    2566:	83 30       	cpi	r24, 0x03	; 3
    2568:	91 05       	cpc	r25, r1
    256a:	81 f0       	breq	.+32     	; 0x258c <DIO_SetPortDirection+0x6e>
    256c:	14 c0       	rjmp	.+40     	; 0x2596 <DIO_SetPortDirection+0x78>
						{
							case DIO_PORTA:
								DDRA=Direction;
    256e:	ea e3       	ldi	r30, 0x3A	; 58
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	80 83       	st	Z, r24
    2576:	11 c0       	rjmp	.+34     	; 0x259a <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTB:
								DDRB=Direction;
    2578:	e7 e3       	ldi	r30, 0x37	; 55
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	80 83       	st	Z, r24
    2580:	0c c0       	rjmp	.+24     	; 0x259a <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTC:
								DDRC=Direction;
    2582:	e4 e3       	ldi	r30, 0x34	; 52
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	80 83       	st	Z, r24
    258a:	07 c0       	rjmp	.+14     	; 0x259a <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTD:
								DDRD=Direction;
    258c:	e1 e3       	ldi	r30, 0x31	; 49
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	80 83       	st	Z, r24
    2594:	02 c0       	rjmp	.+4      	; 0x259a <DIO_SetPortDirection+0x7c>
							break;
							default:
							return E_OK;
    2596:	1b 82       	std	Y+3, r1	; 0x03
    2598:	02 c0       	rjmp	.+4      	; 0x259e <DIO_SetPortDirection+0x80>

						}
	return E_NOK;
    259a:	91 e0       	ldi	r25, 0x01	; 1
    259c:	9b 83       	std	Y+3, r25	; 0x03
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <DIO_SetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 							return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t State)
	{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	2e 97       	sbiw	r28, 0x0e	; 14
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	89 83       	std	Y+1, r24	; 0x01
    25c6:	6a 83       	std	Y+2, r22	; 0x02
    25c8:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	88 30       	cpi	r24, 0x08	; 8
    25ce:	10 f0       	brcs	.+4      	; 0x25d4 <DIO_SetPinValue+0x24>
			{
				return E_OK;
    25d0:	1e 86       	std	Y+14, r1	; 0x0e
    25d2:	0e c1       	rjmp	.+540    	; 0x27f0 <DIO_SetPinValue+0x240>
			}
		else
			{
				switch(PORT)
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	28 2f       	mov	r18, r24
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	3d 87       	std	Y+13, r19	; 0x0d
    25dc:	2c 87       	std	Y+12, r18	; 0x0c
    25de:	8c 85       	ldd	r24, Y+12	; 0x0c
    25e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    25e2:	81 30       	cpi	r24, 0x01	; 1
    25e4:	91 05       	cpc	r25, r1
    25e6:	09 f4       	brne	.+2      	; 0x25ea <DIO_SetPinValue+0x3a>
    25e8:	51 c0       	rjmp	.+162    	; 0x268c <DIO_SetPinValue+0xdc>
    25ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    25ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    25ee:	22 30       	cpi	r18, 0x02	; 2
    25f0:	31 05       	cpc	r19, r1
    25f2:	2c f4       	brge	.+10     	; 0x25fe <DIO_SetPinValue+0x4e>
    25f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    25f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	71 f0       	breq	.+28     	; 0x2618 <DIO_SetPinValue+0x68>
    25fc:	f5 c0       	rjmp	.+490    	; 0x27e8 <DIO_SetPinValue+0x238>
    25fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2600:	3d 85       	ldd	r19, Y+13	; 0x0d
    2602:	22 30       	cpi	r18, 0x02	; 2
    2604:	31 05       	cpc	r19, r1
    2606:	09 f4       	brne	.+2      	; 0x260a <DIO_SetPinValue+0x5a>
    2608:	7b c0       	rjmp	.+246    	; 0x2700 <DIO_SetPinValue+0x150>
    260a:	8c 85       	ldd	r24, Y+12	; 0x0c
    260c:	9d 85       	ldd	r25, Y+13	; 0x0d
    260e:	83 30       	cpi	r24, 0x03	; 3
    2610:	91 05       	cpc	r25, r1
    2612:	09 f4       	brne	.+2      	; 0x2616 <DIO_SetPinValue+0x66>
    2614:	af c0       	rjmp	.+350    	; 0x2774 <DIO_SetPinValue+0x1c4>
    2616:	e8 c0       	rjmp	.+464    	; 0x27e8 <DIO_SetPinValue+0x238>
					{
						case DIO_PORTA:
							switch(State)
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	3b 87       	std	Y+11, r19	; 0x0b
    2620:	2a 87       	std	Y+10, r18	; 0x0a
    2622:	8a 85       	ldd	r24, Y+10	; 0x0a
    2624:	9b 85       	ldd	r25, Y+11	; 0x0b
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	31 f0       	breq	.+12     	; 0x2636 <DIO_SetPinValue+0x86>
    262a:	2a 85       	ldd	r18, Y+10	; 0x0a
    262c:	3b 85       	ldd	r19, Y+11	; 0x0b
    262e:	21 30       	cpi	r18, 0x01	; 1
    2630:	31 05       	cpc	r19, r1
    2632:	b1 f0       	breq	.+44     	; 0x2660 <DIO_SetPinValue+0xb0>
    2634:	29 c0       	rjmp	.+82     	; 0x2688 <DIO_SetPinValue+0xd8>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTA,PIN);
    2636:	ab e3       	ldi	r26, 0x3B	; 59
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	eb e3       	ldi	r30, 0x3B	; 59
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	48 2f       	mov	r20, r24
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	02 2e       	mov	r0, r18
    264e:	02 c0       	rjmp	.+4      	; 0x2654 <DIO_SetPinValue+0xa4>
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	0a 94       	dec	r0
    2656:	e2 f7       	brpl	.-8      	; 0x2650 <DIO_SetPinValue+0xa0>
    2658:	80 95       	com	r24
    265a:	84 23       	and	r24, r20
    265c:	8c 93       	st	X, r24
    265e:	c6 c0       	rjmp	.+396    	; 0x27ec <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTA,PIN);
    2660:	ab e3       	ldi	r26, 0x3B	; 59
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	eb e3       	ldi	r30, 0x3B	; 59
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	48 2f       	mov	r20, r24
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	02 2e       	mov	r0, r18
    2678:	02 c0       	rjmp	.+4      	; 0x267e <DIO_SetPinValue+0xce>
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	0a 94       	dec	r0
    2680:	e2 f7       	brpl	.-8      	; 0x267a <DIO_SetPinValue+0xca>
    2682:	84 2b       	or	r24, r20
    2684:	8c 93       	st	X, r24
    2686:	b2 c0       	rjmp	.+356    	; 0x27ec <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    2688:	1e 86       	std	Y+14, r1	; 0x0e
    268a:	b2 c0       	rjmp	.+356    	; 0x27f0 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTB:
							switch(State)
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	39 87       	std	Y+9, r19	; 0x09
    2694:	28 87       	std	Y+8, r18	; 0x08
    2696:	88 85       	ldd	r24, Y+8	; 0x08
    2698:	99 85       	ldd	r25, Y+9	; 0x09
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	31 f0       	breq	.+12     	; 0x26aa <DIO_SetPinValue+0xfa>
    269e:	28 85       	ldd	r18, Y+8	; 0x08
    26a0:	39 85       	ldd	r19, Y+9	; 0x09
    26a2:	21 30       	cpi	r18, 0x01	; 1
    26a4:	31 05       	cpc	r19, r1
    26a6:	b1 f0       	breq	.+44     	; 0x26d4 <DIO_SetPinValue+0x124>
    26a8:	29 c0       	rjmp	.+82     	; 0x26fc <DIO_SetPinValue+0x14c>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTB,PIN);
    26aa:	a8 e3       	ldi	r26, 0x38	; 56
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e8 e3       	ldi	r30, 0x38	; 56
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	48 2f       	mov	r20, r24
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	02 2e       	mov	r0, r18
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <DIO_SetPinValue+0x118>
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	0a 94       	dec	r0
    26ca:	e2 f7       	brpl	.-8      	; 0x26c4 <DIO_SetPinValue+0x114>
    26cc:	80 95       	com	r24
    26ce:	84 23       	and	r24, r20
    26d0:	8c 93       	st	X, r24
    26d2:	8c c0       	rjmp	.+280    	; 0x27ec <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTB,PIN);
    26d4:	a8 e3       	ldi	r26, 0x38	; 56
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e8 e3       	ldi	r30, 0x38	; 56
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	48 2f       	mov	r20, r24
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	02 2e       	mov	r0, r18
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <DIO_SetPinValue+0x142>
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	0a 94       	dec	r0
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <DIO_SetPinValue+0x13e>
    26f6:	84 2b       	or	r24, r20
    26f8:	8c 93       	st	X, r24
    26fa:	78 c0       	rjmp	.+240    	; 0x27ec <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    26fc:	1e 86       	std	Y+14, r1	; 0x0e
    26fe:	78 c0       	rjmp	.+240    	; 0x27f0 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTC:
							switch(State)
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	3f 83       	std	Y+7, r19	; 0x07
    2708:	2e 83       	std	Y+6, r18	; 0x06
    270a:	8e 81       	ldd	r24, Y+6	; 0x06
    270c:	9f 81       	ldd	r25, Y+7	; 0x07
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	31 f0       	breq	.+12     	; 0x271e <DIO_SetPinValue+0x16e>
    2712:	2e 81       	ldd	r18, Y+6	; 0x06
    2714:	3f 81       	ldd	r19, Y+7	; 0x07
    2716:	21 30       	cpi	r18, 0x01	; 1
    2718:	31 05       	cpc	r19, r1
    271a:	b1 f0       	breq	.+44     	; 0x2748 <DIO_SetPinValue+0x198>
    271c:	29 c0       	rjmp	.+82     	; 0x2770 <DIO_SetPinValue+0x1c0>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTC,PIN);
    271e:	a5 e3       	ldi	r26, 0x35	; 53
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e5 e3       	ldi	r30, 0x35	; 53
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	48 2f       	mov	r20, r24
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	02 2e       	mov	r0, r18
    2736:	02 c0       	rjmp	.+4      	; 0x273c <DIO_SetPinValue+0x18c>
    2738:	88 0f       	add	r24, r24
    273a:	99 1f       	adc	r25, r25
    273c:	0a 94       	dec	r0
    273e:	e2 f7       	brpl	.-8      	; 0x2738 <DIO_SetPinValue+0x188>
    2740:	80 95       	com	r24
    2742:	84 23       	and	r24, r20
    2744:	8c 93       	st	X, r24
    2746:	52 c0       	rjmp	.+164    	; 0x27ec <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTC,PIN);
    2748:	a5 e3       	ldi	r26, 0x35	; 53
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e5 e3       	ldi	r30, 0x35	; 53
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <DIO_SetPinValue+0x1b6>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <DIO_SetPinValue+0x1b2>
    276a:	84 2b       	or	r24, r20
    276c:	8c 93       	st	X, r24
    276e:	3e c0       	rjmp	.+124    	; 0x27ec <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    2770:	1e 86       	std	Y+14, r1	; 0x0e
    2772:	3e c0       	rjmp	.+124    	; 0x27f0 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTD:
							switch(State)
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	3d 83       	std	Y+5, r19	; 0x05
    277c:	2c 83       	std	Y+4, r18	; 0x04
    277e:	8c 81       	ldd	r24, Y+4	; 0x04
    2780:	9d 81       	ldd	r25, Y+5	; 0x05
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	31 f0       	breq	.+12     	; 0x2792 <DIO_SetPinValue+0x1e2>
    2786:	2c 81       	ldd	r18, Y+4	; 0x04
    2788:	3d 81       	ldd	r19, Y+5	; 0x05
    278a:	21 30       	cpi	r18, 0x01	; 1
    278c:	31 05       	cpc	r19, r1
    278e:	b1 f0       	breq	.+44     	; 0x27bc <DIO_SetPinValue+0x20c>
    2790:	29 c0       	rjmp	.+82     	; 0x27e4 <DIO_SetPinValue+0x234>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTD,PIN);
    2792:	a2 e3       	ldi	r26, 0x32	; 50
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e2 e3       	ldi	r30, 0x32	; 50
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	48 2f       	mov	r20, r24
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	02 2e       	mov	r0, r18
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <DIO_SetPinValue+0x200>
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	0a 94       	dec	r0
    27b2:	e2 f7       	brpl	.-8      	; 0x27ac <DIO_SetPinValue+0x1fc>
    27b4:	80 95       	com	r24
    27b6:	84 23       	and	r24, r20
    27b8:	8c 93       	st	X, r24
    27ba:	18 c0       	rjmp	.+48     	; 0x27ec <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTD,PIN);
    27bc:	a2 e3       	ldi	r26, 0x32	; 50
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e2 e3       	ldi	r30, 0x32	; 50
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	48 2f       	mov	r20, r24
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	02 2e       	mov	r0, r18
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <DIO_SetPinValue+0x22a>
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	0a 94       	dec	r0
    27dc:	e2 f7       	brpl	.-8      	; 0x27d6 <DIO_SetPinValue+0x226>
    27de:	84 2b       	or	r24, r20
    27e0:	8c 93       	st	X, r24
    27e2:	04 c0       	rjmp	.+8      	; 0x27ec <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    27e4:	1e 86       	std	Y+14, r1	; 0x0e
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <DIO_SetPinValue+0x240>
								}
						break;
							default:
							return E_OK;
    27e8:	1e 86       	std	Y+14, r1	; 0x0e
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <DIO_SetPinValue+0x240>
					}
			}
		return E_NOK;
    27ec:	31 e0       	ldi	r19, 0x01	; 1
    27ee:	3e 87       	std	Y+14, r19	; 0x0e
    27f0:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    27f2:	2e 96       	adiw	r28, 0x0e	; 14
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <DIO_SetPortValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortValue(DIO_Ports_t PORT,u8 value)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	00 d0       	rcall	.+0      	; 0x280a <DIO_SetPortValue+0x6>
    280a:	00 d0       	rcall	.+0      	; 0x280c <DIO_SetPortValue+0x8>
    280c:	0f 92       	push	r0
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	3d 83       	std	Y+5, r19	; 0x05
    281e:	2c 83       	std	Y+4, r18	; 0x04
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
    2822:	9d 81       	ldd	r25, Y+5	; 0x05
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	91 05       	cpc	r25, r1
    2828:	d1 f0       	breq	.+52     	; 0x285e <DIO_SetPortValue+0x5a>
    282a:	2c 81       	ldd	r18, Y+4	; 0x04
    282c:	3d 81       	ldd	r19, Y+5	; 0x05
    282e:	22 30       	cpi	r18, 0x02	; 2
    2830:	31 05       	cpc	r19, r1
    2832:	2c f4       	brge	.+10     	; 0x283e <DIO_SetPortValue+0x3a>
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	9d 81       	ldd	r25, Y+5	; 0x05
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	61 f0       	breq	.+24     	; 0x2854 <DIO_SetPortValue+0x50>
    283c:	1f c0       	rjmp	.+62     	; 0x287c <DIO_SetPortValue+0x78>
    283e:	2c 81       	ldd	r18, Y+4	; 0x04
    2840:	3d 81       	ldd	r19, Y+5	; 0x05
    2842:	22 30       	cpi	r18, 0x02	; 2
    2844:	31 05       	cpc	r19, r1
    2846:	81 f0       	breq	.+32     	; 0x2868 <DIO_SetPortValue+0x64>
    2848:	8c 81       	ldd	r24, Y+4	; 0x04
    284a:	9d 81       	ldd	r25, Y+5	; 0x05
    284c:	83 30       	cpi	r24, 0x03	; 3
    284e:	91 05       	cpc	r25, r1
    2850:	81 f0       	breq	.+32     	; 0x2872 <DIO_SetPortValue+0x6e>
    2852:	14 c0       	rjmp	.+40     	; 0x287c <DIO_SetPortValue+0x78>
						{
							case DIO_PORTA:
								PORTA=value;
    2854:	eb e3       	ldi	r30, 0x3B	; 59
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	80 83       	st	Z, r24
    285c:	11 c0       	rjmp	.+34     	; 0x2880 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTB:
								PORTB=value;
    285e:	e8 e3       	ldi	r30, 0x38	; 56
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	80 83       	st	Z, r24
    2866:	0c c0       	rjmp	.+24     	; 0x2880 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTC:
								PORTC=value;
    2868:	e5 e3       	ldi	r30, 0x35	; 53
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	80 83       	st	Z, r24
    2870:	07 c0       	rjmp	.+14     	; 0x2880 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTD:
								PORTD=value;
    2872:	e2 e3       	ldi	r30, 0x32	; 50
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	80 83       	st	Z, r24
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <DIO_SetPortValue+0x7c>

							break;
							default:
							return E_OK;
    287c:	1b 82       	std	Y+3, r1	; 0x03
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <DIO_SetPortValue+0x80>

						}
	return E_NOK;
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	9b 83       	std	Y+3, r25	; 0x03
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <DIO_GetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_GetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t* State)
	{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	27 97       	sbiw	r28, 0x07	; 7
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	6a 83       	std	Y+2, r22	; 0x02
    28ae:	5c 83       	std	Y+4, r21	; 0x04
    28b0:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	88 30       	cpi	r24, 0x08	; 8
    28b6:	10 f0       	brcs	.+4      	; 0x28bc <DIO_GetPinValue+0x26>
			{
				return E_OK;
    28b8:	1f 82       	std	Y+7, r1	; 0x07
    28ba:	75 c0       	rjmp	.+234    	; 0x29a6 <DIO_GetPinValue+0x110>
			}
		else
			{
					switch(PORT)
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	3e 83       	std	Y+6, r19	; 0x06
    28c4:	2d 83       	std	Y+5, r18	; 0x05
    28c6:	4d 81       	ldd	r20, Y+5	; 0x05
    28c8:	5e 81       	ldd	r21, Y+6	; 0x06
    28ca:	41 30       	cpi	r20, 0x01	; 1
    28cc:	51 05       	cpc	r21, r1
    28ce:	59 f1       	breq	.+86     	; 0x2926 <DIO_GetPinValue+0x90>
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	82 30       	cpi	r24, 0x02	; 2
    28d6:	91 05       	cpc	r25, r1
    28d8:	34 f4       	brge	.+12     	; 0x28e6 <DIO_GetPinValue+0x50>
    28da:	2d 81       	ldd	r18, Y+5	; 0x05
    28dc:	3e 81       	ldd	r19, Y+6	; 0x06
    28de:	21 15       	cp	r18, r1
    28e0:	31 05       	cpc	r19, r1
    28e2:	69 f0       	breq	.+26     	; 0x28fe <DIO_GetPinValue+0x68>
    28e4:	5c c0       	rjmp	.+184    	; 0x299e <DIO_GetPinValue+0x108>
    28e6:	4d 81       	ldd	r20, Y+5	; 0x05
    28e8:	5e 81       	ldd	r21, Y+6	; 0x06
    28ea:	42 30       	cpi	r20, 0x02	; 2
    28ec:	51 05       	cpc	r21, r1
    28ee:	79 f1       	breq	.+94     	; 0x294e <DIO_GetPinValue+0xb8>
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	9e 81       	ldd	r25, Y+6	; 0x06
    28f4:	83 30       	cpi	r24, 0x03	; 3
    28f6:	91 05       	cpc	r25, r1
    28f8:	09 f4       	brne	.+2      	; 0x28fc <DIO_GetPinValue+0x66>
    28fa:	3d c0       	rjmp	.+122    	; 0x2976 <DIO_GetPinValue+0xe0>
    28fc:	50 c0       	rjmp	.+160    	; 0x299e <DIO_GetPinValue+0x108>
						{
							case DIO_PORTA:
								*State=GET_BIT(PINA,PIN);
    28fe:	e9 e3       	ldi	r30, 0x39	; 57
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	88 2f       	mov	r24, r24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a9 01       	movw	r20, r18
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <DIO_GetPinValue+0x80>
    2912:	55 95       	asr	r21
    2914:	47 95       	ror	r20
    2916:	8a 95       	dec	r24
    2918:	e2 f7       	brpl	.-8      	; 0x2912 <DIO_GetPinValue+0x7c>
    291a:	ca 01       	movw	r24, r20
    291c:	81 70       	andi	r24, 0x01	; 1
    291e:	eb 81       	ldd	r30, Y+3	; 0x03
    2920:	fc 81       	ldd	r31, Y+4	; 0x04
    2922:	80 83       	st	Z, r24
    2924:	3e c0       	rjmp	.+124    	; 0x29a2 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTB:
								*State=GET_BIT(PINB,PIN);
    2926:	e6 e3       	ldi	r30, 0x36	; 54
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	a9 01       	movw	r20, r18
    2938:	02 c0       	rjmp	.+4      	; 0x293e <DIO_GetPinValue+0xa8>
    293a:	55 95       	asr	r21
    293c:	47 95       	ror	r20
    293e:	8a 95       	dec	r24
    2940:	e2 f7       	brpl	.-8      	; 0x293a <DIO_GetPinValue+0xa4>
    2942:	ca 01       	movw	r24, r20
    2944:	81 70       	andi	r24, 0x01	; 1
    2946:	eb 81       	ldd	r30, Y+3	; 0x03
    2948:	fc 81       	ldd	r31, Y+4	; 0x04
    294a:	80 83       	st	Z, r24
    294c:	2a c0       	rjmp	.+84     	; 0x29a2 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTC:
								*State=GET_BIT(PINC,PIN);
    294e:	e3 e3       	ldi	r30, 0x33	; 51
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	28 2f       	mov	r18, r24
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	88 2f       	mov	r24, r24
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	a9 01       	movw	r20, r18
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <DIO_GetPinValue+0xd0>
    2962:	55 95       	asr	r21
    2964:	47 95       	ror	r20
    2966:	8a 95       	dec	r24
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <DIO_GetPinValue+0xcc>
    296a:	ca 01       	movw	r24, r20
    296c:	81 70       	andi	r24, 0x01	; 1
    296e:	eb 81       	ldd	r30, Y+3	; 0x03
    2970:	fc 81       	ldd	r31, Y+4	; 0x04
    2972:	80 83       	st	Z, r24
    2974:	16 c0       	rjmp	.+44     	; 0x29a2 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTD:
								*State=GET_BIT(PIND,PIN);
    2976:	e0 e3       	ldi	r30, 0x30	; 48
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	28 2f       	mov	r18, r24
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	88 2f       	mov	r24, r24
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	a9 01       	movw	r20, r18
    2988:	02 c0       	rjmp	.+4      	; 0x298e <DIO_GetPinValue+0xf8>
    298a:	55 95       	asr	r21
    298c:	47 95       	ror	r20
    298e:	8a 95       	dec	r24
    2990:	e2 f7       	brpl	.-8      	; 0x298a <DIO_GetPinValue+0xf4>
    2992:	ca 01       	movw	r24, r20
    2994:	81 70       	andi	r24, 0x01	; 1
    2996:	eb 81       	ldd	r30, Y+3	; 0x03
    2998:	fc 81       	ldd	r31, Y+4	; 0x04
    299a:	80 83       	st	Z, r24
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <DIO_GetPinValue+0x10c>
								break;
							default:
								return E_OK;
    299e:	1f 82       	std	Y+7, r1	; 0x07
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <DIO_GetPinValue+0x110>
						}
			}
		return E_NOK;
    29a2:	51 e0       	ldi	r21, 0x01	; 1
    29a4:	5f 83       	std	Y+7, r21	; 0x07
    29a6:	8f 81       	ldd	r24, Y+7	; 0x07
	}
    29a8:	27 96       	adiw	r28, 0x07	; 7
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <DIO_togglePin>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_togglePin(DIO_Ports_t port,u8 pin)
 {
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <DIO_togglePin+0x6>
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <DIO_togglePin+0x8>
    29c2:	0f 92       	push	r0
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PinNum)
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	88 30       	cpi	r24, 0x08	; 8
    29d0:	10 f0       	brcs	.+4      	; 0x29d6 <DIO_togglePin+0x1c>
		{
			return E_OK;
    29d2:	1d 82       	std	Y+5, r1	; 0x05
    29d4:	73 c0       	rjmp	.+230    	; 0x2abc <DIO_togglePin+0x102>
		}
	else
		{
			switch (port)
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	3c 83       	std	Y+4, r19	; 0x04
    29de:	2b 83       	std	Y+3, r18	; 0x03
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	81 30       	cpi	r24, 0x01	; 1
    29e6:	91 05       	cpc	r25, r1
    29e8:	49 f1       	breq	.+82     	; 0x2a3c <DIO_togglePin+0x82>
    29ea:	2b 81       	ldd	r18, Y+3	; 0x03
    29ec:	3c 81       	ldd	r19, Y+4	; 0x04
    29ee:	22 30       	cpi	r18, 0x02	; 2
    29f0:	31 05       	cpc	r19, r1
    29f2:	2c f4       	brge	.+10     	; 0x29fe <DIO_togglePin+0x44>
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	61 f0       	breq	.+24     	; 0x2a14 <DIO_togglePin+0x5a>
    29fc:	5b c0       	rjmp	.+182    	; 0x2ab4 <DIO_togglePin+0xfa>
    29fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2a00:	3c 81       	ldd	r19, Y+4	; 0x04
    2a02:	22 30       	cpi	r18, 0x02	; 2
    2a04:	31 05       	cpc	r19, r1
    2a06:	71 f1       	breq	.+92     	; 0x2a64 <DIO_togglePin+0xaa>
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	83 30       	cpi	r24, 0x03	; 3
    2a0e:	91 05       	cpc	r25, r1
    2a10:	e9 f1       	breq	.+122    	; 0x2a8c <DIO_togglePin+0xd2>
    2a12:	50 c0       	rjmp	.+160    	; 0x2ab4 <DIO_togglePin+0xfa>
				{
					case DIO_PORTA:
						TOGGLE_BIT(PORTA, pin);
    2a14:	ab e3       	ldi	r26, 0x3B	; 59
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	eb e3       	ldi	r30, 0x3B	; 59
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	48 2f       	mov	r20, r24
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	02 2e       	mov	r0, r18
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <DIO_togglePin+0x78>
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	0a 94       	dec	r0
    2a34:	e2 f7       	brpl	.-8      	; 0x2a2e <DIO_togglePin+0x74>
    2a36:	84 27       	eor	r24, r20
    2a38:	8c 93       	st	X, r24
    2a3a:	3e c0       	rjmp	.+124    	; 0x2ab8 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTB:
						TOGGLE_BIT(PORTB, pin);
    2a3c:	a8 e3       	ldi	r26, 0x38	; 56
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	e8 e3       	ldi	r30, 0x38	; 56
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	48 2f       	mov	r20, r24
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	02 2e       	mov	r0, r18
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <DIO_togglePin+0xa0>
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	0a 94       	dec	r0
    2a5c:	e2 f7       	brpl	.-8      	; 0x2a56 <DIO_togglePin+0x9c>
    2a5e:	84 27       	eor	r24, r20
    2a60:	8c 93       	st	X, r24
    2a62:	2a c0       	rjmp	.+84     	; 0x2ab8 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTC:
						TOGGLE_BIT(PORTC, pin);
    2a64:	a5 e3       	ldi	r26, 0x35	; 53
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e5 e3       	ldi	r30, 0x35	; 53
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	48 2f       	mov	r20, r24
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	02 2e       	mov	r0, r18
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <DIO_togglePin+0xc8>
    2a7e:	88 0f       	add	r24, r24
    2a80:	99 1f       	adc	r25, r25
    2a82:	0a 94       	dec	r0
    2a84:	e2 f7       	brpl	.-8      	; 0x2a7e <DIO_togglePin+0xc4>
    2a86:	84 27       	eor	r24, r20
    2a88:	8c 93       	st	X, r24
    2a8a:	16 c0       	rjmp	.+44     	; 0x2ab8 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTD:
						TOGGLE_BIT(PORTD, pin);
    2a8c:	a2 e3       	ldi	r26, 0x32	; 50
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e2 e3       	ldi	r30, 0x32	; 50
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	48 2f       	mov	r20, r24
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	02 2e       	mov	r0, r18
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <DIO_togglePin+0xf0>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	0a 94       	dec	r0
    2aac:	e2 f7       	brpl	.-8      	; 0x2aa6 <DIO_togglePin+0xec>
    2aae:	84 27       	eor	r24, r20
    2ab0:	8c 93       	st	X, r24
    2ab2:	02 c0       	rjmp	.+4      	; 0x2ab8 <DIO_togglePin+0xfe>
						break;
					default:
						return E_OK;
    2ab4:	1d 82       	std	Y+5, r1	; 0x05
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <DIO_togglePin+0x102>
				}
	}

	return E_NOK;
    2ab8:	91 e0       	ldi	r25, 0x01	; 1
    2aba:	9d 83       	std	Y+5, r25	; 0x05
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <DIO_EnablePullup>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_EnablePullup(DIO_Ports_t PORT, u8 PIN, DIO_PullUpState_t Pullstate)
	{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	6a 83       	std	Y+2, r22	; 0x02
    2ae6:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	88 30       	cpi	r24, 0x08	; 8
    2aec:	10 f0       	brcs	.+4      	; 0x2af2 <DIO_EnablePullup+0x24>
			{
				return E_OK;
    2aee:	1e 86       	std	Y+14, r1	; 0x0e
    2af0:	26 c1       	rjmp	.+588    	; 0x2d3e <DIO_EnablePullup+0x270>
			}
		else
			{
				switch(PORT)
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	3d 87       	std	Y+13, r19	; 0x0d
    2afa:	2c 87       	std	Y+12, r18	; 0x0c
    2afc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2afe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b00:	81 30       	cpi	r24, 0x01	; 1
    2b02:	91 05       	cpc	r25, r1
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <DIO_EnablePullup+0x3a>
    2b06:	57 c0       	rjmp	.+174    	; 0x2bb6 <DIO_EnablePullup+0xe8>
    2b08:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b0a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b0c:	22 30       	cpi	r18, 0x02	; 2
    2b0e:	31 05       	cpc	r19, r1
    2b10:	2c f4       	brge	.+10     	; 0x2b1c <DIO_EnablePullup+0x4e>
    2b12:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b14:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	71 f0       	breq	.+28     	; 0x2b36 <DIO_EnablePullup+0x68>
    2b1a:	0d c1       	rjmp	.+538    	; 0x2d36 <DIO_EnablePullup+0x268>
    2b1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b1e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b20:	22 30       	cpi	r18, 0x02	; 2
    2b22:	31 05       	cpc	r19, r1
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <DIO_EnablePullup+0x5a>
    2b26:	87 c0       	rjmp	.+270    	; 0x2c36 <DIO_EnablePullup+0x168>
    2b28:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b2c:	83 30       	cpi	r24, 0x03	; 3
    2b2e:	91 05       	cpc	r25, r1
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <DIO_EnablePullup+0x66>
    2b32:	c1 c0       	rjmp	.+386    	; 0x2cb6 <DIO_EnablePullup+0x1e8>
    2b34:	00 c1       	rjmp	.+512    	; 0x2d36 <DIO_EnablePullup+0x268>
				{
					case DIO_PORTA:
						switch(Pullstate)
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	3b 87       	std	Y+11, r19	; 0x0b
    2b3e:	2a 87       	std	Y+10, r18	; 0x0a
    2b40:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b42:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	31 f0       	breq	.+12     	; 0x2b54 <DIO_EnablePullup+0x86>
    2b48:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b4a:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b4c:	21 30       	cpi	r18, 0x01	; 1
    2b4e:	31 05       	cpc	r19, r1
    2b50:	41 f1       	breq	.+80     	; 0x2ba2 <DIO_EnablePullup+0xd4>
    2b52:	2f c0       	rjmp	.+94     	; 0x2bb2 <DIO_EnablePullup+0xe4>
							{
								case ENABLE_PullUp:
									CLEAR_BIT(DDRA,PIN);
    2b54:	aa e3       	ldi	r26, 0x3A	; 58
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	ea e3       	ldi	r30, 0x3A	; 58
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	48 2f       	mov	r20, r24
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <DIO_EnablePullup+0xa2>
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	2a 95       	dec	r18
    2b72:	e2 f7       	brpl	.-8      	; 0x2b6c <DIO_EnablePullup+0x9e>
    2b74:	80 95       	com	r24
    2b76:	84 23       	and	r24, r20
    2b78:	8c 93       	st	X, r24
									SET_BIT(PORTA,PIN);
    2b7a:	ab e3       	ldi	r26, 0x3B	; 59
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	eb e3       	ldi	r30, 0x3B	; 59
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	48 2f       	mov	r20, r24
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	02 2e       	mov	r0, r18
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <DIO_EnablePullup+0xca>
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	0a 94       	dec	r0
    2b9a:	e2 f7       	brpl	.-8      	; 0x2b94 <DIO_EnablePullup+0xc6>
    2b9c:	84 2b       	or	r24, r20
    2b9e:	8c 93       	st	X, r24
    2ba0:	cc c0       	rjmp	.+408    	; 0x2d3a <DIO_EnablePullup+0x26c>
									break;
								case DISABLE_PullUp:
									SET_BIT(SFIOR,PUD);
    2ba2:	a0 e5       	ldi	r26, 0x50	; 80
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e0 e5       	ldi	r30, 0x50	; 80
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	84 60       	ori	r24, 0x04	; 4
    2bae:	8c 93       	st	X, r24
    2bb0:	c4 c0       	rjmp	.+392    	; 0x2d3a <DIO_EnablePullup+0x26c>
									break;
								default:
									return E_OK;
    2bb2:	1e 86       	std	Y+14, r1	; 0x0e
    2bb4:	c4 c0       	rjmp	.+392    	; 0x2d3e <DIO_EnablePullup+0x270>
							}
						break;
						case DIO_PORTB:
							switch(Pullstate)
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	39 87       	std	Y+9, r19	; 0x09
    2bbe:	28 87       	std	Y+8, r18	; 0x08
    2bc0:	88 85       	ldd	r24, Y+8	; 0x08
    2bc2:	99 85       	ldd	r25, Y+9	; 0x09
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	31 f0       	breq	.+12     	; 0x2bd4 <DIO_EnablePullup+0x106>
    2bc8:	28 85       	ldd	r18, Y+8	; 0x08
    2bca:	39 85       	ldd	r19, Y+9	; 0x09
    2bcc:	21 30       	cpi	r18, 0x01	; 1
    2bce:	31 05       	cpc	r19, r1
    2bd0:	41 f1       	breq	.+80     	; 0x2c22 <DIO_EnablePullup+0x154>
    2bd2:	2f c0       	rjmp	.+94     	; 0x2c32 <DIO_EnablePullup+0x164>
								{
									case ENABLE_PullUp:
										CLEAR_BIT(DDRB,PIN);
    2bd4:	a7 e3       	ldi	r26, 0x37	; 55
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	e7 e3       	ldi	r30, 0x37	; 55
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	48 2f       	mov	r20, r24
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <DIO_EnablePullup+0x122>
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	2a 95       	dec	r18
    2bf2:	e2 f7       	brpl	.-8      	; 0x2bec <DIO_EnablePullup+0x11e>
    2bf4:	80 95       	com	r24
    2bf6:	84 23       	and	r24, r20
    2bf8:	8c 93       	st	X, r24
										SET_BIT(PORTB,PIN);
    2bfa:	a8 e3       	ldi	r26, 0x38	; 56
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e8 e3       	ldi	r30, 0x38	; 56
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	48 2f       	mov	r20, r24
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	02 2e       	mov	r0, r18
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <DIO_EnablePullup+0x14a>
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	0a 94       	dec	r0
    2c1a:	e2 f7       	brpl	.-8      	; 0x2c14 <DIO_EnablePullup+0x146>
    2c1c:	84 2b       	or	r24, r20
    2c1e:	8c 93       	st	X, r24
    2c20:	8c c0       	rjmp	.+280    	; 0x2d3a <DIO_EnablePullup+0x26c>
										break;
									case DISABLE_PullUp:
										SET_BIT(SFIOR,PUD);
    2c22:	a0 e5       	ldi	r26, 0x50	; 80
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e0 e5       	ldi	r30, 0x50	; 80
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	84 60       	ori	r24, 0x04	; 4
    2c2e:	8c 93       	st	X, r24
    2c30:	84 c0       	rjmp	.+264    	; 0x2d3a <DIO_EnablePullup+0x26c>
										break;
									default:
										return E_OK;
    2c32:	1e 86       	std	Y+14, r1	; 0x0e
    2c34:	84 c0       	rjmp	.+264    	; 0x2d3e <DIO_EnablePullup+0x270>
								}
							break;
							case DIO_PORTC:
								switch(Pullstate)
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	3f 83       	std	Y+7, r19	; 0x07
    2c3e:	2e 83       	std	Y+6, r18	; 0x06
    2c40:	8e 81       	ldd	r24, Y+6	; 0x06
    2c42:	9f 81       	ldd	r25, Y+7	; 0x07
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	31 f0       	breq	.+12     	; 0x2c54 <DIO_EnablePullup+0x186>
    2c48:	2e 81       	ldd	r18, Y+6	; 0x06
    2c4a:	3f 81       	ldd	r19, Y+7	; 0x07
    2c4c:	21 30       	cpi	r18, 0x01	; 1
    2c4e:	31 05       	cpc	r19, r1
    2c50:	41 f1       	breq	.+80     	; 0x2ca2 <DIO_EnablePullup+0x1d4>
    2c52:	2f c0       	rjmp	.+94     	; 0x2cb2 <DIO_EnablePullup+0x1e4>
									{
										case ENABLE_PullUp:
											CLEAR_BIT(DDRC,PIN);
    2c54:	a4 e3       	ldi	r26, 0x34	; 52
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e4 e3       	ldi	r30, 0x34	; 52
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	48 2f       	mov	r20, r24
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <DIO_EnablePullup+0x1a2>
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	2a 95       	dec	r18
    2c72:	e2 f7       	brpl	.-8      	; 0x2c6c <DIO_EnablePullup+0x19e>
    2c74:	80 95       	com	r24
    2c76:	84 23       	and	r24, r20
    2c78:	8c 93       	st	X, r24
											SET_BIT(PORTC,PIN);
    2c7a:	a5 e3       	ldi	r26, 0x35	; 53
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	e5 e3       	ldi	r30, 0x35	; 53
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	48 2f       	mov	r20, r24
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	02 2e       	mov	r0, r18
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <DIO_EnablePullup+0x1ca>
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	0a 94       	dec	r0
    2c9a:	e2 f7       	brpl	.-8      	; 0x2c94 <DIO_EnablePullup+0x1c6>
    2c9c:	84 2b       	or	r24, r20
    2c9e:	8c 93       	st	X, r24
    2ca0:	4c c0       	rjmp	.+152    	; 0x2d3a <DIO_EnablePullup+0x26c>
											break;
										case DISABLE_PullUp:
											SET_BIT(SFIOR,PUD);
    2ca2:	a0 e5       	ldi	r26, 0x50	; 80
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	e0 e5       	ldi	r30, 0x50	; 80
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	84 60       	ori	r24, 0x04	; 4
    2cae:	8c 93       	st	X, r24
    2cb0:	44 c0       	rjmp	.+136    	; 0x2d3a <DIO_EnablePullup+0x26c>
											break;
										default:
											return E_OK;
    2cb2:	1e 86       	std	Y+14, r1	; 0x0e
    2cb4:	44 c0       	rjmp	.+136    	; 0x2d3e <DIO_EnablePullup+0x270>
									}
								break;
								case DIO_PORTD:
									switch(Pullstate)
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	3d 83       	std	Y+5, r19	; 0x05
    2cbe:	2c 83       	std	Y+4, r18	; 0x04
    2cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	31 f0       	breq	.+12     	; 0x2cd4 <DIO_EnablePullup+0x206>
    2cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    2cca:	3d 81       	ldd	r19, Y+5	; 0x05
    2ccc:	21 30       	cpi	r18, 0x01	; 1
    2cce:	31 05       	cpc	r19, r1
    2cd0:	41 f1       	breq	.+80     	; 0x2d22 <DIO_EnablePullup+0x254>
    2cd2:	2f c0       	rjmp	.+94     	; 0x2d32 <DIO_EnablePullup+0x264>
										{
											case ENABLE_PullUp:
												CLEAR_BIT(DDRD,PIN);
    2cd4:	a1 e3       	ldi	r26, 0x31	; 49
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e1 e3       	ldi	r30, 0x31	; 49
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	48 2f       	mov	r20, r24
    2ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <DIO_EnablePullup+0x222>
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	2a 95       	dec	r18
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <DIO_EnablePullup+0x21e>
    2cf4:	80 95       	com	r24
    2cf6:	84 23       	and	r24, r20
    2cf8:	8c 93       	st	X, r24
												SET_BIT(PORTD,PIN);
    2cfa:	a2 e3       	ldi	r26, 0x32	; 50
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e2 e3       	ldi	r30, 0x32	; 50
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	48 2f       	mov	r20, r24
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	02 2e       	mov	r0, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <DIO_EnablePullup+0x24a>
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	0a 94       	dec	r0
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <DIO_EnablePullup+0x246>
    2d1c:	84 2b       	or	r24, r20
    2d1e:	8c 93       	st	X, r24
    2d20:	0c c0       	rjmp	.+24     	; 0x2d3a <DIO_EnablePullup+0x26c>
												break;
											case DISABLE_PullUp:
												SET_BIT(SFIOR,PUD);
    2d22:	a0 e5       	ldi	r26, 0x50	; 80
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e0 e5       	ldi	r30, 0x50	; 80
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	84 60       	ori	r24, 0x04	; 4
    2d2e:	8c 93       	st	X, r24
    2d30:	04 c0       	rjmp	.+8      	; 0x2d3a <DIO_EnablePullup+0x26c>
												break;
											default:
												return E_OK;
    2d32:	1e 86       	std	Y+14, r1	; 0x0e
    2d34:	04 c0       	rjmp	.+8      	; 0x2d3e <DIO_EnablePullup+0x270>
										}
									break;
									default:
									return E_OK;
    2d36:	1e 86       	std	Y+14, r1	; 0x0e
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <DIO_EnablePullup+0x270>

				}
			}
		return E_NOK;
    2d3a:	31 e0       	ldi	r19, 0x01	; 1
    2d3c:	3e 87       	std	Y+14, r19	; 0x0e
    2d3e:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    2d40:	2e 96       	adiw	r28, 0x0e	; 14
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <ADC_Init>:
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 */
 /*****************************************************************************************************/
STD_Return ADC_Init(ADC__State_t State)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <ADC_Init+0x6>
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <ADC_Init+0x8>
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	89 83       	std	Y+1, r24	; 0x01
	//Resolution Selection
	#if defined Resolution_8_Bit
	SET_BIT(ADMUX,ADLAR);
	#elif defined Resolution_10_Bit
	CLEAR_BIT(ADMUX,ADLAR);
    2d60:	a7 e2       	ldi	r26, 0x27	; 39
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e7 e2       	ldi	r30, 0x27	; 39
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	8f 7d       	andi	r24, 0xDF	; 223
    2d6c:	8c 93       	st	X, r24
	//Voltage Reference Selection
	#if defined AREF_Internal_VREF
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
	#elif defined AREF_External_VREF
	SET_BIT(ADMUX,REFS0);
    2d6e:	a7 e2       	ldi	r26, 0x27	; 39
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e7 e2       	ldi	r30, 0x27	; 39
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	80 64       	ori	r24, 0x40	; 64
    2d7a:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    2d7c:	a7 e2       	ldi	r26, 0x27	; 39
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e7 e2       	ldi	r30, 0x27	; 39
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	8f 77       	andi	r24, 0x7F	; 127
    2d88:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_64
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_128
		SET_BIT(ADCSRA,ADPS0);
    2d8a:	a6 e2       	ldi	r26, 0x26	; 38
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e6 e2       	ldi	r30, 0x26	; 38
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	81 60       	ori	r24, 0x01	; 1
    2d96:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    2d98:	a6 e2       	ldi	r26, 0x26	; 38
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e6 e2       	ldi	r30, 0x26	; 38
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	82 60       	ori	r24, 0x02	; 2
    2da4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    2da6:	a6 e2       	ldi	r26, 0x26	; 38
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	e6 e2       	ldi	r30, 0x26	; 38
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	84 60       	ori	r24, 0x04	; 4
    2db2:	8c 93       	st	X, r24
	#endif
	switch (State)
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	3c 83       	std	Y+4, r19	; 0x04
    2dbc:	2b 83       	std	Y+3, r18	; 0x03
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	31 f0       	breq	.+12     	; 0x2dd2 <ADC_Init+0x80>
    2dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dca:	21 30       	cpi	r18, 0x01	; 1
    2dcc:	31 05       	cpc	r19, r1
    2dce:	49 f0       	breq	.+18     	; 0x2de2 <ADC_Init+0x90>
    2dd0:	10 c0       	rjmp	.+32     	; 0x2df2 <ADC_Init+0xa0>
		{
			case ADC_ENABLE:
				SET_BIT(ADCSRA,ADEN);
    2dd2:	a6 e2       	ldi	r26, 0x26	; 38
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	e6 e2       	ldi	r30, 0x26	; 38
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	80 68       	ori	r24, 0x80	; 128
    2dde:	8c 93       	st	X, r24
    2de0:	0a c0       	rjmp	.+20     	; 0x2df6 <ADC_Init+0xa4>
				break;
			case ADC_DISABLE:
				CLEAR_BIT(ADCSRA,ADEN);
    2de2:	a6 e2       	ldi	r26, 0x26	; 38
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e6 e2       	ldi	r30, 0x26	; 38
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	8f 77       	andi	r24, 0x7F	; 127
    2dee:	8c 93       	st	X, r24
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <ADC_Init+0xa4>
				break;
			default:
				return E_OK;
    2df2:	1a 82       	std	Y+2, r1	; 0x02
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <ADC_Init+0xa8>
		}
		return E_NOK;
    2df6:	31 e0       	ldi	r19, 0x01	; 1
    2df8:	3a 83       	std	Y+2, r19	; 0x02
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <ADC_SetInterrupt_Enable>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 */
STD_Return ADC_SetInterrupt_Enable(ADC_Interrupt_State_t State)
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <ADC_SetInterrupt_Enable+0x6>
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <ADC_SetInterrupt_Enable+0x8>
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	3c 83       	std	Y+4, r19	; 0x04
    2e20:	2b 83       	std	Y+3, r18	; 0x03
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	9c 81       	ldd	r25, Y+4	; 0x04
    2e26:	00 97       	sbiw	r24, 0x00	; 0
    2e28:	31 f0       	breq	.+12     	; 0x2e36 <ADC_SetInterrupt_Enable+0x2c>
    2e2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e2e:	21 30       	cpi	r18, 0x01	; 1
    2e30:	31 05       	cpc	r19, r1
    2e32:	49 f0       	breq	.+18     	; 0x2e46 <ADC_SetInterrupt_Enable+0x3c>
    2e34:	10 c0       	rjmp	.+32     	; 0x2e56 <ADC_SetInterrupt_Enable+0x4c>
	{
		case ADC_Interrupt_ENABLE:
			SET_BIT(ADCSRA,ADIE);
    2e36:	a6 e2       	ldi	r26, 0x26	; 38
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	e6 e2       	ldi	r30, 0x26	; 38
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	88 60       	ori	r24, 0x08	; 8
    2e42:	8c 93       	st	X, r24
    2e44:	0a c0       	rjmp	.+20     	; 0x2e5a <ADC_SetInterrupt_Enable+0x50>
			break;
		case ADC_Interrupt_DISABLE:
			CLEAR_BIT(ADCSRA,ADIE);
    2e46:	a6 e2       	ldi	r26, 0x26	; 38
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	e6 e2       	ldi	r30, 0x26	; 38
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	87 7f       	andi	r24, 0xF7	; 247
    2e52:	8c 93       	st	X, r24
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <ADC_SetInterrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    2e56:	1a 82       	std	Y+2, r1	; 0x02
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <ADC_SetInterrupt_Enable+0x54>
	}
	return E_NOK;
    2e5a:	31 e0       	ldi	r19, 0x01	; 1
    2e5c:	3a 83       	std	Y+2, r19	; 0x02
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <ADC_Start_conversion>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Start_conversion(u8 channel)
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <ADC_Start_conversion+0x6>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	89 83       	std	Y+1, r24	; 0x01
	if (channel>MaxPinNum)
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	88 30       	cpi	r24, 0x08	; 8
    2e7e:	10 f0       	brcs	.+4      	; 0x2e84 <ADC_Start_conversion+0x16>
	{
		return E_OK;
    2e80:	1a 82       	std	Y+2, r1	; 0x02
    2e82:	25 c0       	rjmp	.+74     	; 0x2ece <ADC_Start_conversion+0x60>
	}
	else
	{

			//Mask for non used bits of the 8 bits of the Regsiter
			ADMUX &= Unselected_Channel_MASK;
    2e84:	a7 e2       	ldi	r26, 0x27	; 39
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e7 e2       	ldi	r30, 0x27	; 39
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	88 7f       	andi	r24, 0xF8	; 248
    2e90:	8c 93       	st	X, r24

			//Mask for the usage 3 bits of the 8 bits
			ADMUX |= channel;
    2e92:	a7 e2       	ldi	r26, 0x27	; 39
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e7 e2       	ldi	r30, 0x27	; 39
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	90 81       	ld	r25, Z
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	89 2b       	or	r24, r25
    2ea0:	8c 93       	st	X, r24

			//Set the AdcStartConversion
			SET_BIT(ADCSRA,ADSC);
    2ea2:	a6 e2       	ldi	r26, 0x26	; 38
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e6 e2       	ldi	r30, 0x26	; 38
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	80 64       	ori	r24, 0x40	; 64
    2eae:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA,ADSC) == 1);
    2eb0:	e6 e2       	ldi	r30, 0x26	; 38
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	82 95       	swap	r24
    2eb8:	86 95       	lsr	r24
    2eba:	86 95       	lsr	r24
    2ebc:	83 70       	andi	r24, 0x03	; 3
    2ebe:	88 2f       	mov	r24, r24
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	81 70       	andi	r24, 0x01	; 1
    2ec4:	90 70       	andi	r25, 0x00	; 0
    2ec6:	88 23       	and	r24, r24
    2ec8:	99 f7       	brne	.-26     	; 0x2eb0 <ADC_Start_conversion+0x42>
		 //Wait conversion to finish
	}
	return E_NOK;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	8a 83       	std	Y+2, r24	; 0x02
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <ADC_Get_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Get_Value(u16 *AdcResult)
{
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <ADC_Get_Value+0x6>
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <ADC_Get_Value+0x8>
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	9c 83       	std	Y+4, r25	; 0x04
    2ee8:	8b 83       	std	Y+3, r24	; 0x03
		u16 AdcResult_Temp=0;
    2eea:	1a 82       	std	Y+2, r1	; 0x02
    2eec:	19 82       	std	Y+1, r1	; 0x01
	#if defined Resolution_8_Bit
		*AdcResult=ADCH;
	#elif defined Resolution_10_Bit
		AdcResult_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    2eee:	e4 e2       	ldi	r30, 0x24	; 36
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	e5 e2       	ldi	r30, 0x25	; 37
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	88 2f       	mov	r24, r24
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	98 2f       	mov	r25, r24
    2f04:	88 27       	eor	r24, r24
    2f06:	82 0f       	add	r24, r18
    2f08:	93 1f       	adc	r25, r19
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
		*AdcResult = (AdcResult_Temp & Resolution_10Bit_MASK);//Mask higher bits in ADCH and read only the 10 bits for the ADC
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	93 70       	andi	r25, 0x03	; 3
    2f14:	eb 81       	ldd	r30, Y+3	; 0x03
    2f16:	fc 81       	ldd	r31, Y+4	; 0x04
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
	#endif
		return E_NOK;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
}
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <ADC_Read_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Read_Value(u8 channel,u16 *AdcValue)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <ADC_Read_Value+0x6>
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <ADC_Read_Value+0x8>
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <ADC_Read_Value+0xa>
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	8b 83       	std	Y+3, r24	; 0x03
    2f3c:	7d 83       	std	Y+5, r23	; 0x05
    2f3e:	6c 83       	std	Y+4, r22	; 0x04
	u16 AdcValue_Temp=0;
    2f40:	1a 82       	std	Y+2, r1	; 0x02
    2f42:	19 82       	std	Y+1, r1	; 0x01
	if (channel>MaxPinNum)
    2f44:	8b 81       	ldd	r24, Y+3	; 0x03
    2f46:	88 30       	cpi	r24, 0x08	; 8
    2f48:	c0 f0       	brcs	.+48     	; 0x2f7a <ADC_Read_Value+0x4e>
		{
			return E_OK;
    2f4a:	1e 82       	std	Y+6, r1	; 0x06
    2f4c:	3c c0       	rjmp	.+120    	; 0x2fc6 <ADC_Read_Value+0x9a>
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
			{
				//Mask for non used bits of the 8 bits of the Regsiter
				ADMUX &= Unselected_Channel_MASK;
    2f4e:	a7 e2       	ldi	r26, 0x27	; 39
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e7 e2       	ldi	r30, 0x27	; 39
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	88 7f       	andi	r24, 0xF8	; 248
    2f5a:	8c 93       	st	X, r24

				//Mask for the usage 3 bits of the 8 bits
				ADMUX |= channel;
    2f5c:	a7 e2       	ldi	r26, 0x27	; 39
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e7 e2       	ldi	r30, 0x27	; 39
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	90 81       	ld	r25, Z
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	89 2b       	or	r24, r25
    2f6a:	8c 93       	st	X, r24

				//Set the AdcStartConversion
				SET_BIT(ADCSRA,ADSC);
    2f6c:	a6 e2       	ldi	r26, 0x26	; 38
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e6 e2       	ldi	r30, 0x26	; 38
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	80 64       	ori	r24, 0x40	; 64
    2f78:	8c 93       	st	X, r24
		}
		else
		{
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
    2f7a:	e6 e2       	ldi	r30, 0x26	; 38
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	82 95       	swap	r24
    2f82:	86 95       	lsr	r24
    2f84:	86 95       	lsr	r24
    2f86:	83 70       	andi	r24, 0x03	; 3
    2f88:	88 2f       	mov	r24, r24
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	81 70       	andi	r24, 0x01	; 1
    2f8e:	90 70       	andi	r25, 0x00	; 0
    2f90:	88 23       	and	r24, r24
    2f92:	e9 f6       	brne	.-70     	; 0x2f4e <ADC_Read_Value+0x22>
			//return the read value

			#if defined Resolution_8_Bit
				*AdcValue=ADCH;
			#elif defined Resolution_10_Bit
				AdcValue_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    2f94:	e4 e2       	ldi	r30, 0x24	; 36
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	e5 e2       	ldi	r30, 0x25	; 37
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	88 2f       	mov	r24, r24
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	98 2f       	mov	r25, r24
    2faa:	88 27       	eor	r24, r24
    2fac:	82 0f       	add	r24, r18
    2fae:	93 1f       	adc	r25, r19
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
				*AdcValue = (AdcValue_Temp & Resolution_10Bit_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	93 70       	andi	r25, 0x03	; 3
    2fba:	ec 81       	ldd	r30, Y+4	; 0x04
    2fbc:	fd 81       	ldd	r31, Y+5	; 0x05
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
			#endif
		}
	return E_NOK;
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	8e 83       	std	Y+6, r24	; 0x06
    2fc6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2fc8:	26 96       	adiw	r28, 0x06	; 6
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <ADC_ReadVolt>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_ReadVolt (u8 channel,f32 *AdcVolt)
	{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <ADC_ReadVolt+0x6>
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <ADC_ReadVolt+0x8>
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <ADC_ReadVolt+0xa>
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	8b 83       	std	Y+3, r24	; 0x03
    2fea:	7d 83       	std	Y+5, r23	; 0x05
    2fec:	6c 83       	std	Y+4, r22	; 0x04
		u16 AdcValue_Temp=0;
    2fee:	1a 82       	std	Y+2, r1	; 0x02
    2ff0:	19 82       	std	Y+1, r1	; 0x01
		if(channel>MaxPinNum)
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	88 30       	cpi	r24, 0x08	; 8
    2ff6:	10 f0       	brcs	.+4      	; 0x2ffc <ADC_ReadVolt+0x22>
			{
				return E_OK;
    2ff8:	1e 82       	std	Y+6, r1	; 0x06
    2ffa:	2e c0       	rjmp	.+92     	; 0x3058 <ADC_ReadVolt+0x7e>
			}
		else
			{
				ADC_Read_Value(channel,&AdcValue_Temp);
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9e 01       	movw	r18, r28
    3000:	2f 5f       	subi	r18, 0xFF	; 255
    3002:	3f 4f       	sbci	r19, 0xFF	; 255
    3004:	b9 01       	movw	r22, r18
    3006:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <ADC_Read_Value>
				*AdcVolt= (((f32)AdcValue_Temp)*((f32)VREF))/((f32)(ADC_MAX));
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	9a 81       	ldd	r25, Y+2	; 0x02
    300e:	cc 01       	movw	r24, r24
    3010:	a0 e0       	ldi	r26, 0x00	; 0
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	bc 01       	movw	r22, r24
    3016:	cd 01       	movw	r24, r26
    3018:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 ea       	ldi	r20, 0xA0	; 160
    302a:	50 e4       	ldi	r21, 0x40	; 64
    302c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	bc 01       	movw	r22, r24
    3036:	cd 01       	movw	r24, r26
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	54 e4       	ldi	r21, 0x44	; 68
    3040:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	ec 81       	ldd	r30, Y+4	; 0x04
    304a:	fd 81       	ldd	r31, Y+5	; 0x05
    304c:	80 83       	st	Z, r24
    304e:	91 83       	std	Z+1, r25	; 0x01
    3050:	a2 83       	std	Z+2, r26	; 0x02
    3052:	b3 83       	std	Z+3, r27	; 0x03
			}
		return E_NOK;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	8e 83       	std	Y+6, r24	; 0x06
    3058:	8e 81       	ldd	r24, Y+6	; 0x06
	}
    305a:	26 96       	adiw	r28, 0x06	; 6
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <ADC_CallBack>:
 * 
 * @param func_ptr 		 :		pointer to function that points to the user/ External function
 * @return void			 : 		return nothing
 **/
void ADC_CallBack(void (*func_ptr)(void))
	{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	00 d0       	rcall	.+0      	; 0x3072 <ADC_CallBack+0x6>
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	9a 83       	std	Y+2, r25	; 0x02
    3078:	89 83       	std	Y+1, r24	; 0x01
		User_Function = func_ptr;
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	9a 81       	ldd	r25, Y+2	; 0x02
    307e:	90 93 a1 01 	sts	0x01A1, r25
    3082:	80 93 a0 01 	sts	0x01A0, r24
	}
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <__vector_16>:
/*********************************ISR ADC Vector******************************************************/
ISR(ADC_Vect)
{
    3090:	1f 92       	push	r1
    3092:	0f 92       	push	r0
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	0f 92       	push	r0
    3098:	11 24       	eor	r1, r1
    309a:	2f 93       	push	r18
    309c:	3f 93       	push	r19
    309e:	4f 93       	push	r20
    30a0:	5f 93       	push	r21
    30a2:	6f 93       	push	r22
    30a4:	7f 93       	push	r23
    30a6:	8f 93       	push	r24
    30a8:	9f 93       	push	r25
    30aa:	af 93       	push	r26
    30ac:	bf 93       	push	r27
    30ae:	ef 93       	push	r30
    30b0:	ff 93       	push	r31
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
	(*User_Function)();
    30ba:	e0 91 a0 01 	lds	r30, 0x01A0
    30be:	f0 91 a1 01 	lds	r31, 0x01A1
    30c2:	09 95       	icall
}
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	ff 91       	pop	r31
    30ca:	ef 91       	pop	r30
    30cc:	bf 91       	pop	r27
    30ce:	af 91       	pop	r26
    30d0:	9f 91       	pop	r25
    30d2:	8f 91       	pop	r24
    30d4:	7f 91       	pop	r23
    30d6:	6f 91       	pop	r22
    30d8:	5f 91       	pop	r21
    30da:	4f 91       	pop	r20
    30dc:	3f 91       	pop	r19
    30de:	2f 91       	pop	r18
    30e0:	0f 90       	pop	r0
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	0f 90       	pop	r0
    30e6:	1f 90       	pop	r1
    30e8:	18 95       	reti

000030ea <TimingSelection>:
 * @param TYPE 						: takes the sevensegment types CommonAnode/CommonCathode
 * @param Time 						: take which time will activated Sec01/Sec10/Min01/Min10			
 * @return STD_Return 
 */
STD_Return TimingSelection(u8 StopWatch_ControlPort,SevenSegment_Type_t TYPE,SevenSegment_Sel_t Time)
{
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	2a 97       	sbiw	r28, 0x0a	; 10
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	89 83       	std	Y+1, r24	; 0x01
    3100:	6a 83       	std	Y+2, r22	; 0x02
    3102:	4b 83       	std	Y+3, r20	; 0x03
	#ifdef StopWatch_ControlPort_A
	switch(TYPE)
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	3a 87       	std	Y+10, r19	; 0x0a
    310c:	29 87       	std	Y+9, r18	; 0x09
    310e:	89 85       	ldd	r24, Y+9	; 0x09
    3110:	9a 85       	ldd	r25, Y+10	; 0x0a
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	39 f0       	breq	.+14     	; 0x3124 <TimingSelection+0x3a>
    3116:	29 85       	ldd	r18, Y+9	; 0x09
    3118:	3a 85       	ldd	r19, Y+10	; 0x0a
    311a:	21 30       	cpi	r18, 0x01	; 1
    311c:	31 05       	cpc	r19, r1
    311e:	09 f4       	brne	.+2      	; 0x3122 <TimingSelection+0x38>
    3120:	77 c0       	rjmp	.+238    	; 0x3210 <TimingSelection+0x126>
    3122:	ec c0       	rjmp	.+472    	; 0x32fc <TimingSelection+0x212>
	{
		case CommonCathod:
			switch(Time)
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	28 2f       	mov	r18, r24
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	38 87       	std	Y+8, r19	; 0x08
    312c:	2f 83       	std	Y+7, r18	; 0x07
    312e:	8f 81       	ldd	r24, Y+7	; 0x07
    3130:	98 85       	ldd	r25, Y+8	; 0x08
    3132:	81 30       	cpi	r24, 0x01	; 1
    3134:	91 05       	cpc	r25, r1
    3136:	59 f1       	breq	.+86     	; 0x318e <TimingSelection+0xa4>
    3138:	2f 81       	ldd	r18, Y+7	; 0x07
    313a:	38 85       	ldd	r19, Y+8	; 0x08
    313c:	22 30       	cpi	r18, 0x02	; 2
    313e:	31 05       	cpc	r19, r1
    3140:	2c f4       	brge	.+10     	; 0x314c <TimingSelection+0x62>
    3142:	8f 81       	ldd	r24, Y+7	; 0x07
    3144:	98 85       	ldd	r25, Y+8	; 0x08
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	69 f0       	breq	.+26     	; 0x3164 <TimingSelection+0x7a>
    314a:	60 c0       	rjmp	.+192    	; 0x320c <TimingSelection+0x122>
    314c:	2f 81       	ldd	r18, Y+7	; 0x07
    314e:	38 85       	ldd	r19, Y+8	; 0x08
    3150:	22 30       	cpi	r18, 0x02	; 2
    3152:	31 05       	cpc	r19, r1
    3154:	89 f1       	breq	.+98     	; 0x31b8 <TimingSelection+0xce>
    3156:	8f 81       	ldd	r24, Y+7	; 0x07
    3158:	98 85       	ldd	r25, Y+8	; 0x08
    315a:	83 30       	cpi	r24, 0x03	; 3
    315c:	91 05       	cpc	r25, r1
    315e:	09 f4       	brne	.+2      	; 0x3162 <TimingSelection+0x78>
    3160:	40 c0       	rjmp	.+128    	; 0x31e2 <TimingSelection+0xf8>
    3162:	54 c0       	rjmp	.+168    	; 0x320c <TimingSelection+0x122>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	41 e0       	ldi	r20, 0x01	; 1
    316a:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	61 e0       	ldi	r22, 0x01	; 1
    3172:	41 e0       	ldi	r20, 0x01	; 1
    3174:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	60 e0       	ldi	r22, 0x00	; 0
    317c:	41 e0       	ldi	r20, 0x01	; 1
    317e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	61 e0       	ldi	r22, 0x01	; 1
    3186:	41 e0       	ldi	r20, 0x01	; 1
    3188:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    318c:	b9 c0       	rjmp	.+370    	; 0x3300 <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	60 e0       	ldi	r22, 0x00	; 0
    3192:	41 e0       	ldi	r20, 0x01	; 1
    3194:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	61 e0       	ldi	r22, 0x01	; 1
    319c:	41 e0       	ldi	r20, 0x01	; 1
    319e:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	61 e0       	ldi	r22, 0x01	; 1
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    31b6:	a4 c0       	rjmp	.+328    	; 0x3300 <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	41 e0       	ldi	r20, 0x01	; 1
    31be:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	41 e0       	ldi	r20, 0x01	; 1
    31c8:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	61 e0       	ldi	r22, 0x01	; 1
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    31e0:	8f c0       	rjmp	.+286    	; 0x3300 <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	41 e0       	ldi	r20, 0x01	; 1
    31e8:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	61 e0       	ldi	r22, 0x01	; 1
    31f0:	41 e0       	ldi	r20, 0x01	; 1
    31f2:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	40 e0       	ldi	r20, 0x00	; 0
    31fc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	61 e0       	ldi	r22, 0x01	; 1
    3204:	40 e0       	ldi	r20, 0x00	; 0
    3206:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    320a:	7a c0       	rjmp	.+244    	; 0x3300 <TimingSelection+0x216>
						break;
					default: return E_OK;
    320c:	1e 82       	std	Y+6, r1	; 0x06
    320e:	7a c0       	rjmp	.+244    	; 0x3304 <TimingSelection+0x21a>
				}
		break;
		case CommonAnode:
			switch(Time)
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	3d 83       	std	Y+5, r19	; 0x05
    3218:	2c 83       	std	Y+4, r18	; 0x04
    321a:	8c 81       	ldd	r24, Y+4	; 0x04
    321c:	9d 81       	ldd	r25, Y+5	; 0x05
    321e:	81 30       	cpi	r24, 0x01	; 1
    3220:	91 05       	cpc	r25, r1
    3222:	59 f1       	breq	.+86     	; 0x327a <TimingSelection+0x190>
    3224:	2c 81       	ldd	r18, Y+4	; 0x04
    3226:	3d 81       	ldd	r19, Y+5	; 0x05
    3228:	22 30       	cpi	r18, 0x02	; 2
    322a:	31 05       	cpc	r19, r1
    322c:	2c f4       	brge	.+10     	; 0x3238 <TimingSelection+0x14e>
    322e:	8c 81       	ldd	r24, Y+4	; 0x04
    3230:	9d 81       	ldd	r25, Y+5	; 0x05
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	69 f0       	breq	.+26     	; 0x3250 <TimingSelection+0x166>
    3236:	60 c0       	rjmp	.+192    	; 0x32f8 <TimingSelection+0x20e>
    3238:	2c 81       	ldd	r18, Y+4	; 0x04
    323a:	3d 81       	ldd	r19, Y+5	; 0x05
    323c:	22 30       	cpi	r18, 0x02	; 2
    323e:	31 05       	cpc	r19, r1
    3240:	89 f1       	breq	.+98     	; 0x32a4 <TimingSelection+0x1ba>
    3242:	8c 81       	ldd	r24, Y+4	; 0x04
    3244:	9d 81       	ldd	r25, Y+5	; 0x05
    3246:	83 30       	cpi	r24, 0x03	; 3
    3248:	91 05       	cpc	r25, r1
    324a:	09 f4       	brne	.+2      	; 0x324e <TimingSelection+0x164>
    324c:	40 c0       	rjmp	.+128    	; 0x32ce <TimingSelection+0x1e4>
    324e:	54 c0       	rjmp	.+168    	; 0x32f8 <TimingSelection+0x20e>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	60 e0       	ldi	r22, 0x00	; 0
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	61 e0       	ldi	r22, 0x01	; 1
    325e:	41 e0       	ldi	r20, 0x01	; 1
    3260:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	60 e0       	ldi	r22, 0x00	; 0
    3268:	40 e0       	ldi	r20, 0x00	; 0
    326a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	61 e0       	ldi	r22, 0x01	; 1
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3278:	43 c0       	rjmp	.+134    	; 0x3300 <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	60 e0       	ldi	r22, 0x00	; 0
    327e:	41 e0       	ldi	r20, 0x01	; 1
    3280:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	61 e0       	ldi	r22, 0x01	; 1
    3288:	41 e0       	ldi	r20, 0x01	; 1
    328a:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	41 e0       	ldi	r20, 0x01	; 1
    3294:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	61 e0       	ldi	r22, 0x01	; 1
    329c:	40 e0       	ldi	r20, 0x00	; 0
    329e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    32a2:	2e c0       	rjmp	.+92     	; 0x3300 <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	60 e0       	ldi	r22, 0x00	; 0
    32a8:	41 e0       	ldi	r20, 0x01	; 1
    32aa:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	61 e0       	ldi	r22, 0x01	; 1
    32b2:	41 e0       	ldi	r20, 0x01	; 1
    32b4:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	41 e0       	ldi	r20, 0x01	; 1
    32c8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    32cc:	19 c0       	rjmp	.+50     	; 0x3300 <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	60 e0       	ldi	r22, 0x00	; 0
    32d2:	41 e0       	ldi	r20, 0x01	; 1
    32d4:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	61 e0       	ldi	r22, 0x01	; 1
    32dc:	41 e0       	ldi	r20, 0x01	; 1
    32de:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	41 e0       	ldi	r20, 0x01	; 1
    32e8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	41 e0       	ldi	r20, 0x01	; 1
    32f2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    32f6:	04 c0       	rjmp	.+8      	; 0x3300 <TimingSelection+0x216>
						break;
					default: return E_OK;
    32f8:	1e 82       	std	Y+6, r1	; 0x06
    32fa:	04 c0       	rjmp	.+8      	; 0x3304 <TimingSelection+0x21a>
				}
		break;
		default:
		return E_OK;
    32fc:	1e 82       	std	Y+6, r1	; 0x06
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <TimingSelection+0x21a>
			break;
			default:
			return E_OK;
		}
#endif
	return E_NOK;
    3300:	91 e0       	ldi	r25, 0x01	; 1
    3302:	9e 83       	std	Y+6, r25	; 0x06
    3304:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3306:	2a 96       	adiw	r28, 0x0a	; 10
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	f8 94       	cli
    330c:	de bf       	out	0x3e, r29	; 62
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <SevenSegment_Display>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return SevenSegment_Display(DIO_Ports_t PORT,SevenSegment_Type_t TYPE,Display_Number_t NUM)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	6e 97       	sbiw	r28, 0x1e	; 30
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	6a 83       	std	Y+2, r22	; 0x02
    3330:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT)
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	28 2f       	mov	r18, r24
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	3e 8f       	std	Y+30, r19	; 0x1e
    333a:	2d 8f       	std	Y+29, r18	; 0x1d
    333c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    333e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3340:	81 30       	cpi	r24, 0x01	; 1
    3342:	91 05       	cpc	r25, r1
    3344:	09 f4       	brne	.+2      	; 0x3348 <SevenSegment_Display+0x30>
    3346:	4f c2       	rjmp	.+1182   	; 0x37e6 <SevenSegment_Display+0x4ce>
    3348:	2d 8d       	ldd	r18, Y+29	; 0x1d
    334a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    334c:	22 30       	cpi	r18, 0x02	; 2
    334e:	31 05       	cpc	r19, r1
    3350:	34 f4       	brge	.+12     	; 0x335e <SevenSegment_Display+0x46>
    3352:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3354:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	81 f0       	breq	.+32     	; 0x337a <SevenSegment_Display+0x62>
    335a:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <SevenSegment_Display+0x11ca>
    335e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3360:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3362:	22 30       	cpi	r18, 0x02	; 2
    3364:	31 05       	cpc	r19, r1
    3366:	09 f4       	brne	.+2      	; 0x336a <SevenSegment_Display+0x52>
    3368:	68 c4       	rjmp	.+2256   	; 0x3c3a <SevenSegment_Display+0x922>
    336a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    336c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    336e:	83 30       	cpi	r24, 0x03	; 3
    3370:	91 05       	cpc	r25, r1
    3372:	09 f4       	brne	.+2      	; 0x3376 <SevenSegment_Display+0x5e>
    3374:	8c c6       	rjmp	.+3352   	; 0x408e <SevenSegment_Display+0xd76>
    3376:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <SevenSegment_Display+0x11ca>
	{
		case DIO_PORTA:
		switch(TYPE)
    337a:	8a 81       	ldd	r24, Y+2	; 0x02
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	3c 8f       	std	Y+28, r19	; 0x1c
    3382:	2b 8f       	std	Y+27, r18	; 0x1b
    3384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	39 f0       	breq	.+14     	; 0x339a <SevenSegment_Display+0x82>
    338c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    338e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3390:	21 30       	cpi	r18, 0x01	; 1
    3392:	31 05       	cpc	r19, r1
    3394:	09 f4       	brne	.+2      	; 0x3398 <SevenSegment_Display+0x80>
    3396:	18 c1       	rjmp	.+560    	; 0x35c8 <SevenSegment_Display+0x2b0>
    3398:	24 c2       	rjmp	.+1096   	; 0x37e2 <SevenSegment_Display+0x4ca>
			{
				case CommonCathod:
					DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	6f ef       	ldi	r22, 0xFF	; 255
    339e:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_LOW);
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	67 e0       	ldi	r22, 0x07	; 7
    33a6:	40 e0       	ldi	r20, 0x00	; 0
    33a8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
					switch(NUM)
    33ac:	8b 81       	ldd	r24, Y+3	; 0x03
    33ae:	28 2f       	mov	r18, r24
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	3a 8f       	std	Y+26, r19	; 0x1a
    33b4:	29 8f       	std	Y+25, r18	; 0x19
    33b6:	89 8d       	ldd	r24, Y+25	; 0x19
    33b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33ba:	84 30       	cpi	r24, 0x04	; 4
    33bc:	91 05       	cpc	r25, r1
    33be:	09 f4       	brne	.+2      	; 0x33c2 <SevenSegment_Display+0xaa>
    33c0:	92 c0       	rjmp	.+292    	; 0x34e6 <SevenSegment_Display+0x1ce>
    33c2:	29 8d       	ldd	r18, Y+25	; 0x19
    33c4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33c6:	25 30       	cpi	r18, 0x05	; 5
    33c8:	31 05       	cpc	r19, r1
    33ca:	ec f4       	brge	.+58     	; 0x3406 <SevenSegment_Display+0xee>
    33cc:	89 8d       	ldd	r24, Y+25	; 0x19
    33ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33d0:	81 30       	cpi	r24, 0x01	; 1
    33d2:	91 05       	cpc	r25, r1
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <SevenSegment_Display+0xc0>
    33d6:	4b c0       	rjmp	.+150    	; 0x346e <SevenSegment_Display+0x156>
    33d8:	29 8d       	ldd	r18, Y+25	; 0x19
    33da:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33dc:	22 30       	cpi	r18, 0x02	; 2
    33de:	31 05       	cpc	r19, r1
    33e0:	2c f4       	brge	.+10     	; 0x33ec <SevenSegment_Display+0xd4>
    33e2:	89 8d       	ldd	r24, Y+25	; 0x19
    33e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	99 f1       	breq	.+102    	; 0x3450 <SevenSegment_Display+0x138>
    33ea:	eb c0       	rjmp	.+470    	; 0x35c2 <SevenSegment_Display+0x2aa>
    33ec:	29 8d       	ldd	r18, Y+25	; 0x19
    33ee:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33f0:	22 30       	cpi	r18, 0x02	; 2
    33f2:	31 05       	cpc	r19, r1
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <SevenSegment_Display+0xe0>
    33f6:	4f c0       	rjmp	.+158    	; 0x3496 <SevenSegment_Display+0x17e>
    33f8:	89 8d       	ldd	r24, Y+25	; 0x19
    33fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33fc:	83 30       	cpi	r24, 0x03	; 3
    33fe:	91 05       	cpc	r25, r1
    3400:	09 f4       	brne	.+2      	; 0x3404 <SevenSegment_Display+0xec>
    3402:	5d c0       	rjmp	.+186    	; 0x34be <SevenSegment_Display+0x1a6>
    3404:	de c0       	rjmp	.+444    	; 0x35c2 <SevenSegment_Display+0x2aa>
    3406:	29 8d       	ldd	r18, Y+25	; 0x19
    3408:	3a 8d       	ldd	r19, Y+26	; 0x1a
    340a:	27 30       	cpi	r18, 0x07	; 7
    340c:	31 05       	cpc	r19, r1
    340e:	09 f4       	brne	.+2      	; 0x3412 <SevenSegment_Display+0xfa>
    3410:	a6 c0       	rjmp	.+332    	; 0x355e <SevenSegment_Display+0x246>
    3412:	89 8d       	ldd	r24, Y+25	; 0x19
    3414:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3416:	88 30       	cpi	r24, 0x08	; 8
    3418:	91 05       	cpc	r25, r1
    341a:	6c f4       	brge	.+26     	; 0x3436 <SevenSegment_Display+0x11e>
    341c:	29 8d       	ldd	r18, Y+25	; 0x19
    341e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3420:	25 30       	cpi	r18, 0x05	; 5
    3422:	31 05       	cpc	r19, r1
    3424:	09 f4       	brne	.+2      	; 0x3428 <SevenSegment_Display+0x110>
    3426:	78 c0       	rjmp	.+240    	; 0x3518 <SevenSegment_Display+0x200>
    3428:	89 8d       	ldd	r24, Y+25	; 0x19
    342a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    342c:	86 30       	cpi	r24, 0x06	; 6
    342e:	91 05       	cpc	r25, r1
    3430:	09 f4       	brne	.+2      	; 0x3434 <SevenSegment_Display+0x11c>
    3432:	86 c0       	rjmp	.+268    	; 0x3540 <SevenSegment_Display+0x228>
    3434:	c6 c0       	rjmp	.+396    	; 0x35c2 <SevenSegment_Display+0x2aa>
    3436:	29 8d       	ldd	r18, Y+25	; 0x19
    3438:	3a 8d       	ldd	r19, Y+26	; 0x1a
    343a:	28 30       	cpi	r18, 0x08	; 8
    343c:	31 05       	cpc	r19, r1
    343e:	09 f4       	brne	.+2      	; 0x3442 <SevenSegment_Display+0x12a>
    3440:	a7 c0       	rjmp	.+334    	; 0x3590 <SevenSegment_Display+0x278>
    3442:	89 8d       	ldd	r24, Y+25	; 0x19
    3444:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3446:	89 30       	cpi	r24, 0x09	; 9
    3448:	91 05       	cpc	r25, r1
    344a:	09 f4       	brne	.+2      	; 0x344e <SevenSegment_Display+0x136>
    344c:	ab c0       	rjmp	.+342    	; 0x35a4 <SevenSegment_Display+0x28c>
    344e:	b9 c0       	rjmp	.+370    	; 0x35c2 <SevenSegment_Display+0x2aa>
						{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	6f ef       	ldi	r22, 0xFF	; 255
    3454:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	6f ef       	ldi	r22, 0xFF	; 255
    345c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_LOW);
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	66 e0       	ldi	r22, 0x06	; 6
    3464:	40 e0       	ldi	r20, 0x00	; 0
    3466:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    346a:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	6f ef       	ldi	r22, 0xFF	; 255
    3472:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	60 e0       	ldi	r22, 0x00	; 0
    347a:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	61 e0       	ldi	r22, 0x01	; 1
    3482:	41 e0       	ldi	r20, 0x01	; 1
    3484:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	62 e0       	ldi	r22, 0x02	; 2
    348c:	41 e0       	ldi	r20, 0x01	; 1
    348e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3492:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	6f ef       	ldi	r22, 0xFF	; 255
    349a:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	6f ef       	ldi	r22, 0xFF	; 255
    34a2:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	62 e0       	ldi	r22, 0x02	; 2
    34aa:	40 e0       	ldi	r20, 0x00	; 0
    34ac:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	65 e0       	ldi	r22, 0x05	; 5
    34b4:	40 e0       	ldi	r20, 0x00	; 0
    34b6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    34ba:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	6f ef       	ldi	r22, 0xFF	; 255
    34c2:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	6f ef       	ldi	r22, 0xFF	; 255
    34ca:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	64 e0       	ldi	r22, 0x04	; 4
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	65 e0       	ldi	r22, 0x05	; 5
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    34e2:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	6f ef       	ldi	r22, 0xFF	; 255
    34ea:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	6f ef       	ldi	r22, 0xFF	; 255
    34f2:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	40 e0       	ldi	r20, 0x00	; 0
    34fc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_LOW);
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	63 e0       	ldi	r22, 0x03	; 3
    3504:	40 e0       	ldi	r20, 0x00	; 0
    3506:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	64 e0       	ldi	r22, 0x04	; 4
    350e:	40 e0       	ldi	r20, 0x00	; 0
    3510:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3514:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	6f ef       	ldi	r22, 0xFF	; 255
    351c:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	6f ef       	ldi	r22, 0xFF	; 255
    3524:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	61 e0       	ldi	r22, 0x01	; 1
    352c:	40 e0       	ldi	r20, 0x00	; 0
    352e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	64 e0       	ldi	r22, 0x04	; 4
    3536:	40 e0       	ldi	r20, 0x00	; 0
    3538:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    353c:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	6f ef       	ldi	r22, 0xFF	; 255
    3544:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	6f ef       	ldi	r22, 0xFF	; 255
    354c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	61 e0       	ldi	r22, 0x01	; 1
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    355a:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	6f ef       	ldi	r22, 0xFF	; 255
    3562:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	41 e0       	ldi	r20, 0x01	; 1
    3574:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	61 e0       	ldi	r22, 0x01	; 1
    357c:	41 e0       	ldi	r20, 0x01	; 1
    357e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	62 e0       	ldi	r22, 0x02	; 2
    3586:	41 e0       	ldi	r20, 0x01	; 1
    3588:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    358c:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	6f ef       	ldi	r22, 0xFF	; 255
    3594:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	6f ef       	ldi	r22, 0xFF	; 255
    359c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
    35a0:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	6f ef       	ldi	r22, 0xFF	; 255
    35a8:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	6f ef       	ldi	r22, 0xFF	; 255
    35b0:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	64 e0       	ldi	r22, 0x04	; 4
    35b8:	40 e0       	ldi	r20, 0x00	; 0
    35ba:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    35be:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    35c2:	18 8e       	std	Y+24, r1	; 0x18
    35c4:	0c 94 75 22 	jmp	0x44ea	; 0x44ea <SevenSegment_Display+0x11d2>
					}
					break;
			case CommonAnode:
				DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	6f ef       	ldi	r22, 0xFF	; 255
    35cc:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
				DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_HIGH);
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	67 e0       	ldi	r22, 0x07	; 7
    35d4:	41 e0       	ldi	r20, 0x01	; 1
    35d6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
				switch(NUM)
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	28 2f       	mov	r18, r24
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	3f 8b       	std	Y+23, r19	; 0x17
    35e2:	2e 8b       	std	Y+22, r18	; 0x16
    35e4:	8e 89       	ldd	r24, Y+22	; 0x16
    35e6:	9f 89       	ldd	r25, Y+23	; 0x17
    35e8:	84 30       	cpi	r24, 0x04	; 4
    35ea:	91 05       	cpc	r25, r1
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <SevenSegment_Display+0x2d8>
    35ee:	8f c0       	rjmp	.+286    	; 0x370e <SevenSegment_Display+0x3f6>
    35f0:	2e 89       	ldd	r18, Y+22	; 0x16
    35f2:	3f 89       	ldd	r19, Y+23	; 0x17
    35f4:	25 30       	cpi	r18, 0x05	; 5
    35f6:	31 05       	cpc	r19, r1
    35f8:	ec f4       	brge	.+58     	; 0x3634 <SevenSegment_Display+0x31c>
    35fa:	8e 89       	ldd	r24, Y+22	; 0x16
    35fc:	9f 89       	ldd	r25, Y+23	; 0x17
    35fe:	81 30       	cpi	r24, 0x01	; 1
    3600:	91 05       	cpc	r25, r1
    3602:	09 f4       	brne	.+2      	; 0x3606 <SevenSegment_Display+0x2ee>
    3604:	4b c0       	rjmp	.+150    	; 0x369c <SevenSegment_Display+0x384>
    3606:	2e 89       	ldd	r18, Y+22	; 0x16
    3608:	3f 89       	ldd	r19, Y+23	; 0x17
    360a:	22 30       	cpi	r18, 0x02	; 2
    360c:	31 05       	cpc	r19, r1
    360e:	2c f4       	brge	.+10     	; 0x361a <SevenSegment_Display+0x302>
    3610:	8e 89       	ldd	r24, Y+22	; 0x16
    3612:	9f 89       	ldd	r25, Y+23	; 0x17
    3614:	00 97       	sbiw	r24, 0x00	; 0
    3616:	99 f1       	breq	.+102    	; 0x367e <SevenSegment_Display+0x366>
    3618:	e2 c0       	rjmp	.+452    	; 0x37de <SevenSegment_Display+0x4c6>
    361a:	2e 89       	ldd	r18, Y+22	; 0x16
    361c:	3f 89       	ldd	r19, Y+23	; 0x17
    361e:	22 30       	cpi	r18, 0x02	; 2
    3620:	31 05       	cpc	r19, r1
    3622:	09 f4       	brne	.+2      	; 0x3626 <SevenSegment_Display+0x30e>
    3624:	4e c0       	rjmp	.+156    	; 0x36c2 <SevenSegment_Display+0x3aa>
    3626:	8e 89       	ldd	r24, Y+22	; 0x16
    3628:	9f 89       	ldd	r25, Y+23	; 0x17
    362a:	83 30       	cpi	r24, 0x03	; 3
    362c:	91 05       	cpc	r25, r1
    362e:	09 f4       	brne	.+2      	; 0x3632 <SevenSegment_Display+0x31a>
    3630:	5b c0       	rjmp	.+182    	; 0x36e8 <SevenSegment_Display+0x3d0>
    3632:	d5 c0       	rjmp	.+426    	; 0x37de <SevenSegment_Display+0x4c6>
    3634:	2e 89       	ldd	r18, Y+22	; 0x16
    3636:	3f 89       	ldd	r19, Y+23	; 0x17
    3638:	27 30       	cpi	r18, 0x07	; 7
    363a:	31 05       	cpc	r19, r1
    363c:	09 f4       	brne	.+2      	; 0x3640 <SevenSegment_Display+0x328>
    363e:	a0 c0       	rjmp	.+320    	; 0x3780 <SevenSegment_Display+0x468>
    3640:	8e 89       	ldd	r24, Y+22	; 0x16
    3642:	9f 89       	ldd	r25, Y+23	; 0x17
    3644:	88 30       	cpi	r24, 0x08	; 8
    3646:	91 05       	cpc	r25, r1
    3648:	6c f4       	brge	.+26     	; 0x3664 <SevenSegment_Display+0x34c>
    364a:	2e 89       	ldd	r18, Y+22	; 0x16
    364c:	3f 89       	ldd	r19, Y+23	; 0x17
    364e:	25 30       	cpi	r18, 0x05	; 5
    3650:	31 05       	cpc	r19, r1
    3652:	09 f4       	brne	.+2      	; 0x3656 <SevenSegment_Display+0x33e>
    3654:	74 c0       	rjmp	.+232    	; 0x373e <SevenSegment_Display+0x426>
    3656:	8e 89       	ldd	r24, Y+22	; 0x16
    3658:	9f 89       	ldd	r25, Y+23	; 0x17
    365a:	86 30       	cpi	r24, 0x06	; 6
    365c:	91 05       	cpc	r25, r1
    365e:	09 f4       	brne	.+2      	; 0x3662 <SevenSegment_Display+0x34a>
    3660:	81 c0       	rjmp	.+258    	; 0x3764 <SevenSegment_Display+0x44c>
    3662:	bd c0       	rjmp	.+378    	; 0x37de <SevenSegment_Display+0x4c6>
    3664:	2e 89       	ldd	r18, Y+22	; 0x16
    3666:	3f 89       	ldd	r19, Y+23	; 0x17
    3668:	28 30       	cpi	r18, 0x08	; 8
    366a:	31 05       	cpc	r19, r1
    366c:	09 f4       	brne	.+2      	; 0x3670 <SevenSegment_Display+0x358>
    366e:	a0 c0       	rjmp	.+320    	; 0x37b0 <SevenSegment_Display+0x498>
    3670:	8e 89       	ldd	r24, Y+22	; 0x16
    3672:	9f 89       	ldd	r25, Y+23	; 0x17
    3674:	89 30       	cpi	r24, 0x09	; 9
    3676:	91 05       	cpc	r25, r1
    3678:	09 f4       	brne	.+2      	; 0x367c <SevenSegment_Display+0x364>
    367a:	a3 c0       	rjmp	.+326    	; 0x37c2 <SevenSegment_Display+0x4aa>
    367c:	b0 c0       	rjmp	.+352    	; 0x37de <SevenSegment_Display+0x4c6>
					{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	6f ef       	ldi	r22, 0xFF	; 255
    3682:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_HIGH);
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	66 e0       	ldi	r22, 0x06	; 6
    3692:	41 e0       	ldi	r20, 0x01	; 1
    3694:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3698:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	6f ef       	ldi	r22, 0xFF	; 255
    36a0:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	6f ef       	ldi	r22, 0xFF	; 255
    36a8:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	61 e0       	ldi	r22, 0x01	; 1
    36b0:	40 e0       	ldi	r20, 0x00	; 0
    36b2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	62 e0       	ldi	r22, 0x02	; 2
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    36c0:	12 c7       	rjmp	.+3620   	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	6f ef       	ldi	r22, 0xFF	; 255
    36c6:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	60 e0       	ldi	r22, 0x00	; 0
    36ce:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	62 e0       	ldi	r22, 0x02	; 2
    36d6:	41 e0       	ldi	r20, 0x01	; 1
    36d8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	65 e0       	ldi	r22, 0x05	; 5
    36e0:	41 e0       	ldi	r20, 0x01	; 1
    36e2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    36e6:	ff c6       	rjmp	.+3582   	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	6f ef       	ldi	r22, 0xFF	; 255
    36ec:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	60 e0       	ldi	r22, 0x00	; 0
    36f4:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	64 e0       	ldi	r22, 0x04	; 4
    36fc:	41 e0       	ldi	r20, 0x01	; 1
    36fe:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	65 e0       	ldi	r22, 0x05	; 5
    3706:	41 e0       	ldi	r20, 0x01	; 1
    3708:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    370c:	ec c6       	rjmp	.+3544   	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	6f ef       	ldi	r22, 0xFF	; 255
    3712:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	60 e0       	ldi	r22, 0x00	; 0
    371a:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	60 e0       	ldi	r22, 0x00	; 0
    3722:	41 e0       	ldi	r20, 0x01	; 1
    3724:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_HIGH);
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	63 e0       	ldi	r22, 0x03	; 3
    372c:	41 e0       	ldi	r20, 0x01	; 1
    372e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	64 e0       	ldi	r22, 0x04	; 4
    3736:	41 e0       	ldi	r20, 0x01	; 1
    3738:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    373c:	d4 c6       	rjmp	.+3496   	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	6f ef       	ldi	r22, 0xFF	; 255
    3742:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	61 e0       	ldi	r22, 0x01	; 1
    3752:	41 e0       	ldi	r20, 0x01	; 1
    3754:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	64 e0       	ldi	r22, 0x04	; 4
    375c:	41 e0       	ldi	r20, 0x01	; 1
    375e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3762:	c1 c6       	rjmp	.+3458   	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	6f ef       	ldi	r22, 0xFF	; 255
    3768:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	60 e0       	ldi	r22, 0x00	; 0
    3770:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	61 e0       	ldi	r22, 0x01	; 1
    3778:	41 e0       	ldi	r20, 0x01	; 1
    377a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    377e:	b3 c6       	rjmp	.+3430   	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	6f ef       	ldi	r22, 0xFF	; 255
    3784:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	6f ef       	ldi	r22, 0xFF	; 255
    378c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	60 e0       	ldi	r22, 0x00	; 0
    3794:	40 e0       	ldi	r20, 0x00	; 0
    3796:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	61 e0       	ldi	r22, 0x01	; 1
    379e:	40 e0       	ldi	r20, 0x00	; 0
    37a0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	62 e0       	ldi	r22, 0x02	; 2
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    37ae:	9b c6       	rjmp	.+3382   	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	6f ef       	ldi	r22, 0xFF	; 255
    37b4:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	60 e0       	ldi	r22, 0x00	; 0
    37bc:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
    37c0:	92 c6       	rjmp	.+3364   	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	6f ef       	ldi	r22, 0xFF	; 255
    37c6:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	64 e0       	ldi	r22, 0x04	; 4
    37d6:	41 e0       	ldi	r20, 0x01	; 1
    37d8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    37dc:	84 c6       	rjmp	.+3336   	; 0x44e6 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    37de:	18 8e       	std	Y+24, r1	; 0x18
    37e0:	84 c6       	rjmp	.+3336   	; 0x44ea <SevenSegment_Display+0x11d2>
					}
			break;
			default:
			return E_OK;
    37e2:	18 8e       	std	Y+24, r1	; 0x18
    37e4:	82 c6       	rjmp	.+3332   	; 0x44ea <SevenSegment_Display+0x11d2>
		}
		break;
		case DIO_PORTB:
			switch(TYPE)
    37e6:	8a 81       	ldd	r24, Y+2	; 0x02
    37e8:	28 2f       	mov	r18, r24
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	3d 8b       	std	Y+21, r19	; 0x15
    37ee:	2c 8b       	std	Y+20, r18	; 0x14
    37f0:	8c 89       	ldd	r24, Y+20	; 0x14
    37f2:	9d 89       	ldd	r25, Y+21	; 0x15
    37f4:	00 97       	sbiw	r24, 0x00	; 0
    37f6:	39 f0       	breq	.+14     	; 0x3806 <SevenSegment_Display+0x4ee>
    37f8:	2c 89       	ldd	r18, Y+20	; 0x14
    37fa:	3d 89       	ldd	r19, Y+21	; 0x15
    37fc:	21 30       	cpi	r18, 0x01	; 1
    37fe:	31 05       	cpc	r19, r1
    3800:	09 f4       	brne	.+2      	; 0x3804 <SevenSegment_Display+0x4ec>
    3802:	0d c1       	rjmp	.+538    	; 0x3a1e <SevenSegment_Display+0x706>
    3804:	18 c2       	rjmp	.+1072   	; 0x3c36 <SevenSegment_Display+0x91e>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	6f ef       	ldi	r22, 0xFF	; 255
    380a:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_LOW);
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	67 e0       	ldi	r22, 0x07	; 7
    3812:	40 e0       	ldi	r20, 0x00	; 0
    3814:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						switch(NUM)
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	28 2f       	mov	r18, r24
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	3b 8b       	std	Y+19, r19	; 0x13
    3820:	2a 8b       	std	Y+18, r18	; 0x12
    3822:	8a 89       	ldd	r24, Y+18	; 0x12
    3824:	9b 89       	ldd	r25, Y+19	; 0x13
    3826:	84 30       	cpi	r24, 0x04	; 4
    3828:	91 05       	cpc	r25, r1
    382a:	09 f4       	brne	.+2      	; 0x382e <SevenSegment_Display+0x516>
    382c:	8e c0       	rjmp	.+284    	; 0x394a <SevenSegment_Display+0x632>
    382e:	2a 89       	ldd	r18, Y+18	; 0x12
    3830:	3b 89       	ldd	r19, Y+19	; 0x13
    3832:	25 30       	cpi	r18, 0x05	; 5
    3834:	31 05       	cpc	r19, r1
    3836:	ec f4       	brge	.+58     	; 0x3872 <SevenSegment_Display+0x55a>
    3838:	8a 89       	ldd	r24, Y+18	; 0x12
    383a:	9b 89       	ldd	r25, Y+19	; 0x13
    383c:	81 30       	cpi	r24, 0x01	; 1
    383e:	91 05       	cpc	r25, r1
    3840:	09 f4       	brne	.+2      	; 0x3844 <SevenSegment_Display+0x52c>
    3842:	4a c0       	rjmp	.+148    	; 0x38d8 <SevenSegment_Display+0x5c0>
    3844:	2a 89       	ldd	r18, Y+18	; 0x12
    3846:	3b 89       	ldd	r19, Y+19	; 0x13
    3848:	22 30       	cpi	r18, 0x02	; 2
    384a:	31 05       	cpc	r19, r1
    384c:	2c f4       	brge	.+10     	; 0x3858 <SevenSegment_Display+0x540>
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	9b 89       	ldd	r25, Y+19	; 0x13
    3852:	00 97       	sbiw	r24, 0x00	; 0
    3854:	99 f1       	breq	.+102    	; 0x38bc <SevenSegment_Display+0x5a4>
    3856:	e1 c0       	rjmp	.+450    	; 0x3a1a <SevenSegment_Display+0x702>
    3858:	2a 89       	ldd	r18, Y+18	; 0x12
    385a:	3b 89       	ldd	r19, Y+19	; 0x13
    385c:	22 30       	cpi	r18, 0x02	; 2
    385e:	31 05       	cpc	r19, r1
    3860:	09 f4       	brne	.+2      	; 0x3864 <SevenSegment_Display+0x54c>
    3862:	4d c0       	rjmp	.+154    	; 0x38fe <SevenSegment_Display+0x5e6>
    3864:	8a 89       	ldd	r24, Y+18	; 0x12
    3866:	9b 89       	ldd	r25, Y+19	; 0x13
    3868:	83 30       	cpi	r24, 0x03	; 3
    386a:	91 05       	cpc	r25, r1
    386c:	09 f4       	brne	.+2      	; 0x3870 <SevenSegment_Display+0x558>
    386e:	5a c0       	rjmp	.+180    	; 0x3924 <SevenSegment_Display+0x60c>
    3870:	d4 c0       	rjmp	.+424    	; 0x3a1a <SevenSegment_Display+0x702>
    3872:	2a 89       	ldd	r18, Y+18	; 0x12
    3874:	3b 89       	ldd	r19, Y+19	; 0x13
    3876:	27 30       	cpi	r18, 0x07	; 7
    3878:	31 05       	cpc	r19, r1
    387a:	09 f4       	brne	.+2      	; 0x387e <SevenSegment_Display+0x566>
    387c:	9f c0       	rjmp	.+318    	; 0x39bc <SevenSegment_Display+0x6a4>
    387e:	8a 89       	ldd	r24, Y+18	; 0x12
    3880:	9b 89       	ldd	r25, Y+19	; 0x13
    3882:	88 30       	cpi	r24, 0x08	; 8
    3884:	91 05       	cpc	r25, r1
    3886:	6c f4       	brge	.+26     	; 0x38a2 <SevenSegment_Display+0x58a>
    3888:	2a 89       	ldd	r18, Y+18	; 0x12
    388a:	3b 89       	ldd	r19, Y+19	; 0x13
    388c:	25 30       	cpi	r18, 0x05	; 5
    388e:	31 05       	cpc	r19, r1
    3890:	09 f4       	brne	.+2      	; 0x3894 <SevenSegment_Display+0x57c>
    3892:	73 c0       	rjmp	.+230    	; 0x397a <SevenSegment_Display+0x662>
    3894:	8a 89       	ldd	r24, Y+18	; 0x12
    3896:	9b 89       	ldd	r25, Y+19	; 0x13
    3898:	86 30       	cpi	r24, 0x06	; 6
    389a:	91 05       	cpc	r25, r1
    389c:	09 f4       	brne	.+2      	; 0x38a0 <SevenSegment_Display+0x588>
    389e:	80 c0       	rjmp	.+256    	; 0x39a0 <SevenSegment_Display+0x688>
    38a0:	bc c0       	rjmp	.+376    	; 0x3a1a <SevenSegment_Display+0x702>
    38a2:	2a 89       	ldd	r18, Y+18	; 0x12
    38a4:	3b 89       	ldd	r19, Y+19	; 0x13
    38a6:	28 30       	cpi	r18, 0x08	; 8
    38a8:	31 05       	cpc	r19, r1
    38aa:	09 f4       	brne	.+2      	; 0x38ae <SevenSegment_Display+0x596>
    38ac:	9f c0       	rjmp	.+318    	; 0x39ec <SevenSegment_Display+0x6d4>
    38ae:	8a 89       	ldd	r24, Y+18	; 0x12
    38b0:	9b 89       	ldd	r25, Y+19	; 0x13
    38b2:	89 30       	cpi	r24, 0x09	; 9
    38b4:	91 05       	cpc	r25, r1
    38b6:	09 f4       	brne	.+2      	; 0x38ba <SevenSegment_Display+0x5a2>
    38b8:	a2 c0       	rjmp	.+324    	; 0x39fe <SevenSegment_Display+0x6e6>
    38ba:	af c0       	rjmp	.+350    	; 0x3a1a <SevenSegment_Display+0x702>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	6f ef       	ldi	r22, 0xFF	; 255
    38c0:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	6f ef       	ldi	r22, 0xFF	; 255
    38c8:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_LOW);
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	66 e0       	ldi	r22, 0x06	; 6
    38d0:	40 e0       	ldi	r20, 0x00	; 0
    38d2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    38d6:	07 c6       	rjmp	.+3086   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	6f ef       	ldi	r22, 0xFF	; 255
    38dc:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	61 e0       	ldi	r22, 0x01	; 1
    38ec:	41 e0       	ldi	r20, 0x01	; 1
    38ee:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	62 e0       	ldi	r22, 0x02	; 2
    38f6:	41 e0       	ldi	r20, 0x01	; 1
    38f8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    38fc:	f4 c5       	rjmp	.+3048   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	6f ef       	ldi	r22, 0xFF	; 255
    3902:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	6f ef       	ldi	r22, 0xFF	; 255
    390a:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	62 e0       	ldi	r22, 0x02	; 2
    3912:	40 e0       	ldi	r20, 0x00	; 0
    3914:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	65 e0       	ldi	r22, 0x05	; 5
    391c:	40 e0       	ldi	r20, 0x00	; 0
    391e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3922:	e1 c5       	rjmp	.+3010   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	6f ef       	ldi	r22, 0xFF	; 255
    3928:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	6f ef       	ldi	r22, 0xFF	; 255
    3930:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	64 e0       	ldi	r22, 0x04	; 4
    3938:	40 e0       	ldi	r20, 0x00	; 0
    393a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	65 e0       	ldi	r22, 0x05	; 5
    3942:	40 e0       	ldi	r20, 0x00	; 0
    3944:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3948:	ce c5       	rjmp	.+2972   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	6f ef       	ldi	r22, 0xFF	; 255
    394e:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	6f ef       	ldi	r22, 0xFF	; 255
    3956:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_LOW);
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	63 e0       	ldi	r22, 0x03	; 3
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	64 e0       	ldi	r22, 0x04	; 4
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3978:	b6 c5       	rjmp	.+2924   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	6f ef       	ldi	r22, 0xFF	; 255
    397e:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	6f ef       	ldi	r22, 0xFF	; 255
    3986:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	61 e0       	ldi	r22, 0x01	; 1
    398e:	40 e0       	ldi	r20, 0x00	; 0
    3990:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	64 e0       	ldi	r22, 0x04	; 4
    3998:	40 e0       	ldi	r20, 0x00	; 0
    399a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    399e:	a3 c5       	rjmp	.+2886   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	6f ef       	ldi	r22, 0xFF	; 255
    39a4:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	6f ef       	ldi	r22, 0xFF	; 255
    39ac:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	61 e0       	ldi	r22, 0x01	; 1
    39b4:	40 e0       	ldi	r20, 0x00	; 0
    39b6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    39ba:	95 c5       	rjmp	.+2858   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	6f ef       	ldi	r22, 0xFF	; 255
    39c0:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	60 e0       	ldi	r22, 0x00	; 0
    39d0:	41 e0       	ldi	r20, 0x01	; 1
    39d2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	61 e0       	ldi	r22, 0x01	; 1
    39da:	41 e0       	ldi	r20, 0x01	; 1
    39dc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	62 e0       	ldi	r22, 0x02	; 2
    39e4:	41 e0       	ldi	r20, 0x01	; 1
    39e6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    39ea:	7d c5       	rjmp	.+2810   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	6f ef       	ldi	r22, 0xFF	; 255
    39f0:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	6f ef       	ldi	r22, 0xFF	; 255
    39f8:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
    39fc:	74 c5       	rjmp	.+2792   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	6f ef       	ldi	r22, 0xFF	; 255
    3a02:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	6f ef       	ldi	r22, 0xFF	; 255
    3a0a:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	64 e0       	ldi	r22, 0x04	; 4
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3a18:	66 c5       	rjmp	.+2764   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3a1a:	18 8e       	std	Y+24, r1	; 0x18
    3a1c:	66 c5       	rjmp	.+2764   	; 0x44ea <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	6f ef       	ldi	r22, 0xFF	; 255
    3a22:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_HIGH);
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	67 e0       	ldi	r22, 0x07	; 7
    3a2a:	41 e0       	ldi	r20, 0x01	; 1
    3a2c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
					switch(NUM)
    3a30:	8b 81       	ldd	r24, Y+3	; 0x03
    3a32:	28 2f       	mov	r18, r24
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	39 8b       	std	Y+17, r19	; 0x11
    3a38:	28 8b       	std	Y+16, r18	; 0x10
    3a3a:	88 89       	ldd	r24, Y+16	; 0x10
    3a3c:	99 89       	ldd	r25, Y+17	; 0x11
    3a3e:	84 30       	cpi	r24, 0x04	; 4
    3a40:	91 05       	cpc	r25, r1
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <SevenSegment_Display+0x72e>
    3a44:	8e c0       	rjmp	.+284    	; 0x3b62 <SevenSegment_Display+0x84a>
    3a46:	28 89       	ldd	r18, Y+16	; 0x10
    3a48:	39 89       	ldd	r19, Y+17	; 0x11
    3a4a:	25 30       	cpi	r18, 0x05	; 5
    3a4c:	31 05       	cpc	r19, r1
    3a4e:	ec f4       	brge	.+58     	; 0x3a8a <SevenSegment_Display+0x772>
    3a50:	88 89       	ldd	r24, Y+16	; 0x10
    3a52:	99 89       	ldd	r25, Y+17	; 0x11
    3a54:	81 30       	cpi	r24, 0x01	; 1
    3a56:	91 05       	cpc	r25, r1
    3a58:	09 f4       	brne	.+2      	; 0x3a5c <SevenSegment_Display+0x744>
    3a5a:	4a c0       	rjmp	.+148    	; 0x3af0 <SevenSegment_Display+0x7d8>
    3a5c:	28 89       	ldd	r18, Y+16	; 0x10
    3a5e:	39 89       	ldd	r19, Y+17	; 0x11
    3a60:	22 30       	cpi	r18, 0x02	; 2
    3a62:	31 05       	cpc	r19, r1
    3a64:	2c f4       	brge	.+10     	; 0x3a70 <SevenSegment_Display+0x758>
    3a66:	88 89       	ldd	r24, Y+16	; 0x10
    3a68:	99 89       	ldd	r25, Y+17	; 0x11
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	99 f1       	breq	.+102    	; 0x3ad4 <SevenSegment_Display+0x7bc>
    3a6e:	e1 c0       	rjmp	.+450    	; 0x3c32 <SevenSegment_Display+0x91a>
    3a70:	28 89       	ldd	r18, Y+16	; 0x10
    3a72:	39 89       	ldd	r19, Y+17	; 0x11
    3a74:	22 30       	cpi	r18, 0x02	; 2
    3a76:	31 05       	cpc	r19, r1
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <SevenSegment_Display+0x764>
    3a7a:	4d c0       	rjmp	.+154    	; 0x3b16 <SevenSegment_Display+0x7fe>
    3a7c:	88 89       	ldd	r24, Y+16	; 0x10
    3a7e:	99 89       	ldd	r25, Y+17	; 0x11
    3a80:	83 30       	cpi	r24, 0x03	; 3
    3a82:	91 05       	cpc	r25, r1
    3a84:	09 f4       	brne	.+2      	; 0x3a88 <SevenSegment_Display+0x770>
    3a86:	5a c0       	rjmp	.+180    	; 0x3b3c <SevenSegment_Display+0x824>
    3a88:	d4 c0       	rjmp	.+424    	; 0x3c32 <SevenSegment_Display+0x91a>
    3a8a:	28 89       	ldd	r18, Y+16	; 0x10
    3a8c:	39 89       	ldd	r19, Y+17	; 0x11
    3a8e:	27 30       	cpi	r18, 0x07	; 7
    3a90:	31 05       	cpc	r19, r1
    3a92:	09 f4       	brne	.+2      	; 0x3a96 <SevenSegment_Display+0x77e>
    3a94:	9f c0       	rjmp	.+318    	; 0x3bd4 <SevenSegment_Display+0x8bc>
    3a96:	88 89       	ldd	r24, Y+16	; 0x10
    3a98:	99 89       	ldd	r25, Y+17	; 0x11
    3a9a:	88 30       	cpi	r24, 0x08	; 8
    3a9c:	91 05       	cpc	r25, r1
    3a9e:	6c f4       	brge	.+26     	; 0x3aba <SevenSegment_Display+0x7a2>
    3aa0:	28 89       	ldd	r18, Y+16	; 0x10
    3aa2:	39 89       	ldd	r19, Y+17	; 0x11
    3aa4:	25 30       	cpi	r18, 0x05	; 5
    3aa6:	31 05       	cpc	r19, r1
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <SevenSegment_Display+0x794>
    3aaa:	73 c0       	rjmp	.+230    	; 0x3b92 <SevenSegment_Display+0x87a>
    3aac:	88 89       	ldd	r24, Y+16	; 0x10
    3aae:	99 89       	ldd	r25, Y+17	; 0x11
    3ab0:	86 30       	cpi	r24, 0x06	; 6
    3ab2:	91 05       	cpc	r25, r1
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <SevenSegment_Display+0x7a0>
    3ab6:	80 c0       	rjmp	.+256    	; 0x3bb8 <SevenSegment_Display+0x8a0>
    3ab8:	bc c0       	rjmp	.+376    	; 0x3c32 <SevenSegment_Display+0x91a>
    3aba:	28 89       	ldd	r18, Y+16	; 0x10
    3abc:	39 89       	ldd	r19, Y+17	; 0x11
    3abe:	28 30       	cpi	r18, 0x08	; 8
    3ac0:	31 05       	cpc	r19, r1
    3ac2:	09 f4       	brne	.+2      	; 0x3ac6 <SevenSegment_Display+0x7ae>
    3ac4:	9f c0       	rjmp	.+318    	; 0x3c04 <SevenSegment_Display+0x8ec>
    3ac6:	88 89       	ldd	r24, Y+16	; 0x10
    3ac8:	99 89       	ldd	r25, Y+17	; 0x11
    3aca:	89 30       	cpi	r24, 0x09	; 9
    3acc:	91 05       	cpc	r25, r1
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <SevenSegment_Display+0x7ba>
    3ad0:	a2 c0       	rjmp	.+324    	; 0x3c16 <SevenSegment_Display+0x8fe>
    3ad2:	af c0       	rjmp	.+350    	; 0x3c32 <SevenSegment_Display+0x91a>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	6f ef       	ldi	r22, 0xFF	; 255
    3ad8:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_HIGH);
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	66 e0       	ldi	r22, 0x06	; 6
    3ae8:	41 e0       	ldi	r20, 0x01	; 1
    3aea:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3aee:	fb c4       	rjmp	.+2550   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	6f ef       	ldi	r22, 0xFF	; 255
    3af4:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	6f ef       	ldi	r22, 0xFF	; 255
    3afc:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	61 e0       	ldi	r22, 0x01	; 1
    3b04:	40 e0       	ldi	r20, 0x00	; 0
    3b06:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	62 e0       	ldi	r22, 0x02	; 2
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3b14:	e8 c4       	rjmp	.+2512   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	6f ef       	ldi	r22, 0xFF	; 255
    3b1a:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	60 e0       	ldi	r22, 0x00	; 0
    3b22:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	62 e0       	ldi	r22, 0x02	; 2
    3b2a:	41 e0       	ldi	r20, 0x01	; 1
    3b2c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	65 e0       	ldi	r22, 0x05	; 5
    3b34:	41 e0       	ldi	r20, 0x01	; 1
    3b36:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3b3a:	d5 c4       	rjmp	.+2474   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	6f ef       	ldi	r22, 0xFF	; 255
    3b40:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	60 e0       	ldi	r22, 0x00	; 0
    3b48:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	64 e0       	ldi	r22, 0x04	; 4
    3b50:	41 e0       	ldi	r20, 0x01	; 1
    3b52:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	65 e0       	ldi	r22, 0x05	; 5
    3b5a:	41 e0       	ldi	r20, 0x01	; 1
    3b5c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3b60:	c2 c4       	rjmp	.+2436   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	6f ef       	ldi	r22, 0xFF	; 255
    3b66:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	60 e0       	ldi	r22, 0x00	; 0
    3b6e:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	41 e0       	ldi	r20, 0x01	; 1
    3b78:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_HIGH);
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	63 e0       	ldi	r22, 0x03	; 3
    3b80:	41 e0       	ldi	r20, 0x01	; 1
    3b82:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	64 e0       	ldi	r22, 0x04	; 4
    3b8a:	41 e0       	ldi	r20, 0x01	; 1
    3b8c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3b90:	aa c4       	rjmp	.+2388   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	6f ef       	ldi	r22, 0xFF	; 255
    3b96:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	60 e0       	ldi	r22, 0x00	; 0
    3b9e:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	61 e0       	ldi	r22, 0x01	; 1
    3ba6:	41 e0       	ldi	r20, 0x01	; 1
    3ba8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	64 e0       	ldi	r22, 0x04	; 4
    3bb0:	41 e0       	ldi	r20, 0x01	; 1
    3bb2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3bb6:	97 c4       	rjmp	.+2350   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	6f ef       	ldi	r22, 0xFF	; 255
    3bbc:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	60 e0       	ldi	r22, 0x00	; 0
    3bc4:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	61 e0       	ldi	r22, 0x01	; 1
    3bcc:	41 e0       	ldi	r20, 0x01	; 1
    3bce:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3bd2:	89 c4       	rjmp	.+2322   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	6f ef       	ldi	r22, 0xFF	; 255
    3bd8:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	6f ef       	ldi	r22, 0xFF	; 255
    3be0:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	60 e0       	ldi	r22, 0x00	; 0
    3be8:	40 e0       	ldi	r20, 0x00	; 0
    3bea:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	61 e0       	ldi	r22, 0x01	; 1
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	62 e0       	ldi	r22, 0x02	; 2
    3bfc:	40 e0       	ldi	r20, 0x00	; 0
    3bfe:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3c02:	71 c4       	rjmp	.+2274   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	6f ef       	ldi	r22, 0xFF	; 255
    3c08:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
    3c14:	68 c4       	rjmp	.+2256   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	6f ef       	ldi	r22, 0xFF	; 255
    3c1a:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	60 e0       	ldi	r22, 0x00	; 0
    3c22:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	64 e0       	ldi	r22, 0x04	; 4
    3c2a:	41 e0       	ldi	r20, 0x01	; 1
    3c2c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3c30:	5a c4       	rjmp	.+2228   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3c32:	18 8e       	std	Y+24, r1	; 0x18
    3c34:	5a c4       	rjmp	.+2228   	; 0x44ea <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    3c36:	18 8e       	std	Y+24, r1	; 0x18
    3c38:	58 c4       	rjmp	.+2224   	; 0x44ea <SevenSegment_Display+0x11d2>
			}
			break;
		case DIO_PORTC:
			switch(TYPE)
    3c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3c:	28 2f       	mov	r18, r24
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	3f 87       	std	Y+15, r19	; 0x0f
    3c42:	2e 87       	std	Y+14, r18	; 0x0e
    3c44:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c46:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c48:	00 97       	sbiw	r24, 0x00	; 0
    3c4a:	39 f0       	breq	.+14     	; 0x3c5a <SevenSegment_Display+0x942>
    3c4c:	2e 85       	ldd	r18, Y+14	; 0x0e
    3c4e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3c50:	21 30       	cpi	r18, 0x01	; 1
    3c52:	31 05       	cpc	r19, r1
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <SevenSegment_Display+0x940>
    3c56:	0d c1       	rjmp	.+538    	; 0x3e72 <SevenSegment_Display+0xb5a>
    3c58:	18 c2       	rjmp	.+1072   	; 0x408a <SevenSegment_Display+0xd72>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3c5a:	82 e0       	ldi	r24, 0x02	; 2
    3c5c:	6f ef       	ldi	r22, 0xFF	; 255
    3c5e:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_LOW);
    3c62:	82 e0       	ldi	r24, 0x02	; 2
    3c64:	67 e0       	ldi	r22, 0x07	; 7
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						switch(NUM)
    3c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6e:	28 2f       	mov	r18, r24
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	3d 87       	std	Y+13, r19	; 0x0d
    3c74:	2c 87       	std	Y+12, r18	; 0x0c
    3c76:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c78:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c7a:	84 30       	cpi	r24, 0x04	; 4
    3c7c:	91 05       	cpc	r25, r1
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <SevenSegment_Display+0x96a>
    3c80:	8e c0       	rjmp	.+284    	; 0x3d9e <SevenSegment_Display+0xa86>
    3c82:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c84:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c86:	25 30       	cpi	r18, 0x05	; 5
    3c88:	31 05       	cpc	r19, r1
    3c8a:	ec f4       	brge	.+58     	; 0x3cc6 <SevenSegment_Display+0x9ae>
    3c8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c90:	81 30       	cpi	r24, 0x01	; 1
    3c92:	91 05       	cpc	r25, r1
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <SevenSegment_Display+0x980>
    3c96:	4a c0       	rjmp	.+148    	; 0x3d2c <SevenSegment_Display+0xa14>
    3c98:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c9a:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c9c:	22 30       	cpi	r18, 0x02	; 2
    3c9e:	31 05       	cpc	r19, r1
    3ca0:	2c f4       	brge	.+10     	; 0x3cac <SevenSegment_Display+0x994>
    3ca2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ca4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ca6:	00 97       	sbiw	r24, 0x00	; 0
    3ca8:	99 f1       	breq	.+102    	; 0x3d10 <SevenSegment_Display+0x9f8>
    3caa:	e1 c0       	rjmp	.+450    	; 0x3e6e <SevenSegment_Display+0xb56>
    3cac:	2c 85       	ldd	r18, Y+12	; 0x0c
    3cae:	3d 85       	ldd	r19, Y+13	; 0x0d
    3cb0:	22 30       	cpi	r18, 0x02	; 2
    3cb2:	31 05       	cpc	r19, r1
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <SevenSegment_Display+0x9a0>
    3cb6:	4d c0       	rjmp	.+154    	; 0x3d52 <SevenSegment_Display+0xa3a>
    3cb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cba:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cbc:	83 30       	cpi	r24, 0x03	; 3
    3cbe:	91 05       	cpc	r25, r1
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <SevenSegment_Display+0x9ac>
    3cc2:	5a c0       	rjmp	.+180    	; 0x3d78 <SevenSegment_Display+0xa60>
    3cc4:	d4 c0       	rjmp	.+424    	; 0x3e6e <SevenSegment_Display+0xb56>
    3cc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    3cc8:	3d 85       	ldd	r19, Y+13	; 0x0d
    3cca:	27 30       	cpi	r18, 0x07	; 7
    3ccc:	31 05       	cpc	r19, r1
    3cce:	09 f4       	brne	.+2      	; 0x3cd2 <SevenSegment_Display+0x9ba>
    3cd0:	9f c0       	rjmp	.+318    	; 0x3e10 <SevenSegment_Display+0xaf8>
    3cd2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cd4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cd6:	88 30       	cpi	r24, 0x08	; 8
    3cd8:	91 05       	cpc	r25, r1
    3cda:	6c f4       	brge	.+26     	; 0x3cf6 <SevenSegment_Display+0x9de>
    3cdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    3cde:	3d 85       	ldd	r19, Y+13	; 0x0d
    3ce0:	25 30       	cpi	r18, 0x05	; 5
    3ce2:	31 05       	cpc	r19, r1
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <SevenSegment_Display+0x9d0>
    3ce6:	73 c0       	rjmp	.+230    	; 0x3dce <SevenSegment_Display+0xab6>
    3ce8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cea:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cec:	86 30       	cpi	r24, 0x06	; 6
    3cee:	91 05       	cpc	r25, r1
    3cf0:	09 f4       	brne	.+2      	; 0x3cf4 <SevenSegment_Display+0x9dc>
    3cf2:	80 c0       	rjmp	.+256    	; 0x3df4 <SevenSegment_Display+0xadc>
    3cf4:	bc c0       	rjmp	.+376    	; 0x3e6e <SevenSegment_Display+0xb56>
    3cf6:	2c 85       	ldd	r18, Y+12	; 0x0c
    3cf8:	3d 85       	ldd	r19, Y+13	; 0x0d
    3cfa:	28 30       	cpi	r18, 0x08	; 8
    3cfc:	31 05       	cpc	r19, r1
    3cfe:	09 f4       	brne	.+2      	; 0x3d02 <SevenSegment_Display+0x9ea>
    3d00:	9f c0       	rjmp	.+318    	; 0x3e40 <SevenSegment_Display+0xb28>
    3d02:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d04:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d06:	89 30       	cpi	r24, 0x09	; 9
    3d08:	91 05       	cpc	r25, r1
    3d0a:	09 f4       	brne	.+2      	; 0x3d0e <SevenSegment_Display+0x9f6>
    3d0c:	a2 c0       	rjmp	.+324    	; 0x3e52 <SevenSegment_Display+0xb3a>
    3d0e:	af c0       	rjmp	.+350    	; 0x3e6e <SevenSegment_Display+0xb56>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3d10:	82 e0       	ldi	r24, 0x02	; 2
    3d12:	6f ef       	ldi	r22, 0xFF	; 255
    3d14:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3d18:	82 e0       	ldi	r24, 0x02	; 2
    3d1a:	6f ef       	ldi	r22, 0xFF	; 255
    3d1c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_LOW);
    3d20:	82 e0       	ldi	r24, 0x02	; 2
    3d22:	66 e0       	ldi	r22, 0x06	; 6
    3d24:	40 e0       	ldi	r20, 0x00	; 0
    3d26:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3d2a:	dd c3       	rjmp	.+1978   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3d2c:	82 e0       	ldi	r24, 0x02	; 2
    3d2e:	6f ef       	ldi	r22, 0xFF	; 255
    3d30:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3d34:	82 e0       	ldi	r24, 0x02	; 2
    3d36:	60 e0       	ldi	r22, 0x00	; 0
    3d38:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3d3c:	82 e0       	ldi	r24, 0x02	; 2
    3d3e:	61 e0       	ldi	r22, 0x01	; 1
    3d40:	41 e0       	ldi	r20, 0x01	; 1
    3d42:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3d46:	82 e0       	ldi	r24, 0x02	; 2
    3d48:	62 e0       	ldi	r22, 0x02	; 2
    3d4a:	41 e0       	ldi	r20, 0x01	; 1
    3d4c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3d50:	ca c3       	rjmp	.+1940   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3d52:	82 e0       	ldi	r24, 0x02	; 2
    3d54:	6f ef       	ldi	r22, 0xFF	; 255
    3d56:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3d5a:	82 e0       	ldi	r24, 0x02	; 2
    3d5c:	6f ef       	ldi	r22, 0xFF	; 255
    3d5e:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3d62:	82 e0       	ldi	r24, 0x02	; 2
    3d64:	62 e0       	ldi	r22, 0x02	; 2
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    3d6c:	82 e0       	ldi	r24, 0x02	; 2
    3d6e:	65 e0       	ldi	r22, 0x05	; 5
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3d76:	b7 c3       	rjmp	.+1902   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3d78:	82 e0       	ldi	r24, 0x02	; 2
    3d7a:	6f ef       	ldi	r22, 0xFF	; 255
    3d7c:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3d80:	82 e0       	ldi	r24, 0x02	; 2
    3d82:	6f ef       	ldi	r22, 0xFF	; 255
    3d84:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3d88:	82 e0       	ldi	r24, 0x02	; 2
    3d8a:	64 e0       	ldi	r22, 0x04	; 4
    3d8c:	40 e0       	ldi	r20, 0x00	; 0
    3d8e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    3d92:	82 e0       	ldi	r24, 0x02	; 2
    3d94:	65 e0       	ldi	r22, 0x05	; 5
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3d9c:	a4 c3       	rjmp	.+1864   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3d9e:	82 e0       	ldi	r24, 0x02	; 2
    3da0:	6f ef       	ldi	r22, 0xFF	; 255
    3da2:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	6f ef       	ldi	r22, 0xFF	; 255
    3daa:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	60 e0       	ldi	r22, 0x00	; 0
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_LOW);
    3db8:	82 e0       	ldi	r24, 0x02	; 2
    3dba:	63 e0       	ldi	r22, 0x03	; 3
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3dc2:	82 e0       	ldi	r24, 0x02	; 2
    3dc4:	64 e0       	ldi	r22, 0x04	; 4
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3dcc:	8c c3       	rjmp	.+1816   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3dce:	82 e0       	ldi	r24, 0x02	; 2
    3dd0:	6f ef       	ldi	r22, 0xFF	; 255
    3dd2:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3dd6:	82 e0       	ldi	r24, 0x02	; 2
    3dd8:	6f ef       	ldi	r22, 0xFF	; 255
    3dda:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    3dde:	82 e0       	ldi	r24, 0x02	; 2
    3de0:	61 e0       	ldi	r22, 0x01	; 1
    3de2:	40 e0       	ldi	r20, 0x00	; 0
    3de4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3de8:	82 e0       	ldi	r24, 0x02	; 2
    3dea:	64 e0       	ldi	r22, 0x04	; 4
    3dec:	40 e0       	ldi	r20, 0x00	; 0
    3dee:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3df2:	79 c3       	rjmp	.+1778   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3df4:	82 e0       	ldi	r24, 0x02	; 2
    3df6:	6f ef       	ldi	r22, 0xFF	; 255
    3df8:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3dfc:	82 e0       	ldi	r24, 0x02	; 2
    3dfe:	6f ef       	ldi	r22, 0xFF	; 255
    3e00:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    3e04:	82 e0       	ldi	r24, 0x02	; 2
    3e06:	61 e0       	ldi	r22, 0x01	; 1
    3e08:	40 e0       	ldi	r20, 0x00	; 0
    3e0a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3e0e:	6b c3       	rjmp	.+1750   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3e10:	82 e0       	ldi	r24, 0x02	; 2
    3e12:	6f ef       	ldi	r22, 0xFF	; 255
    3e14:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3e18:	82 e0       	ldi	r24, 0x02	; 2
    3e1a:	60 e0       	ldi	r22, 0x00	; 0
    3e1c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	41 e0       	ldi	r20, 0x01	; 1
    3e26:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3e2a:	82 e0       	ldi	r24, 0x02	; 2
    3e2c:	61 e0       	ldi	r22, 0x01	; 1
    3e2e:	41 e0       	ldi	r20, 0x01	; 1
    3e30:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3e34:	82 e0       	ldi	r24, 0x02	; 2
    3e36:	62 e0       	ldi	r22, 0x02	; 2
    3e38:	41 e0       	ldi	r20, 0x01	; 1
    3e3a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3e3e:	53 c3       	rjmp	.+1702   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	6f ef       	ldi	r22, 0xFF	; 255
    3e44:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	6f ef       	ldi	r22, 0xFF	; 255
    3e4c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
    3e50:	4a c3       	rjmp	.+1684   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3e52:	82 e0       	ldi	r24, 0x02	; 2
    3e54:	6f ef       	ldi	r22, 0xFF	; 255
    3e56:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3e5a:	82 e0       	ldi	r24, 0x02	; 2
    3e5c:	6f ef       	ldi	r22, 0xFF	; 255
    3e5e:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3e62:	82 e0       	ldi	r24, 0x02	; 2
    3e64:	64 e0       	ldi	r22, 0x04	; 4
    3e66:	40 e0       	ldi	r20, 0x00	; 0
    3e68:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3e6c:	3c c3       	rjmp	.+1656   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3e6e:	18 8e       	std	Y+24, r1	; 0x18
    3e70:	3c c3       	rjmp	.+1656   	; 0x44ea <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3e72:	82 e0       	ldi	r24, 0x02	; 2
    3e74:	6f ef       	ldi	r22, 0xFF	; 255
    3e76:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_HIGH);
    3e7a:	82 e0       	ldi	r24, 0x02	; 2
    3e7c:	67 e0       	ldi	r22, 0x07	; 7
    3e7e:	41 e0       	ldi	r20, 0x01	; 1
    3e80:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
					switch(NUM)
    3e84:	8b 81       	ldd	r24, Y+3	; 0x03
    3e86:	28 2f       	mov	r18, r24
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	3b 87       	std	Y+11, r19	; 0x0b
    3e8c:	2a 87       	std	Y+10, r18	; 0x0a
    3e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e90:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e92:	84 30       	cpi	r24, 0x04	; 4
    3e94:	91 05       	cpc	r25, r1
    3e96:	09 f4       	brne	.+2      	; 0x3e9a <SevenSegment_Display+0xb82>
    3e98:	8e c0       	rjmp	.+284    	; 0x3fb6 <SevenSegment_Display+0xc9e>
    3e9a:	2a 85       	ldd	r18, Y+10	; 0x0a
    3e9c:	3b 85       	ldd	r19, Y+11	; 0x0b
    3e9e:	25 30       	cpi	r18, 0x05	; 5
    3ea0:	31 05       	cpc	r19, r1
    3ea2:	ec f4       	brge	.+58     	; 0x3ede <SevenSegment_Display+0xbc6>
    3ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ea8:	81 30       	cpi	r24, 0x01	; 1
    3eaa:	91 05       	cpc	r25, r1
    3eac:	09 f4       	brne	.+2      	; 0x3eb0 <SevenSegment_Display+0xb98>
    3eae:	4a c0       	rjmp	.+148    	; 0x3f44 <SevenSegment_Display+0xc2c>
    3eb0:	2a 85       	ldd	r18, Y+10	; 0x0a
    3eb2:	3b 85       	ldd	r19, Y+11	; 0x0b
    3eb4:	22 30       	cpi	r18, 0x02	; 2
    3eb6:	31 05       	cpc	r19, r1
    3eb8:	2c f4       	brge	.+10     	; 0x3ec4 <SevenSegment_Display+0xbac>
    3eba:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ebc:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ebe:	00 97       	sbiw	r24, 0x00	; 0
    3ec0:	99 f1       	breq	.+102    	; 0x3f28 <SevenSegment_Display+0xc10>
    3ec2:	e1 c0       	rjmp	.+450    	; 0x4086 <SevenSegment_Display+0xd6e>
    3ec4:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ec6:	3b 85       	ldd	r19, Y+11	; 0x0b
    3ec8:	22 30       	cpi	r18, 0x02	; 2
    3eca:	31 05       	cpc	r19, r1
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <SevenSegment_Display+0xbb8>
    3ece:	4d c0       	rjmp	.+154    	; 0x3f6a <SevenSegment_Display+0xc52>
    3ed0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ed2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ed4:	83 30       	cpi	r24, 0x03	; 3
    3ed6:	91 05       	cpc	r25, r1
    3ed8:	09 f4       	brne	.+2      	; 0x3edc <SevenSegment_Display+0xbc4>
    3eda:	5a c0       	rjmp	.+180    	; 0x3f90 <SevenSegment_Display+0xc78>
    3edc:	d4 c0       	rjmp	.+424    	; 0x4086 <SevenSegment_Display+0xd6e>
    3ede:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ee0:	3b 85       	ldd	r19, Y+11	; 0x0b
    3ee2:	27 30       	cpi	r18, 0x07	; 7
    3ee4:	31 05       	cpc	r19, r1
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <SevenSegment_Display+0xbd2>
    3ee8:	9f c0       	rjmp	.+318    	; 0x4028 <SevenSegment_Display+0xd10>
    3eea:	8a 85       	ldd	r24, Y+10	; 0x0a
    3eec:	9b 85       	ldd	r25, Y+11	; 0x0b
    3eee:	88 30       	cpi	r24, 0x08	; 8
    3ef0:	91 05       	cpc	r25, r1
    3ef2:	6c f4       	brge	.+26     	; 0x3f0e <SevenSegment_Display+0xbf6>
    3ef4:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ef6:	3b 85       	ldd	r19, Y+11	; 0x0b
    3ef8:	25 30       	cpi	r18, 0x05	; 5
    3efa:	31 05       	cpc	r19, r1
    3efc:	09 f4       	brne	.+2      	; 0x3f00 <SevenSegment_Display+0xbe8>
    3efe:	73 c0       	rjmp	.+230    	; 0x3fe6 <SevenSegment_Display+0xcce>
    3f00:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f02:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f04:	86 30       	cpi	r24, 0x06	; 6
    3f06:	91 05       	cpc	r25, r1
    3f08:	09 f4       	brne	.+2      	; 0x3f0c <SevenSegment_Display+0xbf4>
    3f0a:	80 c0       	rjmp	.+256    	; 0x400c <SevenSegment_Display+0xcf4>
    3f0c:	bc c0       	rjmp	.+376    	; 0x4086 <SevenSegment_Display+0xd6e>
    3f0e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3f10:	3b 85       	ldd	r19, Y+11	; 0x0b
    3f12:	28 30       	cpi	r18, 0x08	; 8
    3f14:	31 05       	cpc	r19, r1
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <SevenSegment_Display+0xc02>
    3f18:	9f c0       	rjmp	.+318    	; 0x4058 <SevenSegment_Display+0xd40>
    3f1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f1e:	89 30       	cpi	r24, 0x09	; 9
    3f20:	91 05       	cpc	r25, r1
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <SevenSegment_Display+0xc0e>
    3f24:	a2 c0       	rjmp	.+324    	; 0x406a <SevenSegment_Display+0xd52>
    3f26:	af c0       	rjmp	.+350    	; 0x4086 <SevenSegment_Display+0xd6e>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f28:	82 e0       	ldi	r24, 0x02	; 2
    3f2a:	6f ef       	ldi	r22, 0xFF	; 255
    3f2c:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3f30:	82 e0       	ldi	r24, 0x02	; 2
    3f32:	60 e0       	ldi	r22, 0x00	; 0
    3f34:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_HIGH);
    3f38:	82 e0       	ldi	r24, 0x02	; 2
    3f3a:	66 e0       	ldi	r22, 0x06	; 6
    3f3c:	41 e0       	ldi	r20, 0x01	; 1
    3f3e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3f42:	d1 c2       	rjmp	.+1442   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f44:	82 e0       	ldi	r24, 0x02	; 2
    3f46:	6f ef       	ldi	r22, 0xFF	; 255
    3f48:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3f4c:	82 e0       	ldi	r24, 0x02	; 2
    3f4e:	6f ef       	ldi	r22, 0xFF	; 255
    3f50:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    3f54:	82 e0       	ldi	r24, 0x02	; 2
    3f56:	61 e0       	ldi	r22, 0x01	; 1
    3f58:	40 e0       	ldi	r20, 0x00	; 0
    3f5a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3f5e:	82 e0       	ldi	r24, 0x02	; 2
    3f60:	62 e0       	ldi	r22, 0x02	; 2
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3f68:	be c2       	rjmp	.+1404   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f6a:	82 e0       	ldi	r24, 0x02	; 2
    3f6c:	6f ef       	ldi	r22, 0xFF	; 255
    3f6e:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3f72:	82 e0       	ldi	r24, 0x02	; 2
    3f74:	60 e0       	ldi	r22, 0x00	; 0
    3f76:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3f7a:	82 e0       	ldi	r24, 0x02	; 2
    3f7c:	62 e0       	ldi	r22, 0x02	; 2
    3f7e:	41 e0       	ldi	r20, 0x01	; 1
    3f80:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    3f84:	82 e0       	ldi	r24, 0x02	; 2
    3f86:	65 e0       	ldi	r22, 0x05	; 5
    3f88:	41 e0       	ldi	r20, 0x01	; 1
    3f8a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3f8e:	ab c2       	rjmp	.+1366   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f90:	82 e0       	ldi	r24, 0x02	; 2
    3f92:	6f ef       	ldi	r22, 0xFF	; 255
    3f94:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3f98:	82 e0       	ldi	r24, 0x02	; 2
    3f9a:	60 e0       	ldi	r22, 0x00	; 0
    3f9c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3fa0:	82 e0       	ldi	r24, 0x02	; 2
    3fa2:	64 e0       	ldi	r22, 0x04	; 4
    3fa4:	41 e0       	ldi	r20, 0x01	; 1
    3fa6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    3faa:	82 e0       	ldi	r24, 0x02	; 2
    3fac:	65 e0       	ldi	r22, 0x05	; 5
    3fae:	41 e0       	ldi	r20, 0x01	; 1
    3fb0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3fb4:	98 c2       	rjmp	.+1328   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3fb6:	82 e0       	ldi	r24, 0x02	; 2
    3fb8:	6f ef       	ldi	r22, 0xFF	; 255
    3fba:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3fbe:	82 e0       	ldi	r24, 0x02	; 2
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    3fc6:	82 e0       	ldi	r24, 0x02	; 2
    3fc8:	60 e0       	ldi	r22, 0x00	; 0
    3fca:	41 e0       	ldi	r20, 0x01	; 1
    3fcc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_HIGH);
    3fd0:	82 e0       	ldi	r24, 0x02	; 2
    3fd2:	63 e0       	ldi	r22, 0x03	; 3
    3fd4:	41 e0       	ldi	r20, 0x01	; 1
    3fd6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3fda:	82 e0       	ldi	r24, 0x02	; 2
    3fdc:	64 e0       	ldi	r22, 0x04	; 4
    3fde:	41 e0       	ldi	r20, 0x01	; 1
    3fe0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    3fe4:	80 c2       	rjmp	.+1280   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3fe6:	82 e0       	ldi	r24, 0x02	; 2
    3fe8:	6f ef       	ldi	r22, 0xFF	; 255
    3fea:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3fee:	82 e0       	ldi	r24, 0x02	; 2
    3ff0:	60 e0       	ldi	r22, 0x00	; 0
    3ff2:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3ff6:	82 e0       	ldi	r24, 0x02	; 2
    3ff8:	61 e0       	ldi	r22, 0x01	; 1
    3ffa:	41 e0       	ldi	r20, 0x01	; 1
    3ffc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    4000:	82 e0       	ldi	r24, 0x02	; 2
    4002:	64 e0       	ldi	r22, 0x04	; 4
    4004:	41 e0       	ldi	r20, 0x01	; 1
    4006:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    400a:	6d c2       	rjmp	.+1242   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    400c:	82 e0       	ldi	r24, 0x02	; 2
    400e:	6f ef       	ldi	r22, 0xFF	; 255
    4010:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    401c:	82 e0       	ldi	r24, 0x02	; 2
    401e:	61 e0       	ldi	r22, 0x01	; 1
    4020:	41 e0       	ldi	r20, 0x01	; 1
    4022:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4026:	5f c2       	rjmp	.+1214   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4028:	82 e0       	ldi	r24, 0x02	; 2
    402a:	6f ef       	ldi	r22, 0xFF	; 255
    402c:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    4030:	82 e0       	ldi	r24, 0x02	; 2
    4032:	6f ef       	ldi	r22, 0xFF	; 255
    4034:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    4038:	82 e0       	ldi	r24, 0x02	; 2
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    4042:	82 e0       	ldi	r24, 0x02	; 2
    4044:	61 e0       	ldi	r22, 0x01	; 1
    4046:	40 e0       	ldi	r20, 0x00	; 0
    4048:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    404c:	82 e0       	ldi	r24, 0x02	; 2
    404e:	62 e0       	ldi	r22, 0x02	; 2
    4050:	40 e0       	ldi	r20, 0x00	; 0
    4052:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4056:	47 c2       	rjmp	.+1166   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4058:	82 e0       	ldi	r24, 0x02	; 2
    405a:	6f ef       	ldi	r22, 0xFF	; 255
    405c:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4060:	82 e0       	ldi	r24, 0x02	; 2
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
    4068:	3e c2       	rjmp	.+1148   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    406a:	82 e0       	ldi	r24, 0x02	; 2
    406c:	6f ef       	ldi	r22, 0xFF	; 255
    406e:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4072:	82 e0       	ldi	r24, 0x02	; 2
    4074:	60 e0       	ldi	r22, 0x00	; 0
    4076:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    407a:	82 e0       	ldi	r24, 0x02	; 2
    407c:	64 e0       	ldi	r22, 0x04	; 4
    407e:	41 e0       	ldi	r20, 0x01	; 1
    4080:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4084:	30 c2       	rjmp	.+1120   	; 0x44e6 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    4086:	18 8e       	std	Y+24, r1	; 0x18
    4088:	30 c2       	rjmp	.+1120   	; 0x44ea <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    408a:	18 8e       	std	Y+24, r1	; 0x18
    408c:	2e c2       	rjmp	.+1116   	; 0x44ea <SevenSegment_Display+0x11d2>
			}
			break;
			case DIO_PORTD:
				switch(TYPE)
    408e:	8a 81       	ldd	r24, Y+2	; 0x02
    4090:	28 2f       	mov	r18, r24
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	39 87       	std	Y+9, r19	; 0x09
    4096:	28 87       	std	Y+8, r18	; 0x08
    4098:	88 85       	ldd	r24, Y+8	; 0x08
    409a:	99 85       	ldd	r25, Y+9	; 0x09
    409c:	00 97       	sbiw	r24, 0x00	; 0
    409e:	39 f0       	breq	.+14     	; 0x40ae <SevenSegment_Display+0xd96>
    40a0:	28 85       	ldd	r18, Y+8	; 0x08
    40a2:	39 85       	ldd	r19, Y+9	; 0x09
    40a4:	21 30       	cpi	r18, 0x01	; 1
    40a6:	31 05       	cpc	r19, r1
    40a8:	09 f4       	brne	.+2      	; 0x40ac <SevenSegment_Display+0xd94>
    40aa:	0d c1       	rjmp	.+538    	; 0x42c6 <SevenSegment_Display+0xfae>
    40ac:	18 c2       	rjmp	.+1072   	; 0x44de <SevenSegment_Display+0x11c6>
					{
						case CommonCathod:
							DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    40ae:	83 e0       	ldi	r24, 0x03	; 3
    40b0:	6f ef       	ldi	r22, 0xFF	; 255
    40b2:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
							DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_LOW);
    40b6:	83 e0       	ldi	r24, 0x03	; 3
    40b8:	67 e0       	ldi	r22, 0x07	; 7
    40ba:	40 e0       	ldi	r20, 0x00	; 0
    40bc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
							switch(NUM)
    40c0:	8b 81       	ldd	r24, Y+3	; 0x03
    40c2:	28 2f       	mov	r18, r24
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	3f 83       	std	Y+7, r19	; 0x07
    40c8:	2e 83       	std	Y+6, r18	; 0x06
    40ca:	8e 81       	ldd	r24, Y+6	; 0x06
    40cc:	9f 81       	ldd	r25, Y+7	; 0x07
    40ce:	84 30       	cpi	r24, 0x04	; 4
    40d0:	91 05       	cpc	r25, r1
    40d2:	09 f4       	brne	.+2      	; 0x40d6 <SevenSegment_Display+0xdbe>
    40d4:	8e c0       	rjmp	.+284    	; 0x41f2 <SevenSegment_Display+0xeda>
    40d6:	2e 81       	ldd	r18, Y+6	; 0x06
    40d8:	3f 81       	ldd	r19, Y+7	; 0x07
    40da:	25 30       	cpi	r18, 0x05	; 5
    40dc:	31 05       	cpc	r19, r1
    40de:	ec f4       	brge	.+58     	; 0x411a <SevenSegment_Display+0xe02>
    40e0:	8e 81       	ldd	r24, Y+6	; 0x06
    40e2:	9f 81       	ldd	r25, Y+7	; 0x07
    40e4:	81 30       	cpi	r24, 0x01	; 1
    40e6:	91 05       	cpc	r25, r1
    40e8:	09 f4       	brne	.+2      	; 0x40ec <SevenSegment_Display+0xdd4>
    40ea:	4a c0       	rjmp	.+148    	; 0x4180 <SevenSegment_Display+0xe68>
    40ec:	2e 81       	ldd	r18, Y+6	; 0x06
    40ee:	3f 81       	ldd	r19, Y+7	; 0x07
    40f0:	22 30       	cpi	r18, 0x02	; 2
    40f2:	31 05       	cpc	r19, r1
    40f4:	2c f4       	brge	.+10     	; 0x4100 <SevenSegment_Display+0xde8>
    40f6:	8e 81       	ldd	r24, Y+6	; 0x06
    40f8:	9f 81       	ldd	r25, Y+7	; 0x07
    40fa:	00 97       	sbiw	r24, 0x00	; 0
    40fc:	99 f1       	breq	.+102    	; 0x4164 <SevenSegment_Display+0xe4c>
    40fe:	e1 c0       	rjmp	.+450    	; 0x42c2 <SevenSegment_Display+0xfaa>
    4100:	2e 81       	ldd	r18, Y+6	; 0x06
    4102:	3f 81       	ldd	r19, Y+7	; 0x07
    4104:	22 30       	cpi	r18, 0x02	; 2
    4106:	31 05       	cpc	r19, r1
    4108:	09 f4       	brne	.+2      	; 0x410c <SevenSegment_Display+0xdf4>
    410a:	4d c0       	rjmp	.+154    	; 0x41a6 <SevenSegment_Display+0xe8e>
    410c:	8e 81       	ldd	r24, Y+6	; 0x06
    410e:	9f 81       	ldd	r25, Y+7	; 0x07
    4110:	83 30       	cpi	r24, 0x03	; 3
    4112:	91 05       	cpc	r25, r1
    4114:	09 f4       	brne	.+2      	; 0x4118 <SevenSegment_Display+0xe00>
    4116:	5a c0       	rjmp	.+180    	; 0x41cc <SevenSegment_Display+0xeb4>
    4118:	d4 c0       	rjmp	.+424    	; 0x42c2 <SevenSegment_Display+0xfaa>
    411a:	2e 81       	ldd	r18, Y+6	; 0x06
    411c:	3f 81       	ldd	r19, Y+7	; 0x07
    411e:	27 30       	cpi	r18, 0x07	; 7
    4120:	31 05       	cpc	r19, r1
    4122:	09 f4       	brne	.+2      	; 0x4126 <SevenSegment_Display+0xe0e>
    4124:	9f c0       	rjmp	.+318    	; 0x4264 <SevenSegment_Display+0xf4c>
    4126:	8e 81       	ldd	r24, Y+6	; 0x06
    4128:	9f 81       	ldd	r25, Y+7	; 0x07
    412a:	88 30       	cpi	r24, 0x08	; 8
    412c:	91 05       	cpc	r25, r1
    412e:	6c f4       	brge	.+26     	; 0x414a <SevenSegment_Display+0xe32>
    4130:	2e 81       	ldd	r18, Y+6	; 0x06
    4132:	3f 81       	ldd	r19, Y+7	; 0x07
    4134:	25 30       	cpi	r18, 0x05	; 5
    4136:	31 05       	cpc	r19, r1
    4138:	09 f4       	brne	.+2      	; 0x413c <SevenSegment_Display+0xe24>
    413a:	73 c0       	rjmp	.+230    	; 0x4222 <SevenSegment_Display+0xf0a>
    413c:	8e 81       	ldd	r24, Y+6	; 0x06
    413e:	9f 81       	ldd	r25, Y+7	; 0x07
    4140:	86 30       	cpi	r24, 0x06	; 6
    4142:	91 05       	cpc	r25, r1
    4144:	09 f4       	brne	.+2      	; 0x4148 <SevenSegment_Display+0xe30>
    4146:	80 c0       	rjmp	.+256    	; 0x4248 <SevenSegment_Display+0xf30>
    4148:	bc c0       	rjmp	.+376    	; 0x42c2 <SevenSegment_Display+0xfaa>
    414a:	2e 81       	ldd	r18, Y+6	; 0x06
    414c:	3f 81       	ldd	r19, Y+7	; 0x07
    414e:	28 30       	cpi	r18, 0x08	; 8
    4150:	31 05       	cpc	r19, r1
    4152:	09 f4       	brne	.+2      	; 0x4156 <SevenSegment_Display+0xe3e>
    4154:	9f c0       	rjmp	.+318    	; 0x4294 <SevenSegment_Display+0xf7c>
    4156:	8e 81       	ldd	r24, Y+6	; 0x06
    4158:	9f 81       	ldd	r25, Y+7	; 0x07
    415a:	89 30       	cpi	r24, 0x09	; 9
    415c:	91 05       	cpc	r25, r1
    415e:	09 f4       	brne	.+2      	; 0x4162 <SevenSegment_Display+0xe4a>
    4160:	a2 c0       	rjmp	.+324    	; 0x42a6 <SevenSegment_Display+0xf8e>
    4162:	af c0       	rjmp	.+350    	; 0x42c2 <SevenSegment_Display+0xfaa>
								{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4164:	83 e0       	ldi	r24, 0x03	; 3
    4166:	6f ef       	ldi	r22, 0xFF	; 255
    4168:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    416c:	83 e0       	ldi	r24, 0x03	; 3
    416e:	6f ef       	ldi	r22, 0xFF	; 255
    4170:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_LOW);
    4174:	83 e0       	ldi	r24, 0x03	; 3
    4176:	66 e0       	ldi	r22, 0x06	; 6
    4178:	40 e0       	ldi	r20, 0x00	; 0
    417a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    417e:	b3 c1       	rjmp	.+870    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4180:	83 e0       	ldi	r24, 0x03	; 3
    4182:	6f ef       	ldi	r22, 0xFF	; 255
    4184:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4188:	83 e0       	ldi	r24, 0x03	; 3
    418a:	60 e0       	ldi	r22, 0x00	; 0
    418c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    4190:	83 e0       	ldi	r24, 0x03	; 3
    4192:	61 e0       	ldi	r22, 0x01	; 1
    4194:	41 e0       	ldi	r20, 0x01	; 1
    4196:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    419a:	83 e0       	ldi	r24, 0x03	; 3
    419c:	62 e0       	ldi	r22, 0x02	; 2
    419e:	41 e0       	ldi	r20, 0x01	; 1
    41a0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    41a4:	a0 c1       	rjmp	.+832    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    41a6:	83 e0       	ldi	r24, 0x03	; 3
    41a8:	6f ef       	ldi	r22, 0xFF	; 255
    41aa:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    41ae:	83 e0       	ldi	r24, 0x03	; 3
    41b0:	6f ef       	ldi	r22, 0xFF	; 255
    41b2:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    41b6:	83 e0       	ldi	r24, 0x03	; 3
    41b8:	62 e0       	ldi	r22, 0x02	; 2
    41ba:	40 e0       	ldi	r20, 0x00	; 0
    41bc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    41c0:	83 e0       	ldi	r24, 0x03	; 3
    41c2:	65 e0       	ldi	r22, 0x05	; 5
    41c4:	40 e0       	ldi	r20, 0x00	; 0
    41c6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    41ca:	8d c1       	rjmp	.+794    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    41cc:	83 e0       	ldi	r24, 0x03	; 3
    41ce:	6f ef       	ldi	r22, 0xFF	; 255
    41d0:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    41d4:	83 e0       	ldi	r24, 0x03	; 3
    41d6:	6f ef       	ldi	r22, 0xFF	; 255
    41d8:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    41dc:	83 e0       	ldi	r24, 0x03	; 3
    41de:	64 e0       	ldi	r22, 0x04	; 4
    41e0:	40 e0       	ldi	r20, 0x00	; 0
    41e2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    41e6:	83 e0       	ldi	r24, 0x03	; 3
    41e8:	65 e0       	ldi	r22, 0x05	; 5
    41ea:	40 e0       	ldi	r20, 0x00	; 0
    41ec:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    41f0:	7a c1       	rjmp	.+756    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    41f2:	83 e0       	ldi	r24, 0x03	; 3
    41f4:	6f ef       	ldi	r22, 0xFF	; 255
    41f6:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    41fa:	83 e0       	ldi	r24, 0x03	; 3
    41fc:	6f ef       	ldi	r22, 0xFF	; 255
    41fe:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    4202:	83 e0       	ldi	r24, 0x03	; 3
    4204:	60 e0       	ldi	r22, 0x00	; 0
    4206:	40 e0       	ldi	r20, 0x00	; 0
    4208:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_LOW);
    420c:	83 e0       	ldi	r24, 0x03	; 3
    420e:	63 e0       	ldi	r22, 0x03	; 3
    4210:	40 e0       	ldi	r20, 0x00	; 0
    4212:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    4216:	83 e0       	ldi	r24, 0x03	; 3
    4218:	64 e0       	ldi	r22, 0x04	; 4
    421a:	40 e0       	ldi	r20, 0x00	; 0
    421c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4220:	62 c1       	rjmp	.+708    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4222:	83 e0       	ldi	r24, 0x03	; 3
    4224:	6f ef       	ldi	r22, 0xFF	; 255
    4226:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    422a:	83 e0       	ldi	r24, 0x03	; 3
    422c:	6f ef       	ldi	r22, 0xFF	; 255
    422e:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    4232:	83 e0       	ldi	r24, 0x03	; 3
    4234:	61 e0       	ldi	r22, 0x01	; 1
    4236:	40 e0       	ldi	r20, 0x00	; 0
    4238:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    423c:	83 e0       	ldi	r24, 0x03	; 3
    423e:	64 e0       	ldi	r22, 0x04	; 4
    4240:	40 e0       	ldi	r20, 0x00	; 0
    4242:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4246:	4f c1       	rjmp	.+670    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4248:	83 e0       	ldi	r24, 0x03	; 3
    424a:	6f ef       	ldi	r22, 0xFF	; 255
    424c:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4250:	83 e0       	ldi	r24, 0x03	; 3
    4252:	6f ef       	ldi	r22, 0xFF	; 255
    4254:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    4258:	83 e0       	ldi	r24, 0x03	; 3
    425a:	61 e0       	ldi	r22, 0x01	; 1
    425c:	40 e0       	ldi	r20, 0x00	; 0
    425e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4262:	41 c1       	rjmp	.+642    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4264:	83 e0       	ldi	r24, 0x03	; 3
    4266:	6f ef       	ldi	r22, 0xFF	; 255
    4268:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    426c:	83 e0       	ldi	r24, 0x03	; 3
    426e:	60 e0       	ldi	r22, 0x00	; 0
    4270:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    4274:	83 e0       	ldi	r24, 0x03	; 3
    4276:	60 e0       	ldi	r22, 0x00	; 0
    4278:	41 e0       	ldi	r20, 0x01	; 1
    427a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    427e:	83 e0       	ldi	r24, 0x03	; 3
    4280:	61 e0       	ldi	r22, 0x01	; 1
    4282:	41 e0       	ldi	r20, 0x01	; 1
    4284:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    4288:	83 e0       	ldi	r24, 0x03	; 3
    428a:	62 e0       	ldi	r22, 0x02	; 2
    428c:	41 e0       	ldi	r20, 0x01	; 1
    428e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4292:	29 c1       	rjmp	.+594    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4294:	83 e0       	ldi	r24, 0x03	; 3
    4296:	6f ef       	ldi	r22, 0xFF	; 255
    4298:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    429c:	83 e0       	ldi	r24, 0x03	; 3
    429e:	6f ef       	ldi	r22, 0xFF	; 255
    42a0:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
    42a4:	20 c1       	rjmp	.+576    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    42a6:	83 e0       	ldi	r24, 0x03	; 3
    42a8:	6f ef       	ldi	r22, 0xFF	; 255
    42aa:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    42ae:	83 e0       	ldi	r24, 0x03	; 3
    42b0:	6f ef       	ldi	r22, 0xFF	; 255
    42b2:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    42b6:	83 e0       	ldi	r24, 0x03	; 3
    42b8:	64 e0       	ldi	r22, 0x04	; 4
    42ba:	40 e0       	ldi	r20, 0x00	; 0
    42bc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    42c0:	12 c1       	rjmp	.+548    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    42c2:	18 8e       	std	Y+24, r1	; 0x18
    42c4:	12 c1       	rjmp	.+548    	; 0x44ea <SevenSegment_Display+0x11d2>
							}
							break;
					case CommonAnode:
						DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    42c6:	83 e0       	ldi	r24, 0x03	; 3
    42c8:	6f ef       	ldi	r22, 0xFF	; 255
    42ca:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_HIGH);
    42ce:	83 e0       	ldi	r24, 0x03	; 3
    42d0:	67 e0       	ldi	r22, 0x07	; 7
    42d2:	41 e0       	ldi	r20, 0x01	; 1
    42d4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
						switch(NUM)
    42d8:	8b 81       	ldd	r24, Y+3	; 0x03
    42da:	28 2f       	mov	r18, r24
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	3d 83       	std	Y+5, r19	; 0x05
    42e0:	2c 83       	std	Y+4, r18	; 0x04
    42e2:	8c 81       	ldd	r24, Y+4	; 0x04
    42e4:	9d 81       	ldd	r25, Y+5	; 0x05
    42e6:	84 30       	cpi	r24, 0x04	; 4
    42e8:	91 05       	cpc	r25, r1
    42ea:	09 f4       	brne	.+2      	; 0x42ee <SevenSegment_Display+0xfd6>
    42ec:	8e c0       	rjmp	.+284    	; 0x440a <SevenSegment_Display+0x10f2>
    42ee:	2c 81       	ldd	r18, Y+4	; 0x04
    42f0:	3d 81       	ldd	r19, Y+5	; 0x05
    42f2:	25 30       	cpi	r18, 0x05	; 5
    42f4:	31 05       	cpc	r19, r1
    42f6:	ec f4       	brge	.+58     	; 0x4332 <SevenSegment_Display+0x101a>
    42f8:	8c 81       	ldd	r24, Y+4	; 0x04
    42fa:	9d 81       	ldd	r25, Y+5	; 0x05
    42fc:	81 30       	cpi	r24, 0x01	; 1
    42fe:	91 05       	cpc	r25, r1
    4300:	09 f4       	brne	.+2      	; 0x4304 <SevenSegment_Display+0xfec>
    4302:	4a c0       	rjmp	.+148    	; 0x4398 <SevenSegment_Display+0x1080>
    4304:	2c 81       	ldd	r18, Y+4	; 0x04
    4306:	3d 81       	ldd	r19, Y+5	; 0x05
    4308:	22 30       	cpi	r18, 0x02	; 2
    430a:	31 05       	cpc	r19, r1
    430c:	2c f4       	brge	.+10     	; 0x4318 <SevenSegment_Display+0x1000>
    430e:	8c 81       	ldd	r24, Y+4	; 0x04
    4310:	9d 81       	ldd	r25, Y+5	; 0x05
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	99 f1       	breq	.+102    	; 0x437c <SevenSegment_Display+0x1064>
    4316:	e1 c0       	rjmp	.+450    	; 0x44da <SevenSegment_Display+0x11c2>
    4318:	2c 81       	ldd	r18, Y+4	; 0x04
    431a:	3d 81       	ldd	r19, Y+5	; 0x05
    431c:	22 30       	cpi	r18, 0x02	; 2
    431e:	31 05       	cpc	r19, r1
    4320:	09 f4       	brne	.+2      	; 0x4324 <SevenSegment_Display+0x100c>
    4322:	4d c0       	rjmp	.+154    	; 0x43be <SevenSegment_Display+0x10a6>
    4324:	8c 81       	ldd	r24, Y+4	; 0x04
    4326:	9d 81       	ldd	r25, Y+5	; 0x05
    4328:	83 30       	cpi	r24, 0x03	; 3
    432a:	91 05       	cpc	r25, r1
    432c:	09 f4       	brne	.+2      	; 0x4330 <SevenSegment_Display+0x1018>
    432e:	5a c0       	rjmp	.+180    	; 0x43e4 <SevenSegment_Display+0x10cc>
    4330:	d4 c0       	rjmp	.+424    	; 0x44da <SevenSegment_Display+0x11c2>
    4332:	2c 81       	ldd	r18, Y+4	; 0x04
    4334:	3d 81       	ldd	r19, Y+5	; 0x05
    4336:	27 30       	cpi	r18, 0x07	; 7
    4338:	31 05       	cpc	r19, r1
    433a:	09 f4       	brne	.+2      	; 0x433e <SevenSegment_Display+0x1026>
    433c:	9f c0       	rjmp	.+318    	; 0x447c <SevenSegment_Display+0x1164>
    433e:	8c 81       	ldd	r24, Y+4	; 0x04
    4340:	9d 81       	ldd	r25, Y+5	; 0x05
    4342:	88 30       	cpi	r24, 0x08	; 8
    4344:	91 05       	cpc	r25, r1
    4346:	6c f4       	brge	.+26     	; 0x4362 <SevenSegment_Display+0x104a>
    4348:	2c 81       	ldd	r18, Y+4	; 0x04
    434a:	3d 81       	ldd	r19, Y+5	; 0x05
    434c:	25 30       	cpi	r18, 0x05	; 5
    434e:	31 05       	cpc	r19, r1
    4350:	09 f4       	brne	.+2      	; 0x4354 <SevenSegment_Display+0x103c>
    4352:	73 c0       	rjmp	.+230    	; 0x443a <SevenSegment_Display+0x1122>
    4354:	8c 81       	ldd	r24, Y+4	; 0x04
    4356:	9d 81       	ldd	r25, Y+5	; 0x05
    4358:	86 30       	cpi	r24, 0x06	; 6
    435a:	91 05       	cpc	r25, r1
    435c:	09 f4       	brne	.+2      	; 0x4360 <SevenSegment_Display+0x1048>
    435e:	80 c0       	rjmp	.+256    	; 0x4460 <SevenSegment_Display+0x1148>
    4360:	bc c0       	rjmp	.+376    	; 0x44da <SevenSegment_Display+0x11c2>
    4362:	2c 81       	ldd	r18, Y+4	; 0x04
    4364:	3d 81       	ldd	r19, Y+5	; 0x05
    4366:	28 30       	cpi	r18, 0x08	; 8
    4368:	31 05       	cpc	r19, r1
    436a:	09 f4       	brne	.+2      	; 0x436e <SevenSegment_Display+0x1056>
    436c:	9f c0       	rjmp	.+318    	; 0x44ac <SevenSegment_Display+0x1194>
    436e:	8c 81       	ldd	r24, Y+4	; 0x04
    4370:	9d 81       	ldd	r25, Y+5	; 0x05
    4372:	89 30       	cpi	r24, 0x09	; 9
    4374:	91 05       	cpc	r25, r1
    4376:	09 f4       	brne	.+2      	; 0x437a <SevenSegment_Display+0x1062>
    4378:	a2 c0       	rjmp	.+324    	; 0x44be <SevenSegment_Display+0x11a6>
    437a:	af c0       	rjmp	.+350    	; 0x44da <SevenSegment_Display+0x11c2>
							{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    437c:	83 e0       	ldi	r24, 0x03	; 3
    437e:	6f ef       	ldi	r22, 0xFF	; 255
    4380:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4384:	83 e0       	ldi	r24, 0x03	; 3
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_HIGH);
    438c:	83 e0       	ldi	r24, 0x03	; 3
    438e:	66 e0       	ldi	r22, 0x06	; 6
    4390:	41 e0       	ldi	r20, 0x01	; 1
    4392:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4396:	a7 c0       	rjmp	.+334    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4398:	83 e0       	ldi	r24, 0x03	; 3
    439a:	6f ef       	ldi	r22, 0xFF	; 255
    439c:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    43a0:	83 e0       	ldi	r24, 0x03	; 3
    43a2:	6f ef       	ldi	r22, 0xFF	; 255
    43a4:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    43a8:	83 e0       	ldi	r24, 0x03	; 3
    43aa:	61 e0       	ldi	r22, 0x01	; 1
    43ac:	40 e0       	ldi	r20, 0x00	; 0
    43ae:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    43b2:	83 e0       	ldi	r24, 0x03	; 3
    43b4:	62 e0       	ldi	r22, 0x02	; 2
    43b6:	40 e0       	ldi	r20, 0x00	; 0
    43b8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    43bc:	94 c0       	rjmp	.+296    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    43be:	83 e0       	ldi	r24, 0x03	; 3
    43c0:	6f ef       	ldi	r22, 0xFF	; 255
    43c2:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    43c6:	83 e0       	ldi	r24, 0x03	; 3
    43c8:	60 e0       	ldi	r22, 0x00	; 0
    43ca:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    43ce:	83 e0       	ldi	r24, 0x03	; 3
    43d0:	62 e0       	ldi	r22, 0x02	; 2
    43d2:	41 e0       	ldi	r20, 0x01	; 1
    43d4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    43d8:	83 e0       	ldi	r24, 0x03	; 3
    43da:	65 e0       	ldi	r22, 0x05	; 5
    43dc:	41 e0       	ldi	r20, 0x01	; 1
    43de:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    43e2:	81 c0       	rjmp	.+258    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    43e4:	83 e0       	ldi	r24, 0x03	; 3
    43e6:	6f ef       	ldi	r22, 0xFF	; 255
    43e8:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    43ec:	83 e0       	ldi	r24, 0x03	; 3
    43ee:	60 e0       	ldi	r22, 0x00	; 0
    43f0:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    43f4:	83 e0       	ldi	r24, 0x03	; 3
    43f6:	64 e0       	ldi	r22, 0x04	; 4
    43f8:	41 e0       	ldi	r20, 0x01	; 1
    43fa:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    43fe:	83 e0       	ldi	r24, 0x03	; 3
    4400:	65 e0       	ldi	r22, 0x05	; 5
    4402:	41 e0       	ldi	r20, 0x01	; 1
    4404:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4408:	6e c0       	rjmp	.+220    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    440a:	83 e0       	ldi	r24, 0x03	; 3
    440c:	6f ef       	ldi	r22, 0xFF	; 255
    440e:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4412:	83 e0       	ldi	r24, 0x03	; 3
    4414:	60 e0       	ldi	r22, 0x00	; 0
    4416:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    441a:	83 e0       	ldi	r24, 0x03	; 3
    441c:	60 e0       	ldi	r22, 0x00	; 0
    441e:	41 e0       	ldi	r20, 0x01	; 1
    4420:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_HIGH);
    4424:	83 e0       	ldi	r24, 0x03	; 3
    4426:	63 e0       	ldi	r22, 0x03	; 3
    4428:	41 e0       	ldi	r20, 0x01	; 1
    442a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    442e:	83 e0       	ldi	r24, 0x03	; 3
    4430:	64 e0       	ldi	r22, 0x04	; 4
    4432:	41 e0       	ldi	r20, 0x01	; 1
    4434:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    4438:	56 c0       	rjmp	.+172    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    443a:	83 e0       	ldi	r24, 0x03	; 3
    443c:	6f ef       	ldi	r22, 0xFF	; 255
    443e:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4442:	83 e0       	ldi	r24, 0x03	; 3
    4444:	60 e0       	ldi	r22, 0x00	; 0
    4446:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    444a:	83 e0       	ldi	r24, 0x03	; 3
    444c:	61 e0       	ldi	r22, 0x01	; 1
    444e:	41 e0       	ldi	r20, 0x01	; 1
    4450:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    4454:	83 e0       	ldi	r24, 0x03	; 3
    4456:	64 e0       	ldi	r22, 0x04	; 4
    4458:	41 e0       	ldi	r20, 0x01	; 1
    445a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    445e:	43 c0       	rjmp	.+134    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4460:	83 e0       	ldi	r24, 0x03	; 3
    4462:	6f ef       	ldi	r22, 0xFF	; 255
    4464:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4468:	83 e0       	ldi	r24, 0x03	; 3
    446a:	60 e0       	ldi	r22, 0x00	; 0
    446c:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    4470:	83 e0       	ldi	r24, 0x03	; 3
    4472:	61 e0       	ldi	r22, 0x01	; 1
    4474:	41 e0       	ldi	r20, 0x01	; 1
    4476:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    447a:	35 c0       	rjmp	.+106    	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    447c:	83 e0       	ldi	r24, 0x03	; 3
    447e:	6f ef       	ldi	r22, 0xFF	; 255
    4480:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4484:	83 e0       	ldi	r24, 0x03	; 3
    4486:	6f ef       	ldi	r22, 0xFF	; 255
    4488:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    448c:	83 e0       	ldi	r24, 0x03	; 3
    448e:	60 e0       	ldi	r22, 0x00	; 0
    4490:	40 e0       	ldi	r20, 0x00	; 0
    4492:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    4496:	83 e0       	ldi	r24, 0x03	; 3
    4498:	61 e0       	ldi	r22, 0x01	; 1
    449a:	40 e0       	ldi	r20, 0x00	; 0
    449c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    44a0:	83 e0       	ldi	r24, 0x03	; 3
    44a2:	62 e0       	ldi	r22, 0x02	; 2
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    44aa:	1d c0       	rjmp	.+58     	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    44ac:	83 e0       	ldi	r24, 0x03	; 3
    44ae:	6f ef       	ldi	r22, 0xFF	; 255
    44b0:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    44b4:	83 e0       	ldi	r24, 0x03	; 3
    44b6:	60 e0       	ldi	r22, 0x00	; 0
    44b8:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
    44bc:	14 c0       	rjmp	.+40     	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    44be:	83 e0       	ldi	r24, 0x03	; 3
    44c0:	6f ef       	ldi	r22, 0xFF	; 255
    44c2:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    44c6:	83 e0       	ldi	r24, 0x03	; 3
    44c8:	60 e0       	ldi	r22, 0x00	; 0
    44ca:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    44ce:	83 e0       	ldi	r24, 0x03	; 3
    44d0:	64 e0       	ldi	r22, 0x04	; 4
    44d2:	41 e0       	ldi	r20, 0x01	; 1
    44d4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    44d8:	06 c0       	rjmp	.+12     	; 0x44e6 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    44da:	18 8e       	std	Y+24, r1	; 0x18
    44dc:	06 c0       	rjmp	.+12     	; 0x44ea <SevenSegment_Display+0x11d2>
							}
					break;
					default:
					return E_OK;
    44de:	18 8e       	std	Y+24, r1	; 0x18
    44e0:	04 c0       	rjmp	.+8      	; 0x44ea <SevenSegment_Display+0x11d2>
				}
				break;
	default:
	return E_OK;
    44e2:	18 8e       	std	Y+24, r1	; 0x18
    44e4:	02 c0       	rjmp	.+4      	; 0x44ea <SevenSegment_Display+0x11d2>
}
	return E_NOK;
    44e6:	91 e0       	ldi	r25, 0x01	; 1
    44e8:	98 8f       	std	Y+24, r25	; 0x18
    44ea:	88 8d       	ldd	r24, Y+24	; 0x18
}
    44ec:	6e 96       	adiw	r28, 0x1e	; 30
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	f8 94       	cli
    44f2:	de bf       	out	0x3e, r29	; 62
    44f4:	0f be       	out	0x3f, r0	; 63
    44f6:	cd bf       	out	0x3d, r28	; 61
    44f8:	cf 91       	pop	r28
    44fa:	df 91       	pop	r29
    44fc:	08 95       	ret

000044fe <CLCD_init>:
#include "LCD_Config.h"
#include <stdio.h>
#include <util/delay.h>
#include <stdlib.h>
void CLCD_init(void)
{
    44fe:	df 93       	push	r29
    4500:	cf 93       	push	r28
    4502:	cd b7       	in	r28, 0x3d	; 61
    4504:	de b7       	in	r29, 0x3e	; 62
    4506:	2e 97       	sbiw	r28, 0x0e	; 14
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	f8 94       	cli
    450c:	de bf       	out	0x3e, r29	; 62
    450e:	0f be       	out	0x3f, r0	; 63
    4510:	cd bf       	out	0x3d, r28	; 61
	//Initialize LCD pins direction
	DIO_SetPortDirection(CLCD_DataPort,DIO_OUTPUT);
    4512:	82 e0       	ldi	r24, 0x02	; 2
    4514:	61 e0       	ldi	r22, 0x01	; 1
    4516:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RS_PIN,DIO_OUTPUT);
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	60 e0       	ldi	r22, 0x00	; 0
    451e:	41 e0       	ldi	r20, 0x01	; 1
    4520:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RW_PIN,DIO_OUTPUT);
    4524:	81 e0       	ldi	r24, 0x01	; 1
    4526:	61 e0       	ldi	r22, 0x01	; 1
    4528:	41 e0       	ldi	r20, 0x01	; 1
    452a:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_E_PIN,DIO_OUTPUT);
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	62 e0       	ldi	r22, 0x02	; 2
    4532:	41 e0       	ldi	r20, 0x01	; 1
    4534:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	a0 e2       	ldi	r26, 0x20	; 32
    453e:	b2 e4       	ldi	r27, 0x42	; 66
    4540:	8b 87       	std	Y+11, r24	; 0x0b
    4542:	9c 87       	std	Y+12, r25	; 0x0c
    4544:	ad 87       	std	Y+13, r26	; 0x0d
    4546:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4548:	6b 85       	ldd	r22, Y+11	; 0x0b
    454a:	7c 85       	ldd	r23, Y+12	; 0x0c
    454c:	8d 85       	ldd	r24, Y+13	; 0x0d
    454e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	4a ef       	ldi	r20, 0xFA	; 250
    4556:	54 e4       	ldi	r21, 0x44	; 68
    4558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	8f 83       	std	Y+7, r24	; 0x07
    4562:	98 87       	std	Y+8, r25	; 0x08
    4564:	a9 87       	std	Y+9, r26	; 0x09
    4566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4568:	6f 81       	ldd	r22, Y+7	; 0x07
    456a:	78 85       	ldd	r23, Y+8	; 0x08
    456c:	89 85       	ldd	r24, Y+9	; 0x09
    456e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	40 e8       	ldi	r20, 0x80	; 128
    4576:	5f e3       	ldi	r21, 0x3F	; 63
    4578:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    457c:	88 23       	and	r24, r24
    457e:	2c f4       	brge	.+10     	; 0x458a <CLCD_init+0x8c>
		__ticks = 1;
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	9e 83       	std	Y+6, r25	; 0x06
    4586:	8d 83       	std	Y+5, r24	; 0x05
    4588:	3f c0       	rjmp	.+126    	; 0x4608 <CLCD_init+0x10a>
	else if (__tmp > 65535)
    458a:	6f 81       	ldd	r22, Y+7	; 0x07
    458c:	78 85       	ldd	r23, Y+8	; 0x08
    458e:	89 85       	ldd	r24, Y+9	; 0x09
    4590:	9a 85       	ldd	r25, Y+10	; 0x0a
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	3f ef       	ldi	r19, 0xFF	; 255
    4596:	4f e7       	ldi	r20, 0x7F	; 127
    4598:	57 e4       	ldi	r21, 0x47	; 71
    459a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    459e:	18 16       	cp	r1, r24
    45a0:	4c f5       	brge	.+82     	; 0x45f4 <CLCD_init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    45a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    45a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    45a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	40 e2       	ldi	r20, 0x20	; 32
    45b0:	51 e4       	ldi	r21, 0x41	; 65
    45b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b6:	dc 01       	movw	r26, r24
    45b8:	cb 01       	movw	r24, r22
    45ba:	bc 01       	movw	r22, r24
    45bc:	cd 01       	movw	r24, r26
    45be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	9e 83       	std	Y+6, r25	; 0x06
    45c8:	8d 83       	std	Y+5, r24	; 0x05
    45ca:	0f c0       	rjmp	.+30     	; 0x45ea <CLCD_init+0xec>
    45cc:	88 ec       	ldi	r24, 0xC8	; 200
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	9c 83       	std	Y+4, r25	; 0x04
    45d2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45d4:	8b 81       	ldd	r24, Y+3	; 0x03
    45d6:	9c 81       	ldd	r25, Y+4	; 0x04
    45d8:	01 97       	sbiw	r24, 0x01	; 1
    45da:	f1 f7       	brne	.-4      	; 0x45d8 <CLCD_init+0xda>
    45dc:	9c 83       	std	Y+4, r25	; 0x04
    45de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e0:	8d 81       	ldd	r24, Y+5	; 0x05
    45e2:	9e 81       	ldd	r25, Y+6	; 0x06
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	9e 83       	std	Y+6, r25	; 0x06
    45e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ea:	8d 81       	ldd	r24, Y+5	; 0x05
    45ec:	9e 81       	ldd	r25, Y+6	; 0x06
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	69 f7       	brne	.-38     	; 0x45cc <CLCD_init+0xce>
    45f2:	14 c0       	rjmp	.+40     	; 0x461c <CLCD_init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f4:	6f 81       	ldd	r22, Y+7	; 0x07
    45f6:	78 85       	ldd	r23, Y+8	; 0x08
    45f8:	89 85       	ldd	r24, Y+9	; 0x09
    45fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    45fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9e 83       	std	Y+6, r25	; 0x06
    4606:	8d 83       	std	Y+5, r24	; 0x05
    4608:	8d 81       	ldd	r24, Y+5	; 0x05
    460a:	9e 81       	ldd	r25, Y+6	; 0x06
    460c:	9a 83       	std	Y+2, r25	; 0x02
    460e:	89 83       	std	Y+1, r24	; 0x01
    4610:	89 81       	ldd	r24, Y+1	; 0x01
    4612:	9a 81       	ldd	r25, Y+2	; 0x02
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	f1 f7       	brne	.-4      	; 0x4614 <CLCD_init+0x116>
    4618:	9a 83       	std	Y+2, r25	; 0x02
    461a:	89 83       	std	Y+1, r24	; 0x01
	#ifdef CLCD_OneLine_5x8Size
	CLCD_SendCommand(CLCD_OneLine_5x8Size);
	#elif CLCD_OneLine_5x11Size
	CLCD_SendCommand(CLCD_OneLine_5x11Size );
	#elif  CLCD_TwoLines_5x8Size
	CLCD_SendCommand(CLCD_TwoLines_5x8Size);
    461c:	88 e3       	ldi	r24, 0x38	; 56
    461e:	0e 94 20 23 	call	0x4640	; 0x4640 <CLCD_SendCommand>
	#elif CLCD_TwoLines_5x11Size
	CLCD_SendCommand(CLCD_TwoLines_5x11Size);
	#endif

	CLCD_SendCommand(CLCD_DISP_ON_CURSOR_BLINK);
    4622:	8f e0       	ldi	r24, 0x0F	; 15
    4624:	0e 94 20 23 	call	0x4640	; 0x4640 <CLCD_SendCommand>

	CLCD_SendCommand(CLCD_CLEAR);
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	0e 94 20 23 	call	0x4640	; 0x4640 <CLCD_SendCommand>
}
    462e:	2e 96       	adiw	r28, 0x0e	; 14
    4630:	0f b6       	in	r0, 0x3f	; 63
    4632:	f8 94       	cli
    4634:	de bf       	out	0x3e, r29	; 62
    4636:	0f be       	out	0x3f, r0	; 63
    4638:	cd bf       	out	0x3d, r28	; 61
    463a:	cf 91       	pop	r28
    463c:	df 91       	pop	r29
    463e:	08 95       	ret

00004640 <CLCD_SendCommand>:

void CLCD_SendCommand(u8 Command)
{
    4640:	df 93       	push	r29
    4642:	cf 93       	push	r28
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	2f 97       	sbiw	r28, 0x0f	; 15
    464a:	0f b6       	in	r0, 0x3f	; 63
    464c:	f8 94       	cli
    464e:	de bf       	out	0x3e, r29	; 62
    4650:	0f be       	out	0x3f, r0	; 63
    4652:	cd bf       	out	0x3d, r28	; 61
    4654:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	60 e0       	ldi	r22, 0x00	; 0
    465a:	40 e0       	ldi	r20, 0x00	; 0
    465c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
	//SET ReadWrite pin low to write
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	61 e0       	ldi	r22, 0x01	; 1
    4664:	40 e0       	ldi	r20, 0x00	; 0
    4666:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
	//SET Data/Command Port value is the command
	DIO_SetPortValue(CLCD_DataPort,Command);
    466a:	82 e0       	ldi	r24, 0x02	; 2
    466c:	6f 85       	ldd	r22, Y+15	; 0x0f
    466e:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	62 e0       	ldi	r22, 0x02	; 2
    4676:	41 e0       	ldi	r20, 0x01	; 1
    4678:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	a0 e0       	ldi	r26, 0x00	; 0
    4682:	b0 e4       	ldi	r27, 0x40	; 64
    4684:	8b 87       	std	Y+11, r24	; 0x0b
    4686:	9c 87       	std	Y+12, r25	; 0x0c
    4688:	ad 87       	std	Y+13, r26	; 0x0d
    468a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    468c:	6b 85       	ldd	r22, Y+11	; 0x0b
    468e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4690:	8d 85       	ldd	r24, Y+13	; 0x0d
    4692:	9e 85       	ldd	r25, Y+14	; 0x0e
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	4a ef       	ldi	r20, 0xFA	; 250
    469a:	54 e4       	ldi	r21, 0x44	; 68
    469c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	8f 83       	std	Y+7, r24	; 0x07
    46a6:	98 87       	std	Y+8, r25	; 0x08
    46a8:	a9 87       	std	Y+9, r26	; 0x09
    46aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46ac:	6f 81       	ldd	r22, Y+7	; 0x07
    46ae:	78 85       	ldd	r23, Y+8	; 0x08
    46b0:	89 85       	ldd	r24, Y+9	; 0x09
    46b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b4:	20 e0       	ldi	r18, 0x00	; 0
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	40 e8       	ldi	r20, 0x80	; 128
    46ba:	5f e3       	ldi	r21, 0x3F	; 63
    46bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46c0:	88 23       	and	r24, r24
    46c2:	2c f4       	brge	.+10     	; 0x46ce <CLCD_SendCommand+0x8e>
		__ticks = 1;
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	9e 83       	std	Y+6, r25	; 0x06
    46ca:	8d 83       	std	Y+5, r24	; 0x05
    46cc:	3f c0       	rjmp	.+126    	; 0x474c <CLCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    46ce:	6f 81       	ldd	r22, Y+7	; 0x07
    46d0:	78 85       	ldd	r23, Y+8	; 0x08
    46d2:	89 85       	ldd	r24, Y+9	; 0x09
    46d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	3f ef       	ldi	r19, 0xFF	; 255
    46da:	4f e7       	ldi	r20, 0x7F	; 127
    46dc:	57 e4       	ldi	r21, 0x47	; 71
    46de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46e2:	18 16       	cp	r1, r24
    46e4:	4c f5       	brge	.+82     	; 0x4738 <CLCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	40 e2       	ldi	r20, 0x20	; 32
    46f4:	51 e4       	ldi	r21, 0x41	; 65
    46f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	bc 01       	movw	r22, r24
    4700:	cd 01       	movw	r24, r26
    4702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
    470a:	9e 83       	std	Y+6, r25	; 0x06
    470c:	8d 83       	std	Y+5, r24	; 0x05
    470e:	0f c0       	rjmp	.+30     	; 0x472e <CLCD_SendCommand+0xee>
    4710:	88 ec       	ldi	r24, 0xC8	; 200
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	9c 83       	std	Y+4, r25	; 0x04
    4716:	8b 83       	std	Y+3, r24	; 0x03
    4718:	8b 81       	ldd	r24, Y+3	; 0x03
    471a:	9c 81       	ldd	r25, Y+4	; 0x04
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	f1 f7       	brne	.-4      	; 0x471c <CLCD_SendCommand+0xdc>
    4720:	9c 83       	std	Y+4, r25	; 0x04
    4722:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4724:	8d 81       	ldd	r24, Y+5	; 0x05
    4726:	9e 81       	ldd	r25, Y+6	; 0x06
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	9e 83       	std	Y+6, r25	; 0x06
    472c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    472e:	8d 81       	ldd	r24, Y+5	; 0x05
    4730:	9e 81       	ldd	r25, Y+6	; 0x06
    4732:	00 97       	sbiw	r24, 0x00	; 0
    4734:	69 f7       	brne	.-38     	; 0x4710 <CLCD_SendCommand+0xd0>
    4736:	14 c0       	rjmp	.+40     	; 0x4760 <CLCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4738:	6f 81       	ldd	r22, Y+7	; 0x07
    473a:	78 85       	ldd	r23, Y+8	; 0x08
    473c:	89 85       	ldd	r24, Y+9	; 0x09
    473e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	9e 83       	std	Y+6, r25	; 0x06
    474a:	8d 83       	std	Y+5, r24	; 0x05
    474c:	8d 81       	ldd	r24, Y+5	; 0x05
    474e:	9e 81       	ldd	r25, Y+6	; 0x06
    4750:	9a 83       	std	Y+2, r25	; 0x02
    4752:	89 83       	std	Y+1, r24	; 0x01
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	9a 81       	ldd	r25, Y+2	; 0x02
    4758:	01 97       	sbiw	r24, 0x01	; 1
    475a:	f1 f7       	brne	.-4      	; 0x4758 <CLCD_SendCommand+0x118>
    475c:	9a 83       	std	Y+2, r25	; 0x02
    475e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	62 e0       	ldi	r22, 0x02	; 2
    4764:	40 e0       	ldi	r20, 0x00	; 0
    4766:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
}
    476a:	2f 96       	adiw	r28, 0x0f	; 15
    476c:	0f b6       	in	r0, 0x3f	; 63
    476e:	f8 94       	cli
    4770:	de bf       	out	0x3e, r29	; 62
    4772:	0f be       	out	0x3f, r0	; 63
    4774:	cd bf       	out	0x3d, r28	; 61
    4776:	cf 91       	pop	r28
    4778:	df 91       	pop	r29
    477a:	08 95       	ret

0000477c <CLCD_SendData>:

void CLCD_SendData(u8 Data)
{
    477c:	df 93       	push	r29
    477e:	cf 93       	push	r28
    4780:	cd b7       	in	r28, 0x3d	; 61
    4782:	de b7       	in	r29, 0x3e	; 62
    4784:	2f 97       	sbiw	r28, 0x0f	; 15
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	f8 94       	cli
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    4792:	81 e0       	ldi	r24, 0x01	; 1
    4794:	60 e0       	ldi	r22, 0x00	; 0
    4796:	41 e0       	ldi	r20, 0x01	; 1
    4798:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
	//SET ReadWrite pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	61 e0       	ldi	r22, 0x01	; 1
    47a0:	40 e0       	ldi	r20, 0x00	; 0
    47a2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
	//SET Data/Command Port value is the Data
	DIO_SetPortValue(CLCD_DataPort,Data);
    47a6:	82 e0       	ldi	r24, 0x02	; 2
    47a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    47aa:	0e 94 02 14 	call	0x2804	; 0x2804 <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	62 e0       	ldi	r22, 0x02	; 2
    47b2:	41 e0       	ldi	r20, 0x01	; 1
    47b4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
    47b8:	80 e0       	ldi	r24, 0x00	; 0
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	a0 e0       	ldi	r26, 0x00	; 0
    47be:	b0 e4       	ldi	r27, 0x40	; 64
    47c0:	8b 87       	std	Y+11, r24	; 0x0b
    47c2:	9c 87       	std	Y+12, r25	; 0x0c
    47c4:	ad 87       	std	Y+13, r26	; 0x0d
    47c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    47ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    47cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    47d0:	20 e0       	ldi	r18, 0x00	; 0
    47d2:	30 e0       	ldi	r19, 0x00	; 0
    47d4:	4a ef       	ldi	r20, 0xFA	; 250
    47d6:	54 e4       	ldi	r21, 0x44	; 68
    47d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47dc:	dc 01       	movw	r26, r24
    47de:	cb 01       	movw	r24, r22
    47e0:	8f 83       	std	Y+7, r24	; 0x07
    47e2:	98 87       	std	Y+8, r25	; 0x08
    47e4:	a9 87       	std	Y+9, r26	; 0x09
    47e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47e8:	6f 81       	ldd	r22, Y+7	; 0x07
    47ea:	78 85       	ldd	r23, Y+8	; 0x08
    47ec:	89 85       	ldd	r24, Y+9	; 0x09
    47ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	40 e8       	ldi	r20, 0x80	; 128
    47f6:	5f e3       	ldi	r21, 0x3F	; 63
    47f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47fc:	88 23       	and	r24, r24
    47fe:	2c f4       	brge	.+10     	; 0x480a <CLCD_SendData+0x8e>
		__ticks = 1;
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	9e 83       	std	Y+6, r25	; 0x06
    4806:	8d 83       	std	Y+5, r24	; 0x05
    4808:	3f c0       	rjmp	.+126    	; 0x4888 <CLCD_SendData+0x10c>
	else if (__tmp > 65535)
    480a:	6f 81       	ldd	r22, Y+7	; 0x07
    480c:	78 85       	ldd	r23, Y+8	; 0x08
    480e:	89 85       	ldd	r24, Y+9	; 0x09
    4810:	9a 85       	ldd	r25, Y+10	; 0x0a
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	3f ef       	ldi	r19, 0xFF	; 255
    4816:	4f e7       	ldi	r20, 0x7F	; 127
    4818:	57 e4       	ldi	r21, 0x47	; 71
    481a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    481e:	18 16       	cp	r1, r24
    4820:	4c f5       	brge	.+82     	; 0x4874 <CLCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4822:	6b 85       	ldd	r22, Y+11	; 0x0b
    4824:	7c 85       	ldd	r23, Y+12	; 0x0c
    4826:	8d 85       	ldd	r24, Y+13	; 0x0d
    4828:	9e 85       	ldd	r25, Y+14	; 0x0e
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	40 e2       	ldi	r20, 0x20	; 32
    4830:	51 e4       	ldi	r21, 0x41	; 65
    4832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4836:	dc 01       	movw	r26, r24
    4838:	cb 01       	movw	r24, r22
    483a:	bc 01       	movw	r22, r24
    483c:	cd 01       	movw	r24, r26
    483e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	9e 83       	std	Y+6, r25	; 0x06
    4848:	8d 83       	std	Y+5, r24	; 0x05
    484a:	0f c0       	rjmp	.+30     	; 0x486a <CLCD_SendData+0xee>
    484c:	88 ec       	ldi	r24, 0xC8	; 200
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	9c 83       	std	Y+4, r25	; 0x04
    4852:	8b 83       	std	Y+3, r24	; 0x03
    4854:	8b 81       	ldd	r24, Y+3	; 0x03
    4856:	9c 81       	ldd	r25, Y+4	; 0x04
    4858:	01 97       	sbiw	r24, 0x01	; 1
    485a:	f1 f7       	brne	.-4      	; 0x4858 <CLCD_SendData+0xdc>
    485c:	9c 83       	std	Y+4, r25	; 0x04
    485e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4860:	8d 81       	ldd	r24, Y+5	; 0x05
    4862:	9e 81       	ldd	r25, Y+6	; 0x06
    4864:	01 97       	sbiw	r24, 0x01	; 1
    4866:	9e 83       	std	Y+6, r25	; 0x06
    4868:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    486a:	8d 81       	ldd	r24, Y+5	; 0x05
    486c:	9e 81       	ldd	r25, Y+6	; 0x06
    486e:	00 97       	sbiw	r24, 0x00	; 0
    4870:	69 f7       	brne	.-38     	; 0x484c <CLCD_SendData+0xd0>
    4872:	14 c0       	rjmp	.+40     	; 0x489c <CLCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4874:	6f 81       	ldd	r22, Y+7	; 0x07
    4876:	78 85       	ldd	r23, Y+8	; 0x08
    4878:	89 85       	ldd	r24, Y+9	; 0x09
    487a:	9a 85       	ldd	r25, Y+10	; 0x0a
    487c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4880:	dc 01       	movw	r26, r24
    4882:	cb 01       	movw	r24, r22
    4884:	9e 83       	std	Y+6, r25	; 0x06
    4886:	8d 83       	std	Y+5, r24	; 0x05
    4888:	8d 81       	ldd	r24, Y+5	; 0x05
    488a:	9e 81       	ldd	r25, Y+6	; 0x06
    488c:	9a 83       	std	Y+2, r25	; 0x02
    488e:	89 83       	std	Y+1, r24	; 0x01
    4890:	89 81       	ldd	r24, Y+1	; 0x01
    4892:	9a 81       	ldd	r25, Y+2	; 0x02
    4894:	01 97       	sbiw	r24, 0x01	; 1
    4896:	f1 f7       	brne	.-4      	; 0x4894 <CLCD_SendData+0x118>
    4898:	9a 83       	std	Y+2, r25	; 0x02
    489a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	62 e0       	ldi	r22, 0x02	; 2
    48a0:	40 e0       	ldi	r20, 0x00	; 0
    48a2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>
}
    48a6:	2f 96       	adiw	r28, 0x0f	; 15
    48a8:	0f b6       	in	r0, 0x3f	; 63
    48aa:	f8 94       	cli
    48ac:	de bf       	out	0x3e, r29	; 62
    48ae:	0f be       	out	0x3f, r0	; 63
    48b0:	cd bf       	out	0x3d, r28	; 61
    48b2:	cf 91       	pop	r28
    48b4:	df 91       	pop	r29
    48b6:	08 95       	ret

000048b8 <CLCD_SendWord>:

void CLCD_SendWord(u8 *Word_PTR)
{
    48b8:	df 93       	push	r29
    48ba:	cf 93       	push	r28
    48bc:	00 d0       	rcall	.+0      	; 0x48be <CLCD_SendWord+0x6>
    48be:	cd b7       	in	r28, 0x3d	; 61
    48c0:	de b7       	in	r29, 0x3e	; 62
    48c2:	9a 83       	std	Y+2, r25	; 0x02
    48c4:	89 83       	std	Y+1, r24	; 0x01
    48c6:	0b c0       	rjmp	.+22     	; 0x48de <CLCD_SendWord+0x26>
	while(*Word_PTR) 		//Word = String = array of charaters
	{
		CLCD_SendData(*Word_PTR++);
    48c8:	e9 81       	ldd	r30, Y+1	; 0x01
    48ca:	fa 81       	ldd	r31, Y+2	; 0x02
    48cc:	20 81       	ld	r18, Z
    48ce:	89 81       	ldd	r24, Y+1	; 0x01
    48d0:	9a 81       	ldd	r25, Y+2	; 0x02
    48d2:	01 96       	adiw	r24, 0x01	; 1
    48d4:	9a 83       	std	Y+2, r25	; 0x02
    48d6:	89 83       	std	Y+1, r24	; 0x01
    48d8:	82 2f       	mov	r24, r18
    48da:	0e 94 be 23 	call	0x477c	; 0x477c <CLCD_SendData>
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
}

void CLCD_SendWord(u8 *Word_PTR)
{
	while(*Word_PTR) 		//Word = String = array of charaters
    48de:	e9 81       	ldd	r30, Y+1	; 0x01
    48e0:	fa 81       	ldd	r31, Y+2	; 0x02
    48e2:	80 81       	ld	r24, Z
    48e4:	88 23       	and	r24, r24
    48e6:	81 f7       	brne	.-32     	; 0x48c8 <CLCD_SendWord+0x10>
	{
		CLCD_SendData(*Word_PTR++);
	}
}
    48e8:	0f 90       	pop	r0
    48ea:	0f 90       	pop	r0
    48ec:	cf 91       	pop	r28
    48ee:	df 91       	pop	r29
    48f0:	08 95       	ret

000048f2 <CLCD_GoToXY>:

//to move from position to another in CLCD
STD_Return CLCD_GoToXY(u8 X_Position,u8 Y_Position)
{
    48f2:	df 93       	push	r29
    48f4:	cf 93       	push	r28
    48f6:	00 d0       	rcall	.+0      	; 0x48f8 <CLCD_GoToXY+0x6>
    48f8:	00 d0       	rcall	.+0      	; 0x48fa <CLCD_GoToXY+0x8>
    48fa:	cd b7       	in	r28, 0x3d	; 61
    48fc:	de b7       	in	r29, 0x3e	; 62
    48fe:	8a 83       	std	Y+2, r24	; 0x02
    4900:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_address;
	if(X_Position == 0)
    4902:	8a 81       	ldd	r24, Y+2	; 0x02
    4904:	88 23       	and	r24, r24
    4906:	49 f4       	brne	.+18     	; 0x491a <CLCD_GoToXY+0x28>
		{
			DDRAM_address = Y_Position;
    4908:	8b 81       	ldd	r24, Y+3	; 0x03
    490a:	89 83       	std	Y+1, r24	; 0x01
			CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    490c:	89 81       	ldd	r24, Y+1	; 0x01
    490e:	80 58       	subi	r24, 0x80	; 128
    4910:	0e 94 20 23 	call	0x4640	; 0x4640 <CLCD_SendCommand>
			return E_NOK;
    4914:	81 e0       	ldi	r24, 0x01	; 1
    4916:	8c 83       	std	Y+4, r24	; 0x04
    4918:	0e c0       	rjmp	.+28     	; 0x4936 <CLCD_GoToXY+0x44>
		}
	else if (X_Position == 1)
    491a:	8a 81       	ldd	r24, Y+2	; 0x02
    491c:	81 30       	cpi	r24, 0x01	; 1
    491e:	51 f4       	brne	.+20     	; 0x4934 <CLCD_GoToXY+0x42>
		{
		DDRAM_address = Y_Position + FirstLoc_SecondLine;
    4920:	8b 81       	ldd	r24, Y+3	; 0x03
    4922:	80 5c       	subi	r24, 0xC0	; 192
    4924:	89 83       	std	Y+1, r24	; 0x01
		CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    4926:	89 81       	ldd	r24, Y+1	; 0x01
    4928:	80 58       	subi	r24, 0x80	; 128
    492a:	0e 94 20 23 	call	0x4640	; 0x4640 <CLCD_SendCommand>
		return E_NOK;
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	8c 83       	std	Y+4, r24	; 0x04
    4932:	01 c0       	rjmp	.+2      	; 0x4936 <CLCD_GoToXY+0x44>
		}
	else
	{
		return E_OK;
    4934:	1c 82       	std	Y+4, r1	; 0x04
    4936:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    4938:	0f 90       	pop	r0
    493a:	0f 90       	pop	r0
    493c:	0f 90       	pop	r0
    493e:	0f 90       	pop	r0
    4940:	cf 91       	pop	r28
    4942:	df 91       	pop	r29
    4944:	08 95       	ret

00004946 <CLCD_SendSpecialChar>:
//to write special function by CGRAM
void CLCD_SendSpecialChar(u8 *Pattern,u8 BlockNumber,u8 X_Position,u8 Y_Position)
{
    4946:	df 93       	push	r29
    4948:	cf 93       	push	r28
    494a:	cd b7       	in	r28, 0x3d	; 61
    494c:	de b7       	in	r29, 0x3e	; 62
    494e:	27 97       	sbiw	r28, 0x07	; 7
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	f8 94       	cli
    4954:	de bf       	out	0x3e, r29	; 62
    4956:	0f be       	out	0x3f, r0	; 63
    4958:	cd bf       	out	0x3d, r28	; 61
    495a:	9c 83       	std	Y+4, r25	; 0x04
    495c:	8b 83       	std	Y+3, r24	; 0x03
    495e:	6d 83       	std	Y+5, r22	; 0x05
    4960:	4e 83       	std	Y+6, r20	; 0x06
    4962:	2f 83       	std	Y+7, r18	; 0x07
	u8 CGRAM_address=0;
    4964:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter;
	CGRAM_address = BlockNumber*8;
    4966:	8d 81       	ldd	r24, Y+5	; 0x05
    4968:	88 2f       	mov	r24, r24
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	88 0f       	add	r24, r24
    496e:	99 1f       	adc	r25, r25
    4970:	88 0f       	add	r24, r24
    4972:	99 1f       	adc	r25, r25
    4974:	88 0f       	add	r24, r24
    4976:	99 1f       	adc	r25, r25
    4978:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_SendCommand(CGRAM_address+Set_Bit6);
    497a:	8a 81       	ldd	r24, Y+2	; 0x02
    497c:	80 5c       	subi	r24, 0xC0	; 192
    497e:	0e 94 20 23 	call	0x4640	; 0x4640 <CLCD_SendCommand>

	for(counter=0;counter<8;counter++)
    4982:	19 82       	std	Y+1, r1	; 0x01
    4984:	0e c0       	rjmp	.+28     	; 0x49a2 <CLCD_SendSpecialChar+0x5c>
		{
			CLCD_SendData(Pattern[counter]);
    4986:	89 81       	ldd	r24, Y+1	; 0x01
    4988:	28 2f       	mov	r18, r24
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	8b 81       	ldd	r24, Y+3	; 0x03
    498e:	9c 81       	ldd	r25, Y+4	; 0x04
    4990:	fc 01       	movw	r30, r24
    4992:	e2 0f       	add	r30, r18
    4994:	f3 1f       	adc	r31, r19
    4996:	80 81       	ld	r24, Z
    4998:	0e 94 be 23 	call	0x477c	; 0x477c <CLCD_SendData>
	u8 CGRAM_address=0;
	u8 counter;
	CGRAM_address = BlockNumber*8;
	CLCD_SendCommand(CGRAM_address+Set_Bit6);

	for(counter=0;counter<8;counter++)
    499c:	89 81       	ldd	r24, Y+1	; 0x01
    499e:	8f 5f       	subi	r24, 0xFF	; 255
    49a0:	89 83       	std	Y+1, r24	; 0x01
    49a2:	89 81       	ldd	r24, Y+1	; 0x01
    49a4:	88 30       	cpi	r24, 0x08	; 8
    49a6:	78 f3       	brcs	.-34     	; 0x4986 <CLCD_SendSpecialChar+0x40>
		{
			CLCD_SendData(Pattern[counter]);
		}
	CLCD_GoToXY(X_Position,Y_Position);
    49a8:	8e 81       	ldd	r24, Y+6	; 0x06
    49aa:	6f 81       	ldd	r22, Y+7	; 0x07
    49ac:	0e 94 79 24 	call	0x48f2	; 0x48f2 <CLCD_GoToXY>
	CLCD_SendData(BlockNumber);
    49b0:	8d 81       	ldd	r24, Y+5	; 0x05
    49b2:	0e 94 be 23 	call	0x477c	; 0x477c <CLCD_SendData>
}
    49b6:	27 96       	adiw	r28, 0x07	; 7
    49b8:	0f b6       	in	r0, 0x3f	; 63
    49ba:	f8 94       	cli
    49bc:	de bf       	out	0x3e, r29	; 62
    49be:	0f be       	out	0x3f, r0	; 63
    49c0:	cd bf       	out	0x3d, r28	; 61
    49c2:	cf 91       	pop	r28
    49c4:	df 91       	pop	r29
    49c6:	08 95       	ret

000049c8 <CLCD_Display_Decimal_Number>:

void CLCD_Display_Decimal_Number(s32 num)
{
    49c8:	df 93       	push	r29
    49ca:	cf 93       	push	r28
    49cc:	cd b7       	in	r28, 0x3d	; 61
    49ce:	de b7       	in	r29, 0x3e	; 62
    49d0:	61 97       	sbiw	r28, 0x11	; 17
    49d2:	0f b6       	in	r0, 0x3f	; 63
    49d4:	f8 94       	cli
    49d6:	de bf       	out	0x3e, r29	; 62
    49d8:	0f be       	out	0x3f, r0	; 63
    49da:	cd bf       	out	0x3d, r28	; 61
    49dc:	6e 87       	std	Y+14, r22	; 0x0e
    49de:	7f 87       	std	Y+15, r23	; 0x0f
    49e0:	88 8b       	std	Y+16, r24	; 0x10
    49e2:	99 8b       	std	Y+17, r25	; 0x11
	u8 i = 0, j, digit, str[10];
    49e4:	1b 82       	std	Y+3, r1	; 0x03

	/* if number 0 */
	if (0 == num)
    49e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    49e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    49ea:	a8 89       	ldd	r26, Y+16	; 0x10
    49ec:	b9 89       	ldd	r27, Y+17	; 0x11
    49ee:	00 97       	sbiw	r24, 0x00	; 0
    49f0:	a1 05       	cpc	r26, r1
    49f2:	b1 05       	cpc	r27, r1
    49f4:	19 f4       	brne	.+6      	; 0x49fc <CLCD_Display_Decimal_Number+0x34>
	{
		CLCD_SendData('0');
    49f6:	80 e3       	ldi	r24, 0x30	; 48
    49f8:	0e 94 be 23 	call	0x477c	; 0x477c <CLCD_SendData>
	}

	/* if the number is negative */
	if (num < 0)
    49fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    49fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a00:	a8 89       	ldd	r26, Y+16	; 0x10
    4a02:	b9 89       	ldd	r27, Y+17	; 0x11
    4a04:	bb 23       	and	r27, r27
    4a06:	0c f0       	brlt	.+2      	; 0x4a0a <CLCD_Display_Decimal_Number+0x42>
    4a08:	42 c0       	rjmp	.+132    	; 0x4a8e <CLCD_Display_Decimal_Number+0xc6>
	{
		CLCD_SendData('-');
    4a0a:	8d e2       	ldi	r24, 0x2D	; 45
    4a0c:	0e 94 be 23 	call	0x477c	; 0x477c <CLCD_SendData>

		/* convert to positive form */
		num = num * -1;
    4a10:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a12:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a14:	a8 89       	ldd	r26, Y+16	; 0x10
    4a16:	b9 89       	ldd	r27, Y+17	; 0x11
    4a18:	b0 95       	com	r27
    4a1a:	a0 95       	com	r26
    4a1c:	90 95       	com	r25
    4a1e:	81 95       	neg	r24
    4a20:	9f 4f       	sbci	r25, 0xFF	; 255
    4a22:	af 4f       	sbci	r26, 0xFF	; 255
    4a24:	bf 4f       	sbci	r27, 0xFF	; 255
    4a26:	8e 87       	std	Y+14, r24	; 0x0e
    4a28:	9f 87       	std	Y+15, r25	; 0x0f
    4a2a:	a8 8b       	std	Y+16, r26	; 0x10
    4a2c:	b9 8b       	std	Y+17, r27	; 0x11
    4a2e:	2f c0       	rjmp	.+94     	; 0x4a8e <CLCD_Display_Decimal_Number+0xc6>
	}

	/* loop on digits of the number */
	while (num > 0)
	{
		digit = (num % 10) + '0';
    4a30:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a32:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a34:	a8 89       	ldd	r26, Y+16	; 0x10
    4a36:	b9 89       	ldd	r27, Y+17	; 0x11
    4a38:	2a e0       	ldi	r18, 0x0A	; 10
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	40 e0       	ldi	r20, 0x00	; 0
    4a3e:	50 e0       	ldi	r21, 0x00	; 0
    4a40:	bc 01       	movw	r22, r24
    4a42:	cd 01       	movw	r24, r26
    4a44:	0e 94 75 26 	call	0x4cea	; 0x4cea <__divmodsi4>
    4a48:	dc 01       	movw	r26, r24
    4a4a:	cb 01       	movw	r24, r22
    4a4c:	80 5d       	subi	r24, 0xD0	; 208
    4a4e:	89 83       	std	Y+1, r24	; 0x01
		str[i] = digit;
    4a50:	8b 81       	ldd	r24, Y+3	; 0x03
    4a52:	28 2f       	mov	r18, r24
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	ce 01       	movw	r24, r28
    4a58:	04 96       	adiw	r24, 0x04	; 4
    4a5a:	fc 01       	movw	r30, r24
    4a5c:	e2 0f       	add	r30, r18
    4a5e:	f3 1f       	adc	r31, r19
    4a60:	89 81       	ldd	r24, Y+1	; 0x01
    4a62:	80 83       	st	Z, r24
		num /= 10;
    4a64:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a66:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a68:	a8 89       	ldd	r26, Y+16	; 0x10
    4a6a:	b9 89       	ldd	r27, Y+17	; 0x11
    4a6c:	2a e0       	ldi	r18, 0x0A	; 10
    4a6e:	30 e0       	ldi	r19, 0x00	; 0
    4a70:	40 e0       	ldi	r20, 0x00	; 0
    4a72:	50 e0       	ldi	r21, 0x00	; 0
    4a74:	bc 01       	movw	r22, r24
    4a76:	cd 01       	movw	r24, r26
    4a78:	0e 94 75 26 	call	0x4cea	; 0x4cea <__divmodsi4>
    4a7c:	da 01       	movw	r26, r20
    4a7e:	c9 01       	movw	r24, r18
    4a80:	8e 87       	std	Y+14, r24	; 0x0e
    4a82:	9f 87       	std	Y+15, r25	; 0x0f
    4a84:	a8 8b       	std	Y+16, r26	; 0x10
    4a86:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    4a88:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8a:	8f 5f       	subi	r24, 0xFF	; 255
    4a8c:	8b 83       	std	Y+3, r24	; 0x03
		/* convert to positive form */
		num = num * -1;
	}

	/* loop on digits of the number */
	while (num > 0)
    4a8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a90:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a92:	a8 89       	ldd	r26, Y+16	; 0x10
    4a94:	b9 89       	ldd	r27, Y+17	; 0x11
    4a96:	18 16       	cp	r1, r24
    4a98:	19 06       	cpc	r1, r25
    4a9a:	1a 06       	cpc	r1, r26
    4a9c:	1b 06       	cpc	r1, r27
    4a9e:	44 f2       	brlt	.-112    	; 0x4a30 <CLCD_Display_Decimal_Number+0x68>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    4aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa2:	8a 83       	std	Y+2, r24	; 0x02
    4aa4:	11 c0       	rjmp	.+34     	; 0x4ac8 <CLCD_Display_Decimal_Number+0x100>
	{
		CLCD_SendData(str[j - 1]);
    4aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa8:	88 2f       	mov	r24, r24
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	9c 01       	movw	r18, r24
    4aae:	21 50       	subi	r18, 0x01	; 1
    4ab0:	30 40       	sbci	r19, 0x00	; 0
    4ab2:	ce 01       	movw	r24, r28
    4ab4:	04 96       	adiw	r24, 0x04	; 4
    4ab6:	fc 01       	movw	r30, r24
    4ab8:	e2 0f       	add	r30, r18
    4aba:	f3 1f       	adc	r31, r19
    4abc:	80 81       	ld	r24, Z
    4abe:	0e 94 be 23 	call	0x477c	; 0x477c <CLCD_SendData>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    4ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac4:	81 50       	subi	r24, 0x01	; 1
    4ac6:	8a 83       	std	Y+2, r24	; 0x02
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	88 23       	and	r24, r24
    4acc:	61 f7       	brne	.-40     	; 0x4aa6 <CLCD_Display_Decimal_Number+0xde>
	{
		CLCD_SendData(str[j - 1]);
	}
}
    4ace:	61 96       	adiw	r28, 0x11	; 17
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	f8 94       	cli
    4ad4:	de bf       	out	0x3e, r29	; 62
    4ad6:	0f be       	out	0x3f, r0	; 63
    4ad8:	cd bf       	out	0x3d, r28	; 61
    4ada:	cf 91       	pop	r28
    4adc:	df 91       	pop	r29
    4ade:	08 95       	ret

00004ae0 <CLCD_Display_RealNumber>:
void CLCD_Display_RealNumber(f32 num)
{
    4ae0:	df 93       	push	r29
    4ae2:	cf 93       	push	r28
    4ae4:	cd b7       	in	r28, 0x3d	; 61
    4ae6:	de b7       	in	r29, 0x3e	; 62
    4ae8:	29 97       	sbiw	r28, 0x09	; 9
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	f8 94       	cli
    4aee:	de bf       	out	0x3e, r29	; 62
    4af0:	0f be       	out	0x3f, r0	; 63
    4af2:	cd bf       	out	0x3d, r28	; 61
    4af4:	6e 83       	std	Y+6, r22	; 0x06
    4af6:	7f 83       	std	Y+7, r23	; 0x07
    4af8:	88 87       	std	Y+8, r24	; 0x08
    4afa:	99 87       	std	Y+9, r25	; 0x09
	//Left number to the decimal point
	s32 left = (s32)num;
    4afc:	6e 81       	ldd	r22, Y+6	; 0x06
    4afe:	7f 81       	ldd	r23, Y+7	; 0x07
    4b00:	88 85       	ldd	r24, Y+8	; 0x08
    4b02:	99 85       	ldd	r25, Y+9	; 0x09
    4b04:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	8a 83       	std	Y+2, r24	; 0x02
    4b0e:	9b 83       	std	Y+3, r25	; 0x03
    4b10:	ac 83       	std	Y+4, r26	; 0x04
    4b12:	bd 83       	std	Y+5, r27	; 0x05
	//calculation to the Right number to the decimal point
	u8 right = (f32)(num - left) * 100;
    4b14:	6a 81       	ldd	r22, Y+2	; 0x02
    4b16:	7b 81       	ldd	r23, Y+3	; 0x03
    4b18:	8c 81       	ldd	r24, Y+4	; 0x04
    4b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    4b1c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4b20:	9b 01       	movw	r18, r22
    4b22:	ac 01       	movw	r20, r24
    4b24:	6e 81       	ldd	r22, Y+6	; 0x06
    4b26:	7f 81       	ldd	r23, Y+7	; 0x07
    4b28:	88 85       	ldd	r24, Y+8	; 0x08
    4b2a:	99 85       	ldd	r25, Y+9	; 0x09
    4b2c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4b30:	dc 01       	movw	r26, r24
    4b32:	cb 01       	movw	r24, r22
    4b34:	bc 01       	movw	r22, r24
    4b36:	cd 01       	movw	r24, r26
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	48 ec       	ldi	r20, 0xC8	; 200
    4b3e:	52 e4       	ldi	r21, 0x42	; 66
    4b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b44:	dc 01       	movw	r26, r24
    4b46:	cb 01       	movw	r24, r22
    4b48:	bc 01       	movw	r22, r24
    4b4a:	cd 01       	movw	r24, r26
    4b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b50:	dc 01       	movw	r26, r24
    4b52:	cb 01       	movw	r24, r22
    4b54:	89 83       	std	Y+1, r24	; 0x01
	//Display Left number to the decimal point
	CLCD_Display_Decimal_Number(left);
    4b56:	8a 81       	ldd	r24, Y+2	; 0x02
    4b58:	9b 81       	ldd	r25, Y+3	; 0x03
    4b5a:	ac 81       	ldd	r26, Y+4	; 0x04
    4b5c:	bd 81       	ldd	r27, Y+5	; 0x05
    4b5e:	bc 01       	movw	r22, r24
    4b60:	cd 01       	movw	r24, r26
    4b62:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <CLCD_Display_Decimal_Number>
	//Display the decimal point
	CLCD_SendData('.');
    4b66:	8e e2       	ldi	r24, 0x2E	; 46
    4b68:	0e 94 be 23 	call	0x477c	; 0x477c <CLCD_SendData>
	//Display the Right number to the decimal point
	CLCD_Display_Decimal_Number(right);
    4b6c:	89 81       	ldd	r24, Y+1	; 0x01
    4b6e:	88 2f       	mov	r24, r24
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	a0 e0       	ldi	r26, 0x00	; 0
    4b74:	b0 e0       	ldi	r27, 0x00	; 0
    4b76:	bc 01       	movw	r22, r24
    4b78:	cd 01       	movw	r24, r26
    4b7a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <CLCD_Display_Decimal_Number>
}
    4b7e:	29 96       	adiw	r28, 0x09	; 9
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	de bf       	out	0x3e, r29	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	cf 91       	pop	r28
    4b8c:	df 91       	pop	r29
    4b8e:	08 95       	ret

00004b90 <KeyPad_Pressed_Key>:
 * Description          : function to define which switch is pressed in the keypad
 * 
 * @return u8           : return the value of the pressed switch 
 */
u8 KeyPad_Pressed_Key(void)
{
    4b90:	df 93       	push	r29
    4b92:	cf 93       	push	r28
    4b94:	00 d0       	rcall	.+0      	; 0x4b96 <KeyPad_Pressed_Key+0x6>
    4b96:	00 d0       	rcall	.+0      	; 0x4b98 <KeyPad_Pressed_Key+0x8>
    4b98:	0f 92       	push	r0
    4b9a:	cd b7       	in	r28, 0x3d	; 61
    4b9c:	de b7       	in	r29, 0x3e	; 62
	u8 ColumnIndex,RowIndex,PinState,PressedKey;

	PressedKey=Key_Not_Pressed;
    4b9e:	8f ef       	ldi	r24, 0xFF	; 255
    4ba0:	89 83       	std	Y+1, r24	; 0x01

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    4ba2:	1b 82       	std	Y+3, r1	; 0x03
    4ba4:	7a c0       	rjmp	.+244    	; 0x4c9a <KeyPad_Pressed_Key+0x10a>
	{
		//Set column of Keypad Output
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	6f ef       	ldi	r22, 0xFF	; 255
    4baa:	0e 94 8f 12 	call	0x251e	; 0x251e <DIO_SetPortDirection>
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);
    4bae:	8b 81       	ldd	r24, Y+3	; 0x03
    4bb0:	88 2f       	mov	r24, r24
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	fc 01       	movw	r30, r24
    4bb6:	e8 59       	subi	r30, 0x98	; 152
    4bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    4bba:	90 81       	ld	r25, Z
    4bbc:	81 e0       	ldi	r24, 0x01	; 1
    4bbe:	69 2f       	mov	r22, r25
    4bc0:	40 e0       	ldi	r20, 0x00	; 0
    4bc2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    4bc6:	1a 82       	std	Y+2, r1	; 0x02
    4bc8:	55 c0       	rjmp	.+170    	; 0x4c74 <KeyPad_Pressed_Key+0xe4>
		{
			//Set Row input and activate pull-up
			DIO_SetPinDirection(KeyPad_Port,KeyPad_Row_Arr[RowIndex],DIO_INPUT);
    4bca:	8a 81       	ldd	r24, Y+2	; 0x02
    4bcc:	88 2f       	mov	r24, r24
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	fc 01       	movw	r30, r24
    4bd2:	e4 59       	subi	r30, 0x94	; 148
    4bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    4bd6:	90 81       	ld	r25, Z
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	69 2f       	mov	r22, r25
    4bdc:	40 e0       	ldi	r20, 0x00	; 0
    4bde:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_SetPinDirection>
			DIO_EnablePullup(KeyPad_Port,KeyPad_Row_Arr[RowIndex],ENABLE_PullUp);
    4be2:	8a 81       	ldd	r24, Y+2	; 0x02
    4be4:	88 2f       	mov	r24, r24
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	fc 01       	movw	r30, r24
    4bea:	e4 59       	subi	r30, 0x94	; 148
    4bec:	fe 4f       	sbci	r31, 0xFE	; 254
    4bee:	90 81       	ld	r25, Z
    4bf0:	81 e0       	ldi	r24, 0x01	; 1
    4bf2:	69 2f       	mov	r22, r25
    4bf4:	40 e0       	ldi	r20, 0x00	; 0
    4bf6:	0e 94 67 15 	call	0x2ace	; 0x2ace <DIO_EnablePullup>

			//Read the current row
			DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    4bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4bfc:	88 2f       	mov	r24, r24
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	fc 01       	movw	r30, r24
    4c02:	e4 59       	subi	r30, 0x94	; 148
    4c04:	fe 4f       	sbci	r31, 0xFE	; 254
    4c06:	90 81       	ld	r25, Z
    4c08:	9e 01       	movw	r18, r28
    4c0a:	2c 5f       	subi	r18, 0xFC	; 252
    4c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	69 2f       	mov	r22, r25
    4c12:	a9 01       	movw	r20, r18
    4c14:	0e 94 4b 14 	call	0x2896	; 0x2896 <DIO_GetPinValue>

			//Check if switch is pressed
			if(PinState==DIO_LOW)
    4c18:	8c 81       	ldd	r24, Y+4	; 0x04
    4c1a:	88 23       	and	r24, r24
    4c1c:	41 f5       	brne	.+80     	; 0x4c6e <KeyPad_Pressed_Key+0xde>
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];
    4c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c20:	48 2f       	mov	r20, r24
    4c22:	50 e0       	ldi	r21, 0x00	; 0
    4c24:	8b 81       	ldd	r24, Y+3	; 0x03
    4c26:	28 2f       	mov	r18, r24
    4c28:	30 e0       	ldi	r19, 0x00	; 0
    4c2a:	ca 01       	movw	r24, r20
    4c2c:	88 0f       	add	r24, r24
    4c2e:	99 1f       	adc	r25, r25
    4c30:	88 0f       	add	r24, r24
    4c32:	99 1f       	adc	r25, r25
    4c34:	82 0f       	add	r24, r18
    4c36:	93 1f       	adc	r25, r19
    4c38:	fc 01       	movw	r30, r24
    4c3a:	e0 59       	subi	r30, 0x90	; 144
    4c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c3e:	80 81       	ld	r24, Z
    4c40:	89 83       	std	Y+1, r24	; 0x01
    4c42:	0f c0       	rjmp	.+30     	; 0x4c62 <KeyPad_Pressed_Key+0xd2>

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    4c44:	8a 81       	ldd	r24, Y+2	; 0x02
    4c46:	88 2f       	mov	r24, r24
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	e4 59       	subi	r30, 0x94	; 148
    4c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4c50:	90 81       	ld	r25, Z
    4c52:	9e 01       	movw	r18, r28
    4c54:	2c 5f       	subi	r18, 0xFC	; 252
    4c56:	3f 4f       	sbci	r19, 0xFF	; 255
    4c58:	81 e0       	ldi	r24, 0x01	; 1
    4c5a:	69 2f       	mov	r22, r25
    4c5c:	a9 01       	movw	r20, r18
    4c5e:	0e 94 4b 14 	call	0x2896	; 0x2896 <DIO_GetPinValue>
			if(PinState==DIO_LOW)
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
    4c62:	8c 81       	ldd	r24, Y+4	; 0x04
    4c64:	88 23       	and	r24, r24
    4c66:	71 f3       	breq	.-36     	; 0x4c44 <KeyPad_Pressed_Key+0xb4>
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
				}
				return PressedKey;
    4c68:	89 81       	ldd	r24, Y+1	; 0x01
    4c6a:	8d 83       	std	Y+5, r24	; 0x05
    4c6c:	1c c0       	rjmp	.+56     	; 0x4ca6 <KeyPad_Pressed_Key+0x116>
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    4c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c70:	8f 5f       	subi	r24, 0xFF	; 255
    4c72:	8a 83       	std	Y+2, r24	; 0x02
    4c74:	8a 81       	ldd	r24, Y+2	; 0x02
    4c76:	84 30       	cpi	r24, 0x04	; 4
    4c78:	08 f4       	brcc	.+2      	; 0x4c7c <KeyPad_Pressed_Key+0xec>
    4c7a:	a7 cf       	rjmp	.-178    	; 0x4bca <KeyPad_Pressed_Key+0x3a>
				}
				return PressedKey;
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
    4c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7e:	88 2f       	mov	r24, r24
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	fc 01       	movw	r30, r24
    4c84:	e8 59       	subi	r30, 0x98	; 152
    4c86:	fe 4f       	sbci	r31, 0xFE	; 254
    4c88:	90 81       	ld	r25, Z
    4c8a:	81 e0       	ldi	r24, 0x01	; 1
    4c8c:	69 2f       	mov	r22, r25
    4c8e:	41 e0       	ldi	r20, 0x01	; 1
    4c90:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <DIO_SetPinValue>

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    4c94:	8b 81       	ldd	r24, Y+3	; 0x03
    4c96:	8f 5f       	subi	r24, 0xFF	; 255
    4c98:	8b 83       	std	Y+3, r24	; 0x03
    4c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9c:	84 30       	cpi	r24, 0x04	; 4
    4c9e:	08 f4       	brcc	.+2      	; 0x4ca2 <KeyPad_Pressed_Key+0x112>
    4ca0:	82 cf       	rjmp	.-252    	; 0x4ba6 <KeyPad_Pressed_Key+0x16>
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
	}
	return PressedKey;
    4ca2:	89 81       	ldd	r24, Y+1	; 0x01
    4ca4:	8d 83       	std	Y+5, r24	; 0x05
    4ca6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4ca8:	0f 90       	pop	r0
    4caa:	0f 90       	pop	r0
    4cac:	0f 90       	pop	r0
    4cae:	0f 90       	pop	r0
    4cb0:	0f 90       	pop	r0
    4cb2:	cf 91       	pop	r28
    4cb4:	df 91       	pop	r29
    4cb6:	08 95       	ret

00004cb8 <TX>:

u8 var = 'B' ;


void TX(void)
{
    4cb8:	df 93       	push	r29
    4cba:	cf 93       	push	r28
    4cbc:	cd b7       	in	r28, 0x3d	; 61
    4cbe:	de b7       	in	r29, 0x3e	; 62
	USART_Transmit_Data_Interrupt(var);
    4cc0:	80 91 80 01 	lds	r24, 0x0180
    4cc4:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_Transmit_Data_Interrupt>
}
    4cc8:	cf 91       	pop	r28
    4cca:	df 91       	pop	r29
    4ccc:	08 95       	ret

00004cce <main>:

void main(void)
{
    4cce:	df 93       	push	r29
    4cd0:	cf 93       	push	r28
    4cd2:	cd b7       	in	r28, 0x3d	; 61
    4cd4:	de b7       	in	r29, 0x3e	; 62
	USART_init();
    4cd6:	0e 94 75 07 	call	0xeea	; 0xeea <USART_init>

	UDRE_Callback(&TX);
    4cda:	8c e5       	ldi	r24, 0x5C	; 92
    4cdc:	96 e2       	ldi	r25, 0x26	; 38
    4cde:	0e 94 ed 08 	call	0x11da	; 0x11da <UDRE_Callback>

	Enable_Global_Interrupt(Enable_GIE_Interrupt);
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
    4ce4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <Enable_Global_Interrupt>
    4ce8:	ff cf       	rjmp	.-2      	; 0x4ce8 <main+0x1a>

00004cea <__divmodsi4>:
    4cea:	97 fb       	bst	r25, 7
    4cec:	09 2e       	mov	r0, r25
    4cee:	05 26       	eor	r0, r21
    4cf0:	0e d0       	rcall	.+28     	; 0x4d0e <__divmodsi4_neg1>
    4cf2:	57 fd       	sbrc	r21, 7
    4cf4:	04 d0       	rcall	.+8      	; 0x4cfe <__divmodsi4_neg2>
    4cf6:	14 d0       	rcall	.+40     	; 0x4d20 <__udivmodsi4>
    4cf8:	0a d0       	rcall	.+20     	; 0x4d0e <__divmodsi4_neg1>
    4cfa:	00 1c       	adc	r0, r0
    4cfc:	38 f4       	brcc	.+14     	; 0x4d0c <__divmodsi4_exit>

00004cfe <__divmodsi4_neg2>:
    4cfe:	50 95       	com	r21
    4d00:	40 95       	com	r20
    4d02:	30 95       	com	r19
    4d04:	21 95       	neg	r18
    4d06:	3f 4f       	sbci	r19, 0xFF	; 255
    4d08:	4f 4f       	sbci	r20, 0xFF	; 255
    4d0a:	5f 4f       	sbci	r21, 0xFF	; 255

00004d0c <__divmodsi4_exit>:
    4d0c:	08 95       	ret

00004d0e <__divmodsi4_neg1>:
    4d0e:	f6 f7       	brtc	.-4      	; 0x4d0c <__divmodsi4_exit>
    4d10:	90 95       	com	r25
    4d12:	80 95       	com	r24
    4d14:	70 95       	com	r23
    4d16:	61 95       	neg	r22
    4d18:	7f 4f       	sbci	r23, 0xFF	; 255
    4d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d1e:	08 95       	ret

00004d20 <__udivmodsi4>:
    4d20:	a1 e2       	ldi	r26, 0x21	; 33
    4d22:	1a 2e       	mov	r1, r26
    4d24:	aa 1b       	sub	r26, r26
    4d26:	bb 1b       	sub	r27, r27
    4d28:	fd 01       	movw	r30, r26
    4d2a:	0d c0       	rjmp	.+26     	; 0x4d46 <__udivmodsi4_ep>

00004d2c <__udivmodsi4_loop>:
    4d2c:	aa 1f       	adc	r26, r26
    4d2e:	bb 1f       	adc	r27, r27
    4d30:	ee 1f       	adc	r30, r30
    4d32:	ff 1f       	adc	r31, r31
    4d34:	a2 17       	cp	r26, r18
    4d36:	b3 07       	cpc	r27, r19
    4d38:	e4 07       	cpc	r30, r20
    4d3a:	f5 07       	cpc	r31, r21
    4d3c:	20 f0       	brcs	.+8      	; 0x4d46 <__udivmodsi4_ep>
    4d3e:	a2 1b       	sub	r26, r18
    4d40:	b3 0b       	sbc	r27, r19
    4d42:	e4 0b       	sbc	r30, r20
    4d44:	f5 0b       	sbc	r31, r21

00004d46 <__udivmodsi4_ep>:
    4d46:	66 1f       	adc	r22, r22
    4d48:	77 1f       	adc	r23, r23
    4d4a:	88 1f       	adc	r24, r24
    4d4c:	99 1f       	adc	r25, r25
    4d4e:	1a 94       	dec	r1
    4d50:	69 f7       	brne	.-38     	; 0x4d2c <__udivmodsi4_loop>
    4d52:	60 95       	com	r22
    4d54:	70 95       	com	r23
    4d56:	80 95       	com	r24
    4d58:	90 95       	com	r25
    4d5a:	9b 01       	movw	r18, r22
    4d5c:	ac 01       	movw	r20, r24
    4d5e:	bd 01       	movw	r22, r26
    4d60:	cf 01       	movw	r24, r30
    4d62:	08 95       	ret

00004d64 <__prologue_saves__>:
    4d64:	2f 92       	push	r2
    4d66:	3f 92       	push	r3
    4d68:	4f 92       	push	r4
    4d6a:	5f 92       	push	r5
    4d6c:	6f 92       	push	r6
    4d6e:	7f 92       	push	r7
    4d70:	8f 92       	push	r8
    4d72:	9f 92       	push	r9
    4d74:	af 92       	push	r10
    4d76:	bf 92       	push	r11
    4d78:	cf 92       	push	r12
    4d7a:	df 92       	push	r13
    4d7c:	ef 92       	push	r14
    4d7e:	ff 92       	push	r15
    4d80:	0f 93       	push	r16
    4d82:	1f 93       	push	r17
    4d84:	cf 93       	push	r28
    4d86:	df 93       	push	r29
    4d88:	cd b7       	in	r28, 0x3d	; 61
    4d8a:	de b7       	in	r29, 0x3e	; 62
    4d8c:	ca 1b       	sub	r28, r26
    4d8e:	db 0b       	sbc	r29, r27
    4d90:	0f b6       	in	r0, 0x3f	; 63
    4d92:	f8 94       	cli
    4d94:	de bf       	out	0x3e, r29	; 62
    4d96:	0f be       	out	0x3f, r0	; 63
    4d98:	cd bf       	out	0x3d, r28	; 61
    4d9a:	09 94       	ijmp

00004d9c <__epilogue_restores__>:
    4d9c:	2a 88       	ldd	r2, Y+18	; 0x12
    4d9e:	39 88       	ldd	r3, Y+17	; 0x11
    4da0:	48 88       	ldd	r4, Y+16	; 0x10
    4da2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4da4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4da6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4da8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4daa:	9b 84       	ldd	r9, Y+11	; 0x0b
    4dac:	aa 84       	ldd	r10, Y+10	; 0x0a
    4dae:	b9 84       	ldd	r11, Y+9	; 0x09
    4db0:	c8 84       	ldd	r12, Y+8	; 0x08
    4db2:	df 80       	ldd	r13, Y+7	; 0x07
    4db4:	ee 80       	ldd	r14, Y+6	; 0x06
    4db6:	fd 80       	ldd	r15, Y+5	; 0x05
    4db8:	0c 81       	ldd	r16, Y+4	; 0x04
    4dba:	1b 81       	ldd	r17, Y+3	; 0x03
    4dbc:	aa 81       	ldd	r26, Y+2	; 0x02
    4dbe:	b9 81       	ldd	r27, Y+1	; 0x01
    4dc0:	ce 0f       	add	r28, r30
    4dc2:	d1 1d       	adc	r29, r1
    4dc4:	0f b6       	in	r0, 0x3f	; 63
    4dc6:	f8 94       	cli
    4dc8:	de bf       	out	0x3e, r29	; 62
    4dca:	0f be       	out	0x3f, r0	; 63
    4dcc:	cd bf       	out	0x3d, r28	; 61
    4dce:	ed 01       	movw	r28, r26
    4dd0:	08 95       	ret

00004dd2 <_exit>:
    4dd2:	f8 94       	cli

00004dd4 <__stop_program>:
    4dd4:	ff cf       	rjmp	.-2      	; 0x4dd4 <__stop_program>
