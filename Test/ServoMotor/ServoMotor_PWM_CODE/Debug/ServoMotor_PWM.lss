
ServoMotor_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  000042d4  00004368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800180  00800180  00004488  2**0
                  ALLOC
  3 .stab         000047c4  00000000  00000000  00004488  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000232e  00000000  00000000  00008c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000af7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000b13a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000b34e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000d960  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000ee2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001013c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00010623  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001103d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__vector_1>
       8:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_2>
       c:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__vector_3>
      10:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_4>
      14:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__vector_10>
      2c:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 20 	call	0x40b0	; 0x40b0 <main>
      8a:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 5d 21 	jmp	0x42ba	; 0x42ba <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Timer0_init>:
static void (*Timer0_CTC_CallBack_Func)(void);
static void (*Timer2_OVF_CallBack_Func)(void);
static void (*Timer2_CTC_CallBack_Func)(void);

void Timer0_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
		#elif defined Timer0_CLK_External_RisingEdge_CounterMode //On Pin T0
				SET_BIT(TCCR0,CS00);
				SET_BIT(TCCR0,CS01);
				SET_BIT(TCCR0,CS02);
		#endif
}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <Timer0_SetValue>:
void Timer0_SetValue(u8 Value)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	0f 92       	push	r0
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer0_PhaseCorrect_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer0_Fast_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
#endif
}
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <Timer0_CallBack>:

void Timer0_CallBack(void (*FUNC_PTR)(void))
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <Timer0_CallBack+0x6>
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer0_Normal_Timer_Mode
		Timer0_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer0_CTC_Timer_Mode
		Timer0_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	Timer0_OVF_CallBack_Func();
     f4e:	e0 91 80 01 	lds	r30, 0x0180
     f52:	f0 91 81 01 	lds	r31, 0x0181
     f56:	09 95       	icall
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_CallBack_Func();
     fa8:	e0 91 82 01 	lds	r30, 0x0182
     fac:	f0 91 83 01 	lds	r31, 0x0183
     fb0:	09 95       	icall
}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	7f 91       	pop	r23
     fc4:	6f 91       	pop	r22
     fc6:	5f 91       	pop	r21
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <Timer1_init>:


void Timer1_init(void)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
#elif defined Timer1_Compare_Output_FastPWM_Mode
#if defined Normal_PORT_Operation_OC1A
	CLEAR_BIT(TCCR1A,COM1A0);
	CLEAR_BIT(TCCR1A,COM1A1);
#elif defined ClearCompareMatchOC1A_SetTop_OC1A //Non_Inverted Mode
	CLEAR_BIT(TCCR1A,COM1A0);
     fe0:	af e4       	ldi	r26, 0x4F	; 79
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ef e4       	ldi	r30, 0x4F	; 79
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7b       	andi	r24, 0xBF	; 191
     fec:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
     fee:	af e4       	ldi	r26, 0x4F	; 79
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ef e4       	ldi	r30, 0x4F	; 79
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 68       	ori	r24, 0x80	; 128
     ffa:	8c 93       	st	X, r24
#elif defined Timer1_CLK_No_Prescaler
		SET_BIT(TCCR1B,CS10);
		CLEAR_BIT(TCCR1B,CS11);
		CLEAR_BIT(TCCR1B,CS12);
#elif defined Timer1_CLK_8_Prescaler
		CLEAR_BIT(TCCR1B,CS10);
     ffc:	ae e4       	ldi	r26, 0x4E	; 78
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ee e4       	ldi	r30, 0x4E	; 78
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8e 7f       	andi	r24, 0xFE	; 254
    1008:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    100a:	ae e4       	ldi	r26, 0x4E	; 78
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ee e4       	ldi	r30, 0x4E	; 78
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	82 60       	ori	r24, 0x02	; 2
    1016:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    1018:	ae e4       	ldi	r26, 0x4E	; 78
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	ee e4       	ldi	r30, 0x4E	; 78
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8b 7f       	andi	r24, 0xFB	; 251
    1024:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,WGM10);
			SET_BIT(TCCR1A,WGM11);
			CLEAR_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode
			CLEAR_BIT(TCCR1A,WGM10);
    1026:	af e4       	ldi	r26, 0x4F	; 79
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ef e4       	ldi	r30, 0x4F	; 79
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8e 7f       	andi	r24, 0xFE	; 254
    1032:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,WGM11);
    1034:	af e4       	ldi	r26, 0x4F	; 79
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ef e4       	ldi	r30, 0x4F	; 79
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	82 60       	ori	r24, 0x02	; 2
    1040:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    1042:	ae e4       	ldi	r26, 0x4E	; 78
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ee e4       	ldi	r30, 0x4E	; 78
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM13);
    1050:	ae e4       	ldi	r26, 0x4E	; 78
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e4       	ldi	r30, 0x4E	; 78
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 61       	ori	r24, 0x10	; 16
    105c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
			CLEAR_BIT(TCCR1A,WGM11);
			SET_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
#endif
}
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <Timer1_SetValueChannelA>:
void Timer1_SetValueChannelA(u16 Value)	//to Set value of timer ChannelA
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <Timer1_SetValueChannelA+0x6>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01
	#elif defined Timer1_FixedValue_Fast_PWM_Mode
		OCR1A = Value; //Set Compare Output Value to set the value of duty cycle
	#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
		OCR1A = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelA
		OCR1A=Value;
    1072:	ea e4       	ldi	r30, 0x4A	; 74
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
	#endif
#endif
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <Timer1_SetValueChannelB>:
void Timer1_SetValueChannelB(u16 Value)	//to Set value of timer ChannelB
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <Timer1_SetValueChannelB+0x6>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelB
		OCR1B=Value;
	#endif
#endif
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <Timer1_SetICR1_TopValue>:
void Timer1_SetICR1_TopValue(u16 Top_Value) //ICR1
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <Timer1_SetICR1_TopValue+0x6>
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Top_Value;
    10ae:	e6 e4       	ldi	r30, 0x46	; 70
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	80 83       	st	Z, r24
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <Timer1_SetCompMatch_Value>:
void Timer1_SetCompMatch_Value(u16 Comp_Value)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <Timer1_SetCompMatch_Value+0x6>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Comp_Value;
    10d2:	ea e4       	ldi	r30, 0x4A	; 74
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	9a 81       	ldd	r25, Y+2	; 0x02
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24
}
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <Timer2_init>:
void Timer2_init(void)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	#if defined Timer2_Normal_Timer_Mode
		CLEAR_BIT(TCCR2,WGM20);
		CLEAR_BIT(TCCR2,WGM21);
		SET_BIT(TIMSK,TOIE2);	//Enable Overflow Interrupt peripheral
	#elif defined Timer2_CTC_Timer_Mode
			CLEAR_BIT(TCCR2,WGM20);
    10f0:	a5 e4       	ldi	r26, 0x45	; 69
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e5 e4       	ldi	r30, 0x45	; 69
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 7b       	andi	r24, 0xBF	; 191
    10fc:	8c 93       	st	X, r24
			SET_BIT(TCCR2,WGM21);
    10fe:	a5 e4       	ldi	r26, 0x45	; 69
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e4       	ldi	r30, 0x45	; 69
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE2);	//Enable Compare Output Interrupt peripheral
    110c:	a9 e5       	ldi	r26, 0x59	; 89
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e9 e5       	ldi	r30, 0x59	; 89
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	8c 93       	st	X, r24
		#elif defined Timer2_CLK_External_RisingEdge_CounterMode //On Pin T2
				SET_BIT(TCCR2,CS20);
				SET_BIT(TCCR2,CS21);
				SET_BIT(TCCR2,CS22);
		#endif
}
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <Timer2_SetValue>:
void Timer2_SetValue(u8 Value)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	0f 92       	push	r0
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	89 83       	std	Y+1, r24	; 0x01
#if defined Timer2_Normal_Timer_Mode
	TCNT2 = Value; //Set Overflow Value
#elif defined Timer2_CTC_Timer_Mode
	OCR2 = Value; //Set Compare Output Value
    112c:	e3 e4       	ldi	r30, 0x43	; 67
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	80 83       	st	Z, r24
#elif defined Timer2_PhaseCorrect_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer2_Fast_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#endif
}
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <Timer2_CallBack>:

void Timer2_CallBack(void (*FUNC_PTR)(void))
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <Timer2_CallBack+0x6>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer2_Normal_Timer_Mode
		Timer2_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer2_CTC_Timer_Mode
		Timer2_CTC_CallBack_Func = FUNC_PTR;
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	90 93 87 01 	sts	0x0187, r25
    1152:	80 93 86 01 	sts	0x0186, r24
	#endif
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	Timer2_OVF_CallBack_Func();
    118a:	e0 91 84 01 	lds	r30, 0x0184
    118e:	f0 91 85 01 	lds	r31, 0x0185
    1192:	09 95       	icall
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti

000011ba <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	Timer2_CTC_CallBack_Func();
    11e4:	e0 91 86 01 	lds	r30, 0x0186
    11e8:	f0 91 87 01 	lds	r31, 0x0187
    11ec:	09 95       	icall
}
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	ff 91       	pop	r31
    11f4:	ef 91       	pop	r30
    11f6:	bf 91       	pop	r27
    11f8:	af 91       	pop	r26
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	7f 91       	pop	r23
    1200:	6f 91       	pop	r22
    1202:	5f 91       	pop	r21
    1204:	4f 91       	pop	r20
    1206:	3f 91       	pop	r19
    1208:	2f 91       	pop	r18
    120a:	0f 90       	pop	r0
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	0f 90       	pop	r0
    1210:	1f 90       	pop	r1
    1212:	18 95       	reti

00001214 <__vector_1>:
static void (*External_Function0)(void);
static void (*External_Function1)(void);
static void (*External_Function2)(void);
/****************************************ISR for INT0*************************************************/
ISR(INT0_Vect)
{
    1214:	1f 92       	push	r1
    1216:	0f 92       	push	r0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	0f 92       	push	r0
    121c:	11 24       	eor	r1, r1
    121e:	2f 93       	push	r18
    1220:	3f 93       	push	r19
    1222:	4f 93       	push	r20
    1224:	5f 93       	push	r21
    1226:	6f 93       	push	r22
    1228:	7f 93       	push	r23
    122a:	8f 93       	push	r24
    122c:	9f 93       	push	r25
    122e:	af 93       	push	r26
    1230:	bf 93       	push	r27
    1232:	ef 93       	push	r30
    1234:	ff 93       	push	r31
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
	(*External_Function0)();
    123e:	e0 91 88 01 	lds	r30, 0x0188
    1242:	f0 91 89 01 	lds	r31, 0x0189
    1246:	09 95       	icall
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <__vector_2>:
/****************************************ISR for INT1*************************************************/
ISR(INT1_Vect)
{
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	2f 93       	push	r18
    127a:	3f 93       	push	r19
    127c:	4f 93       	push	r20
    127e:	5f 93       	push	r21
    1280:	6f 93       	push	r22
    1282:	7f 93       	push	r23
    1284:	8f 93       	push	r24
    1286:	9f 93       	push	r25
    1288:	af 93       	push	r26
    128a:	bf 93       	push	r27
    128c:	ef 93       	push	r30
    128e:	ff 93       	push	r31
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	(*External_Function1)();
    1298:	e0 91 8a 01 	lds	r30, 0x018A
    129c:	f0 91 8b 01 	lds	r31, 0x018B
    12a0:	09 95       	icall
}
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	ff 91       	pop	r31
    12a8:	ef 91       	pop	r30
    12aa:	bf 91       	pop	r27
    12ac:	af 91       	pop	r26
    12ae:	9f 91       	pop	r25
    12b0:	8f 91       	pop	r24
    12b2:	7f 91       	pop	r23
    12b4:	6f 91       	pop	r22
    12b6:	5f 91       	pop	r21
    12b8:	4f 91       	pop	r20
    12ba:	3f 91       	pop	r19
    12bc:	2f 91       	pop	r18
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <__vector_3>:
/****************************************ISR for INT2*************************************************/
ISR(INT2_Vect)
{
    12c8:	1f 92       	push	r1
    12ca:	0f 92       	push	r0
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	0f 92       	push	r0
    12d0:	11 24       	eor	r1, r1
    12d2:	2f 93       	push	r18
    12d4:	3f 93       	push	r19
    12d6:	4f 93       	push	r20
    12d8:	5f 93       	push	r21
    12da:	6f 93       	push	r22
    12dc:	7f 93       	push	r23
    12de:	8f 93       	push	r24
    12e0:	9f 93       	push	r25
    12e2:	af 93       	push	r26
    12e4:	bf 93       	push	r27
    12e6:	ef 93       	push	r30
    12e8:	ff 93       	push	r31
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	(*External_Function2)();
    12f2:	e0 91 8c 01 	lds	r30, 0x018C
    12f6:	f0 91 8d 01 	lds	r31, 0x018D
    12fa:	09 95       	icall
}
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	ff 91       	pop	r31
    1302:	ef 91       	pop	r30
    1304:	bf 91       	pop	r27
    1306:	af 91       	pop	r26
    1308:	9f 91       	pop	r25
    130a:	8f 91       	pop	r24
    130c:	7f 91       	pop	r23
    130e:	6f 91       	pop	r22
    1310:	5f 91       	pop	r21
    1312:	4f 91       	pop	r20
    1314:	3f 91       	pop	r19
    1316:	2f 91       	pop	r18
    1318:	0f 90       	pop	r0
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	0f 90       	pop	r0
    131e:	1f 90       	pop	r1
    1320:	18 95       	reti

00001322 <Enable_Global_Interrupt>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return Enable_Global_Interrupt(Global_Interrupt_State_t state)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <Enable_Global_Interrupt+0x6>
    1328:	00 d0       	rcall	.+0      	; 0x132a <Enable_Global_Interrupt+0x8>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3c 83       	std	Y+4, r19	; 0x04
    1338:	2b 83       	std	Y+3, r18	; 0x03
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	31 f0       	breq	.+12     	; 0x134e <Enable_Global_Interrupt+0x2c>
    1342:	2b 81       	ldd	r18, Y+3	; 0x03
    1344:	3c 81       	ldd	r19, Y+4	; 0x04
    1346:	21 30       	cpi	r18, 0x01	; 1
    1348:	31 05       	cpc	r19, r1
    134a:	49 f0       	breq	.+18     	; 0x135e <Enable_Global_Interrupt+0x3c>
    134c:	10 c0       	rjmp	.+32     	; 0x136e <Enable_Global_Interrupt+0x4c>
		{
			case Enable_GIE_Interrupt:
				SET_BIT(SREG,GIE);
    134e:	af e5       	ldi	r26, 0x5F	; 95
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	ef e5       	ldi	r30, 0x5F	; 95
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 68       	ori	r24, 0x80	; 128
    135a:	8c 93       	st	X, r24
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <Enable_Global_Interrupt+0x50>
				break;
			case Disable_GIE_Interrupt:
				CLEAR_BIT(SREG,GIE);
    135e:	af e5       	ldi	r26, 0x5F	; 95
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ef e5       	ldi	r30, 0x5F	; 95
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8f 77       	andi	r24, 0x7F	; 127
    136a:	8c 93       	st	X, r24
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <Enable_Global_Interrupt+0x50>
				break;
			default:
				return E_OK;
    136e:	1a 82       	std	Y+2, r1	; 0x02
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <Enable_Global_Interrupt+0x54>
		}
	return E_NOK;
    1372:	31 e0       	ldi	r19, 0x01	; 1
    1374:	3a 83       	std	Y+2, r19	; 0x02
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <Enable_External_INT0>:
/*****************************************************************************************************/
STD_Return Enable_External_INT0(Peripheral_Interrupt_State_t State)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <Enable_External_INT0+0x6>
    138c:	00 d0       	rcall	.+0      	; 0x138e <Enable_External_INT0+0x8>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	3c 83       	std	Y+4, r19	; 0x04
    139c:	2b 83       	std	Y+3, r18	; 0x03
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <Enable_External_INT0+0x2c>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	21 30       	cpi	r18, 0x01	; 1
    13ac:	31 05       	cpc	r19, r1
    13ae:	49 f0       	breq	.+18     	; 0x13c2 <Enable_External_INT0+0x3c>
    13b0:	10 c0       	rjmp	.+32     	; 0x13d2 <Enable_External_INT0+0x4c>
	{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT0);
    13b2:	ab e5       	ldi	r26, 0x5B	; 91
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	eb e5       	ldi	r30, 0x5B	; 91
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 64       	ori	r24, 0x40	; 64
    13be:	8c 93       	st	X, r24
    13c0:	0a c0       	rjmp	.+20     	; 0x13d6 <Enable_External_INT0+0x50>

	break;
	case Disable_PIE_Interrupt:
		CLEAR_BIT(GICR,INT0);
    13c2:	ab e5       	ldi	r26, 0x5B	; 91
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	eb e5       	ldi	r30, 0x5B	; 91
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8f 7b       	andi	r24, 0xBF	; 191
    13ce:	8c 93       	st	X, r24
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <Enable_External_INT0+0x50>
	break;
	default:
		return E_OK;
    13d2:	1a 82       	std	Y+2, r1	; 0x02
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <Enable_External_INT0+0x54>
	}
	return E_NOK;
    13d6:	31 e0       	ldi	r19, 0x01	; 1
    13d8:	3a 83       	std	Y+2, r19	; 0x02
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <External_Int0_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int0_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <External_Int0_EdgeSelection+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <External_Int0_EdgeSelection+0x8>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	89 83       	std	Y+1, r24	; 0x01
			switch(SenseLevel)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3c 83       	std	Y+4, r19	; 0x04
    1400:	2b 83       	std	Y+3, r18	; 0x03
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	a1 f0       	breq	.+40     	; 0x1432 <External_Int0_EdgeSelection+0x48>
    140a:	2b 81       	ldd	r18, Y+3	; 0x03
    140c:	3c 81       	ldd	r19, Y+4	; 0x04
    140e:	21 30       	cpi	r18, 0x01	; 1
    1410:	31 05       	cpc	r19, r1
    1412:	f1 f4       	brne	.+60     	; 0x1450 <External_Int0_EdgeSelection+0x66>
				{
					case Rising_Edge_Sense:
							SET_BIT(MCUCR,ISC00);
    1414:	a5 e5       	ldi	r26, 0x55	; 85
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e5       	ldi	r30, 0x55	; 85
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	81 60       	ori	r24, 0x01	; 1
    1420:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    1422:	a5 e5       	ldi	r26, 0x55	; 85
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e5       	ldi	r30, 0x55	; 85
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	82 60       	ori	r24, 0x02	; 2
    142e:	8c 93       	st	X, r24
    1430:	11 c0       	rjmp	.+34     	; 0x1454 <External_Int0_EdgeSelection+0x6a>
							break;
					case Falling_Edge_Sense:
							CLEAR_BIT(MCUCR,ISC00);
    1432:	a5 e5       	ldi	r26, 0x55	; 85
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e5       	ldi	r30, 0x55	; 85
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8e 7f       	andi	r24, 0xFE	; 254
    143e:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    1440:	a5 e5       	ldi	r26, 0x55	; 85
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e5       	ldi	r30, 0x55	; 85
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	82 60       	ori	r24, 0x02	; 2
    144c:	8c 93       	st	X, r24
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <External_Int0_EdgeSelection+0x6a>
							break;
					default:
						return E_OK;
    1450:	1a 82       	std	Y+2, r1	; 0x02
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <External_Int0_EdgeSelection+0x6e>
				}
	return E_NOK;
    1454:	31 e0       	ldi	r19, 0x01	; 1
    1456:	3a 83       	std	Y+2, r19	; 0x02
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <CallBack_Int0>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int0(void (*Func_Ptr)(void))
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <CallBack_Int0+0x6>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
	External_Function0=Func_Ptr;
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	90 93 89 01 	sts	0x0189, r25
    147e:	80 93 88 01 	sts	0x0188, r24
	return E_NOK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <Enable_External_INT1>:
/*****************************************************************************************************/
STD_Return Enable_External_INT1(Peripheral_Interrupt_State_t State)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <Enable_External_INT1+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <Enable_External_INT1+0x8>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3c 83       	std	Y+4, r19	; 0x04
    14a4:	2b 83       	std	Y+3, r18	; 0x03
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	31 f0       	breq	.+12     	; 0x14ba <Enable_External_INT1+0x2c>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	21 30       	cpi	r18, 0x01	; 1
    14b4:	31 05       	cpc	r19, r1
    14b6:	49 f0       	breq	.+18     	; 0x14ca <Enable_External_INT1+0x3c>
    14b8:	10 c0       	rjmp	.+32     	; 0x14da <Enable_External_INT1+0x4c>
		{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT1);
    14ba:	ab e5       	ldi	r26, 0x5B	; 91
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	eb e5       	ldi	r30, 0x5B	; 91
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 68       	ori	r24, 0x80	; 128
    14c6:	8c 93       	st	X, r24
    14c8:	0a c0       	rjmp	.+20     	; 0x14de <Enable_External_INT1+0x50>
		break;
		case Disable_PIE_Interrupt:
			CLEAR_BIT(GICR,INT1);
    14ca:	ab e5       	ldi	r26, 0x5B	; 91
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	eb e5       	ldi	r30, 0x5B	; 91
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 77       	andi	r24, 0x7F	; 127
    14d6:	8c 93       	st	X, r24
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <Enable_External_INT1+0x50>
		break;
		default:
			return E_OK;
    14da:	1a 82       	std	Y+2, r1	; 0x02
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <Enable_External_INT1+0x54>
		}
	return E_NOK;
    14de:	31 e0       	ldi	r19, 0x01	; 1
    14e0:	3a 83       	std	Y+2, r19	; 0x02
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <External_Int1_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int1_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <External_Int1_EdgeSelection+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <External_Int1_EdgeSelection+0x8>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3c 83       	std	Y+4, r19	; 0x04
    1508:	2b 83       	std	Y+3, r18	; 0x03
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	b1 f0       	breq	.+44     	; 0x153e <External_Int1_EdgeSelection+0x4c>
    1512:	2b 81       	ldd	r18, Y+3	; 0x03
    1514:	3c 81       	ldd	r19, Y+4	; 0x04
    1516:	21 30       	cpi	r18, 0x01	; 1
    1518:	31 05       	cpc	r19, r1
    151a:	11 f5       	brne	.+68     	; 0x1560 <External_Int1_EdgeSelection+0x6e>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCR,ISC10);
    151c:	a5 e5       	ldi	r26, 0x55	; 85
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e5       	ldi	r30, 0x55	; 85
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	84 60       	ori	r24, 0x04	; 4
    1528:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    152a:	a5 e5       	ldi	r26, 0x55	; 85
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e5       	ldi	r30, 0x55	; 85
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	88 60       	ori	r24, 0x08	; 8
    1536:	8c 93       	st	X, r24
								return E_NOK;
    1538:	31 e0       	ldi	r19, 0x01	; 1
    153a:	3a 83       	std	Y+2, r19	; 0x02
    153c:	12 c0       	rjmp	.+36     	; 0x1562 <External_Int1_EdgeSelection+0x70>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCR,ISC10);
    153e:	a5 e5       	ldi	r26, 0x55	; 85
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 e5       	ldi	r30, 0x55	; 85
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8b 7f       	andi	r24, 0xFB	; 251
    154a:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    154c:	a5 e5       	ldi	r26, 0x55	; 85
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e5 e5       	ldi	r30, 0x55	; 85
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	88 60       	ori	r24, 0x08	; 8
    1558:	8c 93       	st	X, r24
								return E_NOK;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	8a 83       	std	Y+2, r24	; 0x02
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <External_Int1_EdgeSelection+0x70>
								break;
						default:
							return E_OK;
    1560:	1a 82       	std	Y+2, r1	; 0x02
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
					}
		return E_NOK;
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <CallBack_Int1>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int1(void (*Func_Ptr)(void))
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <CallBack_Int1+0x6>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
	External_Function1=Func_Ptr;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	90 93 8b 01 	sts	0x018B, r25
    1588:	80 93 8a 01 	sts	0x018A, r24
	return E_NOK;
    158c:	81 e0       	ldi	r24, 0x01	; 1
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <Enable_External_INT2>:
/*****************************************************************************************************/

STD_Return Enable_External_INT2(Peripheral_Interrupt_State_t State)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <Enable_External_INT2+0x6>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <Enable_External_INT2+0x8>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3c 83       	std	Y+4, r19	; 0x04
    15ae:	2b 83       	std	Y+3, r18	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	31 f0       	breq	.+12     	; 0x15c4 <Enable_External_INT2+0x2c>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	21 30       	cpi	r18, 0x01	; 1
    15be:	31 05       	cpc	r19, r1
    15c0:	49 f0       	breq	.+18     	; 0x15d4 <Enable_External_INT2+0x3c>
    15c2:	10 c0       	rjmp	.+32     	; 0x15e4 <Enable_External_INT2+0x4c>
		{
			case Enable_PIE_Interrupt:
				SET_BIT(GICR,INT2);
    15c4:	ab e5       	ldi	r26, 0x5B	; 91
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	eb e5       	ldi	r30, 0x5B	; 91
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 62       	ori	r24, 0x20	; 32
    15d0:	8c 93       	st	X, r24
    15d2:	0a c0       	rjmp	.+20     	; 0x15e8 <Enable_External_INT2+0x50>
				break;
				case Disable_PIE_Interrupt:
					CLEAR_BIT(GICR,INT1);
    15d4:	ab e5       	ldi	r26, 0x5B	; 91
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	eb e5       	ldi	r30, 0x5B	; 91
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	8f 77       	andi	r24, 0x7F	; 127
    15e0:	8c 93       	st	X, r24
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <Enable_External_INT2+0x50>
				break;
				default:
					return E_OK;
    15e4:	1a 82       	std	Y+2, r1	; 0x02
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <Enable_External_INT2+0x54>
		 	}
	return E_NOK;
    15e8:	31 e0       	ldi	r19, 0x01	; 1
    15ea:	3a 83       	std	Y+2, r19	; 0x02
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <External_Int2_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int2_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <External_Int2_EdgeSelection+0x6>
    1602:	00 d0       	rcall	.+0      	; 0x1604 <External_Int2_EdgeSelection+0x8>
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3c 83       	std	Y+4, r19	; 0x04
    1612:	2b 83       	std	Y+3, r18	; 0x03
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	79 f0       	breq	.+30     	; 0x163a <External_Int2_EdgeSelection+0x3e>
    161c:	2b 81       	ldd	r18, Y+3	; 0x03
    161e:	3c 81       	ldd	r19, Y+4	; 0x04
    1620:	21 30       	cpi	r18, 0x01	; 1
    1622:	31 05       	cpc	r19, r1
    1624:	a1 f4       	brne	.+40     	; 0x164e <External_Int2_EdgeSelection+0x52>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCSR,ISC2);
    1626:	a4 e5       	ldi	r26, 0x54	; 84
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e4 e5       	ldi	r30, 0x54	; 84
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	80 64       	ori	r24, 0x40	; 64
    1632:	8c 93       	st	X, r24
								return E_NOK;
    1634:	31 e0       	ldi	r19, 0x01	; 1
    1636:	3a 83       	std	Y+2, r19	; 0x02
    1638:	0b c0       	rjmp	.+22     	; 0x1650 <External_Int2_EdgeSelection+0x54>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCSR,ISC2);
    163a:	a4 e5       	ldi	r26, 0x54	; 84
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e4 e5       	ldi	r30, 0x54	; 84
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8f 7b       	andi	r24, 0xBF	; 191
    1646:	8c 93       	st	X, r24
								return E_NOK;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	01 c0       	rjmp	.+2      	; 0x1650 <External_Int2_EdgeSelection+0x54>
								break;
						default:
							return E_OK;
    164e:	1a 82       	std	Y+2, r1	; 0x02
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
					}

		return E_NOK;
}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <CallBack_Int2>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int2(void (*Func_Ptr)(void))
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <CallBack_Int2+0x6>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
	External_Function2=Func_Ptr;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	90 93 8d 01 	sts	0x018D, r25
    1676:	80 93 8c 01 	sts	0x018C, r24
	return E_NOK;
    167a:	81 e0       	ldi	r24, 0x01	; 1
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <DIO_init>:
 * 
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 **/
void DIO_init(void)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    // initializing all pins are input
    DDRA=0;
    168e:	ea e3       	ldi	r30, 0x3A	; 58
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	10 82       	st	Z, r1
    DDRB=0;
    1694:	e7 e3       	ldi	r30, 0x37	; 55
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	10 82       	st	Z, r1
    DDRC=0;
    169a:	e4 e3       	ldi	r30, 0x34	; 52
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	10 82       	st	Z, r1
    DDRD=0;
    16a0:	e1 e3       	ldi	r30, 0x31	; 49
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	10 82       	st	Z, r1

    PORTA=0;
    16a6:	eb e3       	ldi	r30, 0x3B	; 59
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	10 82       	st	Z, r1
    PORTB=0;
    16ac:	e8 e3       	ldi	r30, 0x38	; 56
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	10 82       	st	Z, r1
    PORTC=0;
    16b2:	e5 e3       	ldi	r30, 0x35	; 53
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	10 82       	st	Z, r1
    PORTD=0;
    16b8:	e2 e3       	ldi	r30, 0x32	; 50
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
    //enable the internal pull up resistor
    CLEAR_BIT(SFIOR,PUD);
    16be:	a0 e5       	ldi	r26, 0x50	; 80
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e0 e5       	ldi	r30, 0x50	; 80
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8b 7f       	andi	r24, 0xFB	; 251
    16ca:	8c 93       	st	X, r24
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <DIO_SetPinDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinDirection(DIO_Ports_t PORT, u8 PIN, DIO_Direction_t Direction)
	{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	2e 97       	sbiw	r28, 0x0e	; 14
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	6a 83       	std	Y+2, r22	; 0x02
    16ea:	4b 83       	std	Y+3, r20	; 0x03
		// check for safety
		if(PIN>MAX_PinNum)
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	88 30       	cpi	r24, 0x08	; 8
    16f0:	10 f0       	brcs	.+4      	; 0x16f6 <DIO_SetPinDirection+0x24>
			{
				return E_OK;
    16f2:	1e 86       	std	Y+14, r1	; 0x0e
    16f4:	0e c1       	rjmp	.+540    	; 0x1912 <DIO_SetPinDirection+0x240>
			}
		else
			{
				switch(PORT)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3d 87       	std	Y+13, r19	; 0x0d
    16fe:	2c 87       	std	Y+12, r18	; 0x0c
    1700:	8c 85       	ldd	r24, Y+12	; 0x0c
    1702:	9d 85       	ldd	r25, Y+13	; 0x0d
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <DIO_SetPinDirection+0x3a>
    170a:	51 c0       	rjmp	.+162    	; 0x17ae <DIO_SetPinDirection+0xdc>
    170c:	2c 85       	ldd	r18, Y+12	; 0x0c
    170e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1710:	22 30       	cpi	r18, 0x02	; 2
    1712:	31 05       	cpc	r19, r1
    1714:	2c f4       	brge	.+10     	; 0x1720 <DIO_SetPinDirection+0x4e>
    1716:	8c 85       	ldd	r24, Y+12	; 0x0c
    1718:	9d 85       	ldd	r25, Y+13	; 0x0d
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	71 f0       	breq	.+28     	; 0x173a <DIO_SetPinDirection+0x68>
    171e:	f5 c0       	rjmp	.+490    	; 0x190a <DIO_SetPinDirection+0x238>
    1720:	2c 85       	ldd	r18, Y+12	; 0x0c
    1722:	3d 85       	ldd	r19, Y+13	; 0x0d
    1724:	22 30       	cpi	r18, 0x02	; 2
    1726:	31 05       	cpc	r19, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <DIO_SetPinDirection+0x5a>
    172a:	7b c0       	rjmp	.+246    	; 0x1822 <DIO_SetPinDirection+0x150>
    172c:	8c 85       	ldd	r24, Y+12	; 0x0c
    172e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1730:	83 30       	cpi	r24, 0x03	; 3
    1732:	91 05       	cpc	r25, r1
    1734:	09 f4       	brne	.+2      	; 0x1738 <DIO_SetPinDirection+0x66>
    1736:	af c0       	rjmp	.+350    	; 0x1896 <DIO_SetPinDirection+0x1c4>
    1738:	e8 c0       	rjmp	.+464    	; 0x190a <DIO_SetPinDirection+0x238>
					{
						case DIO_PORTA:
							switch (Direction)
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	3b 87       	std	Y+11, r19	; 0x0b
    1742:	2a 87       	std	Y+10, r18	; 0x0a
    1744:	8a 85       	ldd	r24, Y+10	; 0x0a
    1746:	9b 85       	ldd	r25, Y+11	; 0x0b
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	31 f0       	breq	.+12     	; 0x1758 <DIO_SetPinDirection+0x86>
    174c:	2a 85       	ldd	r18, Y+10	; 0x0a
    174e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1750:	21 30       	cpi	r18, 0x01	; 1
    1752:	31 05       	cpc	r19, r1
    1754:	b1 f0       	breq	.+44     	; 0x1782 <DIO_SetPinDirection+0xb0>
    1756:	29 c0       	rjmp	.+82     	; 0x17aa <DIO_SetPinDirection+0xd8>
								{
									case DIO_INPUT:
									CLEAR_BIT(DDRA,PIN);
    1758:	aa e3       	ldi	r26, 0x3A	; 58
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	ea e3       	ldi	r30, 0x3A	; 58
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <DIO_SetPinDirection+0xa4>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <DIO_SetPinDirection+0xa0>
    177a:	80 95       	com	r24
    177c:	84 23       	and	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	c6 c0       	rjmp	.+396    	; 0x190e <DIO_SetPinDirection+0x23c>
									break;
									case DIO_OUTPUT:
									SET_BIT(DDRA,PIN);
    1782:	aa e3       	ldi	r26, 0x3A	; 58
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	ea e3       	ldi	r30, 0x3A	; 58
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_SetPinDirection+0xce>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_SetPinDirection+0xca>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	b2 c0       	rjmp	.+356    	; 0x190e <DIO_SetPinDirection+0x23c>
									break;
									default:
									return E_OK;
    17aa:	1e 86       	std	Y+14, r1	; 0x0e
    17ac:	b2 c0       	rjmp	.+356    	; 0x1912 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTB:
							switch (Direction)
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	39 87       	std	Y+9, r19	; 0x09
    17b6:	28 87       	std	Y+8, r18	; 0x08
    17b8:	88 85       	ldd	r24, Y+8	; 0x08
    17ba:	99 85       	ldd	r25, Y+9	; 0x09
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	31 f0       	breq	.+12     	; 0x17cc <DIO_SetPinDirection+0xfa>
    17c0:	28 85       	ldd	r18, Y+8	; 0x08
    17c2:	39 85       	ldd	r19, Y+9	; 0x09
    17c4:	21 30       	cpi	r18, 0x01	; 1
    17c6:	31 05       	cpc	r19, r1
    17c8:	b1 f0       	breq	.+44     	; 0x17f6 <DIO_SetPinDirection+0x124>
    17ca:	29 c0       	rjmp	.+82     	; 0x181e <DIO_SetPinDirection+0x14c>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRB,PIN);
    17cc:	a7 e3       	ldi	r26, 0x37	; 55
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e7 e3       	ldi	r30, 0x37	; 55
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_SetPinDirection+0x118>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <DIO_SetPinDirection+0x114>
    17ee:	80 95       	com	r24
    17f0:	84 23       	and	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	8c c0       	rjmp	.+280    	; 0x190e <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRB,PIN);
    17f6:	a7 e3       	ldi	r26, 0x37	; 55
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e7 e3       	ldi	r30, 0x37	; 55
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <DIO_SetPinDirection+0x142>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <DIO_SetPinDirection+0x13e>
    1818:	84 2b       	or	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	78 c0       	rjmp	.+240    	; 0x190e <DIO_SetPinDirection+0x23c>
										break;
									default:
									return E_OK;
    181e:	1e 86       	std	Y+14, r1	; 0x0e
    1820:	78 c0       	rjmp	.+240    	; 0x1912 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTC:
							switch (Direction)
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3f 83       	std	Y+7, r19	; 0x07
    182a:	2e 83       	std	Y+6, r18	; 0x06
    182c:	8e 81       	ldd	r24, Y+6	; 0x06
    182e:	9f 81       	ldd	r25, Y+7	; 0x07
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	31 f0       	breq	.+12     	; 0x1840 <DIO_SetPinDirection+0x16e>
    1834:	2e 81       	ldd	r18, Y+6	; 0x06
    1836:	3f 81       	ldd	r19, Y+7	; 0x07
    1838:	21 30       	cpi	r18, 0x01	; 1
    183a:	31 05       	cpc	r19, r1
    183c:	b1 f0       	breq	.+44     	; 0x186a <DIO_SetPinDirection+0x198>
    183e:	29 c0       	rjmp	.+82     	; 0x1892 <DIO_SetPinDirection+0x1c0>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRC,PIN);
    1840:	a4 e3       	ldi	r26, 0x34	; 52
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e4 e3       	ldi	r30, 0x34	; 52
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_SetPinDirection+0x18c>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <DIO_SetPinDirection+0x188>
    1862:	80 95       	com	r24
    1864:	84 23       	and	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	52 c0       	rjmp	.+164    	; 0x190e <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRC,PIN);
    186a:	a4 e3       	ldi	r26, 0x34	; 52
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e4 e3       	ldi	r30, 0x34	; 52
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_SetPinDirection+0x1b6>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_SetPinDirection+0x1b2>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	3e c0       	rjmp	.+124    	; 0x190e <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    1892:	1e 86       	std	Y+14, r1	; 0x0e
    1894:	3e c0       	rjmp	.+124    	; 0x1912 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTD:
							switch (Direction)
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3d 83       	std	Y+5, r19	; 0x05
    189e:	2c 83       	std	Y+4, r18	; 0x04
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	31 f0       	breq	.+12     	; 0x18b4 <DIO_SetPinDirection+0x1e2>
    18a8:	2c 81       	ldd	r18, Y+4	; 0x04
    18aa:	3d 81       	ldd	r19, Y+5	; 0x05
    18ac:	21 30       	cpi	r18, 0x01	; 1
    18ae:	31 05       	cpc	r19, r1
    18b0:	b1 f0       	breq	.+44     	; 0x18de <DIO_SetPinDirection+0x20c>
    18b2:	29 c0       	rjmp	.+82     	; 0x1906 <DIO_SetPinDirection+0x234>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRD,PIN);
    18b4:	a1 e3       	ldi	r26, 0x31	; 49
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e1 e3       	ldi	r30, 0x31	; 49
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_SetPinDirection+0x200>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <DIO_SetPinDirection+0x1fc>
    18d6:	80 95       	com	r24
    18d8:	84 23       	and	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	18 c0       	rjmp	.+48     	; 0x190e <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRD,PIN);
    18de:	a1 e3       	ldi	r26, 0x31	; 49
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e1 e3       	ldi	r30, 0x31	; 49
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_SetPinDirection+0x22a>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_SetPinDirection+0x226>
    1900:	84 2b       	or	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	04 c0       	rjmp	.+8      	; 0x190e <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    1906:	1e 86       	std	Y+14, r1	; 0x0e
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <DIO_SetPinDirection+0x240>
								}
							break;
							default:
								return E_OK;
    190a:	1e 86       	std	Y+14, r1	; 0x0e
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_SetPinDirection+0x240>
					}
			}
	return E_NOK;
    190e:	31 e0       	ldi	r19, 0x01	; 1
    1910:	3e 87       	std	Y+14, r19	; 0x0e
    1912:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    1914:	2e 96       	adiw	r28, 0x0e	; 14
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <DIO_SetPortDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortDirection(DIO_Ports_t PORT,u8 Direction)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <DIO_SetPortDirection+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <DIO_SetPortDirection+0x8>
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	3d 83       	std	Y+5, r19	; 0x05
    1940:	2c 83       	std	Y+4, r18	; 0x04
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	91 05       	cpc	r25, r1
    194a:	d1 f0       	breq	.+52     	; 0x1980 <DIO_SetPortDirection+0x5a>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	2c f4       	brge	.+10     	; 0x1960 <DIO_SetPortDirection+0x3a>
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	61 f0       	breq	.+24     	; 0x1976 <DIO_SetPortDirection+0x50>
    195e:	1f c0       	rjmp	.+62     	; 0x199e <DIO_SetPortDirection+0x78>
    1960:	2c 81       	ldd	r18, Y+4	; 0x04
    1962:	3d 81       	ldd	r19, Y+5	; 0x05
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	81 f0       	breq	.+32     	; 0x198a <DIO_SetPortDirection+0x64>
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	91 05       	cpc	r25, r1
    1972:	81 f0       	breq	.+32     	; 0x1994 <DIO_SetPortDirection+0x6e>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <DIO_SetPortDirection+0x78>
						{
							case DIO_PORTA:
								DDRA=Direction;
    1976:	ea e3       	ldi	r30, 0x3A	; 58
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	80 83       	st	Z, r24
    197e:	11 c0       	rjmp	.+34     	; 0x19a2 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTB:
								DDRB=Direction;
    1980:	e7 e3       	ldi	r30, 0x37	; 55
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	80 83       	st	Z, r24
    1988:	0c c0       	rjmp	.+24     	; 0x19a2 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTC:
								DDRC=Direction;
    198a:	e4 e3       	ldi	r30, 0x34	; 52
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	80 83       	st	Z, r24
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTD:
								DDRD=Direction;
    1994:	e1 e3       	ldi	r30, 0x31	; 49
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	80 83       	st	Z, r24
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <DIO_SetPortDirection+0x7c>
							break;
							default:
							return E_OK;
    199e:	1b 82       	std	Y+3, r1	; 0x03
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_SetPortDirection+0x80>

						}
	return E_NOK;
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	9b 83       	std	Y+3, r25	; 0x03
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <DIO_SetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 							return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t State)
	{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	2e 97       	sbiw	r28, 0x0e	; 14
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	6a 83       	std	Y+2, r22	; 0x02
    19d0:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	88 30       	cpi	r24, 0x08	; 8
    19d6:	10 f0       	brcs	.+4      	; 0x19dc <DIO_SetPinValue+0x24>
			{
				return E_OK;
    19d8:	1e 86       	std	Y+14, r1	; 0x0e
    19da:	0e c1       	rjmp	.+540    	; 0x1bf8 <DIO_SetPinValue+0x240>
			}
		else
			{
				switch(PORT)
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	3d 87       	std	Y+13, r19	; 0x0d
    19e4:	2c 87       	std	Y+12, r18	; 0x0c
    19e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    19e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    19ea:	81 30       	cpi	r24, 0x01	; 1
    19ec:	91 05       	cpc	r25, r1
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <DIO_SetPinValue+0x3a>
    19f0:	51 c0       	rjmp	.+162    	; 0x1a94 <DIO_SetPinValue+0xdc>
    19f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    19f4:	3d 85       	ldd	r19, Y+13	; 0x0d
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <DIO_SetPinValue+0x4e>
    19fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    19fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	71 f0       	breq	.+28     	; 0x1a20 <DIO_SetPinValue+0x68>
    1a04:	f5 c0       	rjmp	.+490    	; 0x1bf0 <DIO_SetPinValue+0x238>
    1a06:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a08:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <DIO_SetPinValue+0x5a>
    1a10:	7b c0       	rjmp	.+246    	; 0x1b08 <DIO_SetPinValue+0x150>
    1a12:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a14:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a16:	83 30       	cpi	r24, 0x03	; 3
    1a18:	91 05       	cpc	r25, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <DIO_SetPinValue+0x66>
    1a1c:	af c0       	rjmp	.+350    	; 0x1b7c <DIO_SetPinValue+0x1c4>
    1a1e:	e8 c0       	rjmp	.+464    	; 0x1bf0 <DIO_SetPinValue+0x238>
					{
						case DIO_PORTA:
							switch(State)
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	3b 87       	std	Y+11, r19	; 0x0b
    1a28:	2a 87       	std	Y+10, r18	; 0x0a
    1a2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	31 f0       	breq	.+12     	; 0x1a3e <DIO_SetPinValue+0x86>
    1a32:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a34:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a36:	21 30       	cpi	r18, 0x01	; 1
    1a38:	31 05       	cpc	r19, r1
    1a3a:	b1 f0       	breq	.+44     	; 0x1a68 <DIO_SetPinValue+0xb0>
    1a3c:	29 c0       	rjmp	.+82     	; 0x1a90 <DIO_SetPinValue+0xd8>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTA,PIN);
    1a3e:	ab e3       	ldi	r26, 0x3B	; 59
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	eb e3       	ldi	r30, 0x3B	; 59
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_SetPinValue+0xa4>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_SetPinValue+0xa0>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	c6 c0       	rjmp	.+396    	; 0x1bf4 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTA,PIN);
    1a68:	ab e3       	ldi	r26, 0x3B	; 59
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	eb e3       	ldi	r30, 0x3B	; 59
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_SetPinValue+0xce>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_SetPinValue+0xca>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	b2 c0       	rjmp	.+356    	; 0x1bf4 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1a90:	1e 86       	std	Y+14, r1	; 0x0e
    1a92:	b2 c0       	rjmp	.+356    	; 0x1bf8 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTB:
							switch(State)
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	39 87       	std	Y+9, r19	; 0x09
    1a9c:	28 87       	std	Y+8, r18	; 0x08
    1a9e:	88 85       	ldd	r24, Y+8	; 0x08
    1aa0:	99 85       	ldd	r25, Y+9	; 0x09
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	31 f0       	breq	.+12     	; 0x1ab2 <DIO_SetPinValue+0xfa>
    1aa6:	28 85       	ldd	r18, Y+8	; 0x08
    1aa8:	39 85       	ldd	r19, Y+9	; 0x09
    1aaa:	21 30       	cpi	r18, 0x01	; 1
    1aac:	31 05       	cpc	r19, r1
    1aae:	b1 f0       	breq	.+44     	; 0x1adc <DIO_SetPinValue+0x124>
    1ab0:	29 c0       	rjmp	.+82     	; 0x1b04 <DIO_SetPinValue+0x14c>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTB,PIN);
    1ab2:	a8 e3       	ldi	r26, 0x38	; 56
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e8 e3       	ldi	r30, 0x38	; 56
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_SetPinValue+0x118>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <DIO_SetPinValue+0x114>
    1ad4:	80 95       	com	r24
    1ad6:	84 23       	and	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	8c c0       	rjmp	.+280    	; 0x1bf4 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTB,PIN);
    1adc:	a8 e3       	ldi	r26, 0x38	; 56
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e8 e3       	ldi	r30, 0x38	; 56
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <DIO_SetPinValue+0x142>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <DIO_SetPinValue+0x13e>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	78 c0       	rjmp	.+240    	; 0x1bf4 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1b04:	1e 86       	std	Y+14, r1	; 0x0e
    1b06:	78 c0       	rjmp	.+240    	; 0x1bf8 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTC:
							switch(State)
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3f 83       	std	Y+7, r19	; 0x07
    1b10:	2e 83       	std	Y+6, r18	; 0x06
    1b12:	8e 81       	ldd	r24, Y+6	; 0x06
    1b14:	9f 81       	ldd	r25, Y+7	; 0x07
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	31 f0       	breq	.+12     	; 0x1b26 <DIO_SetPinValue+0x16e>
    1b1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b1c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b1e:	21 30       	cpi	r18, 0x01	; 1
    1b20:	31 05       	cpc	r19, r1
    1b22:	b1 f0       	breq	.+44     	; 0x1b50 <DIO_SetPinValue+0x198>
    1b24:	29 c0       	rjmp	.+82     	; 0x1b78 <DIO_SetPinValue+0x1c0>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTC,PIN);
    1b26:	a5 e3       	ldi	r26, 0x35	; 53
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e5 e3       	ldi	r30, 0x35	; 53
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 2e       	mov	r0, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <DIO_SetPinValue+0x18c>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	0a 94       	dec	r0
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <DIO_SetPinValue+0x188>
    1b48:	80 95       	com	r24
    1b4a:	84 23       	and	r24, r20
    1b4c:	8c 93       	st	X, r24
    1b4e:	52 c0       	rjmp	.+164    	; 0x1bf4 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTC,PIN);
    1b50:	a5 e3       	ldi	r26, 0x35	; 53
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <DIO_SetPinValue+0x1b6>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <DIO_SetPinValue+0x1b2>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	3e c0       	rjmp	.+124    	; 0x1bf4 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1b78:	1e 86       	std	Y+14, r1	; 0x0e
    1b7a:	3e c0       	rjmp	.+124    	; 0x1bf8 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTD:
							switch(State)
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3d 83       	std	Y+5, r19	; 0x05
    1b84:	2c 83       	std	Y+4, r18	; 0x04
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	31 f0       	breq	.+12     	; 0x1b9a <DIO_SetPinValue+0x1e2>
    1b8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b90:	3d 81       	ldd	r19, Y+5	; 0x05
    1b92:	21 30       	cpi	r18, 0x01	; 1
    1b94:	31 05       	cpc	r19, r1
    1b96:	b1 f0       	breq	.+44     	; 0x1bc4 <DIO_SetPinValue+0x20c>
    1b98:	29 c0       	rjmp	.+82     	; 0x1bec <DIO_SetPinValue+0x234>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTD,PIN);
    1b9a:	a2 e3       	ldi	r26, 0x32	; 50
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <DIO_SetPinValue+0x200>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <DIO_SetPinValue+0x1fc>
    1bbc:	80 95       	com	r24
    1bbe:	84 23       	and	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	18 c0       	rjmp	.+48     	; 0x1bf4 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTD,PIN);
    1bc4:	a2 e3       	ldi	r26, 0x32	; 50
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e2 e3       	ldi	r30, 0x32	; 50
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 2e       	mov	r0, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <DIO_SetPinValue+0x22a>
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	0a 94       	dec	r0
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <DIO_SetPinValue+0x226>
    1be6:	84 2b       	or	r24, r20
    1be8:	8c 93       	st	X, r24
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1bec:	1e 86       	std	Y+14, r1	; 0x0e
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <DIO_SetPinValue+0x240>
								}
						break;
							default:
							return E_OK;
    1bf0:	1e 86       	std	Y+14, r1	; 0x0e
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_SetPinValue+0x240>
					}
			}
		return E_NOK;
    1bf4:	31 e0       	ldi	r19, 0x01	; 1
    1bf6:	3e 87       	std	Y+14, r19	; 0x0e
    1bf8:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    1bfa:	2e 96       	adiw	r28, 0x0e	; 14
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <DIO_SetPortValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortValue(DIO_Ports_t PORT,u8 value)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <DIO_SetPortValue+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <DIO_SetPortValue+0x8>
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3d 83       	std	Y+5, r19	; 0x05
    1c26:	2c 83       	std	Y+4, r18	; 0x04
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	d1 f0       	breq	.+52     	; 0x1c66 <DIO_SetPortValue+0x5a>
    1c32:	2c 81       	ldd	r18, Y+4	; 0x04
    1c34:	3d 81       	ldd	r19, Y+5	; 0x05
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <DIO_SetPortValue+0x3a>
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	61 f0       	breq	.+24     	; 0x1c5c <DIO_SetPortValue+0x50>
    1c44:	1f c0       	rjmp	.+62     	; 0x1c84 <DIO_SetPortValue+0x78>
    1c46:	2c 81       	ldd	r18, Y+4	; 0x04
    1c48:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4a:	22 30       	cpi	r18, 0x02	; 2
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	81 f0       	breq	.+32     	; 0x1c70 <DIO_SetPortValue+0x64>
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	83 30       	cpi	r24, 0x03	; 3
    1c56:	91 05       	cpc	r25, r1
    1c58:	81 f0       	breq	.+32     	; 0x1c7a <DIO_SetPortValue+0x6e>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <DIO_SetPortValue+0x78>
						{
							case DIO_PORTA:
								PORTA=value;
    1c5c:	eb e3       	ldi	r30, 0x3B	; 59
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	80 83       	st	Z, r24
    1c64:	11 c0       	rjmp	.+34     	; 0x1c88 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTB:
								PORTB=value;
    1c66:	e8 e3       	ldi	r30, 0x38	; 56
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	80 83       	st	Z, r24
    1c6e:	0c c0       	rjmp	.+24     	; 0x1c88 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTC:
								PORTC=value;
    1c70:	e5 e3       	ldi	r30, 0x35	; 53
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	80 83       	st	Z, r24
    1c78:	07 c0       	rjmp	.+14     	; 0x1c88 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTD:
								PORTD=value;
    1c7a:	e2 e3       	ldi	r30, 0x32	; 50
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	80 83       	st	Z, r24
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <DIO_SetPortValue+0x7c>

							break;
							default:
							return E_OK;
    1c84:	1b 82       	std	Y+3, r1	; 0x03
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <DIO_SetPortValue+0x80>

						}
	return E_NOK;
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	9b 83       	std	Y+3, r25	; 0x03
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <DIO_GetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_GetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t* State)
	{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	27 97       	sbiw	r28, 0x07	; 7
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	6a 83       	std	Y+2, r22	; 0x02
    1cb6:	5c 83       	std	Y+4, r21	; 0x04
    1cb8:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	88 30       	cpi	r24, 0x08	; 8
    1cbe:	10 f0       	brcs	.+4      	; 0x1cc4 <DIO_GetPinValue+0x26>
			{
				return E_OK;
    1cc0:	1f 82       	std	Y+7, r1	; 0x07
    1cc2:	75 c0       	rjmp	.+234    	; 0x1dae <DIO_GetPinValue+0x110>
			}
		else
			{
					switch(PORT)
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	3e 83       	std	Y+6, r19	; 0x06
    1ccc:	2d 83       	std	Y+5, r18	; 0x05
    1cce:	4d 81       	ldd	r20, Y+5	; 0x05
    1cd0:	5e 81       	ldd	r21, Y+6	; 0x06
    1cd2:	41 30       	cpi	r20, 0x01	; 1
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	59 f1       	breq	.+86     	; 0x1d2e <DIO_GetPinValue+0x90>
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	91 05       	cpc	r25, r1
    1ce0:	34 f4       	brge	.+12     	; 0x1cee <DIO_GetPinValue+0x50>
    1ce2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce6:	21 15       	cp	r18, r1
    1ce8:	31 05       	cpc	r19, r1
    1cea:	69 f0       	breq	.+26     	; 0x1d06 <DIO_GetPinValue+0x68>
    1cec:	5c c0       	rjmp	.+184    	; 0x1da6 <DIO_GetPinValue+0x108>
    1cee:	4d 81       	ldd	r20, Y+5	; 0x05
    1cf0:	5e 81       	ldd	r21, Y+6	; 0x06
    1cf2:	42 30       	cpi	r20, 0x02	; 2
    1cf4:	51 05       	cpc	r21, r1
    1cf6:	79 f1       	breq	.+94     	; 0x1d56 <DIO_GetPinValue+0xb8>
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	83 30       	cpi	r24, 0x03	; 3
    1cfe:	91 05       	cpc	r25, r1
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <DIO_GetPinValue+0x66>
    1d02:	3d c0       	rjmp	.+122    	; 0x1d7e <DIO_GetPinValue+0xe0>
    1d04:	50 c0       	rjmp	.+160    	; 0x1da6 <DIO_GetPinValue+0x108>
						{
							case DIO_PORTA:
								*State=GET_BIT(PINA,PIN);
    1d06:	e9 e3       	ldi	r30, 0x39	; 57
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a9 01       	movw	r20, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <DIO_GetPinValue+0x80>
    1d1a:	55 95       	asr	r21
    1d1c:	47 95       	ror	r20
    1d1e:	8a 95       	dec	r24
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <DIO_GetPinValue+0x7c>
    1d22:	ca 01       	movw	r24, r20
    1d24:	81 70       	andi	r24, 0x01	; 1
    1d26:	eb 81       	ldd	r30, Y+3	; 0x03
    1d28:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2a:	80 83       	st	Z, r24
    1d2c:	3e c0       	rjmp	.+124    	; 0x1daa <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTB:
								*State=GET_BIT(PINB,PIN);
    1d2e:	e6 e3       	ldi	r30, 0x36	; 54
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a9 01       	movw	r20, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <DIO_GetPinValue+0xa8>
    1d42:	55 95       	asr	r21
    1d44:	47 95       	ror	r20
    1d46:	8a 95       	dec	r24
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <DIO_GetPinValue+0xa4>
    1d4a:	ca 01       	movw	r24, r20
    1d4c:	81 70       	andi	r24, 0x01	; 1
    1d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d50:	fc 81       	ldd	r31, Y+4	; 0x04
    1d52:	80 83       	st	Z, r24
    1d54:	2a c0       	rjmp	.+84     	; 0x1daa <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTC:
								*State=GET_BIT(PINC,PIN);
    1d56:	e3 e3       	ldi	r30, 0x33	; 51
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a9 01       	movw	r20, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <DIO_GetPinValue+0xd0>
    1d6a:	55 95       	asr	r21
    1d6c:	47 95       	ror	r20
    1d6e:	8a 95       	dec	r24
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <DIO_GetPinValue+0xcc>
    1d72:	ca 01       	movw	r24, r20
    1d74:	81 70       	andi	r24, 0x01	; 1
    1d76:	eb 81       	ldd	r30, Y+3	; 0x03
    1d78:	fc 81       	ldd	r31, Y+4	; 0x04
    1d7a:	80 83       	st	Z, r24
    1d7c:	16 c0       	rjmp	.+44     	; 0x1daa <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTD:
								*State=GET_BIT(PIND,PIN);
    1d7e:	e0 e3       	ldi	r30, 0x30	; 48
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a9 01       	movw	r20, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <DIO_GetPinValue+0xf8>
    1d92:	55 95       	asr	r21
    1d94:	47 95       	ror	r20
    1d96:	8a 95       	dec	r24
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <DIO_GetPinValue+0xf4>
    1d9a:	ca 01       	movw	r24, r20
    1d9c:	81 70       	andi	r24, 0x01	; 1
    1d9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1da0:	fc 81       	ldd	r31, Y+4	; 0x04
    1da2:	80 83       	st	Z, r24
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <DIO_GetPinValue+0x10c>
								break;
							default:
								return E_OK;
    1da6:	1f 82       	std	Y+7, r1	; 0x07
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_GetPinValue+0x110>
						}
			}
		return E_NOK;
    1daa:	51 e0       	ldi	r21, 0x01	; 1
    1dac:	5f 83       	std	Y+7, r21	; 0x07
    1dae:	8f 81       	ldd	r24, Y+7	; 0x07
	}
    1db0:	27 96       	adiw	r28, 0x07	; 7
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <DIO_togglePin>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_togglePin(DIO_Ports_t port,u8 pin)
 {
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <DIO_togglePin+0x6>
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <DIO_togglePin+0x8>
    1dca:	0f 92       	push	r0
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PinNum)
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	88 30       	cpi	r24, 0x08	; 8
    1dd8:	10 f0       	brcs	.+4      	; 0x1dde <DIO_togglePin+0x1c>
		{
			return E_OK;
    1dda:	1d 82       	std	Y+5, r1	; 0x05
    1ddc:	73 c0       	rjmp	.+230    	; 0x1ec4 <DIO_togglePin+0x102>
		}
	else
		{
			switch (port)
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	3c 83       	std	Y+4, r19	; 0x04
    1de6:	2b 83       	std	Y+3, r18	; 0x03
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	91 05       	cpc	r25, r1
    1df0:	49 f1       	breq	.+82     	; 0x1e44 <DIO_togglePin+0x82>
    1df2:	2b 81       	ldd	r18, Y+3	; 0x03
    1df4:	3c 81       	ldd	r19, Y+4	; 0x04
    1df6:	22 30       	cpi	r18, 0x02	; 2
    1df8:	31 05       	cpc	r19, r1
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <DIO_togglePin+0x44>
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	61 f0       	breq	.+24     	; 0x1e1c <DIO_togglePin+0x5a>
    1e04:	5b c0       	rjmp	.+182    	; 0x1ebc <DIO_togglePin+0xfa>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	71 f1       	breq	.+92     	; 0x1e6c <DIO_togglePin+0xaa>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	83 30       	cpi	r24, 0x03	; 3
    1e16:	91 05       	cpc	r25, r1
    1e18:	e9 f1       	breq	.+122    	; 0x1e94 <DIO_togglePin+0xd2>
    1e1a:	50 c0       	rjmp	.+160    	; 0x1ebc <DIO_togglePin+0xfa>
				{
					case DIO_PORTA:
						TOGGLE_BIT(PORTA, pin);
    1e1c:	ab e3       	ldi	r26, 0x3B	; 59
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	eb e3       	ldi	r30, 0x3B	; 59
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_togglePin+0x78>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_togglePin+0x74>
    1e3e:	84 27       	eor	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	3e c0       	rjmp	.+124    	; 0x1ec0 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTB:
						TOGGLE_BIT(PORTB, pin);
    1e44:	a8 e3       	ldi	r26, 0x38	; 56
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e8 e3       	ldi	r30, 0x38	; 56
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <DIO_togglePin+0xa0>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <DIO_togglePin+0x9c>
    1e66:	84 27       	eor	r24, r20
    1e68:	8c 93       	st	X, r24
    1e6a:	2a c0       	rjmp	.+84     	; 0x1ec0 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTC:
						TOGGLE_BIT(PORTC, pin);
    1e6c:	a5 e3       	ldi	r26, 0x35	; 53
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e5 e3       	ldi	r30, 0x35	; 53
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	48 2f       	mov	r20, r24
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 2e       	mov	r0, r18
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <DIO_togglePin+0xc8>
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	0a 94       	dec	r0
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <DIO_togglePin+0xc4>
    1e8e:	84 27       	eor	r24, r20
    1e90:	8c 93       	st	X, r24
    1e92:	16 c0       	rjmp	.+44     	; 0x1ec0 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTD:
						TOGGLE_BIT(PORTD, pin);
    1e94:	a2 e3       	ldi	r26, 0x32	; 50
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e2 e3       	ldi	r30, 0x32	; 50
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <DIO_togglePin+0xf0>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <DIO_togglePin+0xec>
    1eb6:	84 27       	eor	r24, r20
    1eb8:	8c 93       	st	X, r24
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <DIO_togglePin+0xfe>
						break;
					default:
						return E_OK;
    1ebc:	1d 82       	std	Y+5, r1	; 0x05
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <DIO_togglePin+0x102>
				}
	}

	return E_NOK;
    1ec0:	91 e0       	ldi	r25, 0x01	; 1
    1ec2:	9d 83       	std	Y+5, r25	; 0x05
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <DIO_EnablePullup>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_EnablePullup(DIO_Ports_t PORT, u8 PIN, DIO_PullUpState_t Pullstate)
	{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	6a 83       	std	Y+2, r22	; 0x02
    1eee:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	88 30       	cpi	r24, 0x08	; 8
    1ef4:	10 f0       	brcs	.+4      	; 0x1efa <DIO_EnablePullup+0x24>
			{
				return E_OK;
    1ef6:	1e 86       	std	Y+14, r1	; 0x0e
    1ef8:	26 c1       	rjmp	.+588    	; 0x2146 <DIO_EnablePullup+0x270>
			}
		else
			{
				switch(PORT)
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	3d 87       	std	Y+13, r19	; 0x0d
    1f02:	2c 87       	std	Y+12, r18	; 0x0c
    1f04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f06:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <DIO_EnablePullup+0x3a>
    1f0e:	57 c0       	rjmp	.+174    	; 0x1fbe <DIO_EnablePullup+0xe8>
    1f10:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f12:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <DIO_EnablePullup+0x4e>
    1f1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	71 f0       	breq	.+28     	; 0x1f3e <DIO_EnablePullup+0x68>
    1f22:	0d c1       	rjmp	.+538    	; 0x213e <DIO_EnablePullup+0x268>
    1f24:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f26:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <DIO_EnablePullup+0x5a>
    1f2e:	87 c0       	rjmp	.+270    	; 0x203e <DIO_EnablePullup+0x168>
    1f30:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f32:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f34:	83 30       	cpi	r24, 0x03	; 3
    1f36:	91 05       	cpc	r25, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <DIO_EnablePullup+0x66>
    1f3a:	c1 c0       	rjmp	.+386    	; 0x20be <DIO_EnablePullup+0x1e8>
    1f3c:	00 c1       	rjmp	.+512    	; 0x213e <DIO_EnablePullup+0x268>
				{
					case DIO_PORTA:
						switch(Pullstate)
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3b 87       	std	Y+11, r19	; 0x0b
    1f46:	2a 87       	std	Y+10, r18	; 0x0a
    1f48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	31 f0       	breq	.+12     	; 0x1f5c <DIO_EnablePullup+0x86>
    1f50:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f52:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f54:	21 30       	cpi	r18, 0x01	; 1
    1f56:	31 05       	cpc	r19, r1
    1f58:	41 f1       	breq	.+80     	; 0x1faa <DIO_EnablePullup+0xd4>
    1f5a:	2f c0       	rjmp	.+94     	; 0x1fba <DIO_EnablePullup+0xe4>
							{
								case ENABLE_PullUp:
									CLEAR_BIT(DDRA,PIN);
    1f5c:	aa e3       	ldi	r26, 0x3A	; 58
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	ea e3       	ldi	r30, 0x3A	; 58
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	48 2f       	mov	r20, r24
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <DIO_EnablePullup+0xa2>
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	2a 95       	dec	r18
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <DIO_EnablePullup+0x9e>
    1f7c:	80 95       	com	r24
    1f7e:	84 23       	and	r24, r20
    1f80:	8c 93       	st	X, r24
									SET_BIT(PORTA,PIN);
    1f82:	ab e3       	ldi	r26, 0x3B	; 59
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	eb e3       	ldi	r30, 0x3B	; 59
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 2e       	mov	r0, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <DIO_EnablePullup+0xca>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0a 94       	dec	r0
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <DIO_EnablePullup+0xc6>
    1fa4:	84 2b       	or	r24, r20
    1fa6:	8c 93       	st	X, r24
    1fa8:	cc c0       	rjmp	.+408    	; 0x2142 <DIO_EnablePullup+0x26c>
									break;
								case DISABLE_PullUp:
									SET_BIT(SFIOR,PUD);
    1faa:	a0 e5       	ldi	r26, 0x50	; 80
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e0 e5       	ldi	r30, 0x50	; 80
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	84 60       	ori	r24, 0x04	; 4
    1fb6:	8c 93       	st	X, r24
    1fb8:	c4 c0       	rjmp	.+392    	; 0x2142 <DIO_EnablePullup+0x26c>
									break;
								default:
									return E_OK;
    1fba:	1e 86       	std	Y+14, r1	; 0x0e
    1fbc:	c4 c0       	rjmp	.+392    	; 0x2146 <DIO_EnablePullup+0x270>
							}
						break;
						case DIO_PORTB:
							switch(Pullstate)
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	39 87       	std	Y+9, r19	; 0x09
    1fc6:	28 87       	std	Y+8, r18	; 0x08
    1fc8:	88 85       	ldd	r24, Y+8	; 0x08
    1fca:	99 85       	ldd	r25, Y+9	; 0x09
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	31 f0       	breq	.+12     	; 0x1fdc <DIO_EnablePullup+0x106>
    1fd0:	28 85       	ldd	r18, Y+8	; 0x08
    1fd2:	39 85       	ldd	r19, Y+9	; 0x09
    1fd4:	21 30       	cpi	r18, 0x01	; 1
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	41 f1       	breq	.+80     	; 0x202a <DIO_EnablePullup+0x154>
    1fda:	2f c0       	rjmp	.+94     	; 0x203a <DIO_EnablePullup+0x164>
								{
									case ENABLE_PullUp:
										CLEAR_BIT(DDRB,PIN);
    1fdc:	a7 e3       	ldi	r26, 0x37	; 55
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e7 e3       	ldi	r30, 0x37	; 55
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	48 2f       	mov	r20, r24
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <DIO_EnablePullup+0x122>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	2a 95       	dec	r18
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <DIO_EnablePullup+0x11e>
    1ffc:	80 95       	com	r24
    1ffe:	84 23       	and	r24, r20
    2000:	8c 93       	st	X, r24
										SET_BIT(PORTB,PIN);
    2002:	a8 e3       	ldi	r26, 0x38	; 56
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e8 e3       	ldi	r30, 0x38	; 56
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <DIO_EnablePullup+0x14a>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <DIO_EnablePullup+0x146>
    2024:	84 2b       	or	r24, r20
    2026:	8c 93       	st	X, r24
    2028:	8c c0       	rjmp	.+280    	; 0x2142 <DIO_EnablePullup+0x26c>
										break;
									case DISABLE_PullUp:
										SET_BIT(SFIOR,PUD);
    202a:	a0 e5       	ldi	r26, 0x50	; 80
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e0 e5       	ldi	r30, 0x50	; 80
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	84 60       	ori	r24, 0x04	; 4
    2036:	8c 93       	st	X, r24
    2038:	84 c0       	rjmp	.+264    	; 0x2142 <DIO_EnablePullup+0x26c>
										break;
									default:
										return E_OK;
    203a:	1e 86       	std	Y+14, r1	; 0x0e
    203c:	84 c0       	rjmp	.+264    	; 0x2146 <DIO_EnablePullup+0x270>
								}
							break;
							case DIO_PORTC:
								switch(Pullstate)
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	3f 83       	std	Y+7, r19	; 0x07
    2046:	2e 83       	std	Y+6, r18	; 0x06
    2048:	8e 81       	ldd	r24, Y+6	; 0x06
    204a:	9f 81       	ldd	r25, Y+7	; 0x07
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	31 f0       	breq	.+12     	; 0x205c <DIO_EnablePullup+0x186>
    2050:	2e 81       	ldd	r18, Y+6	; 0x06
    2052:	3f 81       	ldd	r19, Y+7	; 0x07
    2054:	21 30       	cpi	r18, 0x01	; 1
    2056:	31 05       	cpc	r19, r1
    2058:	41 f1       	breq	.+80     	; 0x20aa <DIO_EnablePullup+0x1d4>
    205a:	2f c0       	rjmp	.+94     	; 0x20ba <DIO_EnablePullup+0x1e4>
									{
										case ENABLE_PullUp:
											CLEAR_BIT(DDRC,PIN);
    205c:	a4 e3       	ldi	r26, 0x34	; 52
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e4 e3       	ldi	r30, 0x34	; 52
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <DIO_EnablePullup+0x1a2>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	2a 95       	dec	r18
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <DIO_EnablePullup+0x19e>
    207c:	80 95       	com	r24
    207e:	84 23       	and	r24, r20
    2080:	8c 93       	st	X, r24
											SET_BIT(PORTC,PIN);
    2082:	a5 e3       	ldi	r26, 0x35	; 53
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e5 e3       	ldi	r30, 0x35	; 53
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <DIO_EnablePullup+0x1ca>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <DIO_EnablePullup+0x1c6>
    20a4:	84 2b       	or	r24, r20
    20a6:	8c 93       	st	X, r24
    20a8:	4c c0       	rjmp	.+152    	; 0x2142 <DIO_EnablePullup+0x26c>
											break;
										case DISABLE_PullUp:
											SET_BIT(SFIOR,PUD);
    20aa:	a0 e5       	ldi	r26, 0x50	; 80
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e0 e5       	ldi	r30, 0x50	; 80
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	84 60       	ori	r24, 0x04	; 4
    20b6:	8c 93       	st	X, r24
    20b8:	44 c0       	rjmp	.+136    	; 0x2142 <DIO_EnablePullup+0x26c>
											break;
										default:
											return E_OK;
    20ba:	1e 86       	std	Y+14, r1	; 0x0e
    20bc:	44 c0       	rjmp	.+136    	; 0x2146 <DIO_EnablePullup+0x270>
									}
								break;
								case DIO_PORTD:
									switch(Pullstate)
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	3d 83       	std	Y+5, r19	; 0x05
    20c6:	2c 83       	std	Y+4, r18	; 0x04
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ca:	9d 81       	ldd	r25, Y+5	; 0x05
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	31 f0       	breq	.+12     	; 0x20dc <DIO_EnablePullup+0x206>
    20d0:	2c 81       	ldd	r18, Y+4	; 0x04
    20d2:	3d 81       	ldd	r19, Y+5	; 0x05
    20d4:	21 30       	cpi	r18, 0x01	; 1
    20d6:	31 05       	cpc	r19, r1
    20d8:	41 f1       	breq	.+80     	; 0x212a <DIO_EnablePullup+0x254>
    20da:	2f c0       	rjmp	.+94     	; 0x213a <DIO_EnablePullup+0x264>
										{
											case ENABLE_PullUp:
												CLEAR_BIT(DDRD,PIN);
    20dc:	a1 e3       	ldi	r26, 0x31	; 49
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e1 e3       	ldi	r30, 0x31	; 49
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <DIO_EnablePullup+0x222>
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	2a 95       	dec	r18
    20fa:	e2 f7       	brpl	.-8      	; 0x20f4 <DIO_EnablePullup+0x21e>
    20fc:	80 95       	com	r24
    20fe:	84 23       	and	r24, r20
    2100:	8c 93       	st	X, r24
												SET_BIT(PORTD,PIN);
    2102:	a2 e3       	ldi	r26, 0x32	; 50
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e2 e3       	ldi	r30, 0x32	; 50
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	48 2f       	mov	r20, r24
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 2e       	mov	r0, r18
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <DIO_EnablePullup+0x24a>
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	0a 94       	dec	r0
    2122:	e2 f7       	brpl	.-8      	; 0x211c <DIO_EnablePullup+0x246>
    2124:	84 2b       	or	r24, r20
    2126:	8c 93       	st	X, r24
    2128:	0c c0       	rjmp	.+24     	; 0x2142 <DIO_EnablePullup+0x26c>
												break;
											case DISABLE_PullUp:
												SET_BIT(SFIOR,PUD);
    212a:	a0 e5       	ldi	r26, 0x50	; 80
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e0 e5       	ldi	r30, 0x50	; 80
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	84 60       	ori	r24, 0x04	; 4
    2136:	8c 93       	st	X, r24
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <DIO_EnablePullup+0x26c>
												break;
											default:
												return E_OK;
    213a:	1e 86       	std	Y+14, r1	; 0x0e
    213c:	04 c0       	rjmp	.+8      	; 0x2146 <DIO_EnablePullup+0x270>
										}
									break;
									default:
									return E_OK;
    213e:	1e 86       	std	Y+14, r1	; 0x0e
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <DIO_EnablePullup+0x270>

				}
			}
		return E_NOK;
    2142:	31 e0       	ldi	r19, 0x01	; 1
    2144:	3e 87       	std	Y+14, r19	; 0x0e
    2146:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    2148:	2e 96       	adiw	r28, 0x0e	; 14
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <ADC_Init>:
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 */
 /*****************************************************************************************************/
STD_Return ADC_Init(ADC__State_t State)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	00 d0       	rcall	.+0      	; 0x2160 <ADC_Init+0x6>
    2160:	00 d0       	rcall	.+0      	; 0x2162 <ADC_Init+0x8>
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	89 83       	std	Y+1, r24	; 0x01
	//Resolution Selection
	#if defined Resolution_8_Bit
	SET_BIT(ADMUX,ADLAR);
	#elif defined Resolution_10_Bit
	CLEAR_BIT(ADMUX,ADLAR);
    2168:	a7 e2       	ldi	r26, 0x27	; 39
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e7 e2       	ldi	r30, 0x27	; 39
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8f 7d       	andi	r24, 0xDF	; 223
    2174:	8c 93       	st	X, r24
	//Voltage Reference Selection
	#if defined AREF_Internal_VREF
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
	#elif defined AREF_External_VREF
	SET_BIT(ADMUX,REFS0);
    2176:	a7 e2       	ldi	r26, 0x27	; 39
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e7 e2       	ldi	r30, 0x27	; 39
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	80 64       	ori	r24, 0x40	; 64
    2182:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    2184:	a7 e2       	ldi	r26, 0x27	; 39
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e7 e2       	ldi	r30, 0x27	; 39
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	8f 77       	andi	r24, 0x7F	; 127
    2190:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_64
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_128
		SET_BIT(ADCSRA,ADPS0);
    2192:	a6 e2       	ldi	r26, 0x26	; 38
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e6 e2       	ldi	r30, 0x26	; 38
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	81 60       	ori	r24, 0x01	; 1
    219e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    21a0:	a6 e2       	ldi	r26, 0x26	; 38
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e6 e2       	ldi	r30, 0x26	; 38
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	82 60       	ori	r24, 0x02	; 2
    21ac:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    21ae:	a6 e2       	ldi	r26, 0x26	; 38
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e6 e2       	ldi	r30, 0x26	; 38
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	84 60       	ori	r24, 0x04	; 4
    21ba:	8c 93       	st	X, r24
	#endif
	switch (State)
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3c 83       	std	Y+4, r19	; 0x04
    21c4:	2b 83       	std	Y+3, r18	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	31 f0       	breq	.+12     	; 0x21da <ADC_Init+0x80>
    21ce:	2b 81       	ldd	r18, Y+3	; 0x03
    21d0:	3c 81       	ldd	r19, Y+4	; 0x04
    21d2:	21 30       	cpi	r18, 0x01	; 1
    21d4:	31 05       	cpc	r19, r1
    21d6:	49 f0       	breq	.+18     	; 0x21ea <ADC_Init+0x90>
    21d8:	10 c0       	rjmp	.+32     	; 0x21fa <ADC_Init+0xa0>
		{
			case ADC_ENABLE:
				SET_BIT(ADCSRA,ADEN);
    21da:	a6 e2       	ldi	r26, 0x26	; 38
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e6 e2       	ldi	r30, 0x26	; 38
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	80 68       	ori	r24, 0x80	; 128
    21e6:	8c 93       	st	X, r24
    21e8:	0a c0       	rjmp	.+20     	; 0x21fe <ADC_Init+0xa4>
				break;
			case ADC_DISABLE:
				CLEAR_BIT(ADCSRA,ADEN);
    21ea:	a6 e2       	ldi	r26, 0x26	; 38
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e6 e2       	ldi	r30, 0x26	; 38
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8f 77       	andi	r24, 0x7F	; 127
    21f6:	8c 93       	st	X, r24
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <ADC_Init+0xa4>
				break;
			default:
				return E_OK;
    21fa:	1a 82       	std	Y+2, r1	; 0x02
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <ADC_Init+0xa8>
		}
		return E_NOK;
    21fe:	31 e0       	ldi	r19, 0x01	; 1
    2200:	3a 83       	std	Y+2, r19	; 0x02
    2202:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <ADC_SetInterrupt_Enable>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 */
STD_Return ADC_SetInterrupt_Enable(ADC_Interrupt_State_t State)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <ADC_SetInterrupt_Enable+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <ADC_SetInterrupt_Enable+0x8>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	3c 83       	std	Y+4, r19	; 0x04
    2228:	2b 83       	std	Y+3, r18	; 0x03
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	31 f0       	breq	.+12     	; 0x223e <ADC_SetInterrupt_Enable+0x2c>
    2232:	2b 81       	ldd	r18, Y+3	; 0x03
    2234:	3c 81       	ldd	r19, Y+4	; 0x04
    2236:	21 30       	cpi	r18, 0x01	; 1
    2238:	31 05       	cpc	r19, r1
    223a:	49 f0       	breq	.+18     	; 0x224e <ADC_SetInterrupt_Enable+0x3c>
    223c:	10 c0       	rjmp	.+32     	; 0x225e <ADC_SetInterrupt_Enable+0x4c>
	{
		case ADC_Interrupt_ENABLE:
			SET_BIT(ADCSRA,ADIE);
    223e:	a6 e2       	ldi	r26, 0x26	; 38
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e6 e2       	ldi	r30, 0x26	; 38
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	88 60       	ori	r24, 0x08	; 8
    224a:	8c 93       	st	X, r24
    224c:	0a c0       	rjmp	.+20     	; 0x2262 <ADC_SetInterrupt_Enable+0x50>
			break;
		case ADC_Interrupt_DISABLE:
			CLEAR_BIT(ADCSRA,ADIE);
    224e:	a6 e2       	ldi	r26, 0x26	; 38
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e6 e2       	ldi	r30, 0x26	; 38
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	87 7f       	andi	r24, 0xF7	; 247
    225a:	8c 93       	st	X, r24
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <ADC_SetInterrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    225e:	1a 82       	std	Y+2, r1	; 0x02
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <ADC_SetInterrupt_Enable+0x54>
	}
	return E_NOK;
    2262:	31 e0       	ldi	r19, 0x01	; 1
    2264:	3a 83       	std	Y+2, r19	; 0x02
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <ADC_Start_conversion>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Start_conversion(u8 channel)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <ADC_Start_conversion+0x6>
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	89 83       	std	Y+1, r24	; 0x01
	if (channel>MaxPinNum)
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	88 30       	cpi	r24, 0x08	; 8
    2286:	10 f0       	brcs	.+4      	; 0x228c <ADC_Start_conversion+0x16>
	{
		return E_OK;
    2288:	1a 82       	std	Y+2, r1	; 0x02
    228a:	21 c0       	rjmp	.+66     	; 0x22ce <ADC_Start_conversion+0x58>
	}
	else
	{

			//Mask for non used bits of the 8 bits of the Regsiter
			ADMUX &= Unselected_Channel_MASK;
    228c:	a7 e2       	ldi	r26, 0x27	; 39
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e7 e2       	ldi	r30, 0x27	; 39
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	88 7f       	andi	r24, 0xF8	; 248
    2298:	8c 93       	st	X, r24

			//Mask for the usage 3 bits of the 8 bits
			ADMUX |= channel;
    229a:	a7 e2       	ldi	r26, 0x27	; 39
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e7 e2       	ldi	r30, 0x27	; 39
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	90 81       	ld	r25, Z
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	89 2b       	or	r24, r25
    22a8:	8c 93       	st	X, r24

			//Set the AdcStartConversion
			SET_BIT(ADCSRA,ADSC);
    22aa:	a6 e2       	ldi	r26, 0x26	; 38
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e6 e2       	ldi	r30, 0x26	; 38
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	80 64       	ori	r24, 0x40	; 64
    22b6:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA,ADSC) == 1);
    22b8:	e6 e2       	ldi	r30, 0x26	; 38
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	88 2f       	mov	r24, r24
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	80 74       	andi	r24, 0x40	; 64
    22c4:	90 70       	andi	r25, 0x00	; 0
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	b9 f7       	brne	.-18     	; 0x22b8 <ADC_Start_conversion+0x42>
		 //Wait conversion to finish
	}
	return E_NOK;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	8a 83       	std	Y+2, r24	; 0x02
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <ADC_Get_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Get_Value(u16 *AdcResult)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <ADC_Get_Value+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <ADC_Get_Value+0x8>
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
		u16 AdcResult_Temp=0;
    22ea:	1a 82       	std	Y+2, r1	; 0x02
    22ec:	19 82       	std	Y+1, r1	; 0x01
	#if defined Resolution_8_Bit
		*AdcResult=ADCH;
	#elif defined Resolution_10_Bit
		AdcResult_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    22ee:	e4 e2       	ldi	r30, 0x24	; 36
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	e5 e2       	ldi	r30, 0x25	; 37
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	98 2f       	mov	r25, r24
    2304:	88 27       	eor	r24, r24
    2306:	82 0f       	add	r24, r18
    2308:	93 1f       	adc	r25, r19
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
		*AdcResult = (AdcResult_Temp & Resolution_10Bit_MASK);//Mask higher bits in ADCH and read only the 10 bits for the ADC
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	93 70       	andi	r25, 0x03	; 3
    2314:	eb 81       	ldd	r30, Y+3	; 0x03
    2316:	fc 81       	ldd	r31, Y+4	; 0x04
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	80 83       	st	Z, r24
	#endif
		return E_NOK;
    231c:	81 e0       	ldi	r24, 0x01	; 1
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <ADC_Read_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Read_Value(u8 channel,u16 *AdcValue)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <ADC_Read_Value+0x6>
    2332:	00 d0       	rcall	.+0      	; 0x2334 <ADC_Read_Value+0x8>
    2334:	00 d0       	rcall	.+0      	; 0x2336 <ADC_Read_Value+0xa>
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	8b 83       	std	Y+3, r24	; 0x03
    233c:	7d 83       	std	Y+5, r23	; 0x05
    233e:	6c 83       	std	Y+4, r22	; 0x04
	u16 AdcValue_Temp=0;
    2340:	1a 82       	std	Y+2, r1	; 0x02
    2342:	19 82       	std	Y+1, r1	; 0x01
	if (channel>MaxPinNum)
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	88 30       	cpi	r24, 0x08	; 8
    2348:	c0 f0       	brcs	.+48     	; 0x237a <ADC_Read_Value+0x4e>
		{
			return E_OK;
    234a:	1e 82       	std	Y+6, r1	; 0x06
    234c:	38 c0       	rjmp	.+112    	; 0x23be <ADC_Read_Value+0x92>
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
			{
				//Mask for non used bits of the 8 bits of the Regsiter
				ADMUX &= Unselected_Channel_MASK;
    234e:	a7 e2       	ldi	r26, 0x27	; 39
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e7 e2       	ldi	r30, 0x27	; 39
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	88 7f       	andi	r24, 0xF8	; 248
    235a:	8c 93       	st	X, r24

				//Mask for the usage 3 bits of the 8 bits
				ADMUX |= channel;
    235c:	a7 e2       	ldi	r26, 0x27	; 39
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e7 e2       	ldi	r30, 0x27	; 39
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	90 81       	ld	r25, Z
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	89 2b       	or	r24, r25
    236a:	8c 93       	st	X, r24

				//Set the AdcStartConversion
				SET_BIT(ADCSRA,ADSC);
    236c:	a6 e2       	ldi	r26, 0x26	; 38
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e6 e2       	ldi	r30, 0x26	; 38
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 64       	ori	r24, 0x40	; 64
    2378:	8c 93       	st	X, r24
		}
		else
		{
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
    237a:	e6 e2       	ldi	r30, 0x26	; 38
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	80 74       	andi	r24, 0x40	; 64
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	09 f7       	brne	.-62     	; 0x234e <ADC_Read_Value+0x22>
			//return the read value

			#if defined Resolution_8_Bit
				*AdcValue=ADCH;
			#elif defined Resolution_10_Bit
				AdcValue_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    238c:	e4 e2       	ldi	r30, 0x24	; 36
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	e5 e2       	ldi	r30, 0x25	; 37
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	98 2f       	mov	r25, r24
    23a2:	88 27       	eor	r24, r24
    23a4:	82 0f       	add	r24, r18
    23a6:	93 1f       	adc	r25, r19
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
				*AdcValue = (AdcValue_Temp & Resolution_10Bit_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	9a 81       	ldd	r25, Y+2	; 0x02
    23b0:	93 70       	andi	r25, 0x03	; 3
    23b2:	ec 81       	ldd	r30, Y+4	; 0x04
    23b4:	fd 81       	ldd	r31, Y+5	; 0x05
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	80 83       	st	Z, r24
			#endif
		}
	return E_NOK;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	8e 83       	std	Y+6, r24	; 0x06
    23be:	8e 81       	ldd	r24, Y+6	; 0x06
}
    23c0:	26 96       	adiw	r28, 0x06	; 6
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <ADC_ReadVolt>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_ReadVolt (u8 channel,f32 *AdcVolt)
	{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <ADC_ReadVolt+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <ADC_ReadVolt+0x8>
    23da:	00 d0       	rcall	.+0      	; 0x23dc <ADC_ReadVolt+0xa>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	8b 83       	std	Y+3, r24	; 0x03
    23e2:	7d 83       	std	Y+5, r23	; 0x05
    23e4:	6c 83       	std	Y+4, r22	; 0x04
		u16 AdcValue_Temp=0;
    23e6:	1a 82       	std	Y+2, r1	; 0x02
    23e8:	19 82       	std	Y+1, r1	; 0x01
		if(channel>MaxPinNum)
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	88 30       	cpi	r24, 0x08	; 8
    23ee:	10 f0       	brcs	.+4      	; 0x23f4 <ADC_ReadVolt+0x22>
			{
				return E_OK;
    23f0:	1e 82       	std	Y+6, r1	; 0x06
    23f2:	2e c0       	rjmp	.+92     	; 0x2450 <ADC_ReadVolt+0x7e>
			}
		else
			{
				ADC_Read_Value(channel,&AdcValue_Temp);
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9e 01       	movw	r18, r28
    23f8:	2f 5f       	subi	r18, 0xFF	; 255
    23fa:	3f 4f       	sbci	r19, 0xFF	; 255
    23fc:	b9 01       	movw	r22, r18
    23fe:	0e 94 96 11 	call	0x232c	; 0x232c <ADC_Read_Value>
				*AdcVolt= (((f32)AdcValue_Temp)*((f32)VREF))/((f32)(ADC_MAX));
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	cc 01       	movw	r24, r24
    2408:	a0 e0       	ldi	r26, 0x00	; 0
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 ea       	ldi	r20, 0xA0	; 160
    2422:	50 e4       	ldi	r21, 0x40	; 64
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	54 e4       	ldi	r21, 0x44	; 68
    2438:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	ec 81       	ldd	r30, Y+4	; 0x04
    2442:	fd 81       	ldd	r31, Y+5	; 0x05
    2444:	80 83       	st	Z, r24
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	a2 83       	std	Z+2, r26	; 0x02
    244a:	b3 83       	std	Z+3, r27	; 0x03
			}
		return E_NOK;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	8e 83       	std	Y+6, r24	; 0x06
    2450:	8e 81       	ldd	r24, Y+6	; 0x06
	}
    2452:	26 96       	adiw	r28, 0x06	; 6
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <ADC_CallBack>:
 * 
 * @param func_ptr 		 :		pointer to function that points to the user/ External function
 * @return void			 : 		return nothing
 **/
void ADC_CallBack(void (*func_ptr)(void))
	{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <ADC_CallBack+0x6>
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
		User_Function = func_ptr;
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	90 93 8f 01 	sts	0x018F, r25
    247a:	80 93 8e 01 	sts	0x018E, r24
	}
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	08 95       	ret

00002488 <__vector_16>:
/*********************************ISR ADC Vector******************************************************/
ISR(ADC_Vect)
{
    2488:	1f 92       	push	r1
    248a:	0f 92       	push	r0
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	0f 92       	push	r0
    2490:	11 24       	eor	r1, r1
    2492:	2f 93       	push	r18
    2494:	3f 93       	push	r19
    2496:	4f 93       	push	r20
    2498:	5f 93       	push	r21
    249a:	6f 93       	push	r22
    249c:	7f 93       	push	r23
    249e:	8f 93       	push	r24
    24a0:	9f 93       	push	r25
    24a2:	af 93       	push	r26
    24a4:	bf 93       	push	r27
    24a6:	ef 93       	push	r30
    24a8:	ff 93       	push	r31
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	(*User_Function)();
    24b2:	e0 91 8e 01 	lds	r30, 0x018E
    24b6:	f0 91 8f 01 	lds	r31, 0x018F
    24ba:	09 95       	icall
}
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	ff 91       	pop	r31
    24c2:	ef 91       	pop	r30
    24c4:	bf 91       	pop	r27
    24c6:	af 91       	pop	r26
    24c8:	9f 91       	pop	r25
    24ca:	8f 91       	pop	r24
    24cc:	7f 91       	pop	r23
    24ce:	6f 91       	pop	r22
    24d0:	5f 91       	pop	r21
    24d2:	4f 91       	pop	r20
    24d4:	3f 91       	pop	r19
    24d6:	2f 91       	pop	r18
    24d8:	0f 90       	pop	r0
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	0f 90       	pop	r0
    24de:	1f 90       	pop	r1
    24e0:	18 95       	reti

000024e2 <TimingSelection>:
 * @param TYPE 						: takes the sevensegment types CommonAnode/CommonCathode
 * @param Time 						: take which time will activated Sec01/Sec10/Min01/Min10			
 * @return STD_Return 
 */
STD_Return TimingSelection(u8 StopWatch_ControlPort,SevenSegment_Type_t TYPE,SevenSegment_Sel_t Time)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	2a 97       	sbiw	r28, 0x0a	; 10
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	6a 83       	std	Y+2, r22	; 0x02
    24fa:	4b 83       	std	Y+3, r20	; 0x03
	#ifdef StopWatch_ControlPort_A
	switch(TYPE)
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	3a 87       	std	Y+10, r19	; 0x0a
    2504:	29 87       	std	Y+9, r18	; 0x09
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	39 f0       	breq	.+14     	; 0x251c <TimingSelection+0x3a>
    250e:	29 85       	ldd	r18, Y+9	; 0x09
    2510:	3a 85       	ldd	r19, Y+10	; 0x0a
    2512:	21 30       	cpi	r18, 0x01	; 1
    2514:	31 05       	cpc	r19, r1
    2516:	09 f4       	brne	.+2      	; 0x251a <TimingSelection+0x38>
    2518:	77 c0       	rjmp	.+238    	; 0x2608 <TimingSelection+0x126>
    251a:	ec c0       	rjmp	.+472    	; 0x26f4 <TimingSelection+0x212>
	{
		case CommonCathod:
			switch(Time)
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	38 87       	std	Y+8, r19	; 0x08
    2524:	2f 83       	std	Y+7, r18	; 0x07
    2526:	8f 81       	ldd	r24, Y+7	; 0x07
    2528:	98 85       	ldd	r25, Y+8	; 0x08
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	91 05       	cpc	r25, r1
    252e:	59 f1       	breq	.+86     	; 0x2586 <TimingSelection+0xa4>
    2530:	2f 81       	ldd	r18, Y+7	; 0x07
    2532:	38 85       	ldd	r19, Y+8	; 0x08
    2534:	22 30       	cpi	r18, 0x02	; 2
    2536:	31 05       	cpc	r19, r1
    2538:	2c f4       	brge	.+10     	; 0x2544 <TimingSelection+0x62>
    253a:	8f 81       	ldd	r24, Y+7	; 0x07
    253c:	98 85       	ldd	r25, Y+8	; 0x08
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	69 f0       	breq	.+26     	; 0x255c <TimingSelection+0x7a>
    2542:	60 c0       	rjmp	.+192    	; 0x2604 <TimingSelection+0x122>
    2544:	2f 81       	ldd	r18, Y+7	; 0x07
    2546:	38 85       	ldd	r19, Y+8	; 0x08
    2548:	22 30       	cpi	r18, 0x02	; 2
    254a:	31 05       	cpc	r19, r1
    254c:	89 f1       	breq	.+98     	; 0x25b0 <TimingSelection+0xce>
    254e:	8f 81       	ldd	r24, Y+7	; 0x07
    2550:	98 85       	ldd	r25, Y+8	; 0x08
    2552:	83 30       	cpi	r24, 0x03	; 3
    2554:	91 05       	cpc	r25, r1
    2556:	09 f4       	brne	.+2      	; 0x255a <TimingSelection+0x78>
    2558:	40 c0       	rjmp	.+128    	; 0x25da <TimingSelection+0xf8>
    255a:	54 c0       	rjmp	.+168    	; 0x2604 <TimingSelection+0x122>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	61 e0       	ldi	r22, 0x01	; 1
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	61 e0       	ldi	r22, 0x01	; 1
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2584:	b9 c0       	rjmp	.+370    	; 0x26f8 <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	41 e0       	ldi	r20, 0x01	; 1
    2596:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	61 e0       	ldi	r22, 0x01	; 1
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    25ae:	a4 c0       	rjmp	.+328    	; 0x26f8 <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    25d8:	8f c0       	rjmp	.+286    	; 0x26f8 <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	61 e0       	ldi	r22, 0x01	; 1
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2602:	7a c0       	rjmp	.+244    	; 0x26f8 <TimingSelection+0x216>
						break;
					default: return E_OK;
    2604:	1e 82       	std	Y+6, r1	; 0x06
    2606:	7a c0       	rjmp	.+244    	; 0x26fc <TimingSelection+0x21a>
				}
		break;
		case CommonAnode:
			switch(Time)
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	3d 83       	std	Y+5, r19	; 0x05
    2610:	2c 83       	std	Y+4, r18	; 0x04
    2612:	8c 81       	ldd	r24, Y+4	; 0x04
    2614:	9d 81       	ldd	r25, Y+5	; 0x05
    2616:	81 30       	cpi	r24, 0x01	; 1
    2618:	91 05       	cpc	r25, r1
    261a:	59 f1       	breq	.+86     	; 0x2672 <TimingSelection+0x190>
    261c:	2c 81       	ldd	r18, Y+4	; 0x04
    261e:	3d 81       	ldd	r19, Y+5	; 0x05
    2620:	22 30       	cpi	r18, 0x02	; 2
    2622:	31 05       	cpc	r19, r1
    2624:	2c f4       	brge	.+10     	; 0x2630 <TimingSelection+0x14e>
    2626:	8c 81       	ldd	r24, Y+4	; 0x04
    2628:	9d 81       	ldd	r25, Y+5	; 0x05
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	69 f0       	breq	.+26     	; 0x2648 <TimingSelection+0x166>
    262e:	60 c0       	rjmp	.+192    	; 0x26f0 <TimingSelection+0x20e>
    2630:	2c 81       	ldd	r18, Y+4	; 0x04
    2632:	3d 81       	ldd	r19, Y+5	; 0x05
    2634:	22 30       	cpi	r18, 0x02	; 2
    2636:	31 05       	cpc	r19, r1
    2638:	89 f1       	breq	.+98     	; 0x269c <TimingSelection+0x1ba>
    263a:	8c 81       	ldd	r24, Y+4	; 0x04
    263c:	9d 81       	ldd	r25, Y+5	; 0x05
    263e:	83 30       	cpi	r24, 0x03	; 3
    2640:	91 05       	cpc	r25, r1
    2642:	09 f4       	brne	.+2      	; 0x2646 <TimingSelection+0x164>
    2644:	40 c0       	rjmp	.+128    	; 0x26c6 <TimingSelection+0x1e4>
    2646:	54 c0       	rjmp	.+168    	; 0x26f0 <TimingSelection+0x20e>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	61 e0       	ldi	r22, 0x01	; 1
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	61 e0       	ldi	r22, 0x01	; 1
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2670:	43 c0       	rjmp	.+134    	; 0x26f8 <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	61 e0       	ldi	r22, 0x01	; 1
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	61 e0       	ldi	r22, 0x01	; 1
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    269a:	2e c0       	rjmp	.+92     	; 0x26f8 <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	61 e0       	ldi	r22, 0x01	; 1
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	61 e0       	ldi	r22, 0x01	; 1
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    26c4:	19 c0       	rjmp	.+50     	; 0x26f8 <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    26ee:	04 c0       	rjmp	.+8      	; 0x26f8 <TimingSelection+0x216>
						break;
					default: return E_OK;
    26f0:	1e 82       	std	Y+6, r1	; 0x06
    26f2:	04 c0       	rjmp	.+8      	; 0x26fc <TimingSelection+0x21a>
				}
		break;
		default:
		return E_OK;
    26f4:	1e 82       	std	Y+6, r1	; 0x06
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <TimingSelection+0x21a>
			break;
			default:
			return E_OK;
		}
#endif
	return E_NOK;
    26f8:	91 e0       	ldi	r25, 0x01	; 1
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    26fe:	2a 96       	adiw	r28, 0x0a	; 10
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <SevenSegment_Display>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return SevenSegment_Display(DIO_Ports_t PORT,SevenSegment_Type_t TYPE,Display_Number_t NUM)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	6e 97       	sbiw	r28, 0x1e	; 30
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	6a 83       	std	Y+2, r22	; 0x02
    2728:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT)
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	3e 8f       	std	Y+30, r19	; 0x1e
    2732:	2d 8f       	std	Y+29, r18	; 0x1d
    2734:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2736:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	91 05       	cpc	r25, r1
    273c:	09 f4       	brne	.+2      	; 0x2740 <SevenSegment_Display+0x30>
    273e:	4f c2       	rjmp	.+1182   	; 0x2bde <SevenSegment_Display+0x4ce>
    2740:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2742:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2744:	22 30       	cpi	r18, 0x02	; 2
    2746:	31 05       	cpc	r19, r1
    2748:	34 f4       	brge	.+12     	; 0x2756 <SevenSegment_Display+0x46>
    274a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    274c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	81 f0       	breq	.+32     	; 0x2772 <SevenSegment_Display+0x62>
    2752:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <SevenSegment_Display+0x11ca>
    2756:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2758:	3e 8d       	ldd	r19, Y+30	; 0x1e
    275a:	22 30       	cpi	r18, 0x02	; 2
    275c:	31 05       	cpc	r19, r1
    275e:	09 f4       	brne	.+2      	; 0x2762 <SevenSegment_Display+0x52>
    2760:	68 c4       	rjmp	.+2256   	; 0x3032 <SevenSegment_Display+0x922>
    2762:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2764:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2766:	83 30       	cpi	r24, 0x03	; 3
    2768:	91 05       	cpc	r25, r1
    276a:	09 f4       	brne	.+2      	; 0x276e <SevenSegment_Display+0x5e>
    276c:	8c c6       	rjmp	.+3352   	; 0x3486 <SevenSegment_Display+0xd76>
    276e:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <SevenSegment_Display+0x11ca>
	{
		case DIO_PORTA:
		switch(TYPE)
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	3c 8f       	std	Y+28, r19	; 0x1c
    277a:	2b 8f       	std	Y+27, r18	; 0x1b
    277c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	39 f0       	breq	.+14     	; 0x2792 <SevenSegment_Display+0x82>
    2784:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2786:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2788:	21 30       	cpi	r18, 0x01	; 1
    278a:	31 05       	cpc	r19, r1
    278c:	09 f4       	brne	.+2      	; 0x2790 <SevenSegment_Display+0x80>
    278e:	18 c1       	rjmp	.+560    	; 0x29c0 <SevenSegment_Display+0x2b0>
    2790:	24 c2       	rjmp	.+1096   	; 0x2bda <SevenSegment_Display+0x4ca>
			{
				case CommonCathod:
					DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	6f ef       	ldi	r22, 0xFF	; 255
    2796:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_LOW);
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	67 e0       	ldi	r22, 0x07	; 7
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
					switch(NUM)
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	3a 8f       	std	Y+26, r19	; 0x1a
    27ac:	29 8f       	std	Y+25, r18	; 0x19
    27ae:	89 8d       	ldd	r24, Y+25	; 0x19
    27b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27b2:	84 30       	cpi	r24, 0x04	; 4
    27b4:	91 05       	cpc	r25, r1
    27b6:	09 f4       	brne	.+2      	; 0x27ba <SevenSegment_Display+0xaa>
    27b8:	92 c0       	rjmp	.+292    	; 0x28de <SevenSegment_Display+0x1ce>
    27ba:	29 8d       	ldd	r18, Y+25	; 0x19
    27bc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    27be:	25 30       	cpi	r18, 0x05	; 5
    27c0:	31 05       	cpc	r19, r1
    27c2:	ec f4       	brge	.+58     	; 0x27fe <SevenSegment_Display+0xee>
    27c4:	89 8d       	ldd	r24, Y+25	; 0x19
    27c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	91 05       	cpc	r25, r1
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <SevenSegment_Display+0xc0>
    27ce:	4b c0       	rjmp	.+150    	; 0x2866 <SevenSegment_Display+0x156>
    27d0:	29 8d       	ldd	r18, Y+25	; 0x19
    27d2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    27d4:	22 30       	cpi	r18, 0x02	; 2
    27d6:	31 05       	cpc	r19, r1
    27d8:	2c f4       	brge	.+10     	; 0x27e4 <SevenSegment_Display+0xd4>
    27da:	89 8d       	ldd	r24, Y+25	; 0x19
    27dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	99 f1       	breq	.+102    	; 0x2848 <SevenSegment_Display+0x138>
    27e2:	eb c0       	rjmp	.+470    	; 0x29ba <SevenSegment_Display+0x2aa>
    27e4:	29 8d       	ldd	r18, Y+25	; 0x19
    27e6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    27e8:	22 30       	cpi	r18, 0x02	; 2
    27ea:	31 05       	cpc	r19, r1
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <SevenSegment_Display+0xe0>
    27ee:	4f c0       	rjmp	.+158    	; 0x288e <SevenSegment_Display+0x17e>
    27f0:	89 8d       	ldd	r24, Y+25	; 0x19
    27f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27f4:	83 30       	cpi	r24, 0x03	; 3
    27f6:	91 05       	cpc	r25, r1
    27f8:	09 f4       	brne	.+2      	; 0x27fc <SevenSegment_Display+0xec>
    27fa:	5d c0       	rjmp	.+186    	; 0x28b6 <SevenSegment_Display+0x1a6>
    27fc:	de c0       	rjmp	.+444    	; 0x29ba <SevenSegment_Display+0x2aa>
    27fe:	29 8d       	ldd	r18, Y+25	; 0x19
    2800:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2802:	27 30       	cpi	r18, 0x07	; 7
    2804:	31 05       	cpc	r19, r1
    2806:	09 f4       	brne	.+2      	; 0x280a <SevenSegment_Display+0xfa>
    2808:	a6 c0       	rjmp	.+332    	; 0x2956 <SevenSegment_Display+0x246>
    280a:	89 8d       	ldd	r24, Y+25	; 0x19
    280c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    280e:	88 30       	cpi	r24, 0x08	; 8
    2810:	91 05       	cpc	r25, r1
    2812:	6c f4       	brge	.+26     	; 0x282e <SevenSegment_Display+0x11e>
    2814:	29 8d       	ldd	r18, Y+25	; 0x19
    2816:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2818:	25 30       	cpi	r18, 0x05	; 5
    281a:	31 05       	cpc	r19, r1
    281c:	09 f4       	brne	.+2      	; 0x2820 <SevenSegment_Display+0x110>
    281e:	78 c0       	rjmp	.+240    	; 0x2910 <SevenSegment_Display+0x200>
    2820:	89 8d       	ldd	r24, Y+25	; 0x19
    2822:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2824:	86 30       	cpi	r24, 0x06	; 6
    2826:	91 05       	cpc	r25, r1
    2828:	09 f4       	brne	.+2      	; 0x282c <SevenSegment_Display+0x11c>
    282a:	86 c0       	rjmp	.+268    	; 0x2938 <SevenSegment_Display+0x228>
    282c:	c6 c0       	rjmp	.+396    	; 0x29ba <SevenSegment_Display+0x2aa>
    282e:	29 8d       	ldd	r18, Y+25	; 0x19
    2830:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2832:	28 30       	cpi	r18, 0x08	; 8
    2834:	31 05       	cpc	r19, r1
    2836:	09 f4       	brne	.+2      	; 0x283a <SevenSegment_Display+0x12a>
    2838:	a7 c0       	rjmp	.+334    	; 0x2988 <SevenSegment_Display+0x278>
    283a:	89 8d       	ldd	r24, Y+25	; 0x19
    283c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    283e:	89 30       	cpi	r24, 0x09	; 9
    2840:	91 05       	cpc	r25, r1
    2842:	09 f4       	brne	.+2      	; 0x2846 <SevenSegment_Display+0x136>
    2844:	ab c0       	rjmp	.+342    	; 0x299c <SevenSegment_Display+0x28c>
    2846:	b9 c0       	rjmp	.+370    	; 0x29ba <SevenSegment_Display+0x2aa>
						{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	6f ef       	ldi	r22, 0xFF	; 255
    284c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	6f ef       	ldi	r22, 0xFF	; 255
    2854:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_LOW);
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	66 e0       	ldi	r22, 0x06	; 6
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2862:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	6f ef       	ldi	r22, 0xFF	; 255
    286a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	41 e0       	ldi	r20, 0x01	; 1
    287c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	62 e0       	ldi	r22, 0x02	; 2
    2884:	41 e0       	ldi	r20, 0x01	; 1
    2886:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    288a:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	6f ef       	ldi	r22, 0xFF	; 255
    2892:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	6f ef       	ldi	r22, 0xFF	; 255
    289a:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	65 e0       	ldi	r22, 0x05	; 5
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    28b2:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	6f ef       	ldi	r22, 0xFF	; 255
    28ba:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	6f ef       	ldi	r22, 0xFF	; 255
    28c2:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	64 e0       	ldi	r22, 0x04	; 4
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	65 e0       	ldi	r22, 0x05	; 5
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    28da:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	6f ef       	ldi	r22, 0xFF	; 255
    28e2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	6f ef       	ldi	r22, 0xFF	; 255
    28ea:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_LOW);
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	63 e0       	ldi	r22, 0x03	; 3
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	64 e0       	ldi	r22, 0x04	; 4
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    290c:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	6f ef       	ldi	r22, 0xFF	; 255
    2914:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	6f ef       	ldi	r22, 0xFF	; 255
    291c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	61 e0       	ldi	r22, 0x01	; 1
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	64 e0       	ldi	r22, 0x04	; 4
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2934:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	6f ef       	ldi	r22, 0xFF	; 255
    293c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	6f ef       	ldi	r22, 0xFF	; 255
    2944:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2952:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	6f ef       	ldi	r22, 0xFF	; 255
    295a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	61 e0       	ldi	r22, 0x01	; 1
    2974:	41 e0       	ldi	r20, 0x01	; 1
    2976:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	62 e0       	ldi	r22, 0x02	; 2
    297e:	41 e0       	ldi	r20, 0x01	; 1
    2980:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2984:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	6f ef       	ldi	r22, 0xFF	; 255
    298c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	6f ef       	ldi	r22, 0xFF	; 255
    2994:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
    2998:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	6f ef       	ldi	r22, 0xFF	; 255
    29a0:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	6f ef       	ldi	r22, 0xFF	; 255
    29a8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	64 e0       	ldi	r22, 0x04	; 4
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    29b6:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    29ba:	18 8e       	std	Y+24, r1	; 0x18
    29bc:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <SevenSegment_Display+0x11d2>
					}
					break;
			case CommonAnode:
				DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	6f ef       	ldi	r22, 0xFF	; 255
    29c4:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
				DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_HIGH);
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	67 e0       	ldi	r22, 0x07	; 7
    29cc:	41 e0       	ldi	r20, 0x01	; 1
    29ce:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
				switch(NUM)
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	3f 8b       	std	Y+23, r19	; 0x17
    29da:	2e 8b       	std	Y+22, r18	; 0x16
    29dc:	8e 89       	ldd	r24, Y+22	; 0x16
    29de:	9f 89       	ldd	r25, Y+23	; 0x17
    29e0:	84 30       	cpi	r24, 0x04	; 4
    29e2:	91 05       	cpc	r25, r1
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <SevenSegment_Display+0x2d8>
    29e6:	8f c0       	rjmp	.+286    	; 0x2b06 <SevenSegment_Display+0x3f6>
    29e8:	2e 89       	ldd	r18, Y+22	; 0x16
    29ea:	3f 89       	ldd	r19, Y+23	; 0x17
    29ec:	25 30       	cpi	r18, 0x05	; 5
    29ee:	31 05       	cpc	r19, r1
    29f0:	ec f4       	brge	.+58     	; 0x2a2c <SevenSegment_Display+0x31c>
    29f2:	8e 89       	ldd	r24, Y+22	; 0x16
    29f4:	9f 89       	ldd	r25, Y+23	; 0x17
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	91 05       	cpc	r25, r1
    29fa:	09 f4       	brne	.+2      	; 0x29fe <SevenSegment_Display+0x2ee>
    29fc:	4b c0       	rjmp	.+150    	; 0x2a94 <SevenSegment_Display+0x384>
    29fe:	2e 89       	ldd	r18, Y+22	; 0x16
    2a00:	3f 89       	ldd	r19, Y+23	; 0x17
    2a02:	22 30       	cpi	r18, 0x02	; 2
    2a04:	31 05       	cpc	r19, r1
    2a06:	2c f4       	brge	.+10     	; 0x2a12 <SevenSegment_Display+0x302>
    2a08:	8e 89       	ldd	r24, Y+22	; 0x16
    2a0a:	9f 89       	ldd	r25, Y+23	; 0x17
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	99 f1       	breq	.+102    	; 0x2a76 <SevenSegment_Display+0x366>
    2a10:	e2 c0       	rjmp	.+452    	; 0x2bd6 <SevenSegment_Display+0x4c6>
    2a12:	2e 89       	ldd	r18, Y+22	; 0x16
    2a14:	3f 89       	ldd	r19, Y+23	; 0x17
    2a16:	22 30       	cpi	r18, 0x02	; 2
    2a18:	31 05       	cpc	r19, r1
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <SevenSegment_Display+0x30e>
    2a1c:	4e c0       	rjmp	.+156    	; 0x2aba <SevenSegment_Display+0x3aa>
    2a1e:	8e 89       	ldd	r24, Y+22	; 0x16
    2a20:	9f 89       	ldd	r25, Y+23	; 0x17
    2a22:	83 30       	cpi	r24, 0x03	; 3
    2a24:	91 05       	cpc	r25, r1
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <SevenSegment_Display+0x31a>
    2a28:	5b c0       	rjmp	.+182    	; 0x2ae0 <SevenSegment_Display+0x3d0>
    2a2a:	d5 c0       	rjmp	.+426    	; 0x2bd6 <SevenSegment_Display+0x4c6>
    2a2c:	2e 89       	ldd	r18, Y+22	; 0x16
    2a2e:	3f 89       	ldd	r19, Y+23	; 0x17
    2a30:	27 30       	cpi	r18, 0x07	; 7
    2a32:	31 05       	cpc	r19, r1
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <SevenSegment_Display+0x328>
    2a36:	a0 c0       	rjmp	.+320    	; 0x2b78 <SevenSegment_Display+0x468>
    2a38:	8e 89       	ldd	r24, Y+22	; 0x16
    2a3a:	9f 89       	ldd	r25, Y+23	; 0x17
    2a3c:	88 30       	cpi	r24, 0x08	; 8
    2a3e:	91 05       	cpc	r25, r1
    2a40:	6c f4       	brge	.+26     	; 0x2a5c <SevenSegment_Display+0x34c>
    2a42:	2e 89       	ldd	r18, Y+22	; 0x16
    2a44:	3f 89       	ldd	r19, Y+23	; 0x17
    2a46:	25 30       	cpi	r18, 0x05	; 5
    2a48:	31 05       	cpc	r19, r1
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <SevenSegment_Display+0x33e>
    2a4c:	74 c0       	rjmp	.+232    	; 0x2b36 <SevenSegment_Display+0x426>
    2a4e:	8e 89       	ldd	r24, Y+22	; 0x16
    2a50:	9f 89       	ldd	r25, Y+23	; 0x17
    2a52:	86 30       	cpi	r24, 0x06	; 6
    2a54:	91 05       	cpc	r25, r1
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <SevenSegment_Display+0x34a>
    2a58:	81 c0       	rjmp	.+258    	; 0x2b5c <SevenSegment_Display+0x44c>
    2a5a:	bd c0       	rjmp	.+378    	; 0x2bd6 <SevenSegment_Display+0x4c6>
    2a5c:	2e 89       	ldd	r18, Y+22	; 0x16
    2a5e:	3f 89       	ldd	r19, Y+23	; 0x17
    2a60:	28 30       	cpi	r18, 0x08	; 8
    2a62:	31 05       	cpc	r19, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <SevenSegment_Display+0x358>
    2a66:	a0 c0       	rjmp	.+320    	; 0x2ba8 <SevenSegment_Display+0x498>
    2a68:	8e 89       	ldd	r24, Y+22	; 0x16
    2a6a:	9f 89       	ldd	r25, Y+23	; 0x17
    2a6c:	89 30       	cpi	r24, 0x09	; 9
    2a6e:	91 05       	cpc	r25, r1
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <SevenSegment_Display+0x364>
    2a72:	a3 c0       	rjmp	.+326    	; 0x2bba <SevenSegment_Display+0x4aa>
    2a74:	b0 c0       	rjmp	.+352    	; 0x2bd6 <SevenSegment_Display+0x4c6>
					{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	6f ef       	ldi	r22, 0xFF	; 255
    2a7a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_HIGH);
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	66 e0       	ldi	r22, 0x06	; 6
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2a90:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	6f ef       	ldi	r22, 0xFF	; 255
    2a98:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	6f ef       	ldi	r22, 0xFF	; 255
    2aa0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	62 e0       	ldi	r22, 0x02	; 2
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2ab8:	12 c7       	rjmp	.+3620   	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	6f ef       	ldi	r22, 0xFF	; 255
    2abe:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	62 e0       	ldi	r22, 0x02	; 2
    2ace:	41 e0       	ldi	r20, 0x01	; 1
    2ad0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	65 e0       	ldi	r22, 0x05	; 5
    2ad8:	41 e0       	ldi	r20, 0x01	; 1
    2ada:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2ade:	ff c6       	rjmp	.+3582   	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	6f ef       	ldi	r22, 0xFF	; 255
    2ae4:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	64 e0       	ldi	r22, 0x04	; 4
    2af4:	41 e0       	ldi	r20, 0x01	; 1
    2af6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	65 e0       	ldi	r22, 0x05	; 5
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2b04:	ec c6       	rjmp	.+3544   	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	6f ef       	ldi	r22, 0xFF	; 255
    2b0a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	41 e0       	ldi	r20, 0x01	; 1
    2b1c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_HIGH);
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	63 e0       	ldi	r22, 0x03	; 3
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	64 e0       	ldi	r22, 0x04	; 4
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2b34:	d4 c6       	rjmp	.+3496   	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	6f ef       	ldi	r22, 0xFF	; 255
    2b3a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	61 e0       	ldi	r22, 0x01	; 1
    2b4a:	41 e0       	ldi	r20, 0x01	; 1
    2b4c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	64 e0       	ldi	r22, 0x04	; 4
    2b54:	41 e0       	ldi	r20, 0x01	; 1
    2b56:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2b5a:	c1 c6       	rjmp	.+3458   	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	6f ef       	ldi	r22, 0xFF	; 255
    2b60:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	61 e0       	ldi	r22, 0x01	; 1
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2b76:	b3 c6       	rjmp	.+3430   	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	6f ef       	ldi	r22, 0xFF	; 255
    2b7c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	6f ef       	ldi	r22, 0xFF	; 255
    2b84:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	40 e0       	ldi	r20, 0x00	; 0
    2b8e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	61 e0       	ldi	r22, 0x01	; 1
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	62 e0       	ldi	r22, 0x02	; 2
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2ba6:	9b c6       	rjmp	.+3382   	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	6f ef       	ldi	r22, 0xFF	; 255
    2bac:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
    2bb8:	92 c6       	rjmp	.+3364   	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	6f ef       	ldi	r22, 0xFF	; 255
    2bbe:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	64 e0       	ldi	r22, 0x04	; 4
    2bce:	41 e0       	ldi	r20, 0x01	; 1
    2bd0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2bd4:	84 c6       	rjmp	.+3336   	; 0x38de <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    2bd6:	18 8e       	std	Y+24, r1	; 0x18
    2bd8:	84 c6       	rjmp	.+3336   	; 0x38e2 <SevenSegment_Display+0x11d2>
					}
			break;
			default:
			return E_OK;
    2bda:	18 8e       	std	Y+24, r1	; 0x18
    2bdc:	82 c6       	rjmp	.+3332   	; 0x38e2 <SevenSegment_Display+0x11d2>
		}
		break;
		case DIO_PORTB:
			switch(TYPE)
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	3d 8b       	std	Y+21, r19	; 0x15
    2be6:	2c 8b       	std	Y+20, r18	; 0x14
    2be8:	8c 89       	ldd	r24, Y+20	; 0x14
    2bea:	9d 89       	ldd	r25, Y+21	; 0x15
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	39 f0       	breq	.+14     	; 0x2bfe <SevenSegment_Display+0x4ee>
    2bf0:	2c 89       	ldd	r18, Y+20	; 0x14
    2bf2:	3d 89       	ldd	r19, Y+21	; 0x15
    2bf4:	21 30       	cpi	r18, 0x01	; 1
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	09 f4       	brne	.+2      	; 0x2bfc <SevenSegment_Display+0x4ec>
    2bfa:	0d c1       	rjmp	.+538    	; 0x2e16 <SevenSegment_Display+0x706>
    2bfc:	18 c2       	rjmp	.+1072   	; 0x302e <SevenSegment_Display+0x91e>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	6f ef       	ldi	r22, 0xFF	; 255
    2c02:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_LOW);
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	67 e0       	ldi	r22, 0x07	; 7
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						switch(NUM)
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	3b 8b       	std	Y+19, r19	; 0x13
    2c18:	2a 8b       	std	Y+18, r18	; 0x12
    2c1a:	8a 89       	ldd	r24, Y+18	; 0x12
    2c1c:	9b 89       	ldd	r25, Y+19	; 0x13
    2c1e:	84 30       	cpi	r24, 0x04	; 4
    2c20:	91 05       	cpc	r25, r1
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <SevenSegment_Display+0x516>
    2c24:	8e c0       	rjmp	.+284    	; 0x2d42 <SevenSegment_Display+0x632>
    2c26:	2a 89       	ldd	r18, Y+18	; 0x12
    2c28:	3b 89       	ldd	r19, Y+19	; 0x13
    2c2a:	25 30       	cpi	r18, 0x05	; 5
    2c2c:	31 05       	cpc	r19, r1
    2c2e:	ec f4       	brge	.+58     	; 0x2c6a <SevenSegment_Display+0x55a>
    2c30:	8a 89       	ldd	r24, Y+18	; 0x12
    2c32:	9b 89       	ldd	r25, Y+19	; 0x13
    2c34:	81 30       	cpi	r24, 0x01	; 1
    2c36:	91 05       	cpc	r25, r1
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <SevenSegment_Display+0x52c>
    2c3a:	4a c0       	rjmp	.+148    	; 0x2cd0 <SevenSegment_Display+0x5c0>
    2c3c:	2a 89       	ldd	r18, Y+18	; 0x12
    2c3e:	3b 89       	ldd	r19, Y+19	; 0x13
    2c40:	22 30       	cpi	r18, 0x02	; 2
    2c42:	31 05       	cpc	r19, r1
    2c44:	2c f4       	brge	.+10     	; 0x2c50 <SevenSegment_Display+0x540>
    2c46:	8a 89       	ldd	r24, Y+18	; 0x12
    2c48:	9b 89       	ldd	r25, Y+19	; 0x13
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	99 f1       	breq	.+102    	; 0x2cb4 <SevenSegment_Display+0x5a4>
    2c4e:	e1 c0       	rjmp	.+450    	; 0x2e12 <SevenSegment_Display+0x702>
    2c50:	2a 89       	ldd	r18, Y+18	; 0x12
    2c52:	3b 89       	ldd	r19, Y+19	; 0x13
    2c54:	22 30       	cpi	r18, 0x02	; 2
    2c56:	31 05       	cpc	r19, r1
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <SevenSegment_Display+0x54c>
    2c5a:	4d c0       	rjmp	.+154    	; 0x2cf6 <SevenSegment_Display+0x5e6>
    2c5c:	8a 89       	ldd	r24, Y+18	; 0x12
    2c5e:	9b 89       	ldd	r25, Y+19	; 0x13
    2c60:	83 30       	cpi	r24, 0x03	; 3
    2c62:	91 05       	cpc	r25, r1
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <SevenSegment_Display+0x558>
    2c66:	5a c0       	rjmp	.+180    	; 0x2d1c <SevenSegment_Display+0x60c>
    2c68:	d4 c0       	rjmp	.+424    	; 0x2e12 <SevenSegment_Display+0x702>
    2c6a:	2a 89       	ldd	r18, Y+18	; 0x12
    2c6c:	3b 89       	ldd	r19, Y+19	; 0x13
    2c6e:	27 30       	cpi	r18, 0x07	; 7
    2c70:	31 05       	cpc	r19, r1
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <SevenSegment_Display+0x566>
    2c74:	9f c0       	rjmp	.+318    	; 0x2db4 <SevenSegment_Display+0x6a4>
    2c76:	8a 89       	ldd	r24, Y+18	; 0x12
    2c78:	9b 89       	ldd	r25, Y+19	; 0x13
    2c7a:	88 30       	cpi	r24, 0x08	; 8
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	6c f4       	brge	.+26     	; 0x2c9a <SevenSegment_Display+0x58a>
    2c80:	2a 89       	ldd	r18, Y+18	; 0x12
    2c82:	3b 89       	ldd	r19, Y+19	; 0x13
    2c84:	25 30       	cpi	r18, 0x05	; 5
    2c86:	31 05       	cpc	r19, r1
    2c88:	09 f4       	brne	.+2      	; 0x2c8c <SevenSegment_Display+0x57c>
    2c8a:	73 c0       	rjmp	.+230    	; 0x2d72 <SevenSegment_Display+0x662>
    2c8c:	8a 89       	ldd	r24, Y+18	; 0x12
    2c8e:	9b 89       	ldd	r25, Y+19	; 0x13
    2c90:	86 30       	cpi	r24, 0x06	; 6
    2c92:	91 05       	cpc	r25, r1
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <SevenSegment_Display+0x588>
    2c96:	80 c0       	rjmp	.+256    	; 0x2d98 <SevenSegment_Display+0x688>
    2c98:	bc c0       	rjmp	.+376    	; 0x2e12 <SevenSegment_Display+0x702>
    2c9a:	2a 89       	ldd	r18, Y+18	; 0x12
    2c9c:	3b 89       	ldd	r19, Y+19	; 0x13
    2c9e:	28 30       	cpi	r18, 0x08	; 8
    2ca0:	31 05       	cpc	r19, r1
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <SevenSegment_Display+0x596>
    2ca4:	9f c0       	rjmp	.+318    	; 0x2de4 <SevenSegment_Display+0x6d4>
    2ca6:	8a 89       	ldd	r24, Y+18	; 0x12
    2ca8:	9b 89       	ldd	r25, Y+19	; 0x13
    2caa:	89 30       	cpi	r24, 0x09	; 9
    2cac:	91 05       	cpc	r25, r1
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <SevenSegment_Display+0x5a2>
    2cb0:	a2 c0       	rjmp	.+324    	; 0x2df6 <SevenSegment_Display+0x6e6>
    2cb2:	af c0       	rjmp	.+350    	; 0x2e12 <SevenSegment_Display+0x702>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	6f ef       	ldi	r22, 0xFF	; 255
    2cb8:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	6f ef       	ldi	r22, 0xFF	; 255
    2cc0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_LOW);
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	66 e0       	ldi	r22, 0x06	; 6
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2cce:	07 c6       	rjmp	.+3086   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	6f ef       	ldi	r22, 0xFF	; 255
    2cd4:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	61 e0       	ldi	r22, 0x01	; 1
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	62 e0       	ldi	r22, 0x02	; 2
    2cee:	41 e0       	ldi	r20, 0x01	; 1
    2cf0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2cf4:	f4 c5       	rjmp	.+3048   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	6f ef       	ldi	r22, 0xFF	; 255
    2cfa:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	6f ef       	ldi	r22, 0xFF	; 255
    2d02:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	62 e0       	ldi	r22, 0x02	; 2
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	65 e0       	ldi	r22, 0x05	; 5
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2d1a:	e1 c5       	rjmp	.+3010   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	6f ef       	ldi	r22, 0xFF	; 255
    2d20:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	6f ef       	ldi	r22, 0xFF	; 255
    2d28:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	64 e0       	ldi	r22, 0x04	; 4
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	65 e0       	ldi	r22, 0x05	; 5
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2d40:	ce c5       	rjmp	.+2972   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	6f ef       	ldi	r22, 0xFF	; 255
    2d46:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	6f ef       	ldi	r22, 0xFF	; 255
    2d4e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_LOW);
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	63 e0       	ldi	r22, 0x03	; 3
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	64 e0       	ldi	r22, 0x04	; 4
    2d6a:	40 e0       	ldi	r20, 0x00	; 0
    2d6c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2d70:	b6 c5       	rjmp	.+2924   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	6f ef       	ldi	r22, 0xFF	; 255
    2d76:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	6f ef       	ldi	r22, 0xFF	; 255
    2d7e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	61 e0       	ldi	r22, 0x01	; 1
    2d86:	40 e0       	ldi	r20, 0x00	; 0
    2d88:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	64 e0       	ldi	r22, 0x04	; 4
    2d90:	40 e0       	ldi	r20, 0x00	; 0
    2d92:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2d96:	a3 c5       	rjmp	.+2886   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	6f ef       	ldi	r22, 0xFF	; 255
    2d9c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	6f ef       	ldi	r22, 0xFF	; 255
    2da4:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	61 e0       	ldi	r22, 0x01	; 1
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2db2:	95 c5       	rjmp	.+2858   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	6f ef       	ldi	r22, 0xFF	; 255
    2db8:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	60 e0       	ldi	r22, 0x00	; 0
    2dc0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	41 e0       	ldi	r20, 0x01	; 1
    2dd4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	62 e0       	ldi	r22, 0x02	; 2
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2de2:	7d c5       	rjmp	.+2810   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	6f ef       	ldi	r22, 0xFF	; 255
    2de8:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	6f ef       	ldi	r22, 0xFF	; 255
    2df0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
    2df4:	74 c5       	rjmp	.+2792   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	6f ef       	ldi	r22, 0xFF	; 255
    2dfa:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	6f ef       	ldi	r22, 0xFF	; 255
    2e02:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	64 e0       	ldi	r22, 0x04	; 4
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2e10:	66 c5       	rjmp	.+2764   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    2e12:	18 8e       	std	Y+24, r1	; 0x18
    2e14:	66 c5       	rjmp	.+2764   	; 0x38e2 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	6f ef       	ldi	r22, 0xFF	; 255
    2e1a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_HIGH);
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	67 e0       	ldi	r22, 0x07	; 7
    2e22:	41 e0       	ldi	r20, 0x01	; 1
    2e24:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
					switch(NUM)
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	28 2f       	mov	r18, r24
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	39 8b       	std	Y+17, r19	; 0x11
    2e30:	28 8b       	std	Y+16, r18	; 0x10
    2e32:	88 89       	ldd	r24, Y+16	; 0x10
    2e34:	99 89       	ldd	r25, Y+17	; 0x11
    2e36:	84 30       	cpi	r24, 0x04	; 4
    2e38:	91 05       	cpc	r25, r1
    2e3a:	09 f4       	brne	.+2      	; 0x2e3e <SevenSegment_Display+0x72e>
    2e3c:	8e c0       	rjmp	.+284    	; 0x2f5a <SevenSegment_Display+0x84a>
    2e3e:	28 89       	ldd	r18, Y+16	; 0x10
    2e40:	39 89       	ldd	r19, Y+17	; 0x11
    2e42:	25 30       	cpi	r18, 0x05	; 5
    2e44:	31 05       	cpc	r19, r1
    2e46:	ec f4       	brge	.+58     	; 0x2e82 <SevenSegment_Display+0x772>
    2e48:	88 89       	ldd	r24, Y+16	; 0x10
    2e4a:	99 89       	ldd	r25, Y+17	; 0x11
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	91 05       	cpc	r25, r1
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <SevenSegment_Display+0x744>
    2e52:	4a c0       	rjmp	.+148    	; 0x2ee8 <SevenSegment_Display+0x7d8>
    2e54:	28 89       	ldd	r18, Y+16	; 0x10
    2e56:	39 89       	ldd	r19, Y+17	; 0x11
    2e58:	22 30       	cpi	r18, 0x02	; 2
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	2c f4       	brge	.+10     	; 0x2e68 <SevenSegment_Display+0x758>
    2e5e:	88 89       	ldd	r24, Y+16	; 0x10
    2e60:	99 89       	ldd	r25, Y+17	; 0x11
    2e62:	00 97       	sbiw	r24, 0x00	; 0
    2e64:	99 f1       	breq	.+102    	; 0x2ecc <SevenSegment_Display+0x7bc>
    2e66:	e1 c0       	rjmp	.+450    	; 0x302a <SevenSegment_Display+0x91a>
    2e68:	28 89       	ldd	r18, Y+16	; 0x10
    2e6a:	39 89       	ldd	r19, Y+17	; 0x11
    2e6c:	22 30       	cpi	r18, 0x02	; 2
    2e6e:	31 05       	cpc	r19, r1
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <SevenSegment_Display+0x764>
    2e72:	4d c0       	rjmp	.+154    	; 0x2f0e <SevenSegment_Display+0x7fe>
    2e74:	88 89       	ldd	r24, Y+16	; 0x10
    2e76:	99 89       	ldd	r25, Y+17	; 0x11
    2e78:	83 30       	cpi	r24, 0x03	; 3
    2e7a:	91 05       	cpc	r25, r1
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <SevenSegment_Display+0x770>
    2e7e:	5a c0       	rjmp	.+180    	; 0x2f34 <SevenSegment_Display+0x824>
    2e80:	d4 c0       	rjmp	.+424    	; 0x302a <SevenSegment_Display+0x91a>
    2e82:	28 89       	ldd	r18, Y+16	; 0x10
    2e84:	39 89       	ldd	r19, Y+17	; 0x11
    2e86:	27 30       	cpi	r18, 0x07	; 7
    2e88:	31 05       	cpc	r19, r1
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <SevenSegment_Display+0x77e>
    2e8c:	9f c0       	rjmp	.+318    	; 0x2fcc <SevenSegment_Display+0x8bc>
    2e8e:	88 89       	ldd	r24, Y+16	; 0x10
    2e90:	99 89       	ldd	r25, Y+17	; 0x11
    2e92:	88 30       	cpi	r24, 0x08	; 8
    2e94:	91 05       	cpc	r25, r1
    2e96:	6c f4       	brge	.+26     	; 0x2eb2 <SevenSegment_Display+0x7a2>
    2e98:	28 89       	ldd	r18, Y+16	; 0x10
    2e9a:	39 89       	ldd	r19, Y+17	; 0x11
    2e9c:	25 30       	cpi	r18, 0x05	; 5
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <SevenSegment_Display+0x794>
    2ea2:	73 c0       	rjmp	.+230    	; 0x2f8a <SevenSegment_Display+0x87a>
    2ea4:	88 89       	ldd	r24, Y+16	; 0x10
    2ea6:	99 89       	ldd	r25, Y+17	; 0x11
    2ea8:	86 30       	cpi	r24, 0x06	; 6
    2eaa:	91 05       	cpc	r25, r1
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <SevenSegment_Display+0x7a0>
    2eae:	80 c0       	rjmp	.+256    	; 0x2fb0 <SevenSegment_Display+0x8a0>
    2eb0:	bc c0       	rjmp	.+376    	; 0x302a <SevenSegment_Display+0x91a>
    2eb2:	28 89       	ldd	r18, Y+16	; 0x10
    2eb4:	39 89       	ldd	r19, Y+17	; 0x11
    2eb6:	28 30       	cpi	r18, 0x08	; 8
    2eb8:	31 05       	cpc	r19, r1
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <SevenSegment_Display+0x7ae>
    2ebc:	9f c0       	rjmp	.+318    	; 0x2ffc <SevenSegment_Display+0x8ec>
    2ebe:	88 89       	ldd	r24, Y+16	; 0x10
    2ec0:	99 89       	ldd	r25, Y+17	; 0x11
    2ec2:	89 30       	cpi	r24, 0x09	; 9
    2ec4:	91 05       	cpc	r25, r1
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <SevenSegment_Display+0x7ba>
    2ec8:	a2 c0       	rjmp	.+324    	; 0x300e <SevenSegment_Display+0x8fe>
    2eca:	af c0       	rjmp	.+350    	; 0x302a <SevenSegment_Display+0x91a>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	6f ef       	ldi	r22, 0xFF	; 255
    2ed0:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	60 e0       	ldi	r22, 0x00	; 0
    2ed8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_HIGH);
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	66 e0       	ldi	r22, 0x06	; 6
    2ee0:	41 e0       	ldi	r20, 0x01	; 1
    2ee2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2ee6:	fb c4       	rjmp	.+2550   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	6f ef       	ldi	r22, 0xFF	; 255
    2eec:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	6f ef       	ldi	r22, 0xFF	; 255
    2ef4:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	61 e0       	ldi	r22, 0x01	; 1
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	62 e0       	ldi	r22, 0x02	; 2
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2f0c:	e8 c4       	rjmp	.+2512   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	6f ef       	ldi	r22, 0xFF	; 255
    2f12:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	62 e0       	ldi	r22, 0x02	; 2
    2f22:	41 e0       	ldi	r20, 0x01	; 1
    2f24:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	65 e0       	ldi	r22, 0x05	; 5
    2f2c:	41 e0       	ldi	r20, 0x01	; 1
    2f2e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2f32:	d5 c4       	rjmp	.+2474   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	6f ef       	ldi	r22, 0xFF	; 255
    2f38:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	64 e0       	ldi	r22, 0x04	; 4
    2f48:	41 e0       	ldi	r20, 0x01	; 1
    2f4a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	65 e0       	ldi	r22, 0x05	; 5
    2f52:	41 e0       	ldi	r20, 0x01	; 1
    2f54:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2f58:	c2 c4       	rjmp	.+2436   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	6f ef       	ldi	r22, 0xFF	; 255
    2f5e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	41 e0       	ldi	r20, 0x01	; 1
    2f70:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_HIGH);
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	63 e0       	ldi	r22, 0x03	; 3
    2f78:	41 e0       	ldi	r20, 0x01	; 1
    2f7a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	64 e0       	ldi	r22, 0x04	; 4
    2f82:	41 e0       	ldi	r20, 0x01	; 1
    2f84:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2f88:	aa c4       	rjmp	.+2388   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	6f ef       	ldi	r22, 0xFF	; 255
    2f8e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	60 e0       	ldi	r22, 0x00	; 0
    2f96:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	61 e0       	ldi	r22, 0x01	; 1
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	64 e0       	ldi	r22, 0x04	; 4
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2fae:	97 c4       	rjmp	.+2350   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	6f ef       	ldi	r22, 0xFF	; 255
    2fb4:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	60 e0       	ldi	r22, 0x00	; 0
    2fbc:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	61 e0       	ldi	r22, 0x01	; 1
    2fc4:	41 e0       	ldi	r20, 0x01	; 1
    2fc6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2fca:	89 c4       	rjmp	.+2322   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	6f ef       	ldi	r22, 0xFF	; 255
    2fd0:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	6f ef       	ldi	r22, 0xFF	; 255
    2fd8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	61 e0       	ldi	r22, 0x01	; 1
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	62 e0       	ldi	r22, 0x02	; 2
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    2ffa:	71 c4       	rjmp	.+2274   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	6f ef       	ldi	r22, 0xFF	; 255
    3000:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
    300c:	68 c4       	rjmp	.+2256   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	6f ef       	ldi	r22, 0xFF	; 255
    3012:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	64 e0       	ldi	r22, 0x04	; 4
    3022:	41 e0       	ldi	r20, 0x01	; 1
    3024:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3028:	5a c4       	rjmp	.+2228   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    302a:	18 8e       	std	Y+24, r1	; 0x18
    302c:	5a c4       	rjmp	.+2228   	; 0x38e2 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    302e:	18 8e       	std	Y+24, r1	; 0x18
    3030:	58 c4       	rjmp	.+2224   	; 0x38e2 <SevenSegment_Display+0x11d2>
			}
			break;
		case DIO_PORTC:
			switch(TYPE)
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	3f 87       	std	Y+15, r19	; 0x0f
    303a:	2e 87       	std	Y+14, r18	; 0x0e
    303c:	8e 85       	ldd	r24, Y+14	; 0x0e
    303e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	39 f0       	breq	.+14     	; 0x3052 <SevenSegment_Display+0x942>
    3044:	2e 85       	ldd	r18, Y+14	; 0x0e
    3046:	3f 85       	ldd	r19, Y+15	; 0x0f
    3048:	21 30       	cpi	r18, 0x01	; 1
    304a:	31 05       	cpc	r19, r1
    304c:	09 f4       	brne	.+2      	; 0x3050 <SevenSegment_Display+0x940>
    304e:	0d c1       	rjmp	.+538    	; 0x326a <SevenSegment_Display+0xb5a>
    3050:	18 c2       	rjmp	.+1072   	; 0x3482 <SevenSegment_Display+0xd72>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	6f ef       	ldi	r22, 0xFF	; 255
    3056:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_LOW);
    305a:	82 e0       	ldi	r24, 0x02	; 2
    305c:	67 e0       	ldi	r22, 0x07	; 7
    305e:	40 e0       	ldi	r20, 0x00	; 0
    3060:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						switch(NUM)
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	28 2f       	mov	r18, r24
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	3d 87       	std	Y+13, r19	; 0x0d
    306c:	2c 87       	std	Y+12, r18	; 0x0c
    306e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3070:	9d 85       	ldd	r25, Y+13	; 0x0d
    3072:	84 30       	cpi	r24, 0x04	; 4
    3074:	91 05       	cpc	r25, r1
    3076:	09 f4       	brne	.+2      	; 0x307a <SevenSegment_Display+0x96a>
    3078:	8e c0       	rjmp	.+284    	; 0x3196 <SevenSegment_Display+0xa86>
    307a:	2c 85       	ldd	r18, Y+12	; 0x0c
    307c:	3d 85       	ldd	r19, Y+13	; 0x0d
    307e:	25 30       	cpi	r18, 0x05	; 5
    3080:	31 05       	cpc	r19, r1
    3082:	ec f4       	brge	.+58     	; 0x30be <SevenSegment_Display+0x9ae>
    3084:	8c 85       	ldd	r24, Y+12	; 0x0c
    3086:	9d 85       	ldd	r25, Y+13	; 0x0d
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	91 05       	cpc	r25, r1
    308c:	09 f4       	brne	.+2      	; 0x3090 <SevenSegment_Display+0x980>
    308e:	4a c0       	rjmp	.+148    	; 0x3124 <SevenSegment_Display+0xa14>
    3090:	2c 85       	ldd	r18, Y+12	; 0x0c
    3092:	3d 85       	ldd	r19, Y+13	; 0x0d
    3094:	22 30       	cpi	r18, 0x02	; 2
    3096:	31 05       	cpc	r19, r1
    3098:	2c f4       	brge	.+10     	; 0x30a4 <SevenSegment_Display+0x994>
    309a:	8c 85       	ldd	r24, Y+12	; 0x0c
    309c:	9d 85       	ldd	r25, Y+13	; 0x0d
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	99 f1       	breq	.+102    	; 0x3108 <SevenSegment_Display+0x9f8>
    30a2:	e1 c0       	rjmp	.+450    	; 0x3266 <SevenSegment_Display+0xb56>
    30a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    30a6:	3d 85       	ldd	r19, Y+13	; 0x0d
    30a8:	22 30       	cpi	r18, 0x02	; 2
    30aa:	31 05       	cpc	r19, r1
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <SevenSegment_Display+0x9a0>
    30ae:	4d c0       	rjmp	.+154    	; 0x314a <SevenSegment_Display+0xa3a>
    30b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    30b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    30b4:	83 30       	cpi	r24, 0x03	; 3
    30b6:	91 05       	cpc	r25, r1
    30b8:	09 f4       	brne	.+2      	; 0x30bc <SevenSegment_Display+0x9ac>
    30ba:	5a c0       	rjmp	.+180    	; 0x3170 <SevenSegment_Display+0xa60>
    30bc:	d4 c0       	rjmp	.+424    	; 0x3266 <SevenSegment_Display+0xb56>
    30be:	2c 85       	ldd	r18, Y+12	; 0x0c
    30c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    30c2:	27 30       	cpi	r18, 0x07	; 7
    30c4:	31 05       	cpc	r19, r1
    30c6:	09 f4       	brne	.+2      	; 0x30ca <SevenSegment_Display+0x9ba>
    30c8:	9f c0       	rjmp	.+318    	; 0x3208 <SevenSegment_Display+0xaf8>
    30ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    30cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    30ce:	88 30       	cpi	r24, 0x08	; 8
    30d0:	91 05       	cpc	r25, r1
    30d2:	6c f4       	brge	.+26     	; 0x30ee <SevenSegment_Display+0x9de>
    30d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    30d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    30d8:	25 30       	cpi	r18, 0x05	; 5
    30da:	31 05       	cpc	r19, r1
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <SevenSegment_Display+0x9d0>
    30de:	73 c0       	rjmp	.+230    	; 0x31c6 <SevenSegment_Display+0xab6>
    30e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    30e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    30e4:	86 30       	cpi	r24, 0x06	; 6
    30e6:	91 05       	cpc	r25, r1
    30e8:	09 f4       	brne	.+2      	; 0x30ec <SevenSegment_Display+0x9dc>
    30ea:	80 c0       	rjmp	.+256    	; 0x31ec <SevenSegment_Display+0xadc>
    30ec:	bc c0       	rjmp	.+376    	; 0x3266 <SevenSegment_Display+0xb56>
    30ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    30f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    30f2:	28 30       	cpi	r18, 0x08	; 8
    30f4:	31 05       	cpc	r19, r1
    30f6:	09 f4       	brne	.+2      	; 0x30fa <SevenSegment_Display+0x9ea>
    30f8:	9f c0       	rjmp	.+318    	; 0x3238 <SevenSegment_Display+0xb28>
    30fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    30fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    30fe:	89 30       	cpi	r24, 0x09	; 9
    3100:	91 05       	cpc	r25, r1
    3102:	09 f4       	brne	.+2      	; 0x3106 <SevenSegment_Display+0x9f6>
    3104:	a2 c0       	rjmp	.+324    	; 0x324a <SevenSegment_Display+0xb3a>
    3106:	af c0       	rjmp	.+350    	; 0x3266 <SevenSegment_Display+0xb56>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3108:	82 e0       	ldi	r24, 0x02	; 2
    310a:	6f ef       	ldi	r22, 0xFF	; 255
    310c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	6f ef       	ldi	r22, 0xFF	; 255
    3114:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_LOW);
    3118:	82 e0       	ldi	r24, 0x02	; 2
    311a:	66 e0       	ldi	r22, 0x06	; 6
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3122:	dd c3       	rjmp	.+1978   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3124:	82 e0       	ldi	r24, 0x02	; 2
    3126:	6f ef       	ldi	r22, 0xFF	; 255
    3128:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    312c:	82 e0       	ldi	r24, 0x02	; 2
    312e:	60 e0       	ldi	r22, 0x00	; 0
    3130:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	61 e0       	ldi	r22, 0x01	; 1
    3138:	41 e0       	ldi	r20, 0x01	; 1
    313a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	62 e0       	ldi	r22, 0x02	; 2
    3142:	41 e0       	ldi	r20, 0x01	; 1
    3144:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3148:	ca c3       	rjmp	.+1940   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    314a:	82 e0       	ldi	r24, 0x02	; 2
    314c:	6f ef       	ldi	r22, 0xFF	; 255
    314e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3152:	82 e0       	ldi	r24, 0x02	; 2
    3154:	6f ef       	ldi	r22, 0xFF	; 255
    3156:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    315a:	82 e0       	ldi	r24, 0x02	; 2
    315c:	62 e0       	ldi	r22, 0x02	; 2
    315e:	40 e0       	ldi	r20, 0x00	; 0
    3160:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	65 e0       	ldi	r22, 0x05	; 5
    3168:	40 e0       	ldi	r20, 0x00	; 0
    316a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    316e:	b7 c3       	rjmp	.+1902   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3170:	82 e0       	ldi	r24, 0x02	; 2
    3172:	6f ef       	ldi	r22, 0xFF	; 255
    3174:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3178:	82 e0       	ldi	r24, 0x02	; 2
    317a:	6f ef       	ldi	r22, 0xFF	; 255
    317c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	64 e0       	ldi	r22, 0x04	; 4
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    318a:	82 e0       	ldi	r24, 0x02	; 2
    318c:	65 e0       	ldi	r22, 0x05	; 5
    318e:	40 e0       	ldi	r20, 0x00	; 0
    3190:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3194:	a4 c3       	rjmp	.+1864   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3196:	82 e0       	ldi	r24, 0x02	; 2
    3198:	6f ef       	ldi	r22, 0xFF	; 255
    319a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	6f ef       	ldi	r22, 0xFF	; 255
    31a2:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    31a6:	82 e0       	ldi	r24, 0x02	; 2
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_LOW);
    31b0:	82 e0       	ldi	r24, 0x02	; 2
    31b2:	63 e0       	ldi	r22, 0x03	; 3
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    31ba:	82 e0       	ldi	r24, 0x02	; 2
    31bc:	64 e0       	ldi	r22, 0x04	; 4
    31be:	40 e0       	ldi	r20, 0x00	; 0
    31c0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    31c4:	8c c3       	rjmp	.+1816   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	6f ef       	ldi	r22, 0xFF	; 255
    31ca:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    31ce:	82 e0       	ldi	r24, 0x02	; 2
    31d0:	6f ef       	ldi	r22, 0xFF	; 255
    31d2:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	61 e0       	ldi	r22, 0x01	; 1
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	64 e0       	ldi	r22, 0x04	; 4
    31e4:	40 e0       	ldi	r20, 0x00	; 0
    31e6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    31ea:	79 c3       	rjmp	.+1778   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31ec:	82 e0       	ldi	r24, 0x02	; 2
    31ee:	6f ef       	ldi	r22, 0xFF	; 255
    31f0:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    31f4:	82 e0       	ldi	r24, 0x02	; 2
    31f6:	6f ef       	ldi	r22, 0xFF	; 255
    31f8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    31fc:	82 e0       	ldi	r24, 0x02	; 2
    31fe:	61 e0       	ldi	r22, 0x01	; 1
    3200:	40 e0       	ldi	r20, 0x00	; 0
    3202:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3206:	6b c3       	rjmp	.+1750   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3208:	82 e0       	ldi	r24, 0x02	; 2
    320a:	6f ef       	ldi	r22, 0xFF	; 255
    320c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3210:	82 e0       	ldi	r24, 0x02	; 2
    3212:	60 e0       	ldi	r22, 0x00	; 0
    3214:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    3218:	82 e0       	ldi	r24, 0x02	; 2
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	41 e0       	ldi	r20, 0x01	; 1
    321e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3222:	82 e0       	ldi	r24, 0x02	; 2
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	41 e0       	ldi	r20, 0x01	; 1
    3228:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    322c:	82 e0       	ldi	r24, 0x02	; 2
    322e:	62 e0       	ldi	r22, 0x02	; 2
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3236:	53 c3       	rjmp	.+1702   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3238:	82 e0       	ldi	r24, 0x02	; 2
    323a:	6f ef       	ldi	r22, 0xFF	; 255
    323c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3240:	82 e0       	ldi	r24, 0x02	; 2
    3242:	6f ef       	ldi	r22, 0xFF	; 255
    3244:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
    3248:	4a c3       	rjmp	.+1684   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    324a:	82 e0       	ldi	r24, 0x02	; 2
    324c:	6f ef       	ldi	r22, 0xFF	; 255
    324e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3252:	82 e0       	ldi	r24, 0x02	; 2
    3254:	6f ef       	ldi	r22, 0xFF	; 255
    3256:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    325a:	82 e0       	ldi	r24, 0x02	; 2
    325c:	64 e0       	ldi	r22, 0x04	; 4
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3264:	3c c3       	rjmp	.+1656   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3266:	18 8e       	std	Y+24, r1	; 0x18
    3268:	3c c3       	rjmp	.+1656   	; 0x38e2 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    326a:	82 e0       	ldi	r24, 0x02	; 2
    326c:	6f ef       	ldi	r22, 0xFF	; 255
    326e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_HIGH);
    3272:	82 e0       	ldi	r24, 0x02	; 2
    3274:	67 e0       	ldi	r22, 0x07	; 7
    3276:	41 e0       	ldi	r20, 0x01	; 1
    3278:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
					switch(NUM)
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	3b 87       	std	Y+11, r19	; 0x0b
    3284:	2a 87       	std	Y+10, r18	; 0x0a
    3286:	8a 85       	ldd	r24, Y+10	; 0x0a
    3288:	9b 85       	ldd	r25, Y+11	; 0x0b
    328a:	84 30       	cpi	r24, 0x04	; 4
    328c:	91 05       	cpc	r25, r1
    328e:	09 f4       	brne	.+2      	; 0x3292 <SevenSegment_Display+0xb82>
    3290:	8e c0       	rjmp	.+284    	; 0x33ae <SevenSegment_Display+0xc9e>
    3292:	2a 85       	ldd	r18, Y+10	; 0x0a
    3294:	3b 85       	ldd	r19, Y+11	; 0x0b
    3296:	25 30       	cpi	r18, 0x05	; 5
    3298:	31 05       	cpc	r19, r1
    329a:	ec f4       	brge	.+58     	; 0x32d6 <SevenSegment_Display+0xbc6>
    329c:	8a 85       	ldd	r24, Y+10	; 0x0a
    329e:	9b 85       	ldd	r25, Y+11	; 0x0b
    32a0:	81 30       	cpi	r24, 0x01	; 1
    32a2:	91 05       	cpc	r25, r1
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <SevenSegment_Display+0xb98>
    32a6:	4a c0       	rjmp	.+148    	; 0x333c <SevenSegment_Display+0xc2c>
    32a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    32aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    32ac:	22 30       	cpi	r18, 0x02	; 2
    32ae:	31 05       	cpc	r19, r1
    32b0:	2c f4       	brge	.+10     	; 0x32bc <SevenSegment_Display+0xbac>
    32b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b6:	00 97       	sbiw	r24, 0x00	; 0
    32b8:	99 f1       	breq	.+102    	; 0x3320 <SevenSegment_Display+0xc10>
    32ba:	e1 c0       	rjmp	.+450    	; 0x347e <SevenSegment_Display+0xd6e>
    32bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    32be:	3b 85       	ldd	r19, Y+11	; 0x0b
    32c0:	22 30       	cpi	r18, 0x02	; 2
    32c2:	31 05       	cpc	r19, r1
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <SevenSegment_Display+0xbb8>
    32c6:	4d c0       	rjmp	.+154    	; 0x3362 <SevenSegment_Display+0xc52>
    32c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    32cc:	83 30       	cpi	r24, 0x03	; 3
    32ce:	91 05       	cpc	r25, r1
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <SevenSegment_Display+0xbc4>
    32d2:	5a c0       	rjmp	.+180    	; 0x3388 <SevenSegment_Display+0xc78>
    32d4:	d4 c0       	rjmp	.+424    	; 0x347e <SevenSegment_Display+0xd6e>
    32d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    32d8:	3b 85       	ldd	r19, Y+11	; 0x0b
    32da:	27 30       	cpi	r18, 0x07	; 7
    32dc:	31 05       	cpc	r19, r1
    32de:	09 f4       	brne	.+2      	; 0x32e2 <SevenSegment_Display+0xbd2>
    32e0:	9f c0       	rjmp	.+318    	; 0x3420 <SevenSegment_Display+0xd10>
    32e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    32e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    32e6:	88 30       	cpi	r24, 0x08	; 8
    32e8:	91 05       	cpc	r25, r1
    32ea:	6c f4       	brge	.+26     	; 0x3306 <SevenSegment_Display+0xbf6>
    32ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    32ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    32f0:	25 30       	cpi	r18, 0x05	; 5
    32f2:	31 05       	cpc	r19, r1
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <SevenSegment_Display+0xbe8>
    32f6:	73 c0       	rjmp	.+230    	; 0x33de <SevenSegment_Display+0xcce>
    32f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    32fc:	86 30       	cpi	r24, 0x06	; 6
    32fe:	91 05       	cpc	r25, r1
    3300:	09 f4       	brne	.+2      	; 0x3304 <SevenSegment_Display+0xbf4>
    3302:	80 c0       	rjmp	.+256    	; 0x3404 <SevenSegment_Display+0xcf4>
    3304:	bc c0       	rjmp	.+376    	; 0x347e <SevenSegment_Display+0xd6e>
    3306:	2a 85       	ldd	r18, Y+10	; 0x0a
    3308:	3b 85       	ldd	r19, Y+11	; 0x0b
    330a:	28 30       	cpi	r18, 0x08	; 8
    330c:	31 05       	cpc	r19, r1
    330e:	09 f4       	brne	.+2      	; 0x3312 <SevenSegment_Display+0xc02>
    3310:	9f c0       	rjmp	.+318    	; 0x3450 <SevenSegment_Display+0xd40>
    3312:	8a 85       	ldd	r24, Y+10	; 0x0a
    3314:	9b 85       	ldd	r25, Y+11	; 0x0b
    3316:	89 30       	cpi	r24, 0x09	; 9
    3318:	91 05       	cpc	r25, r1
    331a:	09 f4       	brne	.+2      	; 0x331e <SevenSegment_Display+0xc0e>
    331c:	a2 c0       	rjmp	.+324    	; 0x3462 <SevenSegment_Display+0xd52>
    331e:	af c0       	rjmp	.+350    	; 0x347e <SevenSegment_Display+0xd6e>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3320:	82 e0       	ldi	r24, 0x02	; 2
    3322:	6f ef       	ldi	r22, 0xFF	; 255
    3324:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3328:	82 e0       	ldi	r24, 0x02	; 2
    332a:	60 e0       	ldi	r22, 0x00	; 0
    332c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_HIGH);
    3330:	82 e0       	ldi	r24, 0x02	; 2
    3332:	66 e0       	ldi	r22, 0x06	; 6
    3334:	41 e0       	ldi	r20, 0x01	; 1
    3336:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    333a:	d1 c2       	rjmp	.+1442   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    333c:	82 e0       	ldi	r24, 0x02	; 2
    333e:	6f ef       	ldi	r22, 0xFF	; 255
    3340:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	6f ef       	ldi	r22, 0xFF	; 255
    3348:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    334c:	82 e0       	ldi	r24, 0x02	; 2
    334e:	61 e0       	ldi	r22, 0x01	; 1
    3350:	40 e0       	ldi	r20, 0x00	; 0
    3352:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3356:	82 e0       	ldi	r24, 0x02	; 2
    3358:	62 e0       	ldi	r22, 0x02	; 2
    335a:	40 e0       	ldi	r20, 0x00	; 0
    335c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3360:	be c2       	rjmp	.+1404   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3362:	82 e0       	ldi	r24, 0x02	; 2
    3364:	6f ef       	ldi	r22, 0xFF	; 255
    3366:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    336a:	82 e0       	ldi	r24, 0x02	; 2
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3372:	82 e0       	ldi	r24, 0x02	; 2
    3374:	62 e0       	ldi	r22, 0x02	; 2
    3376:	41 e0       	ldi	r20, 0x01	; 1
    3378:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    337c:	82 e0       	ldi	r24, 0x02	; 2
    337e:	65 e0       	ldi	r22, 0x05	; 5
    3380:	41 e0       	ldi	r20, 0x01	; 1
    3382:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3386:	ab c2       	rjmp	.+1366   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3388:	82 e0       	ldi	r24, 0x02	; 2
    338a:	6f ef       	ldi	r22, 0xFF	; 255
    338c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3390:	82 e0       	ldi	r24, 0x02	; 2
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3398:	82 e0       	ldi	r24, 0x02	; 2
    339a:	64 e0       	ldi	r22, 0x04	; 4
    339c:	41 e0       	ldi	r20, 0x01	; 1
    339e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    33a2:	82 e0       	ldi	r24, 0x02	; 2
    33a4:	65 e0       	ldi	r22, 0x05	; 5
    33a6:	41 e0       	ldi	r20, 0x01	; 1
    33a8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    33ac:	98 c2       	rjmp	.+1328   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    33ae:	82 e0       	ldi	r24, 0x02	; 2
    33b0:	6f ef       	ldi	r22, 0xFF	; 255
    33b2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    33b6:	82 e0       	ldi	r24, 0x02	; 2
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    33be:	82 e0       	ldi	r24, 0x02	; 2
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_HIGH);
    33c8:	82 e0       	ldi	r24, 0x02	; 2
    33ca:	63 e0       	ldi	r22, 0x03	; 3
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    33d2:	82 e0       	ldi	r24, 0x02	; 2
    33d4:	64 e0       	ldi	r22, 0x04	; 4
    33d6:	41 e0       	ldi	r20, 0x01	; 1
    33d8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    33dc:	80 c2       	rjmp	.+1280   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    33de:	82 e0       	ldi	r24, 0x02	; 2
    33e0:	6f ef       	ldi	r22, 0xFF	; 255
    33e2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	60 e0       	ldi	r22, 0x00	; 0
    33ea:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    33ee:	82 e0       	ldi	r24, 0x02	; 2
    33f0:	61 e0       	ldi	r22, 0x01	; 1
    33f2:	41 e0       	ldi	r20, 0x01	; 1
    33f4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	64 e0       	ldi	r22, 0x04	; 4
    33fc:	41 e0       	ldi	r20, 0x01	; 1
    33fe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3402:	6d c2       	rjmp	.+1242   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	6f ef       	ldi	r22, 0xFF	; 255
    3408:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	60 e0       	ldi	r22, 0x00	; 0
    3410:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3414:	82 e0       	ldi	r24, 0x02	; 2
    3416:	61 e0       	ldi	r22, 0x01	; 1
    3418:	41 e0       	ldi	r20, 0x01	; 1
    341a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    341e:	5f c2       	rjmp	.+1214   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3420:	82 e0       	ldi	r24, 0x02	; 2
    3422:	6f ef       	ldi	r22, 0xFF	; 255
    3424:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3428:	82 e0       	ldi	r24, 0x02	; 2
    342a:	6f ef       	ldi	r22, 0xFF	; 255
    342c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    3430:	82 e0       	ldi	r24, 0x02	; 2
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	40 e0       	ldi	r20, 0x00	; 0
    3436:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    343a:	82 e0       	ldi	r24, 0x02	; 2
    343c:	61 e0       	ldi	r22, 0x01	; 1
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3444:	82 e0       	ldi	r24, 0x02	; 2
    3446:	62 e0       	ldi	r22, 0x02	; 2
    3448:	40 e0       	ldi	r20, 0x00	; 0
    344a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    344e:	47 c2       	rjmp	.+1166   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3450:	82 e0       	ldi	r24, 0x02	; 2
    3452:	6f ef       	ldi	r22, 0xFF	; 255
    3454:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3458:	82 e0       	ldi	r24, 0x02	; 2
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
    3460:	3e c2       	rjmp	.+1148   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	6f ef       	ldi	r22, 0xFF	; 255
    3466:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    346a:	82 e0       	ldi	r24, 0x02	; 2
    346c:	60 e0       	ldi	r22, 0x00	; 0
    346e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3472:	82 e0       	ldi	r24, 0x02	; 2
    3474:	64 e0       	ldi	r22, 0x04	; 4
    3476:	41 e0       	ldi	r20, 0x01	; 1
    3478:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    347c:	30 c2       	rjmp	.+1120   	; 0x38de <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    347e:	18 8e       	std	Y+24, r1	; 0x18
    3480:	30 c2       	rjmp	.+1120   	; 0x38e2 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    3482:	18 8e       	std	Y+24, r1	; 0x18
    3484:	2e c2       	rjmp	.+1116   	; 0x38e2 <SevenSegment_Display+0x11d2>
			}
			break;
			case DIO_PORTD:
				switch(TYPE)
    3486:	8a 81       	ldd	r24, Y+2	; 0x02
    3488:	28 2f       	mov	r18, r24
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	39 87       	std	Y+9, r19	; 0x09
    348e:	28 87       	std	Y+8, r18	; 0x08
    3490:	88 85       	ldd	r24, Y+8	; 0x08
    3492:	99 85       	ldd	r25, Y+9	; 0x09
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	39 f0       	breq	.+14     	; 0x34a6 <SevenSegment_Display+0xd96>
    3498:	28 85       	ldd	r18, Y+8	; 0x08
    349a:	39 85       	ldd	r19, Y+9	; 0x09
    349c:	21 30       	cpi	r18, 0x01	; 1
    349e:	31 05       	cpc	r19, r1
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <SevenSegment_Display+0xd94>
    34a2:	0d c1       	rjmp	.+538    	; 0x36be <SevenSegment_Display+0xfae>
    34a4:	18 c2       	rjmp	.+1072   	; 0x38d6 <SevenSegment_Display+0x11c6>
					{
						case CommonCathod:
							DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	6f ef       	ldi	r22, 0xFF	; 255
    34aa:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
							DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_LOW);
    34ae:	83 e0       	ldi	r24, 0x03	; 3
    34b0:	67 e0       	ldi	r22, 0x07	; 7
    34b2:	40 e0       	ldi	r20, 0x00	; 0
    34b4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
							switch(NUM)
    34b8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ba:	28 2f       	mov	r18, r24
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	3f 83       	std	Y+7, r19	; 0x07
    34c0:	2e 83       	std	Y+6, r18	; 0x06
    34c2:	8e 81       	ldd	r24, Y+6	; 0x06
    34c4:	9f 81       	ldd	r25, Y+7	; 0x07
    34c6:	84 30       	cpi	r24, 0x04	; 4
    34c8:	91 05       	cpc	r25, r1
    34ca:	09 f4       	brne	.+2      	; 0x34ce <SevenSegment_Display+0xdbe>
    34cc:	8e c0       	rjmp	.+284    	; 0x35ea <SevenSegment_Display+0xeda>
    34ce:	2e 81       	ldd	r18, Y+6	; 0x06
    34d0:	3f 81       	ldd	r19, Y+7	; 0x07
    34d2:	25 30       	cpi	r18, 0x05	; 5
    34d4:	31 05       	cpc	r19, r1
    34d6:	ec f4       	brge	.+58     	; 0x3512 <SevenSegment_Display+0xe02>
    34d8:	8e 81       	ldd	r24, Y+6	; 0x06
    34da:	9f 81       	ldd	r25, Y+7	; 0x07
    34dc:	81 30       	cpi	r24, 0x01	; 1
    34de:	91 05       	cpc	r25, r1
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <SevenSegment_Display+0xdd4>
    34e2:	4a c0       	rjmp	.+148    	; 0x3578 <SevenSegment_Display+0xe68>
    34e4:	2e 81       	ldd	r18, Y+6	; 0x06
    34e6:	3f 81       	ldd	r19, Y+7	; 0x07
    34e8:	22 30       	cpi	r18, 0x02	; 2
    34ea:	31 05       	cpc	r19, r1
    34ec:	2c f4       	brge	.+10     	; 0x34f8 <SevenSegment_Display+0xde8>
    34ee:	8e 81       	ldd	r24, Y+6	; 0x06
    34f0:	9f 81       	ldd	r25, Y+7	; 0x07
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	99 f1       	breq	.+102    	; 0x355c <SevenSegment_Display+0xe4c>
    34f6:	e1 c0       	rjmp	.+450    	; 0x36ba <SevenSegment_Display+0xfaa>
    34f8:	2e 81       	ldd	r18, Y+6	; 0x06
    34fa:	3f 81       	ldd	r19, Y+7	; 0x07
    34fc:	22 30       	cpi	r18, 0x02	; 2
    34fe:	31 05       	cpc	r19, r1
    3500:	09 f4       	brne	.+2      	; 0x3504 <SevenSegment_Display+0xdf4>
    3502:	4d c0       	rjmp	.+154    	; 0x359e <SevenSegment_Display+0xe8e>
    3504:	8e 81       	ldd	r24, Y+6	; 0x06
    3506:	9f 81       	ldd	r25, Y+7	; 0x07
    3508:	83 30       	cpi	r24, 0x03	; 3
    350a:	91 05       	cpc	r25, r1
    350c:	09 f4       	brne	.+2      	; 0x3510 <SevenSegment_Display+0xe00>
    350e:	5a c0       	rjmp	.+180    	; 0x35c4 <SevenSegment_Display+0xeb4>
    3510:	d4 c0       	rjmp	.+424    	; 0x36ba <SevenSegment_Display+0xfaa>
    3512:	2e 81       	ldd	r18, Y+6	; 0x06
    3514:	3f 81       	ldd	r19, Y+7	; 0x07
    3516:	27 30       	cpi	r18, 0x07	; 7
    3518:	31 05       	cpc	r19, r1
    351a:	09 f4       	brne	.+2      	; 0x351e <SevenSegment_Display+0xe0e>
    351c:	9f c0       	rjmp	.+318    	; 0x365c <SevenSegment_Display+0xf4c>
    351e:	8e 81       	ldd	r24, Y+6	; 0x06
    3520:	9f 81       	ldd	r25, Y+7	; 0x07
    3522:	88 30       	cpi	r24, 0x08	; 8
    3524:	91 05       	cpc	r25, r1
    3526:	6c f4       	brge	.+26     	; 0x3542 <SevenSegment_Display+0xe32>
    3528:	2e 81       	ldd	r18, Y+6	; 0x06
    352a:	3f 81       	ldd	r19, Y+7	; 0x07
    352c:	25 30       	cpi	r18, 0x05	; 5
    352e:	31 05       	cpc	r19, r1
    3530:	09 f4       	brne	.+2      	; 0x3534 <SevenSegment_Display+0xe24>
    3532:	73 c0       	rjmp	.+230    	; 0x361a <SevenSegment_Display+0xf0a>
    3534:	8e 81       	ldd	r24, Y+6	; 0x06
    3536:	9f 81       	ldd	r25, Y+7	; 0x07
    3538:	86 30       	cpi	r24, 0x06	; 6
    353a:	91 05       	cpc	r25, r1
    353c:	09 f4       	brne	.+2      	; 0x3540 <SevenSegment_Display+0xe30>
    353e:	80 c0       	rjmp	.+256    	; 0x3640 <SevenSegment_Display+0xf30>
    3540:	bc c0       	rjmp	.+376    	; 0x36ba <SevenSegment_Display+0xfaa>
    3542:	2e 81       	ldd	r18, Y+6	; 0x06
    3544:	3f 81       	ldd	r19, Y+7	; 0x07
    3546:	28 30       	cpi	r18, 0x08	; 8
    3548:	31 05       	cpc	r19, r1
    354a:	09 f4       	brne	.+2      	; 0x354e <SevenSegment_Display+0xe3e>
    354c:	9f c0       	rjmp	.+318    	; 0x368c <SevenSegment_Display+0xf7c>
    354e:	8e 81       	ldd	r24, Y+6	; 0x06
    3550:	9f 81       	ldd	r25, Y+7	; 0x07
    3552:	89 30       	cpi	r24, 0x09	; 9
    3554:	91 05       	cpc	r25, r1
    3556:	09 f4       	brne	.+2      	; 0x355a <SevenSegment_Display+0xe4a>
    3558:	a2 c0       	rjmp	.+324    	; 0x369e <SevenSegment_Display+0xf8e>
    355a:	af c0       	rjmp	.+350    	; 0x36ba <SevenSegment_Display+0xfaa>
								{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    355c:	83 e0       	ldi	r24, 0x03	; 3
    355e:	6f ef       	ldi	r22, 0xFF	; 255
    3560:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3564:	83 e0       	ldi	r24, 0x03	; 3
    3566:	6f ef       	ldi	r22, 0xFF	; 255
    3568:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_LOW);
    356c:	83 e0       	ldi	r24, 0x03	; 3
    356e:	66 e0       	ldi	r22, 0x06	; 6
    3570:	40 e0       	ldi	r20, 0x00	; 0
    3572:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3576:	b3 c1       	rjmp	.+870    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3578:	83 e0       	ldi	r24, 0x03	; 3
    357a:	6f ef       	ldi	r22, 0xFF	; 255
    357c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	60 e0       	ldi	r22, 0x00	; 0
    3584:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    3588:	83 e0       	ldi	r24, 0x03	; 3
    358a:	61 e0       	ldi	r22, 0x01	; 1
    358c:	41 e0       	ldi	r20, 0x01	; 1
    358e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    3592:	83 e0       	ldi	r24, 0x03	; 3
    3594:	62 e0       	ldi	r22, 0x02	; 2
    3596:	41 e0       	ldi	r20, 0x01	; 1
    3598:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    359c:	a0 c1       	rjmp	.+832    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    359e:	83 e0       	ldi	r24, 0x03	; 3
    35a0:	6f ef       	ldi	r22, 0xFF	; 255
    35a2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    35a6:	83 e0       	ldi	r24, 0x03	; 3
    35a8:	6f ef       	ldi	r22, 0xFF	; 255
    35aa:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    35ae:	83 e0       	ldi	r24, 0x03	; 3
    35b0:	62 e0       	ldi	r22, 0x02	; 2
    35b2:	40 e0       	ldi	r20, 0x00	; 0
    35b4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    35b8:	83 e0       	ldi	r24, 0x03	; 3
    35ba:	65 e0       	ldi	r22, 0x05	; 5
    35bc:	40 e0       	ldi	r20, 0x00	; 0
    35be:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    35c2:	8d c1       	rjmp	.+794    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    35c4:	83 e0       	ldi	r24, 0x03	; 3
    35c6:	6f ef       	ldi	r22, 0xFF	; 255
    35c8:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    35cc:	83 e0       	ldi	r24, 0x03	; 3
    35ce:	6f ef       	ldi	r22, 0xFF	; 255
    35d0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    35d4:	83 e0       	ldi	r24, 0x03	; 3
    35d6:	64 e0       	ldi	r22, 0x04	; 4
    35d8:	40 e0       	ldi	r20, 0x00	; 0
    35da:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    35de:	83 e0       	ldi	r24, 0x03	; 3
    35e0:	65 e0       	ldi	r22, 0x05	; 5
    35e2:	40 e0       	ldi	r20, 0x00	; 0
    35e4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    35e8:	7a c1       	rjmp	.+756    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    35ea:	83 e0       	ldi	r24, 0x03	; 3
    35ec:	6f ef       	ldi	r22, 0xFF	; 255
    35ee:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    35f2:	83 e0       	ldi	r24, 0x03	; 3
    35f4:	6f ef       	ldi	r22, 0xFF	; 255
    35f6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    35fa:	83 e0       	ldi	r24, 0x03	; 3
    35fc:	60 e0       	ldi	r22, 0x00	; 0
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_LOW);
    3604:	83 e0       	ldi	r24, 0x03	; 3
    3606:	63 e0       	ldi	r22, 0x03	; 3
    3608:	40 e0       	ldi	r20, 0x00	; 0
    360a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    360e:	83 e0       	ldi	r24, 0x03	; 3
    3610:	64 e0       	ldi	r22, 0x04	; 4
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3618:	62 c1       	rjmp	.+708    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    361a:	83 e0       	ldi	r24, 0x03	; 3
    361c:	6f ef       	ldi	r22, 0xFF	; 255
    361e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3622:	83 e0       	ldi	r24, 0x03	; 3
    3624:	6f ef       	ldi	r22, 0xFF	; 255
    3626:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    362a:	83 e0       	ldi	r24, 0x03	; 3
    362c:	61 e0       	ldi	r22, 0x01	; 1
    362e:	40 e0       	ldi	r20, 0x00	; 0
    3630:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    3634:	83 e0       	ldi	r24, 0x03	; 3
    3636:	64 e0       	ldi	r22, 0x04	; 4
    3638:	40 e0       	ldi	r20, 0x00	; 0
    363a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    363e:	4f c1       	rjmp	.+670    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3640:	83 e0       	ldi	r24, 0x03	; 3
    3642:	6f ef       	ldi	r22, 0xFF	; 255
    3644:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3648:	83 e0       	ldi	r24, 0x03	; 3
    364a:	6f ef       	ldi	r22, 0xFF	; 255
    364c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    3650:	83 e0       	ldi	r24, 0x03	; 3
    3652:	61 e0       	ldi	r22, 0x01	; 1
    3654:	40 e0       	ldi	r20, 0x00	; 0
    3656:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    365a:	41 c1       	rjmp	.+642    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    365c:	83 e0       	ldi	r24, 0x03	; 3
    365e:	6f ef       	ldi	r22, 0xFF	; 255
    3660:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3664:	83 e0       	ldi	r24, 0x03	; 3
    3666:	60 e0       	ldi	r22, 0x00	; 0
    3668:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    366c:	83 e0       	ldi	r24, 0x03	; 3
    366e:	60 e0       	ldi	r22, 0x00	; 0
    3670:	41 e0       	ldi	r20, 0x01	; 1
    3672:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    3676:	83 e0       	ldi	r24, 0x03	; 3
    3678:	61 e0       	ldi	r22, 0x01	; 1
    367a:	41 e0       	ldi	r20, 0x01	; 1
    367c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    3680:	83 e0       	ldi	r24, 0x03	; 3
    3682:	62 e0       	ldi	r22, 0x02	; 2
    3684:	41 e0       	ldi	r20, 0x01	; 1
    3686:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    368a:	29 c1       	rjmp	.+594    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    368c:	83 e0       	ldi	r24, 0x03	; 3
    368e:	6f ef       	ldi	r22, 0xFF	; 255
    3690:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3694:	83 e0       	ldi	r24, 0x03	; 3
    3696:	6f ef       	ldi	r22, 0xFF	; 255
    3698:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
    369c:	20 c1       	rjmp	.+576    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    369e:	83 e0       	ldi	r24, 0x03	; 3
    36a0:	6f ef       	ldi	r22, 0xFF	; 255
    36a2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    36a6:	83 e0       	ldi	r24, 0x03	; 3
    36a8:	6f ef       	ldi	r22, 0xFF	; 255
    36aa:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    36ae:	83 e0       	ldi	r24, 0x03	; 3
    36b0:	64 e0       	ldi	r22, 0x04	; 4
    36b2:	40 e0       	ldi	r20, 0x00	; 0
    36b4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    36b8:	12 c1       	rjmp	.+548    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    36ba:	18 8e       	std	Y+24, r1	; 0x18
    36bc:	12 c1       	rjmp	.+548    	; 0x38e2 <SevenSegment_Display+0x11d2>
							}
							break;
					case CommonAnode:
						DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    36be:	83 e0       	ldi	r24, 0x03	; 3
    36c0:	6f ef       	ldi	r22, 0xFF	; 255
    36c2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_HIGH);
    36c6:	83 e0       	ldi	r24, 0x03	; 3
    36c8:	67 e0       	ldi	r22, 0x07	; 7
    36ca:	41 e0       	ldi	r20, 0x01	; 1
    36cc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
						switch(NUM)
    36d0:	8b 81       	ldd	r24, Y+3	; 0x03
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	3d 83       	std	Y+5, r19	; 0x05
    36d8:	2c 83       	std	Y+4, r18	; 0x04
    36da:	8c 81       	ldd	r24, Y+4	; 0x04
    36dc:	9d 81       	ldd	r25, Y+5	; 0x05
    36de:	84 30       	cpi	r24, 0x04	; 4
    36e0:	91 05       	cpc	r25, r1
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <SevenSegment_Display+0xfd6>
    36e4:	8e c0       	rjmp	.+284    	; 0x3802 <SevenSegment_Display+0x10f2>
    36e6:	2c 81       	ldd	r18, Y+4	; 0x04
    36e8:	3d 81       	ldd	r19, Y+5	; 0x05
    36ea:	25 30       	cpi	r18, 0x05	; 5
    36ec:	31 05       	cpc	r19, r1
    36ee:	ec f4       	brge	.+58     	; 0x372a <SevenSegment_Display+0x101a>
    36f0:	8c 81       	ldd	r24, Y+4	; 0x04
    36f2:	9d 81       	ldd	r25, Y+5	; 0x05
    36f4:	81 30       	cpi	r24, 0x01	; 1
    36f6:	91 05       	cpc	r25, r1
    36f8:	09 f4       	brne	.+2      	; 0x36fc <SevenSegment_Display+0xfec>
    36fa:	4a c0       	rjmp	.+148    	; 0x3790 <SevenSegment_Display+0x1080>
    36fc:	2c 81       	ldd	r18, Y+4	; 0x04
    36fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3700:	22 30       	cpi	r18, 0x02	; 2
    3702:	31 05       	cpc	r19, r1
    3704:	2c f4       	brge	.+10     	; 0x3710 <SevenSegment_Display+0x1000>
    3706:	8c 81       	ldd	r24, Y+4	; 0x04
    3708:	9d 81       	ldd	r25, Y+5	; 0x05
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	99 f1       	breq	.+102    	; 0x3774 <SevenSegment_Display+0x1064>
    370e:	e1 c0       	rjmp	.+450    	; 0x38d2 <SevenSegment_Display+0x11c2>
    3710:	2c 81       	ldd	r18, Y+4	; 0x04
    3712:	3d 81       	ldd	r19, Y+5	; 0x05
    3714:	22 30       	cpi	r18, 0x02	; 2
    3716:	31 05       	cpc	r19, r1
    3718:	09 f4       	brne	.+2      	; 0x371c <SevenSegment_Display+0x100c>
    371a:	4d c0       	rjmp	.+154    	; 0x37b6 <SevenSegment_Display+0x10a6>
    371c:	8c 81       	ldd	r24, Y+4	; 0x04
    371e:	9d 81       	ldd	r25, Y+5	; 0x05
    3720:	83 30       	cpi	r24, 0x03	; 3
    3722:	91 05       	cpc	r25, r1
    3724:	09 f4       	brne	.+2      	; 0x3728 <SevenSegment_Display+0x1018>
    3726:	5a c0       	rjmp	.+180    	; 0x37dc <SevenSegment_Display+0x10cc>
    3728:	d4 c0       	rjmp	.+424    	; 0x38d2 <SevenSegment_Display+0x11c2>
    372a:	2c 81       	ldd	r18, Y+4	; 0x04
    372c:	3d 81       	ldd	r19, Y+5	; 0x05
    372e:	27 30       	cpi	r18, 0x07	; 7
    3730:	31 05       	cpc	r19, r1
    3732:	09 f4       	brne	.+2      	; 0x3736 <SevenSegment_Display+0x1026>
    3734:	9f c0       	rjmp	.+318    	; 0x3874 <SevenSegment_Display+0x1164>
    3736:	8c 81       	ldd	r24, Y+4	; 0x04
    3738:	9d 81       	ldd	r25, Y+5	; 0x05
    373a:	88 30       	cpi	r24, 0x08	; 8
    373c:	91 05       	cpc	r25, r1
    373e:	6c f4       	brge	.+26     	; 0x375a <SevenSegment_Display+0x104a>
    3740:	2c 81       	ldd	r18, Y+4	; 0x04
    3742:	3d 81       	ldd	r19, Y+5	; 0x05
    3744:	25 30       	cpi	r18, 0x05	; 5
    3746:	31 05       	cpc	r19, r1
    3748:	09 f4       	brne	.+2      	; 0x374c <SevenSegment_Display+0x103c>
    374a:	73 c0       	rjmp	.+230    	; 0x3832 <SevenSegment_Display+0x1122>
    374c:	8c 81       	ldd	r24, Y+4	; 0x04
    374e:	9d 81       	ldd	r25, Y+5	; 0x05
    3750:	86 30       	cpi	r24, 0x06	; 6
    3752:	91 05       	cpc	r25, r1
    3754:	09 f4       	brne	.+2      	; 0x3758 <SevenSegment_Display+0x1048>
    3756:	80 c0       	rjmp	.+256    	; 0x3858 <SevenSegment_Display+0x1148>
    3758:	bc c0       	rjmp	.+376    	; 0x38d2 <SevenSegment_Display+0x11c2>
    375a:	2c 81       	ldd	r18, Y+4	; 0x04
    375c:	3d 81       	ldd	r19, Y+5	; 0x05
    375e:	28 30       	cpi	r18, 0x08	; 8
    3760:	31 05       	cpc	r19, r1
    3762:	09 f4       	brne	.+2      	; 0x3766 <SevenSegment_Display+0x1056>
    3764:	9f c0       	rjmp	.+318    	; 0x38a4 <SevenSegment_Display+0x1194>
    3766:	8c 81       	ldd	r24, Y+4	; 0x04
    3768:	9d 81       	ldd	r25, Y+5	; 0x05
    376a:	89 30       	cpi	r24, 0x09	; 9
    376c:	91 05       	cpc	r25, r1
    376e:	09 f4       	brne	.+2      	; 0x3772 <SevenSegment_Display+0x1062>
    3770:	a2 c0       	rjmp	.+324    	; 0x38b6 <SevenSegment_Display+0x11a6>
    3772:	af c0       	rjmp	.+350    	; 0x38d2 <SevenSegment_Display+0x11c2>
							{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3774:	83 e0       	ldi	r24, 0x03	; 3
    3776:	6f ef       	ldi	r22, 0xFF	; 255
    3778:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    377c:	83 e0       	ldi	r24, 0x03	; 3
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_HIGH);
    3784:	83 e0       	ldi	r24, 0x03	; 3
    3786:	66 e0       	ldi	r22, 0x06	; 6
    3788:	41 e0       	ldi	r20, 0x01	; 1
    378a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    378e:	a7 c0       	rjmp	.+334    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3790:	83 e0       	ldi	r24, 0x03	; 3
    3792:	6f ef       	ldi	r22, 0xFF	; 255
    3794:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3798:	83 e0       	ldi	r24, 0x03	; 3
    379a:	6f ef       	ldi	r22, 0xFF	; 255
    379c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    37a0:	83 e0       	ldi	r24, 0x03	; 3
    37a2:	61 e0       	ldi	r22, 0x01	; 1
    37a4:	40 e0       	ldi	r20, 0x00	; 0
    37a6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    37aa:	83 e0       	ldi	r24, 0x03	; 3
    37ac:	62 e0       	ldi	r22, 0x02	; 2
    37ae:	40 e0       	ldi	r20, 0x00	; 0
    37b0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    37b4:	94 c0       	rjmp	.+296    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    37b6:	83 e0       	ldi	r24, 0x03	; 3
    37b8:	6f ef       	ldi	r22, 0xFF	; 255
    37ba:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    37be:	83 e0       	ldi	r24, 0x03	; 3
    37c0:	60 e0       	ldi	r22, 0x00	; 0
    37c2:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    37c6:	83 e0       	ldi	r24, 0x03	; 3
    37c8:	62 e0       	ldi	r22, 0x02	; 2
    37ca:	41 e0       	ldi	r20, 0x01	; 1
    37cc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	65 e0       	ldi	r22, 0x05	; 5
    37d4:	41 e0       	ldi	r20, 0x01	; 1
    37d6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    37da:	81 c0       	rjmp	.+258    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    37dc:	83 e0       	ldi	r24, 0x03	; 3
    37de:	6f ef       	ldi	r22, 0xFF	; 255
    37e0:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    37ec:	83 e0       	ldi	r24, 0x03	; 3
    37ee:	64 e0       	ldi	r22, 0x04	; 4
    37f0:	41 e0       	ldi	r20, 0x01	; 1
    37f2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    37f6:	83 e0       	ldi	r24, 0x03	; 3
    37f8:	65 e0       	ldi	r22, 0x05	; 5
    37fa:	41 e0       	ldi	r20, 0x01	; 1
    37fc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3800:	6e c0       	rjmp	.+220    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3802:	83 e0       	ldi	r24, 0x03	; 3
    3804:	6f ef       	ldi	r22, 0xFF	; 255
    3806:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    380a:	83 e0       	ldi	r24, 0x03	; 3
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    3812:	83 e0       	ldi	r24, 0x03	; 3
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	41 e0       	ldi	r20, 0x01	; 1
    3818:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_HIGH);
    381c:	83 e0       	ldi	r24, 0x03	; 3
    381e:	63 e0       	ldi	r22, 0x03	; 3
    3820:	41 e0       	ldi	r20, 0x01	; 1
    3822:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    3826:	83 e0       	ldi	r24, 0x03	; 3
    3828:	64 e0       	ldi	r22, 0x04	; 4
    382a:	41 e0       	ldi	r20, 0x01	; 1
    382c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3830:	56 c0       	rjmp	.+172    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3832:	83 e0       	ldi	r24, 0x03	; 3
    3834:	6f ef       	ldi	r22, 0xFF	; 255
    3836:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    383a:	83 e0       	ldi	r24, 0x03	; 3
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    3842:	83 e0       	ldi	r24, 0x03	; 3
    3844:	61 e0       	ldi	r22, 0x01	; 1
    3846:	41 e0       	ldi	r20, 0x01	; 1
    3848:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    384c:	83 e0       	ldi	r24, 0x03	; 3
    384e:	64 e0       	ldi	r22, 0x04	; 4
    3850:	41 e0       	ldi	r20, 0x01	; 1
    3852:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3856:	43 c0       	rjmp	.+134    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3858:	83 e0       	ldi	r24, 0x03	; 3
    385a:	6f ef       	ldi	r22, 0xFF	; 255
    385c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3860:	83 e0       	ldi	r24, 0x03	; 3
    3862:	60 e0       	ldi	r22, 0x00	; 0
    3864:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    3868:	83 e0       	ldi	r24, 0x03	; 3
    386a:	61 e0       	ldi	r22, 0x01	; 1
    386c:	41 e0       	ldi	r20, 0x01	; 1
    386e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3872:	35 c0       	rjmp	.+106    	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3874:	83 e0       	ldi	r24, 0x03	; 3
    3876:	6f ef       	ldi	r22, 0xFF	; 255
    3878:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    387c:	83 e0       	ldi	r24, 0x03	; 3
    387e:	6f ef       	ldi	r22, 0xFF	; 255
    3880:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    3884:	83 e0       	ldi	r24, 0x03	; 3
    3886:	60 e0       	ldi	r22, 0x00	; 0
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	61 e0       	ldi	r22, 0x01	; 1
    3892:	40 e0       	ldi	r20, 0x00	; 0
    3894:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    3898:	83 e0       	ldi	r24, 0x03	; 3
    389a:	62 e0       	ldi	r22, 0x02	; 2
    389c:	40 e0       	ldi	r20, 0x00	; 0
    389e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    38a2:	1d c0       	rjmp	.+58     	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    38a4:	83 e0       	ldi	r24, 0x03	; 3
    38a6:	6f ef       	ldi	r22, 0xFF	; 255
    38a8:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    38ac:	83 e0       	ldi	r24, 0x03	; 3
    38ae:	60 e0       	ldi	r22, 0x00	; 0
    38b0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
    38b4:	14 c0       	rjmp	.+40     	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    38b6:	83 e0       	ldi	r24, 0x03	; 3
    38b8:	6f ef       	ldi	r22, 0xFF	; 255
    38ba:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    38be:	83 e0       	ldi	r24, 0x03	; 3
    38c0:	60 e0       	ldi	r22, 0x00	; 0
    38c2:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	64 e0       	ldi	r22, 0x04	; 4
    38ca:	41 e0       	ldi	r20, 0x01	; 1
    38cc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    38d0:	06 c0       	rjmp	.+12     	; 0x38de <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    38d2:	18 8e       	std	Y+24, r1	; 0x18
    38d4:	06 c0       	rjmp	.+12     	; 0x38e2 <SevenSegment_Display+0x11d2>
							}
					break;
					default:
					return E_OK;
    38d6:	18 8e       	std	Y+24, r1	; 0x18
    38d8:	04 c0       	rjmp	.+8      	; 0x38e2 <SevenSegment_Display+0x11d2>
				}
				break;
	default:
	return E_OK;
    38da:	18 8e       	std	Y+24, r1	; 0x18
    38dc:	02 c0       	rjmp	.+4      	; 0x38e2 <SevenSegment_Display+0x11d2>
}
	return E_NOK;
    38de:	91 e0       	ldi	r25, 0x01	; 1
    38e0:	98 8f       	std	Y+24, r25	; 0x18
    38e2:	88 8d       	ldd	r24, Y+24	; 0x18
}
    38e4:	6e 96       	adiw	r28, 0x1e	; 30
    38e6:	0f b6       	in	r0, 0x3f	; 63
    38e8:	f8 94       	cli
    38ea:	de bf       	out	0x3e, r29	; 62
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	cd bf       	out	0x3d, r28	; 61
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	08 95       	ret

000038f6 <CLCD_init>:
#include "LCD_Config.h"
#include <stdio.h>
#include <util/delay.h>
#include <stdlib.h>
void CLCD_init(void)
{
    38f6:	df 93       	push	r29
    38f8:	cf 93       	push	r28
    38fa:	cd b7       	in	r28, 0x3d	; 61
    38fc:	de b7       	in	r29, 0x3e	; 62
    38fe:	2e 97       	sbiw	r28, 0x0e	; 14
    3900:	0f b6       	in	r0, 0x3f	; 63
    3902:	f8 94       	cli
    3904:	de bf       	out	0x3e, r29	; 62
    3906:	0f be       	out	0x3f, r0	; 63
    3908:	cd bf       	out	0x3d, r28	; 61
	//Initialize LCD pins direction
	DIO_SetPortDirection(CLCD_DataPort,DIO_OUTPUT);
    390a:	82 e0       	ldi	r24, 0x02	; 2
    390c:	61 e0       	ldi	r22, 0x01	; 1
    390e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RS_PIN,DIO_OUTPUT);
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	41 e0       	ldi	r20, 0x01	; 1
    3918:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RW_PIN,DIO_OUTPUT);
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	61 e0       	ldi	r22, 0x01	; 1
    3920:	41 e0       	ldi	r20, 0x01	; 1
    3922:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_E_PIN,DIO_OUTPUT);
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	62 e0       	ldi	r22, 0x02	; 2
    392a:	41 e0       	ldi	r20, 0x01	; 1
    392c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	a0 e2       	ldi	r26, 0x20	; 32
    3936:	b2 e4       	ldi	r27, 0x42	; 66
    3938:	8b 87       	std	Y+11, r24	; 0x0b
    393a:	9c 87       	std	Y+12, r25	; 0x0c
    393c:	ad 87       	std	Y+13, r26	; 0x0d
    393e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3940:	6b 85       	ldd	r22, Y+11	; 0x0b
    3942:	7c 85       	ldd	r23, Y+12	; 0x0c
    3944:	8d 85       	ldd	r24, Y+13	; 0x0d
    3946:	9e 85       	ldd	r25, Y+14	; 0x0e
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	4a ef       	ldi	r20, 0xFA	; 250
    394e:	54 e4       	ldi	r21, 0x44	; 68
    3950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	8f 83       	std	Y+7, r24	; 0x07
    395a:	98 87       	std	Y+8, r25	; 0x08
    395c:	a9 87       	std	Y+9, r26	; 0x09
    395e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3960:	6f 81       	ldd	r22, Y+7	; 0x07
    3962:	78 85       	ldd	r23, Y+8	; 0x08
    3964:	89 85       	ldd	r24, Y+9	; 0x09
    3966:	9a 85       	ldd	r25, Y+10	; 0x0a
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	40 e8       	ldi	r20, 0x80	; 128
    396e:	5f e3       	ldi	r21, 0x3F	; 63
    3970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3974:	88 23       	and	r24, r24
    3976:	2c f4       	brge	.+10     	; 0x3982 <CLCD_init+0x8c>
		__ticks = 1;
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	9e 83       	std	Y+6, r25	; 0x06
    397e:	8d 83       	std	Y+5, r24	; 0x05
    3980:	3f c0       	rjmp	.+126    	; 0x3a00 <CLCD_init+0x10a>
	else if (__tmp > 65535)
    3982:	6f 81       	ldd	r22, Y+7	; 0x07
    3984:	78 85       	ldd	r23, Y+8	; 0x08
    3986:	89 85       	ldd	r24, Y+9	; 0x09
    3988:	9a 85       	ldd	r25, Y+10	; 0x0a
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	3f ef       	ldi	r19, 0xFF	; 255
    398e:	4f e7       	ldi	r20, 0x7F	; 127
    3990:	57 e4       	ldi	r21, 0x47	; 71
    3992:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3996:	18 16       	cp	r1, r24
    3998:	4c f5       	brge	.+82     	; 0x39ec <CLCD_init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399a:	6b 85       	ldd	r22, Y+11	; 0x0b
    399c:	7c 85       	ldd	r23, Y+12	; 0x0c
    399e:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e2       	ldi	r20, 0x20	; 32
    39a8:	51 e4       	ldi	r21, 0x41	; 65
    39aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	9e 83       	std	Y+6, r25	; 0x06
    39c0:	8d 83       	std	Y+5, r24	; 0x05
    39c2:	0f c0       	rjmp	.+30     	; 0x39e2 <CLCD_init+0xec>
    39c4:	88 ec       	ldi	r24, 0xC8	; 200
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	9c 83       	std	Y+4, r25	; 0x04
    39ca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39cc:	8b 81       	ldd	r24, Y+3	; 0x03
    39ce:	9c 81       	ldd	r25, Y+4	; 0x04
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	f1 f7       	brne	.-4      	; 0x39d0 <CLCD_init+0xda>
    39d4:	9c 83       	std	Y+4, r25	; 0x04
    39d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d8:	8d 81       	ldd	r24, Y+5	; 0x05
    39da:	9e 81       	ldd	r25, Y+6	; 0x06
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	9e 83       	std	Y+6, r25	; 0x06
    39e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e2:	8d 81       	ldd	r24, Y+5	; 0x05
    39e4:	9e 81       	ldd	r25, Y+6	; 0x06
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	69 f7       	brne	.-38     	; 0x39c4 <CLCD_init+0xce>
    39ea:	14 c0       	rjmp	.+40     	; 0x3a14 <CLCD_init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ec:	6f 81       	ldd	r22, Y+7	; 0x07
    39ee:	78 85       	ldd	r23, Y+8	; 0x08
    39f0:	89 85       	ldd	r24, Y+9	; 0x09
    39f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	9e 83       	std	Y+6, r25	; 0x06
    39fe:	8d 83       	std	Y+5, r24	; 0x05
    3a00:	8d 81       	ldd	r24, Y+5	; 0x05
    3a02:	9e 81       	ldd	r25, Y+6	; 0x06
    3a04:	9a 83       	std	Y+2, r25	; 0x02
    3a06:	89 83       	std	Y+1, r24	; 0x01
    3a08:	89 81       	ldd	r24, Y+1	; 0x01
    3a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	f1 f7       	brne	.-4      	; 0x3a0c <CLCD_init+0x116>
    3a10:	9a 83       	std	Y+2, r25	; 0x02
    3a12:	89 83       	std	Y+1, r24	; 0x01
	#ifdef CLCD_OneLine_5x8Size
	CLCD_SendCommand(CLCD_OneLine_5x8Size);
	#elif CLCD_OneLine_5x11Size
	CLCD_SendCommand(CLCD_OneLine_5x11Size );
	#elif  CLCD_TwoLines_5x8Size
	CLCD_SendCommand(CLCD_TwoLines_5x8Size);
    3a14:	88 e3       	ldi	r24, 0x38	; 56
    3a16:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <CLCD_SendCommand>
	#elif CLCD_TwoLines_5x11Size
	CLCD_SendCommand(CLCD_TwoLines_5x11Size);
	#endif

	CLCD_SendCommand(CLCD_DISP_ON_CURSOR_BLINK);
    3a1a:	8f e0       	ldi	r24, 0x0F	; 15
    3a1c:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <CLCD_SendCommand>

	CLCD_SendCommand(CLCD_CLEAR);
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <CLCD_SendCommand>
}
    3a26:	2e 96       	adiw	r28, 0x0e	; 14
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <CLCD_SendCommand>:

void CLCD_SendCommand(u8 Command)
{
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	2f 97       	sbiw	r28, 0x0f	; 15
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	f8 94       	cli
    3a46:	de bf       	out	0x3e, r29	; 62
    3a48:	0f be       	out	0x3f, r0	; 63
    3a4a:	cd bf       	out	0x3d, r28	; 61
    3a4c:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	60 e0       	ldi	r22, 0x00	; 0
    3a52:	40 e0       	ldi	r20, 0x00	; 0
    3a54:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
	//SET ReadWrite pin low to write
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	61 e0       	ldi	r22, 0x01	; 1
    3a5c:	40 e0       	ldi	r20, 0x00	; 0
    3a5e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
	//SET Data/Command Port value is the command
	DIO_SetPortValue(CLCD_DataPort,Command);
    3a62:	82 e0       	ldi	r24, 0x02	; 2
    3a64:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a66:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	62 e0       	ldi	r22, 0x02	; 2
    3a6e:	41 e0       	ldi	r20, 0x01	; 1
    3a70:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	a0 e0       	ldi	r26, 0x00	; 0
    3a7a:	b0 e4       	ldi	r27, 0x40	; 64
    3a7c:	8b 87       	std	Y+11, r24	; 0x0b
    3a7e:	9c 87       	std	Y+12, r25	; 0x0c
    3a80:	ad 87       	std	Y+13, r26	; 0x0d
    3a82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	4a ef       	ldi	r20, 0xFA	; 250
    3a92:	54 e4       	ldi	r21, 0x44	; 68
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	8f 83       	std	Y+7, r24	; 0x07
    3a9e:	98 87       	std	Y+8, r25	; 0x08
    3aa0:	a9 87       	std	Y+9, r26	; 0x09
    3aa2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa6:	78 85       	ldd	r23, Y+8	; 0x08
    3aa8:	89 85       	ldd	r24, Y+9	; 0x09
    3aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e8       	ldi	r20, 0x80	; 128
    3ab2:	5f e3       	ldi	r21, 0x3F	; 63
    3ab4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab8:	88 23       	and	r24, r24
    3aba:	2c f4       	brge	.+10     	; 0x3ac6 <CLCD_SendCommand+0x8e>
		__ticks = 1;
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	9e 83       	std	Y+6, r25	; 0x06
    3ac2:	8d 83       	std	Y+5, r24	; 0x05
    3ac4:	3f c0       	rjmp	.+126    	; 0x3b44 <CLCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    3ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac8:	78 85       	ldd	r23, Y+8	; 0x08
    3aca:	89 85       	ldd	r24, Y+9	; 0x09
    3acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	3f ef       	ldi	r19, 0xFF	; 255
    3ad2:	4f e7       	ldi	r20, 0x7F	; 127
    3ad4:	57 e4       	ldi	r21, 0x47	; 71
    3ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ada:	18 16       	cp	r1, r24
    3adc:	4c f5       	brge	.+82     	; 0x3b30 <CLCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e2       	ldi	r20, 0x20	; 32
    3aec:	51 e4       	ldi	r21, 0x41	; 65
    3aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	bc 01       	movw	r22, r24
    3af8:	cd 01       	movw	r24, r26
    3afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	9e 83       	std	Y+6, r25	; 0x06
    3b04:	8d 83       	std	Y+5, r24	; 0x05
    3b06:	0f c0       	rjmp	.+30     	; 0x3b26 <CLCD_SendCommand+0xee>
    3b08:	88 ec       	ldi	r24, 0xC8	; 200
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	9c 83       	std	Y+4, r25	; 0x04
    3b0e:	8b 83       	std	Y+3, r24	; 0x03
    3b10:	8b 81       	ldd	r24, Y+3	; 0x03
    3b12:	9c 81       	ldd	r25, Y+4	; 0x04
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <CLCD_SendCommand+0xdc>
    3b18:	9c 83       	std	Y+4, r25	; 0x04
    3b1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	9e 83       	std	Y+6, r25	; 0x06
    3b24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b26:	8d 81       	ldd	r24, Y+5	; 0x05
    3b28:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2a:	00 97       	sbiw	r24, 0x00	; 0
    3b2c:	69 f7       	brne	.-38     	; 0x3b08 <CLCD_SendCommand+0xd0>
    3b2e:	14 c0       	rjmp	.+40     	; 0x3b58 <CLCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b30:	6f 81       	ldd	r22, Y+7	; 0x07
    3b32:	78 85       	ldd	r23, Y+8	; 0x08
    3b34:	89 85       	ldd	r24, Y+9	; 0x09
    3b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	9e 83       	std	Y+6, r25	; 0x06
    3b42:	8d 83       	std	Y+5, r24	; 0x05
    3b44:	8d 81       	ldd	r24, Y+5	; 0x05
    3b46:	9e 81       	ldd	r25, Y+6	; 0x06
    3b48:	9a 83       	std	Y+2, r25	; 0x02
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	f1 f7       	brne	.-4      	; 0x3b50 <CLCD_SendCommand+0x118>
    3b54:	9a 83       	std	Y+2, r25	; 0x02
    3b56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	62 e0       	ldi	r22, 0x02	; 2
    3b5c:	40 e0       	ldi	r20, 0x00	; 0
    3b5e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    3b62:	2f 96       	adiw	r28, 0x0f	; 15
    3b64:	0f b6       	in	r0, 0x3f	; 63
    3b66:	f8 94       	cli
    3b68:	de bf       	out	0x3e, r29	; 62
    3b6a:	0f be       	out	0x3f, r0	; 63
    3b6c:	cd bf       	out	0x3d, r28	; 61
    3b6e:	cf 91       	pop	r28
    3b70:	df 91       	pop	r29
    3b72:	08 95       	ret

00003b74 <CLCD_SendData>:

void CLCD_SendData(u8 Data)
{
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
    3b7c:	2f 97       	sbiw	r28, 0x0f	; 15
    3b7e:	0f b6       	in	r0, 0x3f	; 63
    3b80:	f8 94       	cli
    3b82:	de bf       	out	0x3e, r29	; 62
    3b84:	0f be       	out	0x3f, r0	; 63
    3b86:	cd bf       	out	0x3d, r28	; 61
    3b88:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	60 e0       	ldi	r22, 0x00	; 0
    3b8e:	41 e0       	ldi	r20, 0x01	; 1
    3b90:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
	//SET ReadWrite pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	61 e0       	ldi	r22, 0x01	; 1
    3b98:	40 e0       	ldi	r20, 0x00	; 0
    3b9a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
	//SET Data/Command Port value is the Data
	DIO_SetPortValue(CLCD_DataPort,Data);
    3b9e:	82 e0       	ldi	r24, 0x02	; 2
    3ba0:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ba2:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	62 e0       	ldi	r22, 0x02	; 2
    3baa:	41 e0       	ldi	r20, 0x01	; 1
    3bac:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	a0 e0       	ldi	r26, 0x00	; 0
    3bb6:	b0 e4       	ldi	r27, 0x40	; 64
    3bb8:	8b 87       	std	Y+11, r24	; 0x0b
    3bba:	9c 87       	std	Y+12, r25	; 0x0c
    3bbc:	ad 87       	std	Y+13, r26	; 0x0d
    3bbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	4a ef       	ldi	r20, 0xFA	; 250
    3bce:	54 e4       	ldi	r21, 0x44	; 68
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	8f 83       	std	Y+7, r24	; 0x07
    3bda:	98 87       	std	Y+8, r25	; 0x08
    3bdc:	a9 87       	std	Y+9, r26	; 0x09
    3bde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3be0:	6f 81       	ldd	r22, Y+7	; 0x07
    3be2:	78 85       	ldd	r23, Y+8	; 0x08
    3be4:	89 85       	ldd	r24, Y+9	; 0x09
    3be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	40 e8       	ldi	r20, 0x80	; 128
    3bee:	5f e3       	ldi	r21, 0x3F	; 63
    3bf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf4:	88 23       	and	r24, r24
    3bf6:	2c f4       	brge	.+10     	; 0x3c02 <CLCD_SendData+0x8e>
		__ticks = 1;
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	9e 83       	std	Y+6, r25	; 0x06
    3bfe:	8d 83       	std	Y+5, r24	; 0x05
    3c00:	3f c0       	rjmp	.+126    	; 0x3c80 <CLCD_SendData+0x10c>
	else if (__tmp > 65535)
    3c02:	6f 81       	ldd	r22, Y+7	; 0x07
    3c04:	78 85       	ldd	r23, Y+8	; 0x08
    3c06:	89 85       	ldd	r24, Y+9	; 0x09
    3c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	3f ef       	ldi	r19, 0xFF	; 255
    3c0e:	4f e7       	ldi	r20, 0x7F	; 127
    3c10:	57 e4       	ldi	r21, 0x47	; 71
    3c12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c16:	18 16       	cp	r1, r24
    3c18:	4c f5       	brge	.+82     	; 0x3c6c <CLCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	40 e2       	ldi	r20, 0x20	; 32
    3c28:	51 e4       	ldi	r21, 0x41	; 65
    3c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	bc 01       	movw	r22, r24
    3c34:	cd 01       	movw	r24, r26
    3c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	9e 83       	std	Y+6, r25	; 0x06
    3c40:	8d 83       	std	Y+5, r24	; 0x05
    3c42:	0f c0       	rjmp	.+30     	; 0x3c62 <CLCD_SendData+0xee>
    3c44:	88 ec       	ldi	r24, 0xC8	; 200
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9c 83       	std	Y+4, r25	; 0x04
    3c4a:	8b 83       	std	Y+3, r24	; 0x03
    3c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	f1 f7       	brne	.-4      	; 0x3c50 <CLCD_SendData+0xdc>
    3c54:	9c 83       	std	Y+4, r25	; 0x04
    3c56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c58:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5c:	01 97       	sbiw	r24, 0x01	; 1
    3c5e:	9e 83       	std	Y+6, r25	; 0x06
    3c60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c62:	8d 81       	ldd	r24, Y+5	; 0x05
    3c64:	9e 81       	ldd	r25, Y+6	; 0x06
    3c66:	00 97       	sbiw	r24, 0x00	; 0
    3c68:	69 f7       	brne	.-38     	; 0x3c44 <CLCD_SendData+0xd0>
    3c6a:	14 c0       	rjmp	.+40     	; 0x3c94 <CLCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c6e:	78 85       	ldd	r23, Y+8	; 0x08
    3c70:	89 85       	ldd	r24, Y+9	; 0x09
    3c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	9e 83       	std	Y+6, r25	; 0x06
    3c7e:	8d 83       	std	Y+5, r24	; 0x05
    3c80:	8d 81       	ldd	r24, Y+5	; 0x05
    3c82:	9e 81       	ldd	r25, Y+6	; 0x06
    3c84:	9a 83       	std	Y+2, r25	; 0x02
    3c86:	89 83       	std	Y+1, r24	; 0x01
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	f1 f7       	brne	.-4      	; 0x3c8c <CLCD_SendData+0x118>
    3c90:	9a 83       	std	Y+2, r25	; 0x02
    3c92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	62 e0       	ldi	r22, 0x02	; 2
    3c98:	40 e0       	ldi	r20, 0x00	; 0
    3c9a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    3c9e:	2f 96       	adiw	r28, 0x0f	; 15
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	cd bf       	out	0x3d, r28	; 61
    3caa:	cf 91       	pop	r28
    3cac:	df 91       	pop	r29
    3cae:	08 95       	ret

00003cb0 <CLCD_SendWord>:

void CLCD_SendWord(u8 *Word_PTR)
{
    3cb0:	df 93       	push	r29
    3cb2:	cf 93       	push	r28
    3cb4:	00 d0       	rcall	.+0      	; 0x3cb6 <CLCD_SendWord+0x6>
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	9a 83       	std	Y+2, r25	; 0x02
    3cbc:	89 83       	std	Y+1, r24	; 0x01
    3cbe:	0b c0       	rjmp	.+22     	; 0x3cd6 <CLCD_SendWord+0x26>
	while(*Word_PTR) 		//Word = String = array of charaters
	{
		CLCD_SendData(*Word_PTR++);
    3cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    3cc4:	20 81       	ld	r18, Z
    3cc6:	89 81       	ldd	r24, Y+1	; 0x01
    3cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cca:	01 96       	adiw	r24, 0x01	; 1
    3ccc:	9a 83       	std	Y+2, r25	; 0x02
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	82 2f       	mov	r24, r18
    3cd2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <CLCD_SendData>
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
}

void CLCD_SendWord(u8 *Word_PTR)
{
	while(*Word_PTR) 		//Word = String = array of charaters
    3cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    3cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    3cda:	80 81       	ld	r24, Z
    3cdc:	88 23       	and	r24, r24
    3cde:	81 f7       	brne	.-32     	; 0x3cc0 <CLCD_SendWord+0x10>
	{
		CLCD_SendData(*Word_PTR++);
	}
}
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	cf 91       	pop	r28
    3ce6:	df 91       	pop	r29
    3ce8:	08 95       	ret

00003cea <CLCD_GoToXY>:

//to move from position to another in CLCD
STD_Return CLCD_GoToXY(u8 X_Position,u8 Y_Position)
{
    3cea:	df 93       	push	r29
    3cec:	cf 93       	push	r28
    3cee:	00 d0       	rcall	.+0      	; 0x3cf0 <CLCD_GoToXY+0x6>
    3cf0:	00 d0       	rcall	.+0      	; 0x3cf2 <CLCD_GoToXY+0x8>
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
    3cf6:	8a 83       	std	Y+2, r24	; 0x02
    3cf8:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_address;
	if(X_Position == 0)
    3cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfc:	88 23       	and	r24, r24
    3cfe:	49 f4       	brne	.+18     	; 0x3d12 <CLCD_GoToXY+0x28>
		{
			DDRAM_address = Y_Position;
    3d00:	8b 81       	ldd	r24, Y+3	; 0x03
    3d02:	89 83       	std	Y+1, r24	; 0x01
			CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	80 58       	subi	r24, 0x80	; 128
    3d08:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <CLCD_SendCommand>
			return E_NOK;
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	8c 83       	std	Y+4, r24	; 0x04
    3d10:	0e c0       	rjmp	.+28     	; 0x3d2e <CLCD_GoToXY+0x44>
		}
	else if (X_Position == 1)
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	81 30       	cpi	r24, 0x01	; 1
    3d16:	51 f4       	brne	.+20     	; 0x3d2c <CLCD_GoToXY+0x42>
		{
		DDRAM_address = Y_Position + FirstLoc_SecondLine;
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1a:	80 5c       	subi	r24, 0xC0	; 192
    3d1c:	89 83       	std	Y+1, r24	; 0x01
		CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	80 58       	subi	r24, 0x80	; 128
    3d22:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <CLCD_SendCommand>
		return E_NOK;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	8c 83       	std	Y+4, r24	; 0x04
    3d2a:	01 c0       	rjmp	.+2      	; 0x3d2e <CLCD_GoToXY+0x44>
		}
	else
	{
		return E_OK;
    3d2c:	1c 82       	std	Y+4, r1	; 0x04
    3d2e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    3d30:	0f 90       	pop	r0
    3d32:	0f 90       	pop	r0
    3d34:	0f 90       	pop	r0
    3d36:	0f 90       	pop	r0
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <CLCD_SendSpecialChar>:
//to write special function by CGRAM
void CLCD_SendSpecialChar(u8 *Pattern,u8 BlockNumber,u8 X_Position,u8 Y_Position)
{
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	27 97       	sbiw	r28, 0x07	; 7
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
    3d52:	9c 83       	std	Y+4, r25	; 0x04
    3d54:	8b 83       	std	Y+3, r24	; 0x03
    3d56:	6d 83       	std	Y+5, r22	; 0x05
    3d58:	4e 83       	std	Y+6, r20	; 0x06
    3d5a:	2f 83       	std	Y+7, r18	; 0x07
	u8 CGRAM_address=0;
    3d5c:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter;
	CGRAM_address = BlockNumber*8;
    3d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d60:	88 2f       	mov	r24, r24
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	88 0f       	add	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	88 0f       	add	r24, r24
    3d6a:	99 1f       	adc	r25, r25
    3d6c:	88 0f       	add	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_SendCommand(CGRAM_address+Set_Bit6);
    3d72:	8a 81       	ldd	r24, Y+2	; 0x02
    3d74:	80 5c       	subi	r24, 0xC0	; 192
    3d76:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <CLCD_SendCommand>

	for(counter=0;counter<8;counter++)
    3d7a:	19 82       	std	Y+1, r1	; 0x01
    3d7c:	0e c0       	rjmp	.+28     	; 0x3d9a <CLCD_SendSpecialChar+0x5c>
		{
			CLCD_SendData(Pattern[counter]);
    3d7e:	89 81       	ldd	r24, Y+1	; 0x01
    3d80:	28 2f       	mov	r18, r24
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	8b 81       	ldd	r24, Y+3	; 0x03
    3d86:	9c 81       	ldd	r25, Y+4	; 0x04
    3d88:	fc 01       	movw	r30, r24
    3d8a:	e2 0f       	add	r30, r18
    3d8c:	f3 1f       	adc	r31, r19
    3d8e:	80 81       	ld	r24, Z
    3d90:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <CLCD_SendData>
	u8 CGRAM_address=0;
	u8 counter;
	CGRAM_address = BlockNumber*8;
	CLCD_SendCommand(CGRAM_address+Set_Bit6);

	for(counter=0;counter<8;counter++)
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	8f 5f       	subi	r24, 0xFF	; 255
    3d98:	89 83       	std	Y+1, r24	; 0x01
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	88 30       	cpi	r24, 0x08	; 8
    3d9e:	78 f3       	brcs	.-34     	; 0x3d7e <CLCD_SendSpecialChar+0x40>
		{
			CLCD_SendData(Pattern[counter]);
		}
	CLCD_GoToXY(X_Position,Y_Position);
    3da0:	8e 81       	ldd	r24, Y+6	; 0x06
    3da2:	6f 81       	ldd	r22, Y+7	; 0x07
    3da4:	0e 94 75 1e 	call	0x3cea	; 0x3cea <CLCD_GoToXY>
	CLCD_SendData(BlockNumber);
    3da8:	8d 81       	ldd	r24, Y+5	; 0x05
    3daa:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <CLCD_SendData>
}
    3dae:	27 96       	adiw	r28, 0x07	; 7
    3db0:	0f b6       	in	r0, 0x3f	; 63
    3db2:	f8 94       	cli
    3db4:	de bf       	out	0x3e, r29	; 62
    3db6:	0f be       	out	0x3f, r0	; 63
    3db8:	cd bf       	out	0x3d, r28	; 61
    3dba:	cf 91       	pop	r28
    3dbc:	df 91       	pop	r29
    3dbe:	08 95       	ret

00003dc0 <CLCD_Display_Decimal_Number>:

void CLCD_Display_Decimal_Number(s32 num)
{
    3dc0:	df 93       	push	r29
    3dc2:	cf 93       	push	r28
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	61 97       	sbiw	r28, 0x11	; 17
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	6e 87       	std	Y+14, r22	; 0x0e
    3dd6:	7f 87       	std	Y+15, r23	; 0x0f
    3dd8:	88 8b       	std	Y+16, r24	; 0x10
    3dda:	99 8b       	std	Y+17, r25	; 0x11
	u8 i = 0, j, digit, str[10];
    3ddc:	1b 82       	std	Y+3, r1	; 0x03

	/* if number 0 */
	if (0 == num)
    3dde:	8e 85       	ldd	r24, Y+14	; 0x0e
    3de0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3de2:	a8 89       	ldd	r26, Y+16	; 0x10
    3de4:	b9 89       	ldd	r27, Y+17	; 0x11
    3de6:	00 97       	sbiw	r24, 0x00	; 0
    3de8:	a1 05       	cpc	r26, r1
    3dea:	b1 05       	cpc	r27, r1
    3dec:	19 f4       	brne	.+6      	; 0x3df4 <CLCD_Display_Decimal_Number+0x34>
	{
		CLCD_SendData('0');
    3dee:	80 e3       	ldi	r24, 0x30	; 48
    3df0:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <CLCD_SendData>
	}

	/* if the number is negative */
	if (num < 0)
    3df4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3df6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3df8:	a8 89       	ldd	r26, Y+16	; 0x10
    3dfa:	b9 89       	ldd	r27, Y+17	; 0x11
    3dfc:	bb 23       	and	r27, r27
    3dfe:	0c f0       	brlt	.+2      	; 0x3e02 <CLCD_Display_Decimal_Number+0x42>
    3e00:	42 c0       	rjmp	.+132    	; 0x3e86 <CLCD_Display_Decimal_Number+0xc6>
	{
		CLCD_SendData('-');
    3e02:	8d e2       	ldi	r24, 0x2D	; 45
    3e04:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <CLCD_SendData>

		/* convert to positive form */
		num = num * -1;
    3e08:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e0c:	a8 89       	ldd	r26, Y+16	; 0x10
    3e0e:	b9 89       	ldd	r27, Y+17	; 0x11
    3e10:	b0 95       	com	r27
    3e12:	a0 95       	com	r26
    3e14:	90 95       	com	r25
    3e16:	81 95       	neg	r24
    3e18:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1a:	af 4f       	sbci	r26, 0xFF	; 255
    3e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e1e:	8e 87       	std	Y+14, r24	; 0x0e
    3e20:	9f 87       	std	Y+15, r25	; 0x0f
    3e22:	a8 8b       	std	Y+16, r26	; 0x10
    3e24:	b9 8b       	std	Y+17, r27	; 0x11
    3e26:	2f c0       	rjmp	.+94     	; 0x3e86 <CLCD_Display_Decimal_Number+0xc6>
	}

	/* loop on digits of the number */
	while (num > 0)
	{
		digit = (num % 10) + '0';
    3e28:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e2c:	a8 89       	ldd	r26, Y+16	; 0x10
    3e2e:	b9 89       	ldd	r27, Y+17	; 0x11
    3e30:	2a e0       	ldi	r18, 0x0A	; 10
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	40 e0       	ldi	r20, 0x00	; 0
    3e36:	50 e0       	ldi	r21, 0x00	; 0
    3e38:	bc 01       	movw	r22, r24
    3e3a:	cd 01       	movw	r24, r26
    3e3c:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <__divmodsi4>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	80 5d       	subi	r24, 0xD0	; 208
    3e46:	89 83       	std	Y+1, r24	; 0x01
		str[i] = digit;
    3e48:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4a:	28 2f       	mov	r18, r24
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	ce 01       	movw	r24, r28
    3e50:	04 96       	adiw	r24, 0x04	; 4
    3e52:	fc 01       	movw	r30, r24
    3e54:	e2 0f       	add	r30, r18
    3e56:	f3 1f       	adc	r31, r19
    3e58:	89 81       	ldd	r24, Y+1	; 0x01
    3e5a:	80 83       	st	Z, r24
		num /= 10;
    3e5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e60:	a8 89       	ldd	r26, Y+16	; 0x10
    3e62:	b9 89       	ldd	r27, Y+17	; 0x11
    3e64:	2a e0       	ldi	r18, 0x0A	; 10
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	40 e0       	ldi	r20, 0x00	; 0
    3e6a:	50 e0       	ldi	r21, 0x00	; 0
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <__divmodsi4>
    3e74:	da 01       	movw	r26, r20
    3e76:	c9 01       	movw	r24, r18
    3e78:	8e 87       	std	Y+14, r24	; 0x0e
    3e7a:	9f 87       	std	Y+15, r25	; 0x0f
    3e7c:	a8 8b       	std	Y+16, r26	; 0x10
    3e7e:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    3e80:	8b 81       	ldd	r24, Y+3	; 0x03
    3e82:	8f 5f       	subi	r24, 0xFF	; 255
    3e84:	8b 83       	std	Y+3, r24	; 0x03
		/* convert to positive form */
		num = num * -1;
	}

	/* loop on digits of the number */
	while (num > 0)
    3e86:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e88:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e8a:	a8 89       	ldd	r26, Y+16	; 0x10
    3e8c:	b9 89       	ldd	r27, Y+17	; 0x11
    3e8e:	18 16       	cp	r1, r24
    3e90:	19 06       	cpc	r1, r25
    3e92:	1a 06       	cpc	r1, r26
    3e94:	1b 06       	cpc	r1, r27
    3e96:	44 f2       	brlt	.-112    	; 0x3e28 <CLCD_Display_Decimal_Number+0x68>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    3e98:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9a:	8a 83       	std	Y+2, r24	; 0x02
    3e9c:	11 c0       	rjmp	.+34     	; 0x3ec0 <CLCD_Display_Decimal_Number+0x100>
	{
		CLCD_SendData(str[j - 1]);
    3e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea0:	88 2f       	mov	r24, r24
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	9c 01       	movw	r18, r24
    3ea6:	21 50       	subi	r18, 0x01	; 1
    3ea8:	30 40       	sbci	r19, 0x00	; 0
    3eaa:	ce 01       	movw	r24, r28
    3eac:	04 96       	adiw	r24, 0x04	; 4
    3eae:	fc 01       	movw	r30, r24
    3eb0:	e2 0f       	add	r30, r18
    3eb2:	f3 1f       	adc	r31, r19
    3eb4:	80 81       	ld	r24, Z
    3eb6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <CLCD_SendData>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    3eba:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebc:	81 50       	subi	r24, 0x01	; 1
    3ebe:	8a 83       	std	Y+2, r24	; 0x02
    3ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec2:	88 23       	and	r24, r24
    3ec4:	61 f7       	brne	.-40     	; 0x3e9e <CLCD_Display_Decimal_Number+0xde>
	{
		CLCD_SendData(str[j - 1]);
	}
}
    3ec6:	61 96       	adiw	r28, 0x11	; 17
    3ec8:	0f b6       	in	r0, 0x3f	; 63
    3eca:	f8 94       	cli
    3ecc:	de bf       	out	0x3e, r29	; 62
    3ece:	0f be       	out	0x3f, r0	; 63
    3ed0:	cd bf       	out	0x3d, r28	; 61
    3ed2:	cf 91       	pop	r28
    3ed4:	df 91       	pop	r29
    3ed6:	08 95       	ret

00003ed8 <CLCD_Display_RealNumber>:
void CLCD_Display_RealNumber(f32 num)
{
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	29 97       	sbiw	r28, 0x09	; 9
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	6e 83       	std	Y+6, r22	; 0x06
    3eee:	7f 83       	std	Y+7, r23	; 0x07
    3ef0:	88 87       	std	Y+8, r24	; 0x08
    3ef2:	99 87       	std	Y+9, r25	; 0x09
	//Left number to the decimal point
	s32 left = (s32)num;
    3ef4:	6e 81       	ldd	r22, Y+6	; 0x06
    3ef6:	7f 81       	ldd	r23, Y+7	; 0x07
    3ef8:	88 85       	ldd	r24, Y+8	; 0x08
    3efa:	99 85       	ldd	r25, Y+9	; 0x09
    3efc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3f00:	dc 01       	movw	r26, r24
    3f02:	cb 01       	movw	r24, r22
    3f04:	8a 83       	std	Y+2, r24	; 0x02
    3f06:	9b 83       	std	Y+3, r25	; 0x03
    3f08:	ac 83       	std	Y+4, r26	; 0x04
    3f0a:	bd 83       	std	Y+5, r27	; 0x05
	//calculation to the Right number to the decimal point
	u8 right = (f32)(num - left) * 100;
    3f0c:	6a 81       	ldd	r22, Y+2	; 0x02
    3f0e:	7b 81       	ldd	r23, Y+3	; 0x03
    3f10:	8c 81       	ldd	r24, Y+4	; 0x04
    3f12:	9d 81       	ldd	r25, Y+5	; 0x05
    3f14:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3f18:	9b 01       	movw	r18, r22
    3f1a:	ac 01       	movw	r20, r24
    3f1c:	6e 81       	ldd	r22, Y+6	; 0x06
    3f1e:	7f 81       	ldd	r23, Y+7	; 0x07
    3f20:	88 85       	ldd	r24, Y+8	; 0x08
    3f22:	99 85       	ldd	r25, Y+9	; 0x09
    3f24:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	bc 01       	movw	r22, r24
    3f2e:	cd 01       	movw	r24, r26
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	48 ec       	ldi	r20, 0xC8	; 200
    3f36:	52 e4       	ldi	r21, 0x42	; 66
    3f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	bc 01       	movw	r22, r24
    3f42:	cd 01       	movw	r24, r26
    3f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	89 83       	std	Y+1, r24	; 0x01
	//Display Left number to the decimal point
	CLCD_Display_Decimal_Number(left);
    3f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f50:	9b 81       	ldd	r25, Y+3	; 0x03
    3f52:	ac 81       	ldd	r26, Y+4	; 0x04
    3f54:	bd 81       	ldd	r27, Y+5	; 0x05
    3f56:	bc 01       	movw	r22, r24
    3f58:	cd 01       	movw	r24, r26
    3f5a:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <CLCD_Display_Decimal_Number>
	//Display the decimal point
	CLCD_SendData('.');
    3f5e:	8e e2       	ldi	r24, 0x2E	; 46
    3f60:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <CLCD_SendData>
	//Display the Right number to the decimal point
	CLCD_Display_Decimal_Number(right);
    3f64:	89 81       	ldd	r24, Y+1	; 0x01
    3f66:	88 2f       	mov	r24, r24
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	a0 e0       	ldi	r26, 0x00	; 0
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	bc 01       	movw	r22, r24
    3f70:	cd 01       	movw	r24, r26
    3f72:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <CLCD_Display_Decimal_Number>
}
    3f76:	29 96       	adiw	r28, 0x09	; 9
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	de bf       	out	0x3e, r29	; 62
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	cf 91       	pop	r28
    3f84:	df 91       	pop	r29
    3f86:	08 95       	ret

00003f88 <KeyPad_Pressed_Key>:
 * Description          : function to define which switch is pressed in the keypad
 * 
 * @return u8           : return the value of the pressed switch 
 */
u8 KeyPad_Pressed_Key(void)
{
    3f88:	df 93       	push	r29
    3f8a:	cf 93       	push	r28
    3f8c:	00 d0       	rcall	.+0      	; 0x3f8e <KeyPad_Pressed_Key+0x6>
    3f8e:	00 d0       	rcall	.+0      	; 0x3f90 <KeyPad_Pressed_Key+0x8>
    3f90:	0f 92       	push	r0
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
	u8 ColumnIndex,RowIndex,PinState,PressedKey;

	PressedKey=Key_Not_Pressed;
    3f96:	8f ef       	ldi	r24, 0xFF	; 255
    3f98:	89 83       	std	Y+1, r24	; 0x01

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    3f9a:	1b 82       	std	Y+3, r1	; 0x03
    3f9c:	7a c0       	rjmp	.+244    	; 0x4092 <KeyPad_Pressed_Key+0x10a>
	{
		//Set column of Keypad Output
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	6f ef       	ldi	r22, 0xFF	; 255
    3fa2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPortDirection>
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);
    3fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa8:	88 2f       	mov	r24, r24
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	fc 01       	movw	r30, r24
    3fae:	e8 59       	subi	r30, 0x98	; 152
    3fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    3fb2:	90 81       	ld	r25, Z
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	69 2f       	mov	r22, r25
    3fb8:	40 e0       	ldi	r20, 0x00	; 0
    3fba:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    3fbe:	1a 82       	std	Y+2, r1	; 0x02
    3fc0:	55 c0       	rjmp	.+170    	; 0x406c <KeyPad_Pressed_Key+0xe4>
		{
			//Set Row input and activate pull-up
			DIO_SetPinDirection(KeyPad_Port,KeyPad_Row_Arr[RowIndex],DIO_INPUT);
    3fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc4:	88 2f       	mov	r24, r24
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	fc 01       	movw	r30, r24
    3fca:	e4 59       	subi	r30, 0x94	; 148
    3fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    3fce:	90 81       	ld	r25, Z
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	69 2f       	mov	r22, r25
    3fd4:	40 e0       	ldi	r20, 0x00	; 0
    3fd6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
			DIO_EnablePullup(KeyPad_Port,KeyPad_Row_Arr[RowIndex],ENABLE_PullUp);
    3fda:	8a 81       	ldd	r24, Y+2	; 0x02
    3fdc:	88 2f       	mov	r24, r24
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	e4 59       	subi	r30, 0x94	; 148
    3fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe6:	90 81       	ld	r25, Z
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	69 2f       	mov	r22, r25
    3fec:	40 e0       	ldi	r20, 0x00	; 0
    3fee:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <DIO_EnablePullup>

			//Read the current row
			DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    3ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff4:	88 2f       	mov	r24, r24
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	e4 59       	subi	r30, 0x94	; 148
    3ffc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ffe:	90 81       	ld	r25, Z
    4000:	9e 01       	movw	r18, r28
    4002:	2c 5f       	subi	r18, 0xFC	; 252
    4004:	3f 4f       	sbci	r19, 0xFF	; 255
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	69 2f       	mov	r22, r25
    400a:	a9 01       	movw	r20, r18
    400c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <DIO_GetPinValue>

			//Check if switch is pressed
			if(PinState==DIO_LOW)
    4010:	8c 81       	ldd	r24, Y+4	; 0x04
    4012:	88 23       	and	r24, r24
    4014:	41 f5       	brne	.+80     	; 0x4066 <KeyPad_Pressed_Key+0xde>
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];
    4016:	8a 81       	ldd	r24, Y+2	; 0x02
    4018:	48 2f       	mov	r20, r24
    401a:	50 e0       	ldi	r21, 0x00	; 0
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	28 2f       	mov	r18, r24
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	ca 01       	movw	r24, r20
    4024:	88 0f       	add	r24, r24
    4026:	99 1f       	adc	r25, r25
    4028:	88 0f       	add	r24, r24
    402a:	99 1f       	adc	r25, r25
    402c:	82 0f       	add	r24, r18
    402e:	93 1f       	adc	r25, r19
    4030:	fc 01       	movw	r30, r24
    4032:	e0 59       	subi	r30, 0x90	; 144
    4034:	fe 4f       	sbci	r31, 0xFE	; 254
    4036:	80 81       	ld	r24, Z
    4038:	89 83       	std	Y+1, r24	; 0x01
    403a:	0f c0       	rjmp	.+30     	; 0x405a <KeyPad_Pressed_Key+0xd2>

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    403c:	8a 81       	ldd	r24, Y+2	; 0x02
    403e:	88 2f       	mov	r24, r24
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	fc 01       	movw	r30, r24
    4044:	e4 59       	subi	r30, 0x94	; 148
    4046:	fe 4f       	sbci	r31, 0xFE	; 254
    4048:	90 81       	ld	r25, Z
    404a:	9e 01       	movw	r18, r28
    404c:	2c 5f       	subi	r18, 0xFC	; 252
    404e:	3f 4f       	sbci	r19, 0xFF	; 255
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	69 2f       	mov	r22, r25
    4054:	a9 01       	movw	r20, r18
    4056:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <DIO_GetPinValue>
			if(PinState==DIO_LOW)
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
    405a:	8c 81       	ldd	r24, Y+4	; 0x04
    405c:	88 23       	and	r24, r24
    405e:	71 f3       	breq	.-36     	; 0x403c <KeyPad_Pressed_Key+0xb4>
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
				}
				return PressedKey;
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	8d 83       	std	Y+5, r24	; 0x05
    4064:	1c c0       	rjmp	.+56     	; 0x409e <KeyPad_Pressed_Key+0x116>
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    4066:	8a 81       	ldd	r24, Y+2	; 0x02
    4068:	8f 5f       	subi	r24, 0xFF	; 255
    406a:	8a 83       	std	Y+2, r24	; 0x02
    406c:	8a 81       	ldd	r24, Y+2	; 0x02
    406e:	84 30       	cpi	r24, 0x04	; 4
    4070:	08 f4       	brcc	.+2      	; 0x4074 <KeyPad_Pressed_Key+0xec>
    4072:	a7 cf       	rjmp	.-178    	; 0x3fc2 <KeyPad_Pressed_Key+0x3a>
				}
				return PressedKey;
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
    4074:	8b 81       	ldd	r24, Y+3	; 0x03
    4076:	88 2f       	mov	r24, r24
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	fc 01       	movw	r30, r24
    407c:	e8 59       	subi	r30, 0x98	; 152
    407e:	fe 4f       	sbci	r31, 0xFE	; 254
    4080:	90 81       	ld	r25, Z
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	69 2f       	mov	r22, r25
    4086:	41 e0       	ldi	r20, 0x01	; 1
    4088:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    408c:	8b 81       	ldd	r24, Y+3	; 0x03
    408e:	8f 5f       	subi	r24, 0xFF	; 255
    4090:	8b 83       	std	Y+3, r24	; 0x03
    4092:	8b 81       	ldd	r24, Y+3	; 0x03
    4094:	84 30       	cpi	r24, 0x04	; 4
    4096:	08 f4       	brcc	.+2      	; 0x409a <KeyPad_Pressed_Key+0x112>
    4098:	82 cf       	rjmp	.-252    	; 0x3f9e <KeyPad_Pressed_Key+0x16>
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
	}
	return PressedKey;
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	8d 83       	std	Y+5, r24	; 0x05
    409e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    40a0:	0f 90       	pop	r0
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	cf 91       	pop	r28
    40ac:	df 91       	pop	r29
    40ae:	08 95       	ret

000040b0 <main>:
#include "MCAL/Timer/timer.h"
#include "MCAL/External_Interrupt/External_Interrupt.h"
#include "util/delay.h"

void main()
	{
    40b0:	df 93       	push	r29
    40b2:	cf 93       	push	r28
    40b4:	cd b7       	in	r28, 0x3d	; 61
    40b6:	de b7       	in	r29, 0x3e	; 62
    40b8:	60 97       	sbiw	r28, 0x10	; 16
    40ba:	0f b6       	in	r0, 0x3f	; 63
    40bc:	f8 94       	cli
    40be:	de bf       	out	0x3e, r29	; 62
    40c0:	0f be       	out	0x3f, r0	; 63
    40c2:	cd bf       	out	0x3d, r28	; 61
			u16 counter;
			Timer1_init();
    40c4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Timer1_init>
			DIO_SetPinDirection(DIO_PORTD,5,DIO_OUTPUT);//OC1 pin5 PortD O/p
    40c8:	83 e0       	ldi	r24, 0x03	; 3
    40ca:	65 e0       	ldi	r22, 0x05	; 5
    40cc:	41 e0       	ldi	r20, 0x01	; 1
    40ce:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
			Timer1_SetICR1_TopValue(20000);
    40d2:	80 e2       	ldi	r24, 0x20	; 32
    40d4:	9e e4       	ldi	r25, 0x4E	; 78
    40d6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <Timer1_SetICR1_TopValue>


			while(1)
				{

					for(counter=120;counter<=250;counter++)
    40da:	88 e7       	ldi	r24, 0x78	; 120
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	98 8b       	std	Y+16, r25	; 0x10
    40e0:	8f 87       	std	Y+15, r24	; 0x0f
    40e2:	7b c0       	rjmp	.+246    	; 0x41da <main+0x12a>
					{
						 Timer1_SetValueChannelA(counter);
    40e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e6:	98 89       	ldd	r25, Y+16	; 0x10
    40e8:	0e 94 32 08 	call	0x1064	; 0x1064 <Timer1_SetValueChannelA>
    40ec:	80 e0       	ldi	r24, 0x00	; 0
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	a0 e2       	ldi	r26, 0x20	; 32
    40f2:	b1 e4       	ldi	r27, 0x41	; 65
    40f4:	8b 87       	std	Y+11, r24	; 0x0b
    40f6:	9c 87       	std	Y+12, r25	; 0x0c
    40f8:	ad 87       	std	Y+13, r26	; 0x0d
    40fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    40fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4100:	8d 85       	ldd	r24, Y+13	; 0x0d
    4102:	9e 85       	ldd	r25, Y+14	; 0x0e
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	4a ef       	ldi	r20, 0xFA	; 250
    410a:	54 e4       	ldi	r21, 0x44	; 68
    410c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	8f 83       	std	Y+7, r24	; 0x07
    4116:	98 87       	std	Y+8, r25	; 0x08
    4118:	a9 87       	std	Y+9, r26	; 0x09
    411a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    411c:	6f 81       	ldd	r22, Y+7	; 0x07
    411e:	78 85       	ldd	r23, Y+8	; 0x08
    4120:	89 85       	ldd	r24, Y+9	; 0x09
    4122:	9a 85       	ldd	r25, Y+10	; 0x0a
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	40 e8       	ldi	r20, 0x80	; 128
    412a:	5f e3       	ldi	r21, 0x3F	; 63
    412c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4130:	88 23       	and	r24, r24
    4132:	2c f4       	brge	.+10     	; 0x413e <main+0x8e>
		__ticks = 1;
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	9e 83       	std	Y+6, r25	; 0x06
    413a:	8d 83       	std	Y+5, r24	; 0x05
    413c:	3f c0       	rjmp	.+126    	; 0x41bc <main+0x10c>
	else if (__tmp > 65535)
    413e:	6f 81       	ldd	r22, Y+7	; 0x07
    4140:	78 85       	ldd	r23, Y+8	; 0x08
    4142:	89 85       	ldd	r24, Y+9	; 0x09
    4144:	9a 85       	ldd	r25, Y+10	; 0x0a
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	3f ef       	ldi	r19, 0xFF	; 255
    414a:	4f e7       	ldi	r20, 0x7F	; 127
    414c:	57 e4       	ldi	r21, 0x47	; 71
    414e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4152:	18 16       	cp	r1, r24
    4154:	4c f5       	brge	.+82     	; 0x41a8 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4156:	6b 85       	ldd	r22, Y+11	; 0x0b
    4158:	7c 85       	ldd	r23, Y+12	; 0x0c
    415a:	8d 85       	ldd	r24, Y+13	; 0x0d
    415c:	9e 85       	ldd	r25, Y+14	; 0x0e
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	40 e2       	ldi	r20, 0x20	; 32
    4164:	51 e4       	ldi	r21, 0x41	; 65
    4166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	bc 01       	movw	r22, r24
    4170:	cd 01       	movw	r24, r26
    4172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	9e 83       	std	Y+6, r25	; 0x06
    417c:	8d 83       	std	Y+5, r24	; 0x05
    417e:	0f c0       	rjmp	.+30     	; 0x419e <main+0xee>
    4180:	88 ec       	ldi	r24, 0xC8	; 200
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	9c 83       	std	Y+4, r25	; 0x04
    4186:	8b 83       	std	Y+3, r24	; 0x03
    4188:	8b 81       	ldd	r24, Y+3	; 0x03
    418a:	9c 81       	ldd	r25, Y+4	; 0x04
    418c:	01 97       	sbiw	r24, 0x01	; 1
    418e:	f1 f7       	brne	.-4      	; 0x418c <main+0xdc>
    4190:	9c 83       	std	Y+4, r25	; 0x04
    4192:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4194:	8d 81       	ldd	r24, Y+5	; 0x05
    4196:	9e 81       	ldd	r25, Y+6	; 0x06
    4198:	01 97       	sbiw	r24, 0x01	; 1
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419e:	8d 81       	ldd	r24, Y+5	; 0x05
    41a0:	9e 81       	ldd	r25, Y+6	; 0x06
    41a2:	00 97       	sbiw	r24, 0x00	; 0
    41a4:	69 f7       	brne	.-38     	; 0x4180 <main+0xd0>
    41a6:	14 c0       	rjmp	.+40     	; 0x41d0 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a8:	6f 81       	ldd	r22, Y+7	; 0x07
    41aa:	78 85       	ldd	r23, Y+8	; 0x08
    41ac:	89 85       	ldd	r24, Y+9	; 0x09
    41ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b4:	dc 01       	movw	r26, r24
    41b6:	cb 01       	movw	r24, r22
    41b8:	9e 83       	std	Y+6, r25	; 0x06
    41ba:	8d 83       	std	Y+5, r24	; 0x05
    41bc:	8d 81       	ldd	r24, Y+5	; 0x05
    41be:	9e 81       	ldd	r25, Y+6	; 0x06
    41c0:	9a 83       	std	Y+2, r25	; 0x02
    41c2:	89 83       	std	Y+1, r24	; 0x01
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	9a 81       	ldd	r25, Y+2	; 0x02
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	f1 f7       	brne	.-4      	; 0x41c8 <main+0x118>
    41cc:	9a 83       	std	Y+2, r25	; 0x02
    41ce:	89 83       	std	Y+1, r24	; 0x01


			while(1)
				{

					for(counter=120;counter<=250;counter++)
    41d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    41d2:	98 89       	ldd	r25, Y+16	; 0x10
    41d4:	01 96       	adiw	r24, 0x01	; 1
    41d6:	98 8b       	std	Y+16, r25	; 0x10
    41d8:	8f 87       	std	Y+15, r24	; 0x0f
    41da:	8f 85       	ldd	r24, Y+15	; 0x0f
    41dc:	98 89       	ldd	r25, Y+16	; 0x10
    41de:	8b 3f       	cpi	r24, 0xFB	; 251
    41e0:	91 05       	cpc	r25, r1
    41e2:	08 f4       	brcc	.+2      	; 0x41e6 <main+0x136>
    41e4:	7f cf       	rjmp	.-258    	; 0x40e4 <main+0x34>
    41e6:	79 cf       	rjmp	.-270    	; 0x40da <main+0x2a>

000041e8 <__divmodsi4>:
    41e8:	97 fb       	bst	r25, 7
    41ea:	09 2e       	mov	r0, r25
    41ec:	05 26       	eor	r0, r21
    41ee:	0e d0       	rcall	.+28     	; 0x420c <__divmodsi4_neg1>
    41f0:	57 fd       	sbrc	r21, 7
    41f2:	04 d0       	rcall	.+8      	; 0x41fc <__divmodsi4_neg2>
    41f4:	14 d0       	rcall	.+40     	; 0x421e <__udivmodsi4>
    41f6:	0a d0       	rcall	.+20     	; 0x420c <__divmodsi4_neg1>
    41f8:	00 1c       	adc	r0, r0
    41fa:	38 f4       	brcc	.+14     	; 0x420a <__divmodsi4_exit>

000041fc <__divmodsi4_neg2>:
    41fc:	50 95       	com	r21
    41fe:	40 95       	com	r20
    4200:	30 95       	com	r19
    4202:	21 95       	neg	r18
    4204:	3f 4f       	sbci	r19, 0xFF	; 255
    4206:	4f 4f       	sbci	r20, 0xFF	; 255
    4208:	5f 4f       	sbci	r21, 0xFF	; 255

0000420a <__divmodsi4_exit>:
    420a:	08 95       	ret

0000420c <__divmodsi4_neg1>:
    420c:	f6 f7       	brtc	.-4      	; 0x420a <__divmodsi4_exit>
    420e:	90 95       	com	r25
    4210:	80 95       	com	r24
    4212:	70 95       	com	r23
    4214:	61 95       	neg	r22
    4216:	7f 4f       	sbci	r23, 0xFF	; 255
    4218:	8f 4f       	sbci	r24, 0xFF	; 255
    421a:	9f 4f       	sbci	r25, 0xFF	; 255
    421c:	08 95       	ret

0000421e <__udivmodsi4>:
    421e:	a1 e2       	ldi	r26, 0x21	; 33
    4220:	1a 2e       	mov	r1, r26
    4222:	aa 1b       	sub	r26, r26
    4224:	bb 1b       	sub	r27, r27
    4226:	fd 01       	movw	r30, r26
    4228:	0d c0       	rjmp	.+26     	; 0x4244 <__udivmodsi4_ep>

0000422a <__udivmodsi4_loop>:
    422a:	aa 1f       	adc	r26, r26
    422c:	bb 1f       	adc	r27, r27
    422e:	ee 1f       	adc	r30, r30
    4230:	ff 1f       	adc	r31, r31
    4232:	a2 17       	cp	r26, r18
    4234:	b3 07       	cpc	r27, r19
    4236:	e4 07       	cpc	r30, r20
    4238:	f5 07       	cpc	r31, r21
    423a:	20 f0       	brcs	.+8      	; 0x4244 <__udivmodsi4_ep>
    423c:	a2 1b       	sub	r26, r18
    423e:	b3 0b       	sbc	r27, r19
    4240:	e4 0b       	sbc	r30, r20
    4242:	f5 0b       	sbc	r31, r21

00004244 <__udivmodsi4_ep>:
    4244:	66 1f       	adc	r22, r22
    4246:	77 1f       	adc	r23, r23
    4248:	88 1f       	adc	r24, r24
    424a:	99 1f       	adc	r25, r25
    424c:	1a 94       	dec	r1
    424e:	69 f7       	brne	.-38     	; 0x422a <__udivmodsi4_loop>
    4250:	60 95       	com	r22
    4252:	70 95       	com	r23
    4254:	80 95       	com	r24
    4256:	90 95       	com	r25
    4258:	9b 01       	movw	r18, r22
    425a:	ac 01       	movw	r20, r24
    425c:	bd 01       	movw	r22, r26
    425e:	cf 01       	movw	r24, r30
    4260:	08 95       	ret

00004262 <__prologue_saves__>:
    4262:	2f 92       	push	r2
    4264:	3f 92       	push	r3
    4266:	4f 92       	push	r4
    4268:	5f 92       	push	r5
    426a:	6f 92       	push	r6
    426c:	7f 92       	push	r7
    426e:	8f 92       	push	r8
    4270:	9f 92       	push	r9
    4272:	af 92       	push	r10
    4274:	bf 92       	push	r11
    4276:	cf 92       	push	r12
    4278:	df 92       	push	r13
    427a:	ef 92       	push	r14
    427c:	ff 92       	push	r15
    427e:	0f 93       	push	r16
    4280:	1f 93       	push	r17
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	cd b7       	in	r28, 0x3d	; 61
    4288:	de b7       	in	r29, 0x3e	; 62
    428a:	ca 1b       	sub	r28, r26
    428c:	db 0b       	sbc	r29, r27
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	f8 94       	cli
    4292:	de bf       	out	0x3e, r29	; 62
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	cd bf       	out	0x3d, r28	; 61
    4298:	09 94       	ijmp

0000429a <__epilogue_restores__>:
    429a:	2a 88       	ldd	r2, Y+18	; 0x12
    429c:	39 88       	ldd	r3, Y+17	; 0x11
    429e:	48 88       	ldd	r4, Y+16	; 0x10
    42a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    42a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    42a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    42a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    42a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    42aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    42ac:	b9 84       	ldd	r11, Y+9	; 0x09
    42ae:	c8 84       	ldd	r12, Y+8	; 0x08
    42b0:	df 80       	ldd	r13, Y+7	; 0x07
    42b2:	ee 80       	ldd	r14, Y+6	; 0x06
    42b4:	fd 80       	ldd	r15, Y+5	; 0x05
    42b6:	0c 81       	ldd	r16, Y+4	; 0x04
    42b8:	1b 81       	ldd	r17, Y+3	; 0x03
    42ba:	aa 81       	ldd	r26, Y+2	; 0x02
    42bc:	b9 81       	ldd	r27, Y+1	; 0x01
    42be:	ce 0f       	add	r28, r30
    42c0:	d1 1d       	adc	r29, r1
    42c2:	0f b6       	in	r0, 0x3f	; 63
    42c4:	f8 94       	cli
    42c6:	de bf       	out	0x3e, r29	; 62
    42c8:	0f be       	out	0x3f, r0	; 63
    42ca:	cd bf       	out	0x3d, r28	; 61
    42cc:	ed 01       	movw	r28, r26
    42ce:	08 95       	ret

000042d0 <_exit>:
    42d0:	f8 94       	cli

000042d2 <__stop_program>:
    42d2:	ff cf       	rjmp	.-2      	; 0x42d2 <__stop_program>
