
I2C_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00005bf4  00005c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800180  00800180  00005da8  2**0
                  ALLOC
  3 .stab         00006600  00000000  00000000  00005da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f90  00000000  00000000  0000c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000f70c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00011d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000131ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000144f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000146d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000149df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000153f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__vector_1>
       8:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__vector_2>
       c:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__vector_3>
      10:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_4>
      14:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_5>
      18:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_6>
      1c:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_7>
      20:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_8>
      24:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__vector_9>
      28:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_10>
      2c:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_11>
      30:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_12>
      34:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_13>
      38:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_14>
      3c:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_15>
      40:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	fb e5       	ldi	r31, 0x5B	; 91
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <main>
      8a:	0c 94 f8 2d 	jmp	0x5bf0	; 0x5bf0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 2d 	jmp	0x5b82	; 0x5b82 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 2d 	jmp	0x5bba	; 0x5bba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 2d 	jmp	0x5b9a	; 0x5b9a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 2d 	jmp	0x5b9a	; 0x5b9a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 2d 	jmp	0x5b82	; 0x5b82 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 2d 	jmp	0x5bba	; 0x5bba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 2d 	jmp	0x5b92	; 0x5b92 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e5 2d 	jmp	0x5bca	; 0x5bca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cd 2d 	jmp	0x5b9a	; 0x5b9a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cd 2d 	jmp	0x5b9a	; 0x5b9a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cd 2d 	jmp	0x5b9a	; 0x5b9a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ca 2d 	jmp	0x5b94	; 0x5b94 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 e6 2d 	jmp	0x5bcc	; 0x5bcc <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 d1 2d 	jmp	0x5ba2	; 0x5ba2 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ed 2d 	jmp	0x5bda	; 0x5bda <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 c9 2d 	jmp	0x5b92	; 0x5b92 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 e5 2d 	jmp	0x5bca	; 0x5bca <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <USART_init>:
static void (*TXC_CallBackFunc)(void);
static void (*RXC_CallBackFunc)(void);
static void (*UDRE_CallBackFunc)(void);

void USART_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <USART_init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
   u16 UBBR_Temp = 0;
     ef4:	1a 82       	std	Y+2, r1	; 0x02
     ef6:	19 82       	std	Y+1, r1	; 0x01
	//Enable USART Mode
	#if defined USART_Tx_Only
	SET_BIT(UCSRB,TXEN);
     ef8:	aa e2       	ldi	r26, 0x2A	; 42
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ea e2       	ldi	r30, 0x2A	; 42
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	8c 93       	st	X, r24
	#elif defined USART_Rx_InterruptEnable
    SET_BIT(UCSRB,RXCIE);
	#elif defined USART_Tx_InterruptEnable
    SET_BIT(UCSRB,TXCIE);
	#elif defined USART_UDRE_InterruptEnable
    SET_BIT(UCSRB,UDRIE);
     f06:	aa e2       	ldi	r26, 0x2A	; 42
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea e2       	ldi	r30, 0x2A	; 42
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	8c 93       	st	X, r24
    SET_BIT(UCSRB,TXCIE);
    SET_BIT(UCSRB,UDRIE);
	#endif
    //ProcessorType
	#if defined USART_SingleProcessor
    CLEAR_BIT(UCSRA,MPCM);
     f14:	ab e2       	ldi	r26, 0x2B	; 43
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	eb e2       	ldi	r30, 0x2B	; 43
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8e 7f       	andi	r24, 0xFE	; 254
     f20:	8c 93       	st	X, r24
    SET_BIT(UCSRA,MPCM);
    #endif

    //OperationMode
    #if defined USART_Asynchronus_NormalSpeed
    UBBR_Temp=((f32)F_CPU) /((16.0)*(BaudRate))-0.5;
     f22:	83 e3       	ldi	r24, 0x33	; 51
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(UCSRC,URSEL);
     f2a:	a0 e4       	ldi	r26, 0x40	; 64
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e0 e4       	ldi	r30, 0x40	; 64
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 68       	ori	r24, 0x80	; 128
     f36:	8c 93       	st	X, r24
    SET_BIT(UCSRC,URSEL);
    SET_BIT(UCSRC,UMSEL);
	#endif

    //Set BaudRate Value in UBRR Register
    UBRRH = (u16)(UBBR_Temp>>8);
     f38:	e0 e4       	ldi	r30, 0x40	; 64
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	89 2f       	mov	r24, r25
     f42:	99 27       	eor	r25, r25
     f44:	80 83       	st	Z, r24
    UBRRL = (u8)UBBR_Temp;
     f46:	e9 e2       	ldi	r30, 0x29	; 41
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	80 83       	st	Z, r24

    //ClockPolarity
	#if defined USART_Recieve_Sample_OnFalling_Transmit_Sample_OnRising
    CLEAR_BIT(UCSRC,UCPOL);
	#elif defined USART_Recieve_Sample_OnRising_Transmit_Sample_OnFalling
    SET_BIT(UCSRC,UCPOL);
     f4e:	a0 e4       	ldi	r26, 0x40	; 64
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	8c 93       	st	X, r24
    #endif
    //ControlFrame
    //StopBit Number
    #if defined USART_Frame_1StopBit
    CLEAR_BIT(UCSRC,USBS);
     f5c:	a0 e4       	ldi	r26, 0x40	; 64
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e0 e4       	ldi	r30, 0x40	; 64
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	87 7f       	andi	r24, 0xF7	; 247
     f68:	8c 93       	st	X, r24
    #elif defined USART_Frame_2StopBit
    SET_BIT(UCSRC,USBS);
    #endif
    //Parity
    #if defined USART_Frame_DisableParity
    CLEAR_BIT(UCSRC,UPM0);
     f6a:	a0 e4       	ldi	r26, 0x40	; 64
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e0 e4       	ldi	r30, 0x40	; 64
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8f 7e       	andi	r24, 0xEF	; 239
     f76:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC,UPM1);
     f78:	a0 e4       	ldi	r26, 0x40	; 64
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e0 e4       	ldi	r30, 0x40	; 64
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 7d       	andi	r24, 0xDF	; 223
     f84:	8c 93       	st	X, r24
	#elif defined USART_7DataBit
    CLEAR_BIT(UCSRC,UCSZ0);
    SET_BIT(UCSRC,UCSZ1);
    CLEAR_BIT(UCSRC,UCSZ2);
	#elif defined USART_8DataBit
    SET_BIT(UCSRC,UCSZ0);
     f86:	a0 e4       	ldi	r26, 0x40	; 64
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e0 e4       	ldi	r30, 0x40	; 64
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	8c 93       	st	X, r24
    SET_BIT(UCSRC,UCSZ1);
     f94:	a0 e4       	ldi	r26, 0x40	; 64
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e0 e4       	ldi	r30, 0x40	; 64
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC,UCSZ2);
     fa2:	a0 e4       	ldi	r26, 0x40	; 64
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e0 e4       	ldi	r30, 0x40	; 64
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8b 7f       	andi	r24, 0xFB	; 251
     fae:	8c 93       	st	X, r24
    SET_BIT(UCSRC,UCSZ0);
    SET_BIT(UCSRC,UCSZ1);
    SET_BIT(UCSRC,UCSZ2);
    #endif

}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <USART_Transmit_Data_Polling>:

void USART_Transmit_Data_Polling(u8 Tx_Data)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01
	/* by using interrupt method when the UDRE ready and equal 1 start to transmit*/
	while(IS_BIT_CLEAR(UCSRA, UDRE));
     fc6:	eb e2       	ldi	r30, 0x2B	; 43
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	80 72       	andi	r24, 0x20	; 32
     fd2:	90 70       	andi	r25, 0x00	; 0
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	b9 f3       	breq	.-18     	; 0xfc6 <USART_Transmit_Data_Polling+0xc>
		#elif defined USART_6DataBit
		UDR = Tx_Data;
		#elif defined USART_7DataBit
		UDR = Tx_Data;
		#elif defined USART_8DataBit
		UDR = Tx_Data;
     fd8:	ec e2       	ldi	r30, 0x2C	; 44
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	80 83       	st	Z, r24
		/*Clear bit of TXB8 and select bit no of Data 9 and shifted it TXB8 bit*/
		UCSRB |= (UCSRB & CLEAR_TXB8) | ((Tx_Data&(Select_bit_9))>>Shift_No_from_9th_DataBit_to_TXB8_bit);
		/*Rest of 9 bit data stored in the UDR Register*/
		UDR = Tx_Data;
		#endif
}
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <USART_Receive_Data_Polling>:
STD_Return USART_Receive_Data_Polling(u8 *Rx_Data)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <USART_Receive_Data_Polling+0x6>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01

	while(IS_BIT_CLEAR(UCSRA,RXC));
     ff8:	eb e2       	ldi	r30, 0x2B	; 43
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	88 23       	and	r24, r24
    1000:	dc f7       	brge	.-10     	; 0xff8 <USART_Receive_Data_Polling+0x10>
		//Error found solve by users
			if ((IS_BIT_SET(UCSRA,FE))||(IS_BIT_SET(UCSRA,DOR))||(IS_BIT_SET(UCSRA,PE)))
    1002:	eb e2       	ldi	r30, 0x2B	; 43
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	80 71       	andi	r24, 0x10	; 16
    100e:	90 70       	andi	r25, 0x00	; 0
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	91 f4       	brne	.+36     	; 0x1038 <USART_Receive_Data_Polling+0x50>
    1014:	eb e2       	ldi	r30, 0x2B	; 43
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	88 70       	andi	r24, 0x08	; 8
    1020:	90 70       	andi	r25, 0x00	; 0
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	49 f4       	brne	.+18     	; 0x1038 <USART_Receive_Data_Polling+0x50>
    1026:	eb e2       	ldi	r30, 0x2B	; 43
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	84 70       	andi	r24, 0x04	; 4
    1032:	90 70       	andi	r25, 0x00	; 0
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	11 f0       	breq	.+4      	; 0x103c <USART_Receive_Data_Polling+0x54>
			{
				return E_OK;
    1038:	1b 82       	std	Y+3, r1	; 0x03
    103a:	08 c0       	rjmp	.+16     	; 0x104c <USART_Receive_Data_Polling+0x64>
					#elif defined USART_6DataBit
					*Rx_Data = UDR;
					#elif defined USART_7DataBit
					*Rx_Data = UDR;
					#elif defined USART_8DataBit
					*Rx_Data = UDR;
    103c:	ec e2       	ldi	r30, 0x2C	; 44
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	e9 81       	ldd	r30, Y+1	; 0x01
    1044:	fa 81       	ldd	r31, Y+2	; 0x02
    1046:	80 83       	st	Z, r24
					#elif defined USART_9DataBit
					*Rx_Data |= ((UCSRB&Select_bit_RXB8)<<Shift_No_from_RXB8_to_9th_DataBit);
					*Rx_Data |= UDR;
					#endif
	}
	return E_NOK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	8b 83       	std	Y+3, r24	; 0x03
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <USART_Transmit_Data_Interrupt>:

void USART_Transmit_Data_Interrupt(u8 Tx_Data)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
	#elif defined USART_6DataBit
	UDR = Tx_Data;
	#elif defined USART_7DataBit
	UDR = Tx_Data;
	#elif defined USART_8DataBit
	UDR = Tx_Data;
    1066:	ec e2       	ldi	r30, 0x2C	; 44
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	80 83       	st	Z, r24
	UCSRB |= (UCSRB & CLEAR_TXB8) | ((Tx_Data&(Select_bit_9))>>Shift_No_from_9th_DataBit_to_TXB8_bit);
	/*Rest of 9 bit data stored in the UDR Register*/
	UDR = Tx_Data;
	#endif

}
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <USART_Receive_Data_Interrupt>:
STD_Return USART_Receive_Data_Interrupt(u8 *Rx_Data)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <USART_Receive_Data_Interrupt+0x6>
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
		//Error found solve by users
			if ((IS_BIT_SET(UCSRA,FE))||(IS_BIT_SET(UCSRA,DOR))||(IS_BIT_SET(UCSRA,PE)))
    1086:	eb e2       	ldi	r30, 0x2B	; 43
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	80 71       	andi	r24, 0x10	; 16
    1092:	90 70       	andi	r25, 0x00	; 0
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	91 f4       	brne	.+36     	; 0x10bc <USART_Receive_Data_Interrupt+0x46>
    1098:	eb e2       	ldi	r30, 0x2B	; 43
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	88 70       	andi	r24, 0x08	; 8
    10a4:	90 70       	andi	r25, 0x00	; 0
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	49 f4       	brne	.+18     	; 0x10bc <USART_Receive_Data_Interrupt+0x46>
    10aa:	eb e2       	ldi	r30, 0x2B	; 43
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	84 70       	andi	r24, 0x04	; 4
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <USART_Receive_Data_Interrupt+0x4a>
			{
				return E_OK;
    10bc:	1b 82       	std	Y+3, r1	; 0x03
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <USART_Receive_Data_Interrupt+0x5a>
					#elif defined USART_6DataBit
					*Rx_Data = UDR;
					#elif defined USART_7DataBit
					*Rx_Data = UDR;
					#elif defined USART_8DataBit
					*Rx_Data = UDR;
    10c0:	ec e2       	ldi	r30, 0x2C	; 44
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	e9 81       	ldd	r30, Y+1	; 0x01
    10c8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
					#elif defined USART_9DataBit
					*Rx_Data |= ((UCSRB&Select_bit_RXB8)<<Shift_No_from_RXB8_to_9th_DataBit);
					*Rx_Data |= UDR;
					#endif
			}
	return E_NOK;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	8b 83       	std	Y+3, r24	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <TXC_Callback>:
void TXC_Callback(void(*Func_PTR)(void))
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <TXC_Callback+0x6>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	TXC_CallBackFunc = Func_PTR;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	90 93 81 01 	sts	0x0181, r25
    10f4:	80 93 80 01 	sts	0x0180, r24
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <__vector_15>:
ISR(USART_TXC_vect)
{
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	(*TXC_CallBackFunc)();
    112c:	e0 91 80 01 	lds	r30, 0x0180
    1130:	f0 91 81 01 	lds	r31, 0x0181
    1134:	09 95       	icall
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <RXC_Callback>:

void RXC_Callback(void(*Func_PTR)(void))
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <RXC_Callback+0x6>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	9a 83       	std	Y+2, r25	; 0x02
    1168:	89 83       	std	Y+1, r24	; 0x01
	RXC_CallBackFunc = Func_PTR;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	90 93 83 01 	sts	0x0183, r25
    1172:	80 93 82 01 	sts	0x0182, r24
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <__vector_13>:
ISR(USART_RXC_vect)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	(*RXC_CallBackFunc)();
    11aa:	e0 91 82 01 	lds	r30, 0x0182
    11ae:	f0 91 83 01 	lds	r31, 0x0183
    11b2:	09 95       	icall
}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <UDRE_Callback>:

void UDRE_Callback(void(*Func_PTR)(void))
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <UDRE_Callback+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
	UDRE_CallBackFunc = Func_PTR;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	90 93 85 01 	sts	0x0185, r25
    11f0:	80 93 84 01 	sts	0x0184, r24
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <__vector_14>:

ISR(USART_UDRE_vect)
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	(*UDRE_CallBackFunc)();
    1228:	e0 91 84 01 	lds	r30, 0x0184
    122c:	f0 91 85 01 	lds	r31, 0x0185
    1230:	09 95       	icall
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti

00001258 <Timer0_init>:
static void (*Timer1_ICU_CallBackFunc)(void);
static void (*Timer2_OVF_CallBack_Func)(void);
static void (*Timer2_CTC_CallBack_Func)(void);

void Timer0_init(void)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
						SET_BIT(TCCR0,COM00);
						SET_BIT(TCCR0,COM01);
		#endif

#elif  defined Timer0_Fast_PWM_Mode
		SET_BIT(TCCR0,WGM00);
    1260:	a3 e5       	ldi	r26, 0x53	; 83
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e3 e5       	ldi	r30, 0x53	; 83
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 64       	ori	r24, 0x40	; 64
    126c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    126e:	a3 e5       	ldi	r26, 0x53	; 83
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e3 e5       	ldi	r30, 0x53	; 83
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	88 60       	ori	r24, 0x08	; 8
    127a:	8c 93       	st	X, r24
		/*OC0 -> PINB3 in Atmega32*/
		#if defined Normal_PORT_Operation //OC0 Disconnected
				CLEAR_BIT(TCCR0,COM00);
				CLEAR_BIT(TCCR0,COM01);
		#elif defined ClearCompareMatch_SetTop_OCO	//Non_Inverted Mode
				CLEAR_BIT(TCCR0,COM00);
    127c:	a3 e5       	ldi	r26, 0x53	; 83
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e3 e5       	ldi	r30, 0x53	; 83
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8f 7e       	andi	r24, 0xEF	; 239
    1288:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
    128a:	a3 e5       	ldi	r26, 0x53	; 83
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e3 e5       	ldi	r30, 0x53	; 83
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_No_Prescaler
				SET_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
		#elif defined Timer0_CLK_8_Prescaler
				CLEAR_BIT(TCCR0,CS00);
    1298:	a3 e5       	ldi	r26, 0x53	; 83
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e3 e5       	ldi	r30, 0x53	; 83
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8e 7f       	andi	r24, 0xFE	; 254
    12a4:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    12a6:	a3 e5       	ldi	r26, 0x53	; 83
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e3 e5       	ldi	r30, 0x53	; 83
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
    12b4:	a3 e5       	ldi	r26, 0x53	; 83
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e3 e5       	ldi	r30, 0x53	; 83
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8b 7f       	andi	r24, 0xFB	; 251
    12c0:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_External_RisingEdge_CounterMode //On Pin T0
				SET_BIT(TCCR0,CS00);
				SET_BIT(TCCR0,CS01);
				SET_BIT(TCCR0,CS02);
		#endif
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <Timer0_SetValue>:
void Timer0_SetValue(u8 Value)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	0f 92       	push	r0
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer0_CTC_Timer_Mode
	OCR0 = Value; //Set Compare Output Value
#elif defined Timer0_PhaseCorrect_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer0_Fast_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
    12d4:	ec e5       	ldi	r30, 0x5C	; 92
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	80 83       	st	Z, r24
#endif
}
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <Timer0_CallBack>:

void Timer0_CallBack(void (*FUNC_PTR)(void))
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <Timer0_CallBack+0x6>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer0_Normal_Timer_Mode
		Timer0_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer0_CTC_Timer_Mode
		Timer0_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	Timer0_OVF_CallBack_Func();
    1326:	e0 91 86 01 	lds	r30, 0x0186
    132a:	f0 91 87 01 	lds	r31, 0x0187
    132e:	09 95       	icall
}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	ff 91       	pop	r31
    1336:	ef 91       	pop	r30
    1338:	bf 91       	pop	r27
    133a:	af 91       	pop	r26
    133c:	9f 91       	pop	r25
    133e:	8f 91       	pop	r24
    1340:	7f 91       	pop	r23
    1342:	6f 91       	pop	r22
    1344:	5f 91       	pop	r21
    1346:	4f 91       	pop	r20
    1348:	3f 91       	pop	r19
    134a:	2f 91       	pop	r18
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_CallBack_Func();
    1380:	e0 91 88 01 	lds	r30, 0x0188
    1384:	f0 91 89 01 	lds	r31, 0x0189
    1388:	09 95       	icall
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <Timer1_init>:


void Timer1_init(void)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	#elif defined Timer1_CLK_No_Prescaler
			SET_BIT(TCCR1B,CS10);
			CLEAR_BIT(TCCR1B,CS11);
			CLEAR_BIT(TCCR1B,CS12);
	#elif defined Timer1_CLK_8_Prescaler
			CLEAR_BIT(TCCR1B,CS10);
    13b8:	ae e4       	ldi	r26, 0x4E	; 78
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ee e4       	ldi	r30, 0x4E	; 78
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8e 7f       	andi	r24, 0xFE	; 254
    13c4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    13c6:	ae e4       	ldi	r26, 0x4E	; 78
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ee e4       	ldi	r30, 0x4E	; 78
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	82 60       	ori	r24, 0x02	; 2
    13d2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS12);
    13d4:	ae e4       	ldi	r26, 0x4E	; 78
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ee e4       	ldi	r30, 0x4E	; 78
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8b 7f       	andi	r24, 0xFB	; 251
    13e0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
	#endif

/*********************************WaveMode Generation Mode Selection************************************/
#if defined Timer1_Normal_Timer_Mode
				CLEAR_BIT(TCCR1A,WGM10);
    13e2:	af e4       	ldi	r26, 0x4F	; 79
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ef e4       	ldi	r30, 0x4F	; 79
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8e 7f       	andi	r24, 0xFE	; 254
    13ee:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    13f0:	af e4       	ldi	r26, 0x4F	; 79
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ef e4       	ldi	r30, 0x4F	; 79
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8d 7f       	andi	r24, 0xFD	; 253
    13fc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM12);
    13fe:	ae e4       	ldi	r26, 0x4E	; 78
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ee e4       	ldi	r30, 0x4E	; 78
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	87 7f       	andi	r24, 0xF7	; 247
    140a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    140c:	ae e4       	ldi	r26, 0x4E	; 78
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ee e4       	ldi	r30, 0x4E	; 78
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7e       	andi	r24, 0xEF	; 239
    1418:	8c 93       	st	X, r24
				SET_BIT(TIMSK,TOIE1);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	84 60       	ori	r24, 0x04	; 4
    1426:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
			CLEAR_BIT(TCCR1A,WGM11);
			SET_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
#endif
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <Timer1_SetValueChannelA>:

void Timer1_SetValueChannelA(u16 Value)	//to Set value of timer ChannelA
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <Timer1_SetValueChannelA+0x6>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
#if defined TIMER1_ChannelA
	#if defined Timer1_Normal_Timer_Mode
		TCNT1 = Value; //Set Overflow Value
    143c:	ec e4       	ldi	r30, 0x4C	; 76
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
		OCR1A = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelA
		OCR1A=Value;
	#endif
#endif
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <Timer1_SetValueChannelB>:
void Timer1_SetValueChannelB(u16 Value)	//to Set value of timer ChannelB
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <Timer1_SetValueChannelB+0x6>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelB
		OCR1B=Value;
	#endif
#endif
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <Timer1_ReadValueChannelA>:

void Timer1_ReadValueChannelA(u16 *value)	//to Read value of timer
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <Timer1_ReadValueChannelA+0x6>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
#if defined TIMER1_ChannelA
#if defined Timer1_Normal_Timer_Mode
	*value=TCNT1; //Set Overflow Value
    1478:	ec e4       	ldi	r30, 0x4C	; 76
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	80 83       	st	Z, r24
			*value=OCR1A;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
			*value=OCR1A;
#endif
#endif
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <Timer1_ReadValueChannelB>:

void Timer1_ReadValueChannelB(u16 *value)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <Timer1_ReadValueChannelB+0x6>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
	*value=OCR1B;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
	*value=OCR1B;
#endif
#endif
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <Timer1_ICU_EdgeSelection>:

STD_Return Timer1_ICU_EdgeSelection(ICU_Edge_Control_t State) //for Edge Selection which ICU will used
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <Timer1_ICU_EdgeSelection+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <Timer1_ICU_EdgeSelection+0x8>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3c 83       	std	Y+4, r19	; 0x04
    14c0:	2b 83       	std	Y+3, r18	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f0       	breq	.+26     	; 0x14e4 <Timer1_ICU_EdgeSelection+0x3a>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	21 30       	cpi	r18, 0x01	; 1
    14d0:	31 05       	cpc	r19, r1
    14d2:	81 f4       	brne	.+32     	; 0x14f4 <Timer1_ICU_EdgeSelection+0x4a>
	{
		case ICU_Rising_Edge:
			SET_BIT(TCCR1B,ICES1);
    14d4:	ae e4       	ldi	r26, 0x4E	; 78
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ee e4       	ldi	r30, 0x4E	; 78
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 64       	ori	r24, 0x40	; 64
    14e0:	8c 93       	st	X, r24
    14e2:	0a c0       	rjmp	.+20     	; 0x14f8 <Timer1_ICU_EdgeSelection+0x4e>
			break;
		case ICU_Falling_Edge:
			CLEAR_BIT(TCCR1B,ICES1);
    14e4:	ae e4       	ldi	r26, 0x4E	; 78
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ee e4       	ldi	r30, 0x4E	; 78
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7b       	andi	r24, 0xBF	; 191
    14f0:	8c 93       	st	X, r24
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <Timer1_ICU_EdgeSelection+0x4e>
			break;
		default:
			return E_OK;
    14f4:	1a 82       	std	Y+2, r1	; 0x02
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <Timer1_ICU_EdgeSelection+0x52>
	}
	return E_NOK;
    14f8:	31 e0       	ldi	r19, 0x01	; 1
    14fa:	3a 83       	std	Y+2, r19	; 0x02
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <Timer1_ICU_Interrupt>:
STD_Return Timer1_ICU_Interrupt(ICU_Interrupt_State State) //Enable or Disable ICU interrupt
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <Timer1_ICU_Interrupt+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <Timer1_ICU_Interrupt+0x8>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3c 83       	std	Y+4, r19	; 0x04
    1522:	2b 83       	std	Y+3, r18	; 0x03
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	31 f0       	breq	.+12     	; 0x1538 <Timer1_ICU_Interrupt+0x2c>
    152c:	2b 81       	ldd	r18, Y+3	; 0x03
    152e:	3c 81       	ldd	r19, Y+4	; 0x04
    1530:	21 30       	cpi	r18, 0x01	; 1
    1532:	31 05       	cpc	r19, r1
    1534:	49 f0       	breq	.+18     	; 0x1548 <Timer1_ICU_Interrupt+0x3c>
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <Timer1_ICU_Interrupt+0x4c>
	{
	//receive the ICU  result on the ICP pin => pin 6 portD
	case Enable_ICU_Interrupt:
		//Enable Input Capture Interrupt
		SET_BIT(TIMSK,TICIE1);
    1538:	a9 e5       	ldi	r26, 0x59	; 89
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e9 e5       	ldi	r30, 0x59	; 89
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 62       	ori	r24, 0x20	; 32
    1544:	8c 93       	st	X, r24
    1546:	0a c0       	rjmp	.+20     	; 0x155c <Timer1_ICU_Interrupt+0x50>
		break;
	case Disable_ICU_Interrupt:
		//disable Input Capture Interrupt
		CLEAR_BIT(TIMSK,TICIE1);
    1548:	a9 e5       	ldi	r26, 0x59	; 89
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e9 e5       	ldi	r30, 0x59	; 89
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8f 7d       	andi	r24, 0xDF	; 223
    1554:	8c 93       	st	X, r24
    1556:	02 c0       	rjmp	.+4      	; 0x155c <Timer1_ICU_Interrupt+0x50>
		break;
	default:
		return E_OK;
    1558:	1a 82       	std	Y+2, r1	; 0x02
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <Timer1_ICU_Interrupt+0x54>
	}
return E_NOK;
    155c:	31 e0       	ldi	r19, 0x01	; 1
    155e:	3a 83       	std	Y+2, r19	; 0x02
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <Timer1_SetICR1_TopValue>:

void Timer1_SetICR1_TopValue(u16 Top_Value) //ICR1
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Timer1_SetICR1_TopValue+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Top_Value;
    157e:	e6 e4       	ldi	r30, 0x46	; 70
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <Timer1_Read_ICR_Value>:

void Timer1_Read_ICR_Value(u16  *value)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <Timer1_Read_ICR_Value+0x6>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
	//Store value of InputCaptureRegister & get it back
	*value=ICR1;
    15a2:	e6 e4       	ldi	r30, 0x46	; 70
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	e9 81       	ldd	r30, Y+1	; 0x01
    15ac:	fa 81       	ldd	r31, Y+2	; 0x02
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <ICU_CallBack_Func>:
void ICU_CallBack_Func(void(*PTR_Func)(void))
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <ICU_CallBack_Func+0x6>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_CallBackFunc=PTR_Func;
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	90 93 91 01 	sts	0x0191, r25
    15d2:	80 93 90 01 	sts	0x0190, r24
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <Timer1_CallBack>:

void Timer1_CallBack(void (*FUNC_PTR)(void))
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <Timer1_CallBack+0x6>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer1_Normal_Timer_Mode
	Timer1_OVF_CallBack_Func = FUNC_PTR;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	90 93 8b 01 	sts	0x018B, r25
    15f6:	80 93 8a 01 	sts	0x018A, r24
		Timer1_CTC_A_CallBack_Func = FUNC_PTR;
	#elif defined TIMER1_ChannelB
		Timer1_CTC_B_CallBack_Func = FUNC_PTR;
	#endif
		#endif
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <__vector_9>:
//ISR of OVF
ISR(TIMER1_OVF_vect)
{
    1604:	1f 92       	push	r1
    1606:	0f 92       	push	r0
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	0f 92       	push	r0
    160c:	11 24       	eor	r1, r1
    160e:	2f 93       	push	r18
    1610:	3f 93       	push	r19
    1612:	4f 93       	push	r20
    1614:	5f 93       	push	r21
    1616:	6f 93       	push	r22
    1618:	7f 93       	push	r23
    161a:	8f 93       	push	r24
    161c:	9f 93       	push	r25
    161e:	af 93       	push	r26
    1620:	bf 93       	push	r27
    1622:	ef 93       	push	r30
    1624:	ff 93       	push	r31
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
	Timer1_OVF_CallBack_Func();
    162e:	e0 91 8a 01 	lds	r30, 0x018A
    1632:	f0 91 8b 01 	lds	r31, 0x018B
    1636:	09 95       	icall
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <__vector_7>:
//ISR of COMP_ChannelA
ISR(TIMER1_COMPA_vect)
{
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	2f 93       	push	r18
    166a:	3f 93       	push	r19
    166c:	4f 93       	push	r20
    166e:	5f 93       	push	r21
    1670:	6f 93       	push	r22
    1672:	7f 93       	push	r23
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	af 93       	push	r26
    167a:	bf 93       	push	r27
    167c:	ef 93       	push	r30
    167e:	ff 93       	push	r31
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_A_CallBack_Func();
    1688:	e0 91 8c 01 	lds	r30, 0x018C
    168c:	f0 91 8d 01 	lds	r31, 0x018D
    1690:	09 95       	icall
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_8>:
//ISR of COMP_ChannelB
ISR(TIMER1_COMPB_vect)
{
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	2f 93       	push	r18
    16c4:	3f 93       	push	r19
    16c6:	4f 93       	push	r20
    16c8:	5f 93       	push	r21
    16ca:	6f 93       	push	r22
    16cc:	7f 93       	push	r23
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
    16d6:	ef 93       	push	r30
    16d8:	ff 93       	push	r31
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_B_CallBack_Func();
    16e2:	e0 91 8e 01 	lds	r30, 0x018E
    16e6:	f0 91 8f 01 	lds	r31, 0x018F
    16ea:	09 95       	icall
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_6>:
//ISR of ICU
ISR(TIMER1_ICU_vect)
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	Timer1_ICU_CallBackFunc();
    173c:	e0 91 90 01 	lds	r30, 0x0190
    1740:	f0 91 91 01 	lds	r31, 0x0191
    1744:	09 95       	icall
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <Timer2_init>:
void Timer2_init(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
		#elif defined Timer2_CLK_External_RisingEdge_CounterMode //On Pin T2
				SET_BIT(TCCR2,CS20);
				SET_BIT(TCCR2,CS21);
				SET_BIT(TCCR2,CS22);
		#endif
}
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <Timer2_SetValue>:
void Timer2_SetValue(u8 Value)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer2_PhaseCorrect_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer2_Fast_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#endif
}
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <Timer2_CallBack>:

void Timer2_CallBack(void (*FUNC_PTR)(void))
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <Timer2_CallBack+0x6>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	9a 83       	std	Y+2, r25	; 0x02
    179a:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer2_Normal_Timer_Mode
		Timer2_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer2_CTC_Timer_Mode
		Timer2_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	2f 93       	push	r18
    17b2:	3f 93       	push	r19
    17b4:	4f 93       	push	r20
    17b6:	5f 93       	push	r21
    17b8:	6f 93       	push	r22
    17ba:	7f 93       	push	r23
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	af 93       	push	r26
    17c2:	bf 93       	push	r27
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	Timer2_OVF_CallBack_Func();
    17d0:	e0 91 92 01 	lds	r30, 0x0192
    17d4:	f0 91 93 01 	lds	r31, 0x0193
    17d8:	09 95       	icall
}
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	ff 91       	pop	r31
    17e0:	ef 91       	pop	r30
    17e2:	bf 91       	pop	r27
    17e4:	af 91       	pop	r26
    17e6:	9f 91       	pop	r25
    17e8:	8f 91       	pop	r24
    17ea:	7f 91       	pop	r23
    17ec:	6f 91       	pop	r22
    17ee:	5f 91       	pop	r21
    17f0:	4f 91       	pop	r20
    17f2:	3f 91       	pop	r19
    17f4:	2f 91       	pop	r18
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
	Timer2_CTC_CallBack_Func();
    182a:	e0 91 94 01 	lds	r30, 0x0194
    182e:	f0 91 95 01 	lds	r31, 0x0195
    1832:	09 95       	icall
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <SPI_init>:
#include "SPI.h"

static void (*STC_Callback_Func)(void);

void SPI_init(void)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(SPCR,SPE);
    1862:	ad e2       	ldi	r26, 0x2D	; 45
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	ed e2       	ldi	r30, 0x2D	; 45
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	80 64       	ori	r24, 0x40	; 64
    186e:	8c 93       	st	X, r24
	    #if defined DataOrder_MSB
	    CLEAR_BIT(SPCR,DORD);	//leave it cleared by default or CLEAR_BIT
	    #elif defined DataOrder_LSB
	    SET_BIT(SPCR,DORD);
    1870:	ad e2       	ldi	r26, 0x2D	; 45
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ed e2       	ldi	r30, 0x2D	; 45
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 62       	ori	r24, 0x20	; 32
    187c:	8c 93       	st	X, r24
	    #endif

	    #if defined SCK_FREQUENCY_4
	    //leave it cleared by default
	    #elif defined SCK_FREQUENCY_16
	    SET_BIT(SPCR,SPR0);
    187e:	ad e2       	ldi	r26, 0x2D	; 45
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ed e2       	ldi	r30, 0x2D	; 45
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	8c 93       	st	X, r24
	    SET_BIT(SPCR,SPR0);
	    SET_BIT(SPCR,SPR1);
	    #endif

	    #if defined Leading_Edge_Rising_Trailling_Edge_Falling
			CLEAR_BIT(SPCR,CPOL);
    188c:	ad e2       	ldi	r26, 0x2D	; 45
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ed e2       	ldi	r30, 0x2D	; 45
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	87 7f       	andi	r24, 0xF7	; 247
    1898:	8c 93       	st	X, r24
			SET_BIT(SPCR,CPOL);
		#endif

		//Clock phase selection
		#if defined Receive_First_Send_Second
			CLEAR_BIT(SPCR,CPHA);
    189a:	ad e2       	ldi	r26, 0x2D	; 45
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ed e2       	ldi	r30, 0x2D	; 45
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8b 7f       	andi	r24, 0xFB	; 251
    18a6:	8c 93       	st	X, r24
		#elif defined Send_First_Receive_Second
			SET_BIT(SPCR,CPHA);
		#endif
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <SPI_Interrupt_State>:

STD_Return SPI_Interrupt_State(SPI_Interrupt_State_t state)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <SPI_Interrupt_State+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <SPI_Interrupt_State+0x8>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3c 83       	std	Y+4, r19	; 0x04
    18c4:	2b 83       	std	Y+3, r18	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	31 f0       	breq	.+12     	; 0x18da <SPI_Interrupt_State+0x2c>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	21 30       	cpi	r18, 0x01	; 1
    18d4:	31 05       	cpc	r19, r1
    18d6:	49 f0       	breq	.+18     	; 0x18ea <SPI_Interrupt_State+0x3c>
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <SPI_Interrupt_State+0x4c>
		{
			case SPI_Interrupt_Enable:
				SET_BIT(SPCR,SPIE);
    18da:	ad e2       	ldi	r26, 0x2D	; 45
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ed e2       	ldi	r30, 0x2D	; 45
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	80 68       	ori	r24, 0x80	; 128
    18e6:	8c 93       	st	X, r24
    18e8:	0a c0       	rjmp	.+20     	; 0x18fe <SPI_Interrupt_State+0x50>
				break;
			case SPI_Interrupt_Disable:
				CLEAR_BIT(SPCR,SPIE);
    18ea:	ad e2       	ldi	r26, 0x2D	; 45
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ed e2       	ldi	r30, 0x2D	; 45
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 77       	andi	r24, 0x7F	; 127
    18f6:	8c 93       	st	X, r24
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <SPI_Interrupt_State+0x50>
				break;
			default:
		       return E_OK;
    18fa:	1a 82       	std	Y+2, r1	; 0x02
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <SPI_Interrupt_State+0x54>
		}
	return E_NOK;
    18fe:	31 e0       	ldi	r19, 0x01	; 1
    1900:	3a 83       	std	Y+2, r19	; 0x02
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <SPI_MasterSlave_Selection>:

STD_Return SPI_MasterSlave_Selection(SPI_Mode_Selection_t mode)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <SPI_MasterSlave_Selection+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <SPI_MasterSlave_Selection+0x8>
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3c 83       	std	Y+4, r19	; 0x04
    1928:	2b 83       	std	Y+3, r18	; 0x03
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	09 f1       	breq	.+66     	; 0x1974 <SPI_MasterSlave_Selection+0x62>
    1932:	2b 81       	ldd	r18, Y+3	; 0x03
    1934:	3c 81       	ldd	r19, Y+4	; 0x04
    1936:	21 30       	cpi	r18, 0x01	; 1
    1938:	31 05       	cpc	r19, r1
    193a:	c1 f5       	brne	.+112    	; 0x19ac <SPI_MasterSlave_Selection+0x9a>
		{

    		case SPI_MASTER:
				SET_BIT(SPCR,MSTR);
    193c:	ad e2       	ldi	r26, 0x2D	; 45
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	ed e2       	ldi	r30, 0x2D	; 45
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 61       	ori	r24, 0x10	; 16
    1948:	8c 93       	st	X, r24
				DIO_SetPinDirection(MISO_PORT,MISO_PIN,DIO_INPUT);
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	66 e0       	ldi	r22, 0x06	; 6
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				DIO_SetPinDirection(MOSI_PORT,MOSI_PIN,DIO_OUTPUT);
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	65 e0       	ldi	r22, 0x05	; 5
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				DIO_SetPinDirection(SCK_PORT,SCK_PIN,DIO_OUTPUT);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	67 e0       	ldi	r22, 0x07	; 7
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				/*to keep master is master must have always input high except that it will be slave*/
				DIO_EnablePullup(SS_PORT,SS_PIN,ENABLE_PullUp);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	64 e0       	ldi	r22, 0x04	; 4
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <DIO_EnablePullup>
    1972:	1e c0       	rjmp	.+60     	; 0x19b0 <SPI_MasterSlave_Selection+0x9e>

    				break;
			case SPI_SLAVE:
				CLEAR_BIT(SPCR,MSTR);
    1974:	ad e2       	ldi	r26, 0x2D	; 45
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ed e2       	ldi	r30, 0x2D	; 45
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8f 7e       	andi	r24, 0xEF	; 239
    1980:	8c 93       	st	X, r24
				DIO_SetPinDirection(MOSI_PORT,MOSI_PIN,DIO_INPUT);
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	65 e0       	ldi	r22, 0x05	; 5
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				DIO_SetPinDirection(SCK_PORT,SCK_PIN,DIO_INPUT);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	67 e0       	ldi	r22, 0x07	; 7
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				DIO_SetPinDirection(MISO_PORT,MISO_PIN,DIO_OUTPUT);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	66 e0       	ldi	r22, 0x06	; 6
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				/*to keep all slaves unselected till put on it LOW*/
				DIO_EnablePullup(SS_PORT,SS_PIN,ENABLE_PullUp);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	64 e0       	ldi	r22, 0x04	; 4
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <DIO_EnablePullup>
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <SPI_MasterSlave_Selection+0x9e>

				break;

			default:
				return E_OK;
    19ac:	1a 82       	std	Y+2, r1	; 0x02
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <SPI_MasterSlave_Selection+0xa2>
		}
	return E_NOK;
    19b0:	31 e0       	ldi	r19, 0x01	; 1
    19b2:	3a 83       	std	Y+2, r19	; 0x02
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <SPI_Transmit_Data_Polling>:


void SPI_Transmit_Data_Polling(u8 Trasnsmitted_Data)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	0f 92       	push	r0
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	89 83       	std	Y+1, r24	; 0x01
	SPDR= Trasnsmitted_Data;
    19d0:	ef e2       	ldi	r30, 0x2F	; 47
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	80 83       	st	Z, r24
	while (IS_BIT_CLEAR(SPSR, SPIF));
    19d8:	ee e2       	ldi	r30, 0x2E	; 46
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	88 23       	and	r24, r24
    19e0:	dc f7       	brge	.-10     	; 0x19d8 <SPI_Transmit_Data_Polling+0x14>

}
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <SPI_Receive_Data_Polling>:
void SPI_Receive_Data_Polling(u8 *Received_Data)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <SPI_Receive_Data_Polling+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
	while (IS_BIT_CLEAR(SPSR, SPIF));
    19f8:	ee e2       	ldi	r30, 0x2E	; 46
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	88 23       	and	r24, r24
    1a00:	dc f7       	brge	.-10     	; 0x19f8 <SPI_Receive_Data_Polling+0xe>
	*Received_Data=SPDR;
    1a02:	ef e2       	ldi	r30, 0x2F	; 47
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	80 83       	st	Z, r24
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <SPI_TranRec_Data>:

void SPI_TranRec_Data(u8 TransmitData,u8 *ReceiveData)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <SPI_TranRec_Data+0x6>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	7b 83       	std	Y+3, r23	; 0x03
    1a28:	6a 83       	std	Y+2, r22	; 0x02
	/*send data*/
	SPDR= TransmitData;
    1a2a:	ef e2       	ldi	r30, 0x2F	; 47
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	80 83       	st	Z, r24
	/*wait till transfer completed*/
	while (GET_BIT(SPSR, SPIF)==0);
    1a32:	ee e2       	ldi	r30, 0x2E	; 46
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	88 23       	and	r24, r24
    1a3a:	dc f7       	brge	.-10     	; 0x1a32 <SPI_TranRec_Data+0x1a>
	/*receive data*/
	*ReceiveData=SPDR;
    1a3c:	ef e2       	ldi	r30, 0x2F	; 47
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	ea 81       	ldd	r30, Y+2	; 0x02
    1a44:	fb 81       	ldd	r31, Y+3	; 0x03
    1a46:	80 83       	st	Z, r24
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <SPI_Transmit_Data_Interrupt>:

void SPI_Transmit_Data_Interrupt(u8 Trasnsmitted_Data)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	SPDR= Trasnsmitted_Data;
    1a60:	ef e2       	ldi	r30, 0x2F	; 47
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	80 83       	st	Z, r24
}
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <SPI_Receive_Data_Interrupt>:
void SPI_Receive_Data_Interrupt(u8 *Received_Data)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <SPI_Receive_Data_Interrupt+0x6>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	*Received_Data=SPDR;
    1a7e:	ef e2       	ldi	r30, 0x2F	; 47
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	e9 81       	ldd	r30, Y+1	; 0x01
    1a86:	fa 81       	ldd	r31, Y+2	; 0x02
    1a88:	80 83       	st	Z, r24
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <STC_Callback>:


void STC_Callback(void(*func_ptr)(void))
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <STC_Callback+0x6>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	STC_Callback_Func=func_ptr;
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa6:	90 93 97 01 	sts	0x0197, r25
    1aaa:	80 93 96 01 	sts	0x0196, r24
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <__vector_12>:

ISR(SPI_STC_vect)
{
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	(*STC_Callback_Func)();
    1ae2:	e0 91 96 01 	lds	r30, 0x0196
    1ae6:	f0 91 97 01 	lds	r31, 0x0197
    1aea:	09 95       	icall
}
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	ff 91       	pop	r31
    1af2:	ef 91       	pop	r30
    1af4:	bf 91       	pop	r27
    1af6:	af 91       	pop	r26
    1af8:	9f 91       	pop	r25
    1afa:	8f 91       	pop	r24
    1afc:	7f 91       	pop	r23
    1afe:	6f 91       	pop	r22
    1b00:	5f 91       	pop	r21
    1b02:	4f 91       	pop	r20
    1b04:	3f 91       	pop	r19
    1b06:	2f 91       	pop	r18
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	0f 90       	pop	r0
    1b0e:	1f 90       	pop	r1
    1b10:	18 95       	reti

00001b12 <I2C_init_Master>:
 *  Created on: Jul 6, 2022
 *      Author: Seko
 */
#include "I2C.h"
void I2C_init_Master(u8 TWBR_Value,u8 Address)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <I2C_init_Master+0x6>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	6a 83       	std	Y+2, r22	; 0x02

	/*Enable ACK*/

#if defined ACK_Enable
	SET_BIT(TWCR,TWEA);
    1b20:	a6 e5       	ldi	r26, 0x56	; 86
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e6 e5       	ldi	r30, 0x56	; 86
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 64       	ori	r24, 0x40	; 64
    1b2c:	8c 93       	st	X, r24
#elif defined NACK_Enable
CLEAR_BIT(TWCR,TWEA);
	#endif
	#if defined Master_Prescaler_1
		CLEAR_BIT(TWSR,TWPS0);
    1b2e:	a1 e2       	ldi	r26, 0x21	; 33
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e1 e2       	ldi	r30, 0x21	; 33
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	8e 7f       	andi	r24, 0xFE	; 254
    1b3a:	8c 93       	st	X, r24
		CLEAR_BIT(TWSR,TWPS1);
    1b3c:	a1 e2       	ldi	r26, 0x21	; 33
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e1 e2       	ldi	r30, 0x21	; 33
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8d 7f       	andi	r24, 0xFD	; 253
    1b48:	8c 93       	st	X, r24
		SET_BIT(TWSR,TWPS1);
		#elif defined Master_Prescaler_64
		SET_BIT(TWSR,TWPS0);
		SET_BIT(TWSR,TWPS1);
	#endif
	TWBR = TWBR_Value; //Define the value from data sheet
    1b4a:	e0 e2       	ldi	r30, 0x20	; 32
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	80 83       	st	Z, r24

	#if defined Master_Addressed
	/*write Address */
	TWAR=Address<<1;
	#elif defined  Master_Not_Addressed
	TWAR = 0;
    1b52:	e2 e2       	ldi	r30, 0x22	; 34
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	10 82       	st	Z, r1
	#endif

	#if defined I2C_Master_Recognize_GeneralCall
	SET_BIT(TWAR,TWGCE);
	#elif defined I2C_Master_Not_Recognize_GeneralCall
	CLEAR_BIT(TWAR,TWGCE);
    1b58:	a2 e2       	ldi	r26, 0x22	; 34
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e2 e2       	ldi	r30, 0x22	; 34
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8e 7f       	andi	r24, 0xFE	; 254
    1b64:	8c 93       	st	X, r24
	#endif
	/*Enable TWI*/
	SET_BIT(TWCR,TWEN);
    1b66:	a6 e5       	ldi	r26, 0x56	; 86
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e6 e5       	ldi	r30, 0x56	; 86
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	84 60       	ori	r24, 0x04	; 4
    1b72:	8c 93       	st	X, r24
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <I2C_init_Salve>:

/*TWI Initialize as a Salve*/

void I2C_init_Salve(u8 Address)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	0f 92       	push	r0
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	89 83       	std	Y+1, r24	; 0x01
	/*Enable TWI*/
	SET_BIT(TWCR,TWEN);
    1b8a:	a6 e5       	ldi	r26, 0x56	; 86
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e6 e5       	ldi	r30, 0x56	; 86
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	84 60       	ori	r24, 0x04	; 4
    1b96:	8c 93       	st	X, r24

	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1b98:	a6 e5       	ldi	r26, 0x56	; 86
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e6 e5       	ldi	r30, 0x56	; 86
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 64       	ori	r24, 0x40	; 64
    1ba4:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	#if defined Slave_Addressed
	/*write Address */
	TWAR=(Address<<1);
    1ba6:	e2 e2       	ldi	r30, 0x22	; 34
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	88 0f       	add	r24, r24
    1bae:	80 83       	st	Z, r24
	TWAR = 0;
	#endif
	#if defined I2C_Slave_Recognize_GeneralCall
	SET_BIT(TWAR,TWGCE);
	#elif defined I2C_Slave_Not_Recognize_GeneralCall
	CLEAR_BIT(TWAR,TWGCE);
    1bb0:	a2 e2       	ldi	r26, 0x22	; 34
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e2 e2       	ldi	r30, 0x22	; 34
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8e 7f       	andi	r24, 0xFE	; 254
    1bbc:	8c 93       	st	X, r24
	#endif
}
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <I2C_Start_Condtion_Polling>:

/*TWI Start condition*/
I2C_Error_States_t I2C_Start_Condtion_Polling(void)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	/*send start condition*/
	SET_BIT(TWCR,TWSTA);
    1bd0:	a6 e5       	ldi	r26, 0x56	; 86
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e6 e5       	ldi	r30, 0x56	; 86
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	80 62       	ori	r24, 0x20	; 32
    1bdc:	8c 93       	st	X, r24
	/*Clear  TWI flag*/
	SET_BIT(TWCR,TWINT);
    1bde:	a6 e5       	ldi	r26, 0x56	; 86
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e6 e5       	ldi	r30, 0x56	; 86
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	80 68       	ori	r24, 0x80	; 128
    1bea:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Raised*/
	while(GET_BIT(TWCR,TWINT)==0);
    1bec:	e6 e5       	ldi	r30, 0x56	; 86
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	88 23       	and	r24, r24
    1bf4:	dc f7       	brge	.-10     	; 0x1bec <I2C_Start_Condtion_Polling+0x26>
	/*Check the operation statues of start condition*/
	if((TWSR&0xF8) != 0x08)
    1bf6:	e1 e2       	ldi	r30, 0x21	; 33
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	88 7f       	andi	r24, 0xF8	; 248
    1c02:	90 70       	andi	r25, 0x00	; 0
    1c04:	88 30       	cpi	r24, 0x08	; 8
    1c06:	91 05       	cpc	r25, r1
    1c08:	19 f0       	breq	.+6      	; 0x1c10 <I2C_Start_Condtion_Polling+0x4a>
	{

		return I2C_StartCondition_Error;
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <I2C_Start_Condtion_Polling+0x4c>
	}
	else
	{

		return I2C_NO_Error;
    1c10:	19 82       	std	Y+1, r1	; 0x01
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <I2C_RepeatedStart_Condtion_Polling>:
/*TWI Start Repeated Function*/
I2C_Error_States_t  I2C_RepeatedStart_Condtion_Polling(void)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	0f 92       	push	r0
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
		/*send start condition*/
		SET_BIT(TWCR,TWSTA);
    1c26:	a6 e5       	ldi	r26, 0x56	; 86
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e6 e5       	ldi	r30, 0x56	; 86
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 62       	ori	r24, 0x20	; 32
    1c32:	8c 93       	st	X, r24
		/*Clear  TWI flag*/
		SET_BIT(TWCR,TWINT);
    1c34:	a6 e5       	ldi	r26, 0x56	; 86
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e6 e5       	ldi	r30, 0x56	; 86
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	8c 93       	st	X, r24
		/*wait until the operation finish and Flag Is Rasised*/
		while(GET_BIT(TWCR,TWINT)==0);
    1c42:	e6 e5       	ldi	r30, 0x56	; 86
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	88 23       	and	r24, r24
    1c4a:	dc f7       	brge	.-10     	; 0x1c42 <I2C_RepeatedStart_Condtion_Polling+0x26>
		/*Check the operation statues*/
		if((TWSR&0xF8) != 0x10)
    1c4c:	e1 e2       	ldi	r30, 0x21	; 33
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	88 7f       	andi	r24, 0xF8	; 248
    1c58:	90 70       	andi	r25, 0x00	; 0
    1c5a:	80 31       	cpi	r24, 0x10	; 16
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	19 f0       	breq	.+6      	; 0x1c66 <I2C_RepeatedStart_Condtion_Polling+0x4a>
		{
			return I2C_RepeatedStartCondition_Error;
    1c60:	83 e0       	ldi	r24, 0x03	; 3
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <I2C_RepeatedStart_Condtion_Polling+0x4c>
		}
		else
		{
			return I2C_NO_Error;
    1c66:	19 82       	std	Y+1, r1	; 0x01
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
		}
}
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <I2C_Slave_WriteAddress_Mode_Polling>:

/*TWI send  SLave Address with Write*/
I2C_Error_States_t I2C_Slave_WriteAddress_Mode_Polling(u8 SalveAddress)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <I2C_Slave_WriteAddress_Mode_Polling+0x6>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	89 83       	std	Y+1, r24	; 0x01
	TWDR = ((SalveAddress <<1)|0);                    //Address and write instruction
    1c7e:	e3 e2       	ldi	r30, 0x23	; 35
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	88 0f       	add	r24, r24
    1c86:	80 83       	st	Z, r24

	SET_BIT(TWCR,TWEN);
    1c88:	a6 e5       	ldi	r26, 0x56	; 86
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e6 e5       	ldi	r30, 0x56	; 86
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	84 60       	ori	r24, 0x04	; 4
    1c94:	8c 93       	st	X, r24

#if defined ACK_Enable
	SET_BIT(TWCR,TWEA);
    1c96:	a6 e5       	ldi	r26, 0x56	; 86
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e6 e5       	ldi	r30, 0x56	; 86
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 64       	ori	r24, 0x40	; 64
    1ca2:	8c 93       	st	X, r24
#elif defined NACK_Enable
CLEAR_BIT(TWCR,TWEA);
	#endif


	SET_BIT(TWCR,TWINT);
    1ca4:	a6 e5       	ldi	r26, 0x56	; 86
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e6 e5       	ldi	r30, 0x56	; 86
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 68       	ori	r24, 0x80	; 128
    1cb0:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,TWINT)==0);               // Wait till complete TWDR byte transmitted
    1cb2:	e6 e5       	ldi	r30, 0x56	; 86
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 23       	and	r24, r24
    1cba:	dc f7       	brge	.-10     	; 0x1cb2 <I2C_Slave_WriteAddress_Mode_Polling+0x40>

#if defined Status_With_ACK
	/*Check the operation statuesSLA+W &ACK*/
	if(((TWSR)&(0xF8)) != (0x18))
    1cbc:	e1 e2       	ldi	r30, 0x21	; 33
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	88 7f       	andi	r24, 0xF8	; 248
    1cc8:	90 70       	andi	r25, 0x00	; 0
    1cca:	88 31       	cpi	r24, 0x18	; 24
    1ccc:	91 05       	cpc	r25, r1
    1cce:	19 f0       	breq	.+6      	; 0x1cd6 <I2C_Slave_WriteAddress_Mode_Polling+0x64>
	{

		return I2C_SlaveAddress_ACK_Write_Error;
    1cd0:	85 e0       	ldi	r24, 0x05	; 5
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <I2C_Slave_WriteAddress_Mode_Polling+0x66>
	}
	else
	{

		return I2C_NO_Error;
    1cd6:	1a 82       	std	Y+2, r1	; 0x02
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
		{
			return I2C_NO_Error;
			/*Do Nothing*/
		}
#endif
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <I2C_Slave_ReadAddress_Mode_Polling>:

/*TWI send SLave Address with Read*/
I2C_Error_States_t I2C_Slave_ReadAddress_Mode_Polling(u8 SalveAddress)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <I2C_Slave_ReadAddress_Mode_Polling+0x6>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	89 83       	std	Y+1, r24	; 0x01
	/*Send Salve Address --> 7 Bit with Read */
	TWDR = ((SalveAddress<<1)|	SET_BIT(TWDR,Read_Write_Pin));	/*Set read Bit Request in The LSB in Data Regsiter*/
    1cf0:	23 e2       	ldi	r18, 0x23	; 35
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	98 2f       	mov	r25, r24
    1d00:	a3 e2       	ldi	r26, 0x23	; 35
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e3 e2       	ldi	r30, 0x23	; 35
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	81 60       	ori	r24, 0x01	; 1
    1d0c:	8c 93       	st	X, r24
    1d0e:	8c 91       	ld	r24, X
    1d10:	89 2b       	or	r24, r25
    1d12:	f9 01       	movw	r30, r18
    1d14:	80 83       	st	Z, r24
	/*Clear interrupt TWI Flag*/
	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1d16:	a6 e5       	ldi	r26, 0x56	; 86
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e6 e5       	ldi	r30, 0x56	; 86
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	80 64       	ori	r24, 0x40	; 64
    1d22:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	SET_BIT(TWCR,TWINT);
    1d24:	a6 e5       	ldi	r26, 0x56	; 86
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e6 e5       	ldi	r30, 0x56	; 86
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	80 68       	ori	r24, 0x80	; 128
    1d30:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEN);
    1d32:	a6 e5       	ldi	r26, 0x56	; 86
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e6 e5       	ldi	r30, 0x56	; 86
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	84 60       	ori	r24, 0x04	; 4
    1d3e:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,TWINT)==0);
    1d40:	e6 e5       	ldi	r30, 0x56	; 86
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	88 23       	and	r24, r24
    1d48:	dc f7       	brge	.-10     	; 0x1d40 <I2C_Slave_ReadAddress_Mode_Polling+0x5c>
#if defined Status_With_ACK
	/*Check the operation statues ACK*/
	if((TWSR&0xF8) != 0x40)
    1d4a:	e1 e2       	ldi	r30, 0x21	; 33
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	88 7f       	andi	r24, 0xF8	; 248
    1d56:	90 70       	andi	r25, 0x00	; 0
    1d58:	80 34       	cpi	r24, 0x40	; 64
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	19 f0       	breq	.+6      	; 0x1d64 <I2C_Slave_ReadAddress_Mode_Polling+0x80>
	{
		return I2C_SlaveAddress_ACK_Read_Error;
    1d5e:	f4 e0       	ldi	r31, 0x04	; 4
    1d60:	fa 83       	std	Y+2, r31	; 0x02
    1d62:	01 c0       	rjmp	.+2      	; 0x1d66 <I2C_Slave_ReadAddress_Mode_Polling+0x82>
	else
	{
		/*Do Nothing*/
	}
#endif
	return I2C_NO_Error;
    1d64:	1a 82       	std	Y+2, r1	; 0x02
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <I2C_MasterWriteDataByte>:

/*TWI send data as a master*/
I2C_Error_States_t I2C_MasterWriteDataByte(u8 Data)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <I2C_MasterWriteDataByte+0x6>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	89 83       	std	Y+1, r24	; 0x01
	/*Send Data */
	TWDR=Data;
    1d7e:	e3 e2       	ldi	r30, 0x23	; 35
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWEN);
    1d86:	a6 e5       	ldi	r26, 0x56	; 86
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e6 e5       	ldi	r30, 0x56	; 86
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	84 60       	ori	r24, 0x04	; 4
    1d92:	8c 93       	st	X, r24

	/*Clear interrupt TWI Flag*/
	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1d94:	a6 e5       	ldi	r26, 0x56	; 86
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e6 e5       	ldi	r30, 0x56	; 86
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	80 64       	ori	r24, 0x40	; 64
    1da0:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	SET_BIT(TWCR,TWINT);
    1da2:	a6 e5       	ldi	r26, 0x56	; 86
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e6 e5       	ldi	r30, 0x56	; 86
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	80 68       	ori	r24, 0x80	; 128
    1dae:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,TWINT)==0);
    1db0:	e6 e5       	ldi	r30, 0x56	; 86
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	88 23       	and	r24, r24
    1db8:	dc f7       	brge	.-10     	; 0x1db0 <I2C_MasterWriteDataByte+0x3e>
#if defined Status_With_ACK
	/*Check the operation statues data transmit with ACK*/
	if((TWSR&0xF8) != 0x28)
    1dba:	e1 e2       	ldi	r30, 0x21	; 33
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	88 7f       	andi	r24, 0xF8	; 248
    1dc6:	90 70       	andi	r25, 0x00	; 0
    1dc8:	88 32       	cpi	r24, 0x28	; 40
    1dca:	91 05       	cpc	r25, r1
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <I2C_MasterWriteDataByte+0x62>
	{
		return I2C_MasterByte_ACK_Write_Error;
    1dce:	88 e0       	ldi	r24, 0x08	; 8
    1dd0:	8a 83       	std	Y+2, r24	; 0x02
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <I2C_MasterWriteDataByte+0x64>
		else
		{
			/*Do Nothing*/
		}
#endif
	return I2C_NO_Error;
    1dd4:	1a 82       	std	Y+2, r1	; 0x02
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <I2C_MasterReadDataByte>:

/*TWI read data as a master*/
I2C_Error_States_t I2C_MasterReadDataByte(u8 *Data)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <I2C_MasterReadDataByte+0x6>
    1de8:	0f 92       	push	r0
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
	/*Clear interrupt TWI Flag*/
	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1df2:	a6 e5       	ldi	r26, 0x56	; 86
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e6 e5       	ldi	r30, 0x56	; 86
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	80 64       	ori	r24, 0x40	; 64
    1dfe:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	SET_BIT(TWCR,TWINT);
    1e00:	a6 e5       	ldi	r26, 0x56	; 86
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e6 e5       	ldi	r30, 0x56	; 86
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 68       	ori	r24, 0x80	; 128
    1e0c:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEN);
    1e0e:	a6 e5       	ldi	r26, 0x56	; 86
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e6 e5       	ldi	r30, 0x56	; 86
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	84 60       	ori	r24, 0x04	; 4
    1e1a:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Raised*/
	while(GET_BIT(TWCR,TWINT)==0);
    1e1c:	e6 e5       	ldi	r30, 0x56	; 86
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	88 23       	and	r24, r24
    1e24:	dc f7       	brge	.-10     	; 0x1e1c <I2C_MasterReadDataByte+0x3a>
#if defined Status_With_ACK
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x50)
    1e26:	e1 e2       	ldi	r30, 0x21	; 33
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	88 7f       	andi	r24, 0xF8	; 248
    1e32:	90 70       	andi	r25, 0x00	; 0
    1e34:	80 35       	cpi	r24, 0x50	; 80
    1e36:	91 05       	cpc	r25, r1
    1e38:	19 f0       	breq	.+6      	; 0x1e40 <I2C_MasterReadDataByte+0x5e>
	{
		return I2C_MasterByte_ACK_Read_Error;
    1e3a:	8a e0       	ldi	r24, 0x0A	; 10
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    1e3e:	07 c0       	rjmp	.+14     	; 0x1e4e <I2C_MasterReadDataByte+0x6c>
	}
	else
	{
		*Data=TWDR;
    1e40:	e3 e2       	ldi	r30, 0x23	; 35
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	e9 81       	ldd	r30, Y+1	; 0x01
    1e48:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4a:	80 83       	st	Z, r24
	else
	{
		*Data=TWDR;
	}
#endif
	return I2C_NO_Error;
    1e4c:	1b 82       	std	Y+3, r1	; 0x03
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <I2C_SalveListenToBus>:

/*Salve Listen to bus*/
I2C_Error_States_t I2C_SalveListenToBus()
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62

		/*wait until operation finish*/
		while(GET_BIT(TWCR,TWINT)==0);
    1e66:	e6 e5       	ldi	r30, 0x56	; 86
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 23       	and	r24, r24
    1e6e:	dc f7       	brge	.-10     	; 0x1e66 <I2C_SalveListenToBus+0xa>
		if((TWSR&0xF8) !=0x60)
    1e70:	e1 e2       	ldi	r30, 0x21	; 33
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	88 7f       	andi	r24, 0xF8	; 248
    1e7c:	90 70       	andi	r25, 0x00	; 0
    1e7e:	80 36       	cpi	r24, 0x60	; 96
    1e80:	91 05       	cpc	r25, r1
    1e82:	19 f0       	breq	.+6      	; 0x1e8a <I2C_SalveListenToBus+0x2e>

		{
			return I2C_SlaveReceive_SLA_W_ACK_Error;
    1e84:	81 e1       	ldi	r24, 0x11	; 17
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	1b c0       	rjmp	.+54     	; 0x1ec0 <I2C_SalveListenToBus+0x64>
		else
		{

		}
		/*Own SlA+R with ACK return slave transmit*/
		if((TWSR&0xF8) !=0xA8)
    1e8a:	e1 e2       	ldi	r30, 0x21	; 33
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	88 7f       	andi	r24, 0xF8	; 248
    1e96:	90 70       	andi	r25, 0x00	; 0
    1e98:	88 3a       	cpi	r24, 0xA8	; 168
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	19 f0       	breq	.+6      	; 0x1ea4 <I2C_SalveListenToBus+0x48>
		{
			return 	I2C_SlaveReceive_SLA_R_ACK_Error;
    1e9e:	82 e1       	ldi	r24, 0x12	; 18
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	0e c0       	rjmp	.+28     	; 0x1ec0 <I2C_SalveListenToBus+0x64>
		{

		}

		/*General Call with ACK return*/
		if((TWSR&0xF8) !=0x70)
    1ea4:	e1 e2       	ldi	r30, 0x21	; 33
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	88 7f       	andi	r24, 0xF8	; 248
    1eb0:	90 70       	andi	r25, 0x00	; 0
    1eb2:	80 37       	cpi	r24, 0x70	; 112
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	19 f0       	breq	.+6      	; 0x1ebe <I2C_SalveListenToBus+0x62>
		{
			return I2C_Slave_Arbritration_Lost_GeneralCall_ACK_Error;
    1eb8:	83 e1       	ldi	r24, 0x13	; 19
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <I2C_SalveListenToBus+0x64>
		}
		else
		{

		}
		return I2C_NO_Error;
    1ebe:	19 82       	std	Y+1, r1	; 0x01
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <I2C_SalveReceiveData>:

/*Salve Receive*/
I2C_Error_States_t I2C_SalveReceiveData(u8 *Data)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <I2C_SalveReceiveData+0x6>
    1ed0:	0f 92       	push	r0
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
	//#if defined ACK_Enable
	//	SET_BIT(TWCR,TWEA);
	//#elif defined NACK_Enable
	//CLEAR_BIT(TWCR,TWEA);
	//	#endif
	SET_BIT(TWCR,TWINT);
    1eda:	a6 e5       	ldi	r26, 0x56	; 86
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 e5       	ldi	r30, 0x56	; 86
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 68       	ori	r24, 0x80	; 128
    1ee6:	8c 93       	st	X, r24
	//SET_BIT(TWCR,TWEN);
	/*wait until operation End */
	while(GET_BIT(TWCR,TWINT)==0);
    1ee8:	e6 e5       	ldi	r30, 0x56	; 86
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	88 23       	and	r24, r24
    1ef0:	dc f7       	brge	.-10     	; 0x1ee8 <I2C_SalveReceiveData+0x1e>
#if defined Status_With_ACK
	/*check for received data with ACK*/
	if((TWSR&0xF8)!=0x80)
    1ef2:	e1 e2       	ldi	r30, 0x21	; 33
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	88 7f       	andi	r24, 0xF8	; 248
    1efe:	90 70       	andi	r25, 0x00	; 0
    1f00:	80 38       	cpi	r24, 0x80	; 128
    1f02:	91 05       	cpc	r25, r1
    1f04:	19 f0       	breq	.+6      	; 0x1f0c <I2C_SalveReceiveData+0x42>
	{
		return I2C_SlaveByte_ACK_Read_Error;
    1f06:	8c e0       	ldi	r24, 0x0C	; 12
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	1b c0       	rjmp	.+54     	; 0x1f42 <I2C_SalveReceiveData+0x78>
	}
	else
	{
		*Data = TWDR;
    1f0c:	e3 e2       	ldi	r30, 0x23	; 35
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	e9 81       	ldd	r30, Y+1	; 0x01
    1f14:	fa 81       	ldd	r31, Y+2	; 0x02
    1f16:	80 83       	st	Z, r24
	{
		*Data = TWDR;
	}
#endif
	/*Check For Stop condition*/
	if((TWSR&0xF8) !=0xA0)
    1f18:	e1 e2       	ldi	r30, 0x21	; 33
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	88 7f       	andi	r24, 0xF8	; 248
    1f24:	90 70       	andi	r25, 0x00	; 0
    1f26:	80 3a       	cpi	r24, 0xA0	; 160
    1f28:	91 05       	cpc	r25, r1
    1f2a:	19 f0       	breq	.+6      	; 0x1f32 <I2C_SalveReceiveData+0x68>
	{
		return I2C_StopCondition_Error;
    1f2c:	84 e1       	ldi	r24, 0x14	; 20
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <I2C_SalveReceiveData+0x78>
	}
	{
		/*Clear Flag*/
		SET_BIT(TWCR,TWINT);
    1f32:	a6 e5       	ldi	r26, 0x56	; 86
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e6 e5       	ldi	r30, 0x56	; 86
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 68       	ori	r24, 0x80	; 128
    1f3e:	8c 93       	st	X, r24
	}
	return I2C_NO_Error;
    1f40:	1b 82       	std	Y+3, r1	; 0x03
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <I2C_SalveWriteData>:


I2C_Error_States_t I2C_SalveWriteData(u8 Data)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <I2C_SalveWriteData+0x6>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Data;
    1f5c:	e3 e2       	ldi	r30, 0x23	; 35
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	80 83       	st	Z, r24
	/*Clear interrupt TWI Flag*/
	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1f64:	a6 e5       	ldi	r26, 0x56	; 86
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e6 e5       	ldi	r30, 0x56	; 86
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	80 64       	ori	r24, 0x40	; 64
    1f70:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	SET_BIT(TWCR,TWINT);
    1f72:	a6 e5       	ldi	r26, 0x56	; 86
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e6 e5       	ldi	r30, 0x56	; 86
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	80 68       	ori	r24, 0x80	; 128
    1f7e:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEN);
    1f80:	a6 e5       	ldi	r26, 0x56	; 86
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e6 e5       	ldi	r30, 0x56	; 86
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	84 60       	ori	r24, 0x04	; 4
    1f8c:	8c 93       	st	X, r24
	/*wait until operation End */
	while(GET_BIT(TWCR,TWINT)==0);
    1f8e:	e6 e5       	ldi	r30, 0x56	; 86
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	88 23       	and	r24, r24
    1f96:	dc f7       	brge	.-10     	; 0x1f8e <I2C_SalveWriteData+0x3e>
	/*Check For Repeated Start*/
	if((TWSR&0xF8) !=0xA0)
    1f98:	e1 e2       	ldi	r30, 0x21	; 33
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	88 7f       	andi	r24, 0xF8	; 248
    1fa4:	90 70       	andi	r25, 0x00	; 0
    1fa6:	80 3a       	cpi	r24, 0xA0	; 160
    1fa8:	91 05       	cpc	r25, r1
    1faa:	19 f0       	breq	.+6      	; 0x1fb2 <I2C_SalveWriteData+0x62>
	{
		return I2C_RepeatedStartCondition_Error;
    1fac:	83 e0       	ldi	r24, 0x03	; 3
    1fae:	8a 83       	std	Y+2, r24	; 0x02
    1fb0:	08 c0       	rjmp	.+16     	; 0x1fc2 <I2C_SalveWriteData+0x72>
	}
	else
	{
		/*Clear Flag*/
		SET_BIT(TWCR,TWINT);
    1fb2:	a6 e5       	ldi	r26, 0x56	; 86
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e6 e5       	ldi	r30, 0x56	; 86
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 68       	ori	r24, 0x80	; 128
    1fbe:	8c 93       	st	X, r24
		return I2C_NO_Error;
    1fc0:	1a 82       	std	Y+2, r1	; 0x02
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
		return I2C_NO_Error;
	}

#endif
	return I2C_NO_Error;
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <I2C_Stop_Condtion_Polling>:

/*TWI Stop condition*/
void I2C_Stop_Condtion_Polling(void)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
	/*Send Stop Condition*/
	SET_BIT(TWCR,TWSTO);
    1fd6:	a6 e5       	ldi	r26, 0x56	; 86
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e6 e5       	ldi	r30, 0x56	; 86
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 61       	ori	r24, 0x10	; 16
    1fe2:	8c 93       	st	X, r24
	/*Clear TWI  interrupt flag*/
	SET_BIT(TWCR,TWINT);
    1fe4:	a6 e5       	ldi	r26, 0x56	; 86
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e6 e5       	ldi	r30, 0x56	; 86
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	80 68       	ori	r24, 0x80	; 128
    1ff0:	8c 93       	st	X, r24
}
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <I2C_Status_Check>:


void I2C_Status_Check(u8 *Status)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <I2C_Status_Check+0x6>
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
	*Status = (TWSR & (0XF8));
    2006:	e1 e2       	ldi	r30, 0x21	; 33
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	88 7f       	andi	r24, 0xF8	; 248
    200e:	e9 81       	ldd	r30, Y+1	; 0x01
    2010:	fa 81       	ldd	r31, Y+2	; 0x02
    2012:	80 83       	st	Z, r24
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <__vector_1>:
static void (*External_Function0)(void);
static void (*External_Function1)(void);
static void (*External_Function2)(void);
/****************************************ISR for INT0*************************************************/
ISR(INT0_Vect)
{
    201e:	1f 92       	push	r1
    2020:	0f 92       	push	r0
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	0f 92       	push	r0
    2026:	11 24       	eor	r1, r1
    2028:	2f 93       	push	r18
    202a:	3f 93       	push	r19
    202c:	4f 93       	push	r20
    202e:	5f 93       	push	r21
    2030:	6f 93       	push	r22
    2032:	7f 93       	push	r23
    2034:	8f 93       	push	r24
    2036:	9f 93       	push	r25
    2038:	af 93       	push	r26
    203a:	bf 93       	push	r27
    203c:	ef 93       	push	r30
    203e:	ff 93       	push	r31
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	(*External_Function0)();
    2048:	e0 91 98 01 	lds	r30, 0x0198
    204c:	f0 91 99 01 	lds	r31, 0x0199
    2050:	09 95       	icall
}
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	ff 91       	pop	r31
    2058:	ef 91       	pop	r30
    205a:	bf 91       	pop	r27
    205c:	af 91       	pop	r26
    205e:	9f 91       	pop	r25
    2060:	8f 91       	pop	r24
    2062:	7f 91       	pop	r23
    2064:	6f 91       	pop	r22
    2066:	5f 91       	pop	r21
    2068:	4f 91       	pop	r20
    206a:	3f 91       	pop	r19
    206c:	2f 91       	pop	r18
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	0f 90       	pop	r0
    2074:	1f 90       	pop	r1
    2076:	18 95       	reti

00002078 <__vector_2>:
/****************************************ISR for INT1*************************************************/
ISR(INT1_Vect)
{
    2078:	1f 92       	push	r1
    207a:	0f 92       	push	r0
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	0f 92       	push	r0
    2080:	11 24       	eor	r1, r1
    2082:	2f 93       	push	r18
    2084:	3f 93       	push	r19
    2086:	4f 93       	push	r20
    2088:	5f 93       	push	r21
    208a:	6f 93       	push	r22
    208c:	7f 93       	push	r23
    208e:	8f 93       	push	r24
    2090:	9f 93       	push	r25
    2092:	af 93       	push	r26
    2094:	bf 93       	push	r27
    2096:	ef 93       	push	r30
    2098:	ff 93       	push	r31
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
	(*External_Function1)();
    20a2:	e0 91 9a 01 	lds	r30, 0x019A
    20a6:	f0 91 9b 01 	lds	r31, 0x019B
    20aa:	09 95       	icall
}
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	ff 91       	pop	r31
    20b2:	ef 91       	pop	r30
    20b4:	bf 91       	pop	r27
    20b6:	af 91       	pop	r26
    20b8:	9f 91       	pop	r25
    20ba:	8f 91       	pop	r24
    20bc:	7f 91       	pop	r23
    20be:	6f 91       	pop	r22
    20c0:	5f 91       	pop	r21
    20c2:	4f 91       	pop	r20
    20c4:	3f 91       	pop	r19
    20c6:	2f 91       	pop	r18
    20c8:	0f 90       	pop	r0
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	0f 90       	pop	r0
    20ce:	1f 90       	pop	r1
    20d0:	18 95       	reti

000020d2 <__vector_3>:
/****************************************ISR for INT2*************************************************/
ISR(INT2_Vect)
{
    20d2:	1f 92       	push	r1
    20d4:	0f 92       	push	r0
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	0f 92       	push	r0
    20da:	11 24       	eor	r1, r1
    20dc:	2f 93       	push	r18
    20de:	3f 93       	push	r19
    20e0:	4f 93       	push	r20
    20e2:	5f 93       	push	r21
    20e4:	6f 93       	push	r22
    20e6:	7f 93       	push	r23
    20e8:	8f 93       	push	r24
    20ea:	9f 93       	push	r25
    20ec:	af 93       	push	r26
    20ee:	bf 93       	push	r27
    20f0:	ef 93       	push	r30
    20f2:	ff 93       	push	r31
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
	(*External_Function2)();
    20fc:	e0 91 9c 01 	lds	r30, 0x019C
    2100:	f0 91 9d 01 	lds	r31, 0x019D
    2104:	09 95       	icall
}
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	ff 91       	pop	r31
    210c:	ef 91       	pop	r30
    210e:	bf 91       	pop	r27
    2110:	af 91       	pop	r26
    2112:	9f 91       	pop	r25
    2114:	8f 91       	pop	r24
    2116:	7f 91       	pop	r23
    2118:	6f 91       	pop	r22
    211a:	5f 91       	pop	r21
    211c:	4f 91       	pop	r20
    211e:	3f 91       	pop	r19
    2120:	2f 91       	pop	r18
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	0f 90       	pop	r0
    2128:	1f 90       	pop	r1
    212a:	18 95       	reti

0000212c <Enable_Global_Interrupt>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return Enable_Global_Interrupt(Global_Interrupt_State_t state)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <Enable_Global_Interrupt+0x6>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <Enable_Global_Interrupt+0x8>
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3c 83       	std	Y+4, r19	; 0x04
    2142:	2b 83       	std	Y+3, r18	; 0x03
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	31 f0       	breq	.+12     	; 0x2158 <Enable_Global_Interrupt+0x2c>
    214c:	2b 81       	ldd	r18, Y+3	; 0x03
    214e:	3c 81       	ldd	r19, Y+4	; 0x04
    2150:	21 30       	cpi	r18, 0x01	; 1
    2152:	31 05       	cpc	r19, r1
    2154:	49 f0       	breq	.+18     	; 0x2168 <Enable_Global_Interrupt+0x3c>
    2156:	10 c0       	rjmp	.+32     	; 0x2178 <Enable_Global_Interrupt+0x4c>
		{
			case Enable_GIE_Interrupt:
				SET_BIT(SREG,GIE);
    2158:	af e5       	ldi	r26, 0x5F	; 95
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	ef e5       	ldi	r30, 0x5F	; 95
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	80 68       	ori	r24, 0x80	; 128
    2164:	8c 93       	st	X, r24
    2166:	0a c0       	rjmp	.+20     	; 0x217c <Enable_Global_Interrupt+0x50>
				break;
			case Disable_GIE_Interrupt:
				CLEAR_BIT(SREG,GIE);
    2168:	af e5       	ldi	r26, 0x5F	; 95
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	ef e5       	ldi	r30, 0x5F	; 95
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8f 77       	andi	r24, 0x7F	; 127
    2174:	8c 93       	st	X, r24
    2176:	02 c0       	rjmp	.+4      	; 0x217c <Enable_Global_Interrupt+0x50>
				break;
			default:
				return E_OK;
    2178:	1a 82       	std	Y+2, r1	; 0x02
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <Enable_Global_Interrupt+0x54>
		}
	return E_NOK;
    217c:	31 e0       	ldi	r19, 0x01	; 1
    217e:	3a 83       	std	Y+2, r19	; 0x02
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <Enable_External_INT0>:
/*****************************************************************************************************/
STD_Return Enable_External_INT0(Peripheral_Interrupt_State_t State)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <Enable_External_INT0+0x6>
    2196:	00 d0       	rcall	.+0      	; 0x2198 <Enable_External_INT0+0x8>
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	3c 83       	std	Y+4, r19	; 0x04
    21a6:	2b 83       	std	Y+3, r18	; 0x03
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	31 f0       	breq	.+12     	; 0x21bc <Enable_External_INT0+0x2c>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	21 30       	cpi	r18, 0x01	; 1
    21b6:	31 05       	cpc	r19, r1
    21b8:	49 f0       	breq	.+18     	; 0x21cc <Enable_External_INT0+0x3c>
    21ba:	10 c0       	rjmp	.+32     	; 0x21dc <Enable_External_INT0+0x4c>
	{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT0);
    21bc:	ab e5       	ldi	r26, 0x5B	; 91
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	eb e5       	ldi	r30, 0x5B	; 91
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	80 64       	ori	r24, 0x40	; 64
    21c8:	8c 93       	st	X, r24
    21ca:	0a c0       	rjmp	.+20     	; 0x21e0 <Enable_External_INT0+0x50>

	break;
	case Disable_PIE_Interrupt:
		CLEAR_BIT(GICR,INT0);
    21cc:	ab e5       	ldi	r26, 0x5B	; 91
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	eb e5       	ldi	r30, 0x5B	; 91
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	8f 7b       	andi	r24, 0xBF	; 191
    21d8:	8c 93       	st	X, r24
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <Enable_External_INT0+0x50>
	break;
	default:
		return E_OK;
    21dc:	1a 82       	std	Y+2, r1	; 0x02
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <Enable_External_INT0+0x54>
	}
	return E_NOK;
    21e0:	31 e0       	ldi	r19, 0x01	; 1
    21e2:	3a 83       	std	Y+2, r19	; 0x02
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <External_Int0_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int0_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <External_Int0_EdgeSelection+0x6>
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <External_Int0_EdgeSelection+0x8>
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	89 83       	std	Y+1, r24	; 0x01
			switch(SenseLevel)
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	3c 83       	std	Y+4, r19	; 0x04
    220a:	2b 83       	std	Y+3, r18	; 0x03
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	a1 f0       	breq	.+40     	; 0x223c <External_Int0_EdgeSelection+0x48>
    2214:	2b 81       	ldd	r18, Y+3	; 0x03
    2216:	3c 81       	ldd	r19, Y+4	; 0x04
    2218:	21 30       	cpi	r18, 0x01	; 1
    221a:	31 05       	cpc	r19, r1
    221c:	f1 f4       	brne	.+60     	; 0x225a <External_Int0_EdgeSelection+0x66>
				{
					case Rising_Edge_Sense:
							SET_BIT(MCUCR,ISC00);
    221e:	a5 e5       	ldi	r26, 0x55	; 85
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e5 e5       	ldi	r30, 0x55	; 85
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	81 60       	ori	r24, 0x01	; 1
    222a:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    222c:	a5 e5       	ldi	r26, 0x55	; 85
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e5 e5       	ldi	r30, 0x55	; 85
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	82 60       	ori	r24, 0x02	; 2
    2238:	8c 93       	st	X, r24
    223a:	11 c0       	rjmp	.+34     	; 0x225e <External_Int0_EdgeSelection+0x6a>
							break;
					case Falling_Edge_Sense:
							CLEAR_BIT(MCUCR,ISC00);
    223c:	a5 e5       	ldi	r26, 0x55	; 85
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e5 e5       	ldi	r30, 0x55	; 85
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	8e 7f       	andi	r24, 0xFE	; 254
    2248:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    224a:	a5 e5       	ldi	r26, 0x55	; 85
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e5 e5       	ldi	r30, 0x55	; 85
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	82 60       	ori	r24, 0x02	; 2
    2256:	8c 93       	st	X, r24
    2258:	02 c0       	rjmp	.+4      	; 0x225e <External_Int0_EdgeSelection+0x6a>
							break;
					default:
						return E_OK;
    225a:	1a 82       	std	Y+2, r1	; 0x02
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <External_Int0_EdgeSelection+0x6e>
				}
	return E_NOK;
    225e:	31 e0       	ldi	r19, 0x01	; 1
    2260:	3a 83       	std	Y+2, r19	; 0x02
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <CallBack_Int0>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int0(void (*Func_Ptr)(void))
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	00 d0       	rcall	.+0      	; 0x2278 <CallBack_Int0+0x6>
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
	External_Function0=Func_Ptr;
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	90 93 99 01 	sts	0x0199, r25
    2288:	80 93 98 01 	sts	0x0198, r24
	return E_NOK;
    228c:	81 e0       	ldi	r24, 0x01	; 1
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <Enable_External_INT1>:
/*****************************************************************************************************/
STD_Return Enable_External_INT1(Peripheral_Interrupt_State_t State)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <Enable_External_INT1+0x6>
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <Enable_External_INT1+0x8>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	3c 83       	std	Y+4, r19	; 0x04
    22ae:	2b 83       	std	Y+3, r18	; 0x03
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	31 f0       	breq	.+12     	; 0x22c4 <Enable_External_INT1+0x2c>
    22b8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ba:	3c 81       	ldd	r19, Y+4	; 0x04
    22bc:	21 30       	cpi	r18, 0x01	; 1
    22be:	31 05       	cpc	r19, r1
    22c0:	49 f0       	breq	.+18     	; 0x22d4 <Enable_External_INT1+0x3c>
    22c2:	10 c0       	rjmp	.+32     	; 0x22e4 <Enable_External_INT1+0x4c>
		{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT1);
    22c4:	ab e5       	ldi	r26, 0x5B	; 91
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	eb e5       	ldi	r30, 0x5B	; 91
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	80 68       	ori	r24, 0x80	; 128
    22d0:	8c 93       	st	X, r24
    22d2:	0a c0       	rjmp	.+20     	; 0x22e8 <Enable_External_INT1+0x50>
		break;
		case Disable_PIE_Interrupt:
			CLEAR_BIT(GICR,INT1);
    22d4:	ab e5       	ldi	r26, 0x5B	; 91
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	eb e5       	ldi	r30, 0x5B	; 91
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	8f 77       	andi	r24, 0x7F	; 127
    22e0:	8c 93       	st	X, r24
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <Enable_External_INT1+0x50>
		break;
		default:
			return E_OK;
    22e4:	1a 82       	std	Y+2, r1	; 0x02
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <Enable_External_INT1+0x54>
		}
	return E_NOK;
    22e8:	31 e0       	ldi	r19, 0x01	; 1
    22ea:	3a 83       	std	Y+2, r19	; 0x02
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <External_Int1_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int1_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <External_Int1_EdgeSelection+0x6>
    2302:	00 d0       	rcall	.+0      	; 0x2304 <External_Int1_EdgeSelection+0x8>
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	3c 83       	std	Y+4, r19	; 0x04
    2312:	2b 83       	std	Y+3, r18	; 0x03
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	b1 f0       	breq	.+44     	; 0x2348 <External_Int1_EdgeSelection+0x4c>
    231c:	2b 81       	ldd	r18, Y+3	; 0x03
    231e:	3c 81       	ldd	r19, Y+4	; 0x04
    2320:	21 30       	cpi	r18, 0x01	; 1
    2322:	31 05       	cpc	r19, r1
    2324:	11 f5       	brne	.+68     	; 0x236a <External_Int1_EdgeSelection+0x6e>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCR,ISC10);
    2326:	a5 e5       	ldi	r26, 0x55	; 85
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e5 e5       	ldi	r30, 0x55	; 85
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	84 60       	ori	r24, 0x04	; 4
    2332:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    2334:	a5 e5       	ldi	r26, 0x55	; 85
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e5 e5       	ldi	r30, 0x55	; 85
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	88 60       	ori	r24, 0x08	; 8
    2340:	8c 93       	st	X, r24
								return E_NOK;
    2342:	31 e0       	ldi	r19, 0x01	; 1
    2344:	3a 83       	std	Y+2, r19	; 0x02
    2346:	12 c0       	rjmp	.+36     	; 0x236c <External_Int1_EdgeSelection+0x70>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCR,ISC10);
    2348:	a5 e5       	ldi	r26, 0x55	; 85
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e5 e5       	ldi	r30, 0x55	; 85
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	8b 7f       	andi	r24, 0xFB	; 251
    2354:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    2356:	a5 e5       	ldi	r26, 0x55	; 85
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e5 e5       	ldi	r30, 0x55	; 85
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	88 60       	ori	r24, 0x08	; 8
    2362:	8c 93       	st	X, r24
								return E_NOK;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	8a 83       	std	Y+2, r24	; 0x02
    2368:	01 c0       	rjmp	.+2      	; 0x236c <External_Int1_EdgeSelection+0x70>
								break;
						default:
							return E_OK;
    236a:	1a 82       	std	Y+2, r1	; 0x02
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
					}
		return E_NOK;
}
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <CallBack_Int1>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int1(void (*Func_Ptr)(void))
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <CallBack_Int1+0x6>
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
	External_Function1=Func_Ptr;
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	90 93 9b 01 	sts	0x019B, r25
    2392:	80 93 9a 01 	sts	0x019A, r24
	return E_NOK;
    2396:	81 e0       	ldi	r24, 0x01	; 1
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <Enable_External_INT2>:
/*****************************************************************************************************/

STD_Return Enable_External_INT2(Peripheral_Interrupt_State_t State)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <Enable_External_INT2+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <Enable_External_INT2+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	3c 83       	std	Y+4, r19	; 0x04
    23b8:	2b 83       	std	Y+3, r18	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	31 f0       	breq	.+12     	; 0x23ce <Enable_External_INT2+0x2c>
    23c2:	2b 81       	ldd	r18, Y+3	; 0x03
    23c4:	3c 81       	ldd	r19, Y+4	; 0x04
    23c6:	21 30       	cpi	r18, 0x01	; 1
    23c8:	31 05       	cpc	r19, r1
    23ca:	49 f0       	breq	.+18     	; 0x23de <Enable_External_INT2+0x3c>
    23cc:	10 c0       	rjmp	.+32     	; 0x23ee <Enable_External_INT2+0x4c>
		{
			case Enable_PIE_Interrupt:
				SET_BIT(GICR,INT2);
    23ce:	ab e5       	ldi	r26, 0x5B	; 91
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	eb e5       	ldi	r30, 0x5B	; 91
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	80 62       	ori	r24, 0x20	; 32
    23da:	8c 93       	st	X, r24
    23dc:	0a c0       	rjmp	.+20     	; 0x23f2 <Enable_External_INT2+0x50>
				break;
				case Disable_PIE_Interrupt:
					CLEAR_BIT(GICR,INT1);
    23de:	ab e5       	ldi	r26, 0x5B	; 91
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	eb e5       	ldi	r30, 0x5B	; 91
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	8f 77       	andi	r24, 0x7F	; 127
    23ea:	8c 93       	st	X, r24
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <Enable_External_INT2+0x50>
				break;
				default:
					return E_OK;
    23ee:	1a 82       	std	Y+2, r1	; 0x02
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <Enable_External_INT2+0x54>
		 	}
	return E_NOK;
    23f2:	31 e0       	ldi	r19, 0x01	; 1
    23f4:	3a 83       	std	Y+2, r19	; 0x02
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <External_Int2_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int2_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <External_Int2_EdgeSelection+0x6>
    240c:	00 d0       	rcall	.+0      	; 0x240e <External_Int2_EdgeSelection+0x8>
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	3c 83       	std	Y+4, r19	; 0x04
    241c:	2b 83       	std	Y+3, r18	; 0x03
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	79 f0       	breq	.+30     	; 0x2444 <External_Int2_EdgeSelection+0x3e>
    2426:	2b 81       	ldd	r18, Y+3	; 0x03
    2428:	3c 81       	ldd	r19, Y+4	; 0x04
    242a:	21 30       	cpi	r18, 0x01	; 1
    242c:	31 05       	cpc	r19, r1
    242e:	a1 f4       	brne	.+40     	; 0x2458 <External_Int2_EdgeSelection+0x52>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCSR,ISC2);
    2430:	a4 e5       	ldi	r26, 0x54	; 84
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e4 e5       	ldi	r30, 0x54	; 84
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 64       	ori	r24, 0x40	; 64
    243c:	8c 93       	st	X, r24
								return E_NOK;
    243e:	31 e0       	ldi	r19, 0x01	; 1
    2440:	3a 83       	std	Y+2, r19	; 0x02
    2442:	0b c0       	rjmp	.+22     	; 0x245a <External_Int2_EdgeSelection+0x54>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCSR,ISC2);
    2444:	a4 e5       	ldi	r26, 0x54	; 84
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e4 e5       	ldi	r30, 0x54	; 84
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8f 7b       	andi	r24, 0xBF	; 191
    2450:	8c 93       	st	X, r24
								return E_NOK;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	8a 83       	std	Y+2, r24	; 0x02
    2456:	01 c0       	rjmp	.+2      	; 0x245a <External_Int2_EdgeSelection+0x54>
								break;
						default:
							return E_OK;
    2458:	1a 82       	std	Y+2, r1	; 0x02
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
					}

		return E_NOK;
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <CallBack_Int2>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int2(void (*Func_Ptr)(void))
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <CallBack_Int2+0x6>
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
	External_Function2=Func_Ptr;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	90 93 9d 01 	sts	0x019D, r25
    2480:	80 93 9c 01 	sts	0x019C, r24
	return E_NOK;
    2484:	81 e0       	ldi	r24, 0x01	; 1
}
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <DIO_init>:
 * 
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 **/
void DIO_init(void)
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    // initializing all pins are input
    DDRA=0;
    2498:	ea e3       	ldi	r30, 0x3A	; 58
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	10 82       	st	Z, r1
    DDRB=0;
    249e:	e7 e3       	ldi	r30, 0x37	; 55
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	10 82       	st	Z, r1
    DDRC=0;
    24a4:	e4 e3       	ldi	r30, 0x34	; 52
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	10 82       	st	Z, r1
    DDRD=0;
    24aa:	e1 e3       	ldi	r30, 0x31	; 49
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	10 82       	st	Z, r1

    PORTA=0;
    24b0:	eb e3       	ldi	r30, 0x3B	; 59
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	10 82       	st	Z, r1
    PORTB=0;
    24b6:	e8 e3       	ldi	r30, 0x38	; 56
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	10 82       	st	Z, r1
    PORTC=0;
    24bc:	e5 e3       	ldi	r30, 0x35	; 53
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	10 82       	st	Z, r1
    PORTD=0;
    24c2:	e2 e3       	ldi	r30, 0x32	; 50
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	10 82       	st	Z, r1
    //enable the internal pull up resistor
    CLEAR_BIT(SFIOR,PUD);
    24c8:	a0 e5       	ldi	r26, 0x50	; 80
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e0 e5       	ldi	r30, 0x50	; 80
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	8b 7f       	andi	r24, 0xFB	; 251
    24d4:	8c 93       	st	X, r24
}
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <DIO_SetPinDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinDirection(DIO_Ports_t PORT, u8 PIN, DIO_Direction_t Direction)
	{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	2e 97       	sbiw	r28, 0x0e	; 14
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	6a 83       	std	Y+2, r22	; 0x02
    24f4:	4b 83       	std	Y+3, r20	; 0x03
		// check for safety
		if(PIN>MAX_PinNum)
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	88 30       	cpi	r24, 0x08	; 8
    24fa:	10 f0       	brcs	.+4      	; 0x2500 <DIO_SetPinDirection+0x24>
			{
				return E_OK;
    24fc:	1e 86       	std	Y+14, r1	; 0x0e
    24fe:	0e c1       	rjmp	.+540    	; 0x271c <DIO_SetPinDirection+0x240>
			}
		else
			{
				switch(PORT)
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	3d 87       	std	Y+13, r19	; 0x0d
    2508:	2c 87       	std	Y+12, r18	; 0x0c
    250a:	8c 85       	ldd	r24, Y+12	; 0x0c
    250c:	9d 85       	ldd	r25, Y+13	; 0x0d
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	91 05       	cpc	r25, r1
    2512:	09 f4       	brne	.+2      	; 0x2516 <DIO_SetPinDirection+0x3a>
    2514:	51 c0       	rjmp	.+162    	; 0x25b8 <DIO_SetPinDirection+0xdc>
    2516:	2c 85       	ldd	r18, Y+12	; 0x0c
    2518:	3d 85       	ldd	r19, Y+13	; 0x0d
    251a:	22 30       	cpi	r18, 0x02	; 2
    251c:	31 05       	cpc	r19, r1
    251e:	2c f4       	brge	.+10     	; 0x252a <DIO_SetPinDirection+0x4e>
    2520:	8c 85       	ldd	r24, Y+12	; 0x0c
    2522:	9d 85       	ldd	r25, Y+13	; 0x0d
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	71 f0       	breq	.+28     	; 0x2544 <DIO_SetPinDirection+0x68>
    2528:	f5 c0       	rjmp	.+490    	; 0x2714 <DIO_SetPinDirection+0x238>
    252a:	2c 85       	ldd	r18, Y+12	; 0x0c
    252c:	3d 85       	ldd	r19, Y+13	; 0x0d
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	31 05       	cpc	r19, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <DIO_SetPinDirection+0x5a>
    2534:	7b c0       	rjmp	.+246    	; 0x262c <DIO_SetPinDirection+0x150>
    2536:	8c 85       	ldd	r24, Y+12	; 0x0c
    2538:	9d 85       	ldd	r25, Y+13	; 0x0d
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <DIO_SetPinDirection+0x66>
    2540:	af c0       	rjmp	.+350    	; 0x26a0 <DIO_SetPinDirection+0x1c4>
    2542:	e8 c0       	rjmp	.+464    	; 0x2714 <DIO_SetPinDirection+0x238>
					{
						case DIO_PORTA:
							switch (Direction)
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	3b 87       	std	Y+11, r19	; 0x0b
    254c:	2a 87       	std	Y+10, r18	; 0x0a
    254e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2550:	9b 85       	ldd	r25, Y+11	; 0x0b
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	31 f0       	breq	.+12     	; 0x2562 <DIO_SetPinDirection+0x86>
    2556:	2a 85       	ldd	r18, Y+10	; 0x0a
    2558:	3b 85       	ldd	r19, Y+11	; 0x0b
    255a:	21 30       	cpi	r18, 0x01	; 1
    255c:	31 05       	cpc	r19, r1
    255e:	b1 f0       	breq	.+44     	; 0x258c <DIO_SetPinDirection+0xb0>
    2560:	29 c0       	rjmp	.+82     	; 0x25b4 <DIO_SetPinDirection+0xd8>
								{
									case DIO_INPUT:
									CLEAR_BIT(DDRA,PIN);
    2562:	aa e3       	ldi	r26, 0x3A	; 58
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	ea e3       	ldi	r30, 0x3A	; 58
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	48 2f       	mov	r20, r24
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	02 2e       	mov	r0, r18
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <DIO_SetPinDirection+0xa4>
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	0a 94       	dec	r0
    2582:	e2 f7       	brpl	.-8      	; 0x257c <DIO_SetPinDirection+0xa0>
    2584:	80 95       	com	r24
    2586:	84 23       	and	r24, r20
    2588:	8c 93       	st	X, r24
    258a:	c6 c0       	rjmp	.+396    	; 0x2718 <DIO_SetPinDirection+0x23c>
									break;
									case DIO_OUTPUT:
									SET_BIT(DDRA,PIN);
    258c:	aa e3       	ldi	r26, 0x3A	; 58
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	ea e3       	ldi	r30, 0x3A	; 58
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	48 2f       	mov	r20, r24
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	02 2e       	mov	r0, r18
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <DIO_SetPinDirection+0xce>
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	0a 94       	dec	r0
    25ac:	e2 f7       	brpl	.-8      	; 0x25a6 <DIO_SetPinDirection+0xca>
    25ae:	84 2b       	or	r24, r20
    25b0:	8c 93       	st	X, r24
    25b2:	b2 c0       	rjmp	.+356    	; 0x2718 <DIO_SetPinDirection+0x23c>
									break;
									default:
									return E_OK;
    25b4:	1e 86       	std	Y+14, r1	; 0x0e
    25b6:	b2 c0       	rjmp	.+356    	; 0x271c <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTB:
							switch (Direction)
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	39 87       	std	Y+9, r19	; 0x09
    25c0:	28 87       	std	Y+8, r18	; 0x08
    25c2:	88 85       	ldd	r24, Y+8	; 0x08
    25c4:	99 85       	ldd	r25, Y+9	; 0x09
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	31 f0       	breq	.+12     	; 0x25d6 <DIO_SetPinDirection+0xfa>
    25ca:	28 85       	ldd	r18, Y+8	; 0x08
    25cc:	39 85       	ldd	r19, Y+9	; 0x09
    25ce:	21 30       	cpi	r18, 0x01	; 1
    25d0:	31 05       	cpc	r19, r1
    25d2:	b1 f0       	breq	.+44     	; 0x2600 <DIO_SetPinDirection+0x124>
    25d4:	29 c0       	rjmp	.+82     	; 0x2628 <DIO_SetPinDirection+0x14c>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRB,PIN);
    25d6:	a7 e3       	ldi	r26, 0x37	; 55
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e7 e3       	ldi	r30, 0x37	; 55
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	48 2f       	mov	r20, r24
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	02 2e       	mov	r0, r18
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <DIO_SetPinDirection+0x118>
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	0a 94       	dec	r0
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <DIO_SetPinDirection+0x114>
    25f8:	80 95       	com	r24
    25fa:	84 23       	and	r24, r20
    25fc:	8c 93       	st	X, r24
    25fe:	8c c0       	rjmp	.+280    	; 0x2718 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRB,PIN);
    2600:	a7 e3       	ldi	r26, 0x37	; 55
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e7 e3       	ldi	r30, 0x37	; 55
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	48 2f       	mov	r20, r24
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	02 2e       	mov	r0, r18
    2618:	02 c0       	rjmp	.+4      	; 0x261e <DIO_SetPinDirection+0x142>
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	0a 94       	dec	r0
    2620:	e2 f7       	brpl	.-8      	; 0x261a <DIO_SetPinDirection+0x13e>
    2622:	84 2b       	or	r24, r20
    2624:	8c 93       	st	X, r24
    2626:	78 c0       	rjmp	.+240    	; 0x2718 <DIO_SetPinDirection+0x23c>
										break;
									default:
									return E_OK;
    2628:	1e 86       	std	Y+14, r1	; 0x0e
    262a:	78 c0       	rjmp	.+240    	; 0x271c <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTC:
							switch (Direction)
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	3f 83       	std	Y+7, r19	; 0x07
    2634:	2e 83       	std	Y+6, r18	; 0x06
    2636:	8e 81       	ldd	r24, Y+6	; 0x06
    2638:	9f 81       	ldd	r25, Y+7	; 0x07
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	31 f0       	breq	.+12     	; 0x264a <DIO_SetPinDirection+0x16e>
    263e:	2e 81       	ldd	r18, Y+6	; 0x06
    2640:	3f 81       	ldd	r19, Y+7	; 0x07
    2642:	21 30       	cpi	r18, 0x01	; 1
    2644:	31 05       	cpc	r19, r1
    2646:	b1 f0       	breq	.+44     	; 0x2674 <DIO_SetPinDirection+0x198>
    2648:	29 c0       	rjmp	.+82     	; 0x269c <DIO_SetPinDirection+0x1c0>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRC,PIN);
    264a:	a4 e3       	ldi	r26, 0x34	; 52
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e4 e3       	ldi	r30, 0x34	; 52
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	48 2f       	mov	r20, r24
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	02 2e       	mov	r0, r18
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <DIO_SetPinDirection+0x18c>
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	0a 94       	dec	r0
    266a:	e2 f7       	brpl	.-8      	; 0x2664 <DIO_SetPinDirection+0x188>
    266c:	80 95       	com	r24
    266e:	84 23       	and	r24, r20
    2670:	8c 93       	st	X, r24
    2672:	52 c0       	rjmp	.+164    	; 0x2718 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRC,PIN);
    2674:	a4 e3       	ldi	r26, 0x34	; 52
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e4 e3       	ldi	r30, 0x34	; 52
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	48 2f       	mov	r20, r24
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	02 2e       	mov	r0, r18
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <DIO_SetPinDirection+0x1b6>
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	0a 94       	dec	r0
    2694:	e2 f7       	brpl	.-8      	; 0x268e <DIO_SetPinDirection+0x1b2>
    2696:	84 2b       	or	r24, r20
    2698:	8c 93       	st	X, r24
    269a:	3e c0       	rjmp	.+124    	; 0x2718 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    269c:	1e 86       	std	Y+14, r1	; 0x0e
    269e:	3e c0       	rjmp	.+124    	; 0x271c <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTD:
							switch (Direction)
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	28 2f       	mov	r18, r24
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	3d 83       	std	Y+5, r19	; 0x05
    26a8:	2c 83       	std	Y+4, r18	; 0x04
    26aa:	8c 81       	ldd	r24, Y+4	; 0x04
    26ac:	9d 81       	ldd	r25, Y+5	; 0x05
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	31 f0       	breq	.+12     	; 0x26be <DIO_SetPinDirection+0x1e2>
    26b2:	2c 81       	ldd	r18, Y+4	; 0x04
    26b4:	3d 81       	ldd	r19, Y+5	; 0x05
    26b6:	21 30       	cpi	r18, 0x01	; 1
    26b8:	31 05       	cpc	r19, r1
    26ba:	b1 f0       	breq	.+44     	; 0x26e8 <DIO_SetPinDirection+0x20c>
    26bc:	29 c0       	rjmp	.+82     	; 0x2710 <DIO_SetPinDirection+0x234>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRD,PIN);
    26be:	a1 e3       	ldi	r26, 0x31	; 49
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e1 e3       	ldi	r30, 0x31	; 49
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	48 2f       	mov	r20, r24
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	02 2e       	mov	r0, r18
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <DIO_SetPinDirection+0x200>
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	0a 94       	dec	r0
    26de:	e2 f7       	brpl	.-8      	; 0x26d8 <DIO_SetPinDirection+0x1fc>
    26e0:	80 95       	com	r24
    26e2:	84 23       	and	r24, r20
    26e4:	8c 93       	st	X, r24
    26e6:	18 c0       	rjmp	.+48     	; 0x2718 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRD,PIN);
    26e8:	a1 e3       	ldi	r26, 0x31	; 49
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e1 e3       	ldi	r30, 0x31	; 49
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	48 2f       	mov	r20, r24
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	02 2e       	mov	r0, r18
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <DIO_SetPinDirection+0x22a>
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	0a 94       	dec	r0
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <DIO_SetPinDirection+0x226>
    270a:	84 2b       	or	r24, r20
    270c:	8c 93       	st	X, r24
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    2710:	1e 86       	std	Y+14, r1	; 0x0e
    2712:	04 c0       	rjmp	.+8      	; 0x271c <DIO_SetPinDirection+0x240>
								}
							break;
							default:
								return E_OK;
    2714:	1e 86       	std	Y+14, r1	; 0x0e
    2716:	02 c0       	rjmp	.+4      	; 0x271c <DIO_SetPinDirection+0x240>
					}
			}
	return E_NOK;
    2718:	31 e0       	ldi	r19, 0x01	; 1
    271a:	3e 87       	std	Y+14, r19	; 0x0e
    271c:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    271e:	2e 96       	adiw	r28, 0x0e	; 14
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <DIO_SetPortDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortDirection(DIO_Ports_t PORT,u8 Direction)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <DIO_SetPortDirection+0x6>
    2736:	00 d0       	rcall	.+0      	; 0x2738 <DIO_SetPortDirection+0x8>
    2738:	0f 92       	push	r0
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	3d 83       	std	Y+5, r19	; 0x05
    274a:	2c 83       	std	Y+4, r18	; 0x04
    274c:	8c 81       	ldd	r24, Y+4	; 0x04
    274e:	9d 81       	ldd	r25, Y+5	; 0x05
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	91 05       	cpc	r25, r1
    2754:	d1 f0       	breq	.+52     	; 0x278a <DIO_SetPortDirection+0x5a>
    2756:	2c 81       	ldd	r18, Y+4	; 0x04
    2758:	3d 81       	ldd	r19, Y+5	; 0x05
    275a:	22 30       	cpi	r18, 0x02	; 2
    275c:	31 05       	cpc	r19, r1
    275e:	2c f4       	brge	.+10     	; 0x276a <DIO_SetPortDirection+0x3a>
    2760:	8c 81       	ldd	r24, Y+4	; 0x04
    2762:	9d 81       	ldd	r25, Y+5	; 0x05
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	61 f0       	breq	.+24     	; 0x2780 <DIO_SetPortDirection+0x50>
    2768:	1f c0       	rjmp	.+62     	; 0x27a8 <DIO_SetPortDirection+0x78>
    276a:	2c 81       	ldd	r18, Y+4	; 0x04
    276c:	3d 81       	ldd	r19, Y+5	; 0x05
    276e:	22 30       	cpi	r18, 0x02	; 2
    2770:	31 05       	cpc	r19, r1
    2772:	81 f0       	breq	.+32     	; 0x2794 <DIO_SetPortDirection+0x64>
    2774:	8c 81       	ldd	r24, Y+4	; 0x04
    2776:	9d 81       	ldd	r25, Y+5	; 0x05
    2778:	83 30       	cpi	r24, 0x03	; 3
    277a:	91 05       	cpc	r25, r1
    277c:	81 f0       	breq	.+32     	; 0x279e <DIO_SetPortDirection+0x6e>
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <DIO_SetPortDirection+0x78>
						{
							case DIO_PORTA:
								DDRA=Direction;
    2780:	ea e3       	ldi	r30, 0x3A	; 58
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	80 83       	st	Z, r24
    2788:	11 c0       	rjmp	.+34     	; 0x27ac <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTB:
								DDRB=Direction;
    278a:	e7 e3       	ldi	r30, 0x37	; 55
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	80 83       	st	Z, r24
    2792:	0c c0       	rjmp	.+24     	; 0x27ac <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTC:
								DDRC=Direction;
    2794:	e4 e3       	ldi	r30, 0x34	; 52
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	80 83       	st	Z, r24
    279c:	07 c0       	rjmp	.+14     	; 0x27ac <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTD:
								DDRD=Direction;
    279e:	e1 e3       	ldi	r30, 0x31	; 49
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	80 83       	st	Z, r24
    27a6:	02 c0       	rjmp	.+4      	; 0x27ac <DIO_SetPortDirection+0x7c>
							break;
							default:
							return E_OK;
    27a8:	1b 82       	std	Y+3, r1	; 0x03
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <DIO_SetPortDirection+0x80>

						}
	return E_NOK;
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	9b 83       	std	Y+3, r25	; 0x03
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <DIO_SetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 							return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t State)
	{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	2e 97       	sbiw	r28, 0x0e	; 14
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	6a 83       	std	Y+2, r22	; 0x02
    27da:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	88 30       	cpi	r24, 0x08	; 8
    27e0:	10 f0       	brcs	.+4      	; 0x27e6 <DIO_SetPinValue+0x24>
			{
				return E_OK;
    27e2:	1e 86       	std	Y+14, r1	; 0x0e
    27e4:	0e c1       	rjmp	.+540    	; 0x2a02 <DIO_SetPinValue+0x240>
			}
		else
			{
				switch(PORT)
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	3d 87       	std	Y+13, r19	; 0x0d
    27ee:	2c 87       	std	Y+12, r18	; 0x0c
    27f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    27f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    27f4:	81 30       	cpi	r24, 0x01	; 1
    27f6:	91 05       	cpc	r25, r1
    27f8:	09 f4       	brne	.+2      	; 0x27fc <DIO_SetPinValue+0x3a>
    27fa:	51 c0       	rjmp	.+162    	; 0x289e <DIO_SetPinValue+0xdc>
    27fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    27fe:	3d 85       	ldd	r19, Y+13	; 0x0d
    2800:	22 30       	cpi	r18, 0x02	; 2
    2802:	31 05       	cpc	r19, r1
    2804:	2c f4       	brge	.+10     	; 0x2810 <DIO_SetPinValue+0x4e>
    2806:	8c 85       	ldd	r24, Y+12	; 0x0c
    2808:	9d 85       	ldd	r25, Y+13	; 0x0d
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	71 f0       	breq	.+28     	; 0x282a <DIO_SetPinValue+0x68>
    280e:	f5 c0       	rjmp	.+490    	; 0x29fa <DIO_SetPinValue+0x238>
    2810:	2c 85       	ldd	r18, Y+12	; 0x0c
    2812:	3d 85       	ldd	r19, Y+13	; 0x0d
    2814:	22 30       	cpi	r18, 0x02	; 2
    2816:	31 05       	cpc	r19, r1
    2818:	09 f4       	brne	.+2      	; 0x281c <DIO_SetPinValue+0x5a>
    281a:	7b c0       	rjmp	.+246    	; 0x2912 <DIO_SetPinValue+0x150>
    281c:	8c 85       	ldd	r24, Y+12	; 0x0c
    281e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2820:	83 30       	cpi	r24, 0x03	; 3
    2822:	91 05       	cpc	r25, r1
    2824:	09 f4       	brne	.+2      	; 0x2828 <DIO_SetPinValue+0x66>
    2826:	af c0       	rjmp	.+350    	; 0x2986 <DIO_SetPinValue+0x1c4>
    2828:	e8 c0       	rjmp	.+464    	; 0x29fa <DIO_SetPinValue+0x238>
					{
						case DIO_PORTA:
							switch(State)
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	3b 87       	std	Y+11, r19	; 0x0b
    2832:	2a 87       	std	Y+10, r18	; 0x0a
    2834:	8a 85       	ldd	r24, Y+10	; 0x0a
    2836:	9b 85       	ldd	r25, Y+11	; 0x0b
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	31 f0       	breq	.+12     	; 0x2848 <DIO_SetPinValue+0x86>
    283c:	2a 85       	ldd	r18, Y+10	; 0x0a
    283e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2840:	21 30       	cpi	r18, 0x01	; 1
    2842:	31 05       	cpc	r19, r1
    2844:	b1 f0       	breq	.+44     	; 0x2872 <DIO_SetPinValue+0xb0>
    2846:	29 c0       	rjmp	.+82     	; 0x289a <DIO_SetPinValue+0xd8>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTA,PIN);
    2848:	ab e3       	ldi	r26, 0x3B	; 59
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	eb e3       	ldi	r30, 0x3B	; 59
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	48 2f       	mov	r20, r24
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	02 2e       	mov	r0, r18
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <DIO_SetPinValue+0xa4>
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	0a 94       	dec	r0
    2868:	e2 f7       	brpl	.-8      	; 0x2862 <DIO_SetPinValue+0xa0>
    286a:	80 95       	com	r24
    286c:	84 23       	and	r24, r20
    286e:	8c 93       	st	X, r24
    2870:	c6 c0       	rjmp	.+396    	; 0x29fe <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTA,PIN);
    2872:	ab e3       	ldi	r26, 0x3B	; 59
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	eb e3       	ldi	r30, 0x3B	; 59
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	48 2f       	mov	r20, r24
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	02 2e       	mov	r0, r18
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <DIO_SetPinValue+0xce>
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	0a 94       	dec	r0
    2892:	e2 f7       	brpl	.-8      	; 0x288c <DIO_SetPinValue+0xca>
    2894:	84 2b       	or	r24, r20
    2896:	8c 93       	st	X, r24
    2898:	b2 c0       	rjmp	.+356    	; 0x29fe <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    289a:	1e 86       	std	Y+14, r1	; 0x0e
    289c:	b2 c0       	rjmp	.+356    	; 0x2a02 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTB:
							switch(State)
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	28 2f       	mov	r18, r24
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	39 87       	std	Y+9, r19	; 0x09
    28a6:	28 87       	std	Y+8, r18	; 0x08
    28a8:	88 85       	ldd	r24, Y+8	; 0x08
    28aa:	99 85       	ldd	r25, Y+9	; 0x09
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	31 f0       	breq	.+12     	; 0x28bc <DIO_SetPinValue+0xfa>
    28b0:	28 85       	ldd	r18, Y+8	; 0x08
    28b2:	39 85       	ldd	r19, Y+9	; 0x09
    28b4:	21 30       	cpi	r18, 0x01	; 1
    28b6:	31 05       	cpc	r19, r1
    28b8:	b1 f0       	breq	.+44     	; 0x28e6 <DIO_SetPinValue+0x124>
    28ba:	29 c0       	rjmp	.+82     	; 0x290e <DIO_SetPinValue+0x14c>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTB,PIN);
    28bc:	a8 e3       	ldi	r26, 0x38	; 56
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e8 e3       	ldi	r30, 0x38	; 56
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	48 2f       	mov	r20, r24
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	02 2e       	mov	r0, r18
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <DIO_SetPinValue+0x118>
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	0a 94       	dec	r0
    28dc:	e2 f7       	brpl	.-8      	; 0x28d6 <DIO_SetPinValue+0x114>
    28de:	80 95       	com	r24
    28e0:	84 23       	and	r24, r20
    28e2:	8c 93       	st	X, r24
    28e4:	8c c0       	rjmp	.+280    	; 0x29fe <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTB,PIN);
    28e6:	a8 e3       	ldi	r26, 0x38	; 56
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e8 e3       	ldi	r30, 0x38	; 56
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	48 2f       	mov	r20, r24
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	02 2e       	mov	r0, r18
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <DIO_SetPinValue+0x142>
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	0a 94       	dec	r0
    2906:	e2 f7       	brpl	.-8      	; 0x2900 <DIO_SetPinValue+0x13e>
    2908:	84 2b       	or	r24, r20
    290a:	8c 93       	st	X, r24
    290c:	78 c0       	rjmp	.+240    	; 0x29fe <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    290e:	1e 86       	std	Y+14, r1	; 0x0e
    2910:	78 c0       	rjmp	.+240    	; 0x2a02 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTC:
							switch(State)
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	3f 83       	std	Y+7, r19	; 0x07
    291a:	2e 83       	std	Y+6, r18	; 0x06
    291c:	8e 81       	ldd	r24, Y+6	; 0x06
    291e:	9f 81       	ldd	r25, Y+7	; 0x07
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	31 f0       	breq	.+12     	; 0x2930 <DIO_SetPinValue+0x16e>
    2924:	2e 81       	ldd	r18, Y+6	; 0x06
    2926:	3f 81       	ldd	r19, Y+7	; 0x07
    2928:	21 30       	cpi	r18, 0x01	; 1
    292a:	31 05       	cpc	r19, r1
    292c:	b1 f0       	breq	.+44     	; 0x295a <DIO_SetPinValue+0x198>
    292e:	29 c0       	rjmp	.+82     	; 0x2982 <DIO_SetPinValue+0x1c0>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTC,PIN);
    2930:	a5 e3       	ldi	r26, 0x35	; 53
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e5 e3       	ldi	r30, 0x35	; 53
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	48 2f       	mov	r20, r24
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	02 2e       	mov	r0, r18
    2948:	02 c0       	rjmp	.+4      	; 0x294e <DIO_SetPinValue+0x18c>
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	0a 94       	dec	r0
    2950:	e2 f7       	brpl	.-8      	; 0x294a <DIO_SetPinValue+0x188>
    2952:	80 95       	com	r24
    2954:	84 23       	and	r24, r20
    2956:	8c 93       	st	X, r24
    2958:	52 c0       	rjmp	.+164    	; 0x29fe <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTC,PIN);
    295a:	a5 e3       	ldi	r26, 0x35	; 53
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e5 e3       	ldi	r30, 0x35	; 53
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	48 2f       	mov	r20, r24
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	02 2e       	mov	r0, r18
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <DIO_SetPinValue+0x1b6>
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	0a 94       	dec	r0
    297a:	e2 f7       	brpl	.-8      	; 0x2974 <DIO_SetPinValue+0x1b2>
    297c:	84 2b       	or	r24, r20
    297e:	8c 93       	st	X, r24
    2980:	3e c0       	rjmp	.+124    	; 0x29fe <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    2982:	1e 86       	std	Y+14, r1	; 0x0e
    2984:	3e c0       	rjmp	.+124    	; 0x2a02 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTD:
							switch(State)
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	3d 83       	std	Y+5, r19	; 0x05
    298e:	2c 83       	std	Y+4, r18	; 0x04
    2990:	8c 81       	ldd	r24, Y+4	; 0x04
    2992:	9d 81       	ldd	r25, Y+5	; 0x05
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	31 f0       	breq	.+12     	; 0x29a4 <DIO_SetPinValue+0x1e2>
    2998:	2c 81       	ldd	r18, Y+4	; 0x04
    299a:	3d 81       	ldd	r19, Y+5	; 0x05
    299c:	21 30       	cpi	r18, 0x01	; 1
    299e:	31 05       	cpc	r19, r1
    29a0:	b1 f0       	breq	.+44     	; 0x29ce <DIO_SetPinValue+0x20c>
    29a2:	29 c0       	rjmp	.+82     	; 0x29f6 <DIO_SetPinValue+0x234>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTD,PIN);
    29a4:	a2 e3       	ldi	r26, 0x32	; 50
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e2 e3       	ldi	r30, 0x32	; 50
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	48 2f       	mov	r20, r24
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	02 2e       	mov	r0, r18
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <DIO_SetPinValue+0x200>
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	0a 94       	dec	r0
    29c4:	e2 f7       	brpl	.-8      	; 0x29be <DIO_SetPinValue+0x1fc>
    29c6:	80 95       	com	r24
    29c8:	84 23       	and	r24, r20
    29ca:	8c 93       	st	X, r24
    29cc:	18 c0       	rjmp	.+48     	; 0x29fe <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTD,PIN);
    29ce:	a2 e3       	ldi	r26, 0x32	; 50
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e2 e3       	ldi	r30, 0x32	; 50
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	48 2f       	mov	r20, r24
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	02 2e       	mov	r0, r18
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <DIO_SetPinValue+0x22a>
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	0a 94       	dec	r0
    29ee:	e2 f7       	brpl	.-8      	; 0x29e8 <DIO_SetPinValue+0x226>
    29f0:	84 2b       	or	r24, r20
    29f2:	8c 93       	st	X, r24
    29f4:	04 c0       	rjmp	.+8      	; 0x29fe <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    29f6:	1e 86       	std	Y+14, r1	; 0x0e
    29f8:	04 c0       	rjmp	.+8      	; 0x2a02 <DIO_SetPinValue+0x240>
								}
						break;
							default:
							return E_OK;
    29fa:	1e 86       	std	Y+14, r1	; 0x0e
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <DIO_SetPinValue+0x240>
					}
			}
		return E_NOK;
    29fe:	31 e0       	ldi	r19, 0x01	; 1
    2a00:	3e 87       	std	Y+14, r19	; 0x0e
    2a02:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    2a04:	2e 96       	adiw	r28, 0x0e	; 14
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <DIO_SetPortValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortValue(DIO_Ports_t PORT,u8 value)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <DIO_SetPortValue+0x6>
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <DIO_SetPortValue+0x8>
    2a1e:	0f 92       	push	r0
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	3d 83       	std	Y+5, r19	; 0x05
    2a30:	2c 83       	std	Y+4, r18	; 0x04
    2a32:	8c 81       	ldd	r24, Y+4	; 0x04
    2a34:	9d 81       	ldd	r25, Y+5	; 0x05
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	91 05       	cpc	r25, r1
    2a3a:	d1 f0       	breq	.+52     	; 0x2a70 <DIO_SetPortValue+0x5a>
    2a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a40:	22 30       	cpi	r18, 0x02	; 2
    2a42:	31 05       	cpc	r19, r1
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <DIO_SetPortValue+0x3a>
    2a46:	8c 81       	ldd	r24, Y+4	; 0x04
    2a48:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	61 f0       	breq	.+24     	; 0x2a66 <DIO_SetPortValue+0x50>
    2a4e:	1f c0       	rjmp	.+62     	; 0x2a8e <DIO_SetPortValue+0x78>
    2a50:	2c 81       	ldd	r18, Y+4	; 0x04
    2a52:	3d 81       	ldd	r19, Y+5	; 0x05
    2a54:	22 30       	cpi	r18, 0x02	; 2
    2a56:	31 05       	cpc	r19, r1
    2a58:	81 f0       	breq	.+32     	; 0x2a7a <DIO_SetPortValue+0x64>
    2a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5e:	83 30       	cpi	r24, 0x03	; 3
    2a60:	91 05       	cpc	r25, r1
    2a62:	81 f0       	breq	.+32     	; 0x2a84 <DIO_SetPortValue+0x6e>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <DIO_SetPortValue+0x78>
						{
							case DIO_PORTA:
								PORTA=value;
    2a66:	eb e3       	ldi	r30, 0x3B	; 59
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	80 83       	st	Z, r24
    2a6e:	11 c0       	rjmp	.+34     	; 0x2a92 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTB:
								PORTB=value;
    2a70:	e8 e3       	ldi	r30, 0x38	; 56
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	80 83       	st	Z, r24
    2a78:	0c c0       	rjmp	.+24     	; 0x2a92 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTC:
								PORTC=value;
    2a7a:	e5 e3       	ldi	r30, 0x35	; 53
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	80 83       	st	Z, r24
    2a82:	07 c0       	rjmp	.+14     	; 0x2a92 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTD:
								PORTD=value;
    2a84:	e2 e3       	ldi	r30, 0x32	; 50
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	80 83       	st	Z, r24
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <DIO_SetPortValue+0x7c>

							break;
							default:
							return E_OK;
    2a8e:	1b 82       	std	Y+3, r1	; 0x03
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <DIO_SetPortValue+0x80>

						}
	return E_NOK;
    2a92:	91 e0       	ldi	r25, 0x01	; 1
    2a94:	9b 83       	std	Y+3, r25	; 0x03
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <DIO_GetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_GetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t* State)
	{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	27 97       	sbiw	r28, 0x07	; 7
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	6a 83       	std	Y+2, r22	; 0x02
    2ac0:	5c 83       	std	Y+4, r21	; 0x04
    2ac2:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	88 30       	cpi	r24, 0x08	; 8
    2ac8:	10 f0       	brcs	.+4      	; 0x2ace <DIO_GetPinValue+0x26>
			{
				return E_OK;
    2aca:	1f 82       	std	Y+7, r1	; 0x07
    2acc:	75 c0       	rjmp	.+234    	; 0x2bb8 <DIO_GetPinValue+0x110>
			}
		else
			{
					switch(PORT)
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	3e 83       	std	Y+6, r19	; 0x06
    2ad6:	2d 83       	std	Y+5, r18	; 0x05
    2ad8:	4d 81       	ldd	r20, Y+5	; 0x05
    2ada:	5e 81       	ldd	r21, Y+6	; 0x06
    2adc:	41 30       	cpi	r20, 0x01	; 1
    2ade:	51 05       	cpc	r21, r1
    2ae0:	59 f1       	breq	.+86     	; 0x2b38 <DIO_GetPinValue+0x90>
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	82 30       	cpi	r24, 0x02	; 2
    2ae8:	91 05       	cpc	r25, r1
    2aea:	34 f4       	brge	.+12     	; 0x2af8 <DIO_GetPinValue+0x50>
    2aec:	2d 81       	ldd	r18, Y+5	; 0x05
    2aee:	3e 81       	ldd	r19, Y+6	; 0x06
    2af0:	21 15       	cp	r18, r1
    2af2:	31 05       	cpc	r19, r1
    2af4:	69 f0       	breq	.+26     	; 0x2b10 <DIO_GetPinValue+0x68>
    2af6:	5c c0       	rjmp	.+184    	; 0x2bb0 <DIO_GetPinValue+0x108>
    2af8:	4d 81       	ldd	r20, Y+5	; 0x05
    2afa:	5e 81       	ldd	r21, Y+6	; 0x06
    2afc:	42 30       	cpi	r20, 0x02	; 2
    2afe:	51 05       	cpc	r21, r1
    2b00:	79 f1       	breq	.+94     	; 0x2b60 <DIO_GetPinValue+0xb8>
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	9e 81       	ldd	r25, Y+6	; 0x06
    2b06:	83 30       	cpi	r24, 0x03	; 3
    2b08:	91 05       	cpc	r25, r1
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <DIO_GetPinValue+0x66>
    2b0c:	3d c0       	rjmp	.+122    	; 0x2b88 <DIO_GetPinValue+0xe0>
    2b0e:	50 c0       	rjmp	.+160    	; 0x2bb0 <DIO_GetPinValue+0x108>
						{
							case DIO_PORTA:
								*State=GET_BIT(PINA,PIN);
    2b10:	e9 e3       	ldi	r30, 0x39	; 57
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a9 01       	movw	r20, r18
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <DIO_GetPinValue+0x80>
    2b24:	55 95       	asr	r21
    2b26:	47 95       	ror	r20
    2b28:	8a 95       	dec	r24
    2b2a:	e2 f7       	brpl	.-8      	; 0x2b24 <DIO_GetPinValue+0x7c>
    2b2c:	ca 01       	movw	r24, r20
    2b2e:	81 70       	andi	r24, 0x01	; 1
    2b30:	eb 81       	ldd	r30, Y+3	; 0x03
    2b32:	fc 81       	ldd	r31, Y+4	; 0x04
    2b34:	80 83       	st	Z, r24
    2b36:	3e c0       	rjmp	.+124    	; 0x2bb4 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTB:
								*State=GET_BIT(PINB,PIN);
    2b38:	e6 e3       	ldi	r30, 0x36	; 54
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a9 01       	movw	r20, r18
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <DIO_GetPinValue+0xa8>
    2b4c:	55 95       	asr	r21
    2b4e:	47 95       	ror	r20
    2b50:	8a 95       	dec	r24
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <DIO_GetPinValue+0xa4>
    2b54:	ca 01       	movw	r24, r20
    2b56:	81 70       	andi	r24, 0x01	; 1
    2b58:	eb 81       	ldd	r30, Y+3	; 0x03
    2b5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b5c:	80 83       	st	Z, r24
    2b5e:	2a c0       	rjmp	.+84     	; 0x2bb4 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTC:
								*State=GET_BIT(PINC,PIN);
    2b60:	e3 e3       	ldi	r30, 0x33	; 51
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a9 01       	movw	r20, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <DIO_GetPinValue+0xd0>
    2b74:	55 95       	asr	r21
    2b76:	47 95       	ror	r20
    2b78:	8a 95       	dec	r24
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <DIO_GetPinValue+0xcc>
    2b7c:	ca 01       	movw	r24, r20
    2b7e:	81 70       	andi	r24, 0x01	; 1
    2b80:	eb 81       	ldd	r30, Y+3	; 0x03
    2b82:	fc 81       	ldd	r31, Y+4	; 0x04
    2b84:	80 83       	st	Z, r24
    2b86:	16 c0       	rjmp	.+44     	; 0x2bb4 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTD:
								*State=GET_BIT(PIND,PIN);
    2b88:	e0 e3       	ldi	r30, 0x30	; 48
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a9 01       	movw	r20, r18
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <DIO_GetPinValue+0xf8>
    2b9c:	55 95       	asr	r21
    2b9e:	47 95       	ror	r20
    2ba0:	8a 95       	dec	r24
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <DIO_GetPinValue+0xf4>
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	81 70       	andi	r24, 0x01	; 1
    2ba8:	eb 81       	ldd	r30, Y+3	; 0x03
    2baa:	fc 81       	ldd	r31, Y+4	; 0x04
    2bac:	80 83       	st	Z, r24
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <DIO_GetPinValue+0x10c>
								break;
							default:
								return E_OK;
    2bb0:	1f 82       	std	Y+7, r1	; 0x07
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <DIO_GetPinValue+0x110>
						}
			}
		return E_NOK;
    2bb4:	51 e0       	ldi	r21, 0x01	; 1
    2bb6:	5f 83       	std	Y+7, r21	; 0x07
    2bb8:	8f 81       	ldd	r24, Y+7	; 0x07
	}
    2bba:	27 96       	adiw	r28, 0x07	; 7
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <DIO_togglePin>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_togglePin(DIO_Ports_t port,u8 pin)
 {
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <DIO_togglePin+0x6>
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <DIO_togglePin+0x8>
    2bd4:	0f 92       	push	r0
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PinNum)
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	88 30       	cpi	r24, 0x08	; 8
    2be2:	10 f0       	brcs	.+4      	; 0x2be8 <DIO_togglePin+0x1c>
		{
			return E_OK;
    2be4:	1d 82       	std	Y+5, r1	; 0x05
    2be6:	73 c0       	rjmp	.+230    	; 0x2cce <DIO_togglePin+0x102>
		}
	else
		{
			switch (port)
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	3c 83       	std	Y+4, r19	; 0x04
    2bf0:	2b 83       	std	Y+3, r18	; 0x03
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf6:	81 30       	cpi	r24, 0x01	; 1
    2bf8:	91 05       	cpc	r25, r1
    2bfa:	49 f1       	breq	.+82     	; 0x2c4e <DIO_togglePin+0x82>
    2bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    2bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    2c00:	22 30       	cpi	r18, 0x02	; 2
    2c02:	31 05       	cpc	r19, r1
    2c04:	2c f4       	brge	.+10     	; 0x2c10 <DIO_togglePin+0x44>
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	61 f0       	breq	.+24     	; 0x2c26 <DIO_togglePin+0x5a>
    2c0e:	5b c0       	rjmp	.+182    	; 0x2cc6 <DIO_togglePin+0xfa>
    2c10:	2b 81       	ldd	r18, Y+3	; 0x03
    2c12:	3c 81       	ldd	r19, Y+4	; 0x04
    2c14:	22 30       	cpi	r18, 0x02	; 2
    2c16:	31 05       	cpc	r19, r1
    2c18:	71 f1       	breq	.+92     	; 0x2c76 <DIO_togglePin+0xaa>
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	83 30       	cpi	r24, 0x03	; 3
    2c20:	91 05       	cpc	r25, r1
    2c22:	e9 f1       	breq	.+122    	; 0x2c9e <DIO_togglePin+0xd2>
    2c24:	50 c0       	rjmp	.+160    	; 0x2cc6 <DIO_togglePin+0xfa>
				{
					case DIO_PORTA:
						TOGGLE_BIT(PORTA, pin);
    2c26:	ab e3       	ldi	r26, 0x3B	; 59
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	eb e3       	ldi	r30, 0x3B	; 59
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	48 2f       	mov	r20, r24
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	02 2e       	mov	r0, r18
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <DIO_togglePin+0x78>
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	0a 94       	dec	r0
    2c46:	e2 f7       	brpl	.-8      	; 0x2c40 <DIO_togglePin+0x74>
    2c48:	84 27       	eor	r24, r20
    2c4a:	8c 93       	st	X, r24
    2c4c:	3e c0       	rjmp	.+124    	; 0x2cca <DIO_togglePin+0xfe>
						break;
					case DIO_PORTB:
						TOGGLE_BIT(PORTB, pin);
    2c4e:	a8 e3       	ldi	r26, 0x38	; 56
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	e8 e3       	ldi	r30, 0x38	; 56
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	48 2f       	mov	r20, r24
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	28 2f       	mov	r18, r24
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	02 2e       	mov	r0, r18
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <DIO_togglePin+0xa0>
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	0a 94       	dec	r0
    2c6e:	e2 f7       	brpl	.-8      	; 0x2c68 <DIO_togglePin+0x9c>
    2c70:	84 27       	eor	r24, r20
    2c72:	8c 93       	st	X, r24
    2c74:	2a c0       	rjmp	.+84     	; 0x2cca <DIO_togglePin+0xfe>
						break;
					case DIO_PORTC:
						TOGGLE_BIT(PORTC, pin);
    2c76:	a5 e3       	ldi	r26, 0x35	; 53
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e5 e3       	ldi	r30, 0x35	; 53
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	48 2f       	mov	r20, r24
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	02 2e       	mov	r0, r18
    2c8e:	02 c0       	rjmp	.+4      	; 0x2c94 <DIO_togglePin+0xc8>
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	0a 94       	dec	r0
    2c96:	e2 f7       	brpl	.-8      	; 0x2c90 <DIO_togglePin+0xc4>
    2c98:	84 27       	eor	r24, r20
    2c9a:	8c 93       	st	X, r24
    2c9c:	16 c0       	rjmp	.+44     	; 0x2cca <DIO_togglePin+0xfe>
						break;
					case DIO_PORTD:
						TOGGLE_BIT(PORTD, pin);
    2c9e:	a2 e3       	ldi	r26, 0x32	; 50
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e2 e3       	ldi	r30, 0x32	; 50
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	48 2f       	mov	r20, r24
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	02 2e       	mov	r0, r18
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <DIO_togglePin+0xf0>
    2cb8:	88 0f       	add	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	0a 94       	dec	r0
    2cbe:	e2 f7       	brpl	.-8      	; 0x2cb8 <DIO_togglePin+0xec>
    2cc0:	84 27       	eor	r24, r20
    2cc2:	8c 93       	st	X, r24
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <DIO_togglePin+0xfe>
						break;
					default:
						return E_OK;
    2cc6:	1d 82       	std	Y+5, r1	; 0x05
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <DIO_togglePin+0x102>
				}
	}

	return E_NOK;
    2cca:	91 e0       	ldi	r25, 0x01	; 1
    2ccc:	9d 83       	std	Y+5, r25	; 0x05
    2cce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <DIO_EnablePullup>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_EnablePullup(DIO_Ports_t PORT, u8 PIN, DIO_PullUpState_t Pullstate)
	{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	2e 97       	sbiw	r28, 0x0e	; 14
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	6a 83       	std	Y+2, r22	; 0x02
    2cf8:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	88 30       	cpi	r24, 0x08	; 8
    2cfe:	10 f0       	brcs	.+4      	; 0x2d04 <DIO_EnablePullup+0x24>
			{
				return E_OK;
    2d00:	1e 86       	std	Y+14, r1	; 0x0e
    2d02:	26 c1       	rjmp	.+588    	; 0x2f50 <DIO_EnablePullup+0x270>
			}
		else
			{
				switch(PORT)
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	28 2f       	mov	r18, r24
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	3d 87       	std	Y+13, r19	; 0x0d
    2d0c:	2c 87       	std	Y+12, r18	; 0x0c
    2d0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d10:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	91 05       	cpc	r25, r1
    2d16:	09 f4       	brne	.+2      	; 0x2d1a <DIO_EnablePullup+0x3a>
    2d18:	57 c0       	rjmp	.+174    	; 0x2dc8 <DIO_EnablePullup+0xe8>
    2d1a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d1c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d1e:	22 30       	cpi	r18, 0x02	; 2
    2d20:	31 05       	cpc	r19, r1
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <DIO_EnablePullup+0x4e>
    2d24:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d26:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	71 f0       	breq	.+28     	; 0x2d48 <DIO_EnablePullup+0x68>
    2d2c:	0d c1       	rjmp	.+538    	; 0x2f48 <DIO_EnablePullup+0x268>
    2d2e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d30:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d32:	22 30       	cpi	r18, 0x02	; 2
    2d34:	31 05       	cpc	r19, r1
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <DIO_EnablePullup+0x5a>
    2d38:	87 c0       	rjmp	.+270    	; 0x2e48 <DIO_EnablePullup+0x168>
    2d3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d3e:	83 30       	cpi	r24, 0x03	; 3
    2d40:	91 05       	cpc	r25, r1
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <DIO_EnablePullup+0x66>
    2d44:	c1 c0       	rjmp	.+386    	; 0x2ec8 <DIO_EnablePullup+0x1e8>
    2d46:	00 c1       	rjmp	.+512    	; 0x2f48 <DIO_EnablePullup+0x268>
				{
					case DIO_PORTA:
						switch(Pullstate)
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	3b 87       	std	Y+11, r19	; 0x0b
    2d50:	2a 87       	std	Y+10, r18	; 0x0a
    2d52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	31 f0       	breq	.+12     	; 0x2d66 <DIO_EnablePullup+0x86>
    2d5a:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d5c:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d5e:	21 30       	cpi	r18, 0x01	; 1
    2d60:	31 05       	cpc	r19, r1
    2d62:	41 f1       	breq	.+80     	; 0x2db4 <DIO_EnablePullup+0xd4>
    2d64:	2f c0       	rjmp	.+94     	; 0x2dc4 <DIO_EnablePullup+0xe4>
							{
								case ENABLE_PullUp:
									CLEAR_BIT(DDRA,PIN);
    2d66:	aa e3       	ldi	r26, 0x3A	; 58
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	ea e3       	ldi	r30, 0x3A	; 58
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	48 2f       	mov	r20, r24
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <DIO_EnablePullup+0xa2>
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	2a 95       	dec	r18
    2d84:	e2 f7       	brpl	.-8      	; 0x2d7e <DIO_EnablePullup+0x9e>
    2d86:	80 95       	com	r24
    2d88:	84 23       	and	r24, r20
    2d8a:	8c 93       	st	X, r24
									SET_BIT(PORTA,PIN);
    2d8c:	ab e3       	ldi	r26, 0x3B	; 59
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	eb e3       	ldi	r30, 0x3B	; 59
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	48 2f       	mov	r20, r24
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	28 2f       	mov	r18, r24
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	02 2e       	mov	r0, r18
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <DIO_EnablePullup+0xca>
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	0a 94       	dec	r0
    2dac:	e2 f7       	brpl	.-8      	; 0x2da6 <DIO_EnablePullup+0xc6>
    2dae:	84 2b       	or	r24, r20
    2db0:	8c 93       	st	X, r24
    2db2:	cc c0       	rjmp	.+408    	; 0x2f4c <DIO_EnablePullup+0x26c>
									break;
								case DISABLE_PullUp:
									SET_BIT(SFIOR,PUD);
    2db4:	a0 e5       	ldi	r26, 0x50	; 80
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e0 e5       	ldi	r30, 0x50	; 80
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	84 60       	ori	r24, 0x04	; 4
    2dc0:	8c 93       	st	X, r24
    2dc2:	c4 c0       	rjmp	.+392    	; 0x2f4c <DIO_EnablePullup+0x26c>
									break;
								default:
									return E_OK;
    2dc4:	1e 86       	std	Y+14, r1	; 0x0e
    2dc6:	c4 c0       	rjmp	.+392    	; 0x2f50 <DIO_EnablePullup+0x270>
							}
						break;
						case DIO_PORTB:
							switch(Pullstate)
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	39 87       	std	Y+9, r19	; 0x09
    2dd0:	28 87       	std	Y+8, r18	; 0x08
    2dd2:	88 85       	ldd	r24, Y+8	; 0x08
    2dd4:	99 85       	ldd	r25, Y+9	; 0x09
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	31 f0       	breq	.+12     	; 0x2de6 <DIO_EnablePullup+0x106>
    2dda:	28 85       	ldd	r18, Y+8	; 0x08
    2ddc:	39 85       	ldd	r19, Y+9	; 0x09
    2dde:	21 30       	cpi	r18, 0x01	; 1
    2de0:	31 05       	cpc	r19, r1
    2de2:	41 f1       	breq	.+80     	; 0x2e34 <DIO_EnablePullup+0x154>
    2de4:	2f c0       	rjmp	.+94     	; 0x2e44 <DIO_EnablePullup+0x164>
								{
									case ENABLE_PullUp:
										CLEAR_BIT(DDRB,PIN);
    2de6:	a7 e3       	ldi	r26, 0x37	; 55
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e7 e3       	ldi	r30, 0x37	; 55
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	48 2f       	mov	r20, r24
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <DIO_EnablePullup+0x122>
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	2a 95       	dec	r18
    2e04:	e2 f7       	brpl	.-8      	; 0x2dfe <DIO_EnablePullup+0x11e>
    2e06:	80 95       	com	r24
    2e08:	84 23       	and	r24, r20
    2e0a:	8c 93       	st	X, r24
										SET_BIT(PORTB,PIN);
    2e0c:	a8 e3       	ldi	r26, 0x38	; 56
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e8 e3       	ldi	r30, 0x38	; 56
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	48 2f       	mov	r20, r24
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	02 2e       	mov	r0, r18
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <DIO_EnablePullup+0x14a>
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	0a 94       	dec	r0
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <DIO_EnablePullup+0x146>
    2e2e:	84 2b       	or	r24, r20
    2e30:	8c 93       	st	X, r24
    2e32:	8c c0       	rjmp	.+280    	; 0x2f4c <DIO_EnablePullup+0x26c>
										break;
									case DISABLE_PullUp:
										SET_BIT(SFIOR,PUD);
    2e34:	a0 e5       	ldi	r26, 0x50	; 80
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e0 e5       	ldi	r30, 0x50	; 80
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	84 60       	ori	r24, 0x04	; 4
    2e40:	8c 93       	st	X, r24
    2e42:	84 c0       	rjmp	.+264    	; 0x2f4c <DIO_EnablePullup+0x26c>
										break;
									default:
										return E_OK;
    2e44:	1e 86       	std	Y+14, r1	; 0x0e
    2e46:	84 c0       	rjmp	.+264    	; 0x2f50 <DIO_EnablePullup+0x270>
								}
							break;
							case DIO_PORTC:
								switch(Pullstate)
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	3f 83       	std	Y+7, r19	; 0x07
    2e50:	2e 83       	std	Y+6, r18	; 0x06
    2e52:	8e 81       	ldd	r24, Y+6	; 0x06
    2e54:	9f 81       	ldd	r25, Y+7	; 0x07
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	31 f0       	breq	.+12     	; 0x2e66 <DIO_EnablePullup+0x186>
    2e5a:	2e 81       	ldd	r18, Y+6	; 0x06
    2e5c:	3f 81       	ldd	r19, Y+7	; 0x07
    2e5e:	21 30       	cpi	r18, 0x01	; 1
    2e60:	31 05       	cpc	r19, r1
    2e62:	41 f1       	breq	.+80     	; 0x2eb4 <DIO_EnablePullup+0x1d4>
    2e64:	2f c0       	rjmp	.+94     	; 0x2ec4 <DIO_EnablePullup+0x1e4>
									{
										case ENABLE_PullUp:
											CLEAR_BIT(DDRC,PIN);
    2e66:	a4 e3       	ldi	r26, 0x34	; 52
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e4 e3       	ldi	r30, 0x34	; 52
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	48 2f       	mov	r20, r24
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	28 2f       	mov	r18, r24
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <DIO_EnablePullup+0x1a2>
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	2a 95       	dec	r18
    2e84:	e2 f7       	brpl	.-8      	; 0x2e7e <DIO_EnablePullup+0x19e>
    2e86:	80 95       	com	r24
    2e88:	84 23       	and	r24, r20
    2e8a:	8c 93       	st	X, r24
											SET_BIT(PORTC,PIN);
    2e8c:	a5 e3       	ldi	r26, 0x35	; 53
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	e5 e3       	ldi	r30, 0x35	; 53
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	48 2f       	mov	r20, r24
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	02 2e       	mov	r0, r18
    2ea4:	02 c0       	rjmp	.+4      	; 0x2eaa <DIO_EnablePullup+0x1ca>
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	0a 94       	dec	r0
    2eac:	e2 f7       	brpl	.-8      	; 0x2ea6 <DIO_EnablePullup+0x1c6>
    2eae:	84 2b       	or	r24, r20
    2eb0:	8c 93       	st	X, r24
    2eb2:	4c c0       	rjmp	.+152    	; 0x2f4c <DIO_EnablePullup+0x26c>
											break;
										case DISABLE_PullUp:
											SET_BIT(SFIOR,PUD);
    2eb4:	a0 e5       	ldi	r26, 0x50	; 80
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	e0 e5       	ldi	r30, 0x50	; 80
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	84 60       	ori	r24, 0x04	; 4
    2ec0:	8c 93       	st	X, r24
    2ec2:	44 c0       	rjmp	.+136    	; 0x2f4c <DIO_EnablePullup+0x26c>
											break;
										default:
											return E_OK;
    2ec4:	1e 86       	std	Y+14, r1	; 0x0e
    2ec6:	44 c0       	rjmp	.+136    	; 0x2f50 <DIO_EnablePullup+0x270>
									}
								break;
								case DIO_PORTD:
									switch(Pullstate)
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	3d 83       	std	Y+5, r19	; 0x05
    2ed0:	2c 83       	std	Y+4, r18	; 0x04
    2ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	31 f0       	breq	.+12     	; 0x2ee6 <DIO_EnablePullup+0x206>
    2eda:	2c 81       	ldd	r18, Y+4	; 0x04
    2edc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ede:	21 30       	cpi	r18, 0x01	; 1
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	41 f1       	breq	.+80     	; 0x2f34 <DIO_EnablePullup+0x254>
    2ee4:	2f c0       	rjmp	.+94     	; 0x2f44 <DIO_EnablePullup+0x264>
										{
											case ENABLE_PullUp:
												CLEAR_BIT(DDRD,PIN);
    2ee6:	a1 e3       	ldi	r26, 0x31	; 49
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e1 e3       	ldi	r30, 0x31	; 49
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	48 2f       	mov	r20, r24
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <DIO_EnablePullup+0x222>
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	2a 95       	dec	r18
    2f04:	e2 f7       	brpl	.-8      	; 0x2efe <DIO_EnablePullup+0x21e>
    2f06:	80 95       	com	r24
    2f08:	84 23       	and	r24, r20
    2f0a:	8c 93       	st	X, r24
												SET_BIT(PORTD,PIN);
    2f0c:	a2 e3       	ldi	r26, 0x32	; 50
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	e2 e3       	ldi	r30, 0x32	; 50
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	48 2f       	mov	r20, r24
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	02 2e       	mov	r0, r18
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <DIO_EnablePullup+0x24a>
    2f26:	88 0f       	add	r24, r24
    2f28:	99 1f       	adc	r25, r25
    2f2a:	0a 94       	dec	r0
    2f2c:	e2 f7       	brpl	.-8      	; 0x2f26 <DIO_EnablePullup+0x246>
    2f2e:	84 2b       	or	r24, r20
    2f30:	8c 93       	st	X, r24
    2f32:	0c c0       	rjmp	.+24     	; 0x2f4c <DIO_EnablePullup+0x26c>
												break;
											case DISABLE_PullUp:
												SET_BIT(SFIOR,PUD);
    2f34:	a0 e5       	ldi	r26, 0x50	; 80
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e0 e5       	ldi	r30, 0x50	; 80
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	84 60       	ori	r24, 0x04	; 4
    2f40:	8c 93       	st	X, r24
    2f42:	04 c0       	rjmp	.+8      	; 0x2f4c <DIO_EnablePullup+0x26c>
												break;
											default:
												return E_OK;
    2f44:	1e 86       	std	Y+14, r1	; 0x0e
    2f46:	04 c0       	rjmp	.+8      	; 0x2f50 <DIO_EnablePullup+0x270>
										}
									break;
									default:
									return E_OK;
    2f48:	1e 86       	std	Y+14, r1	; 0x0e
    2f4a:	02 c0       	rjmp	.+4      	; 0x2f50 <DIO_EnablePullup+0x270>

				}
			}
		return E_NOK;
    2f4c:	31 e0       	ldi	r19, 0x01	; 1
    2f4e:	3e 87       	std	Y+14, r19	; 0x0e
    2f50:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    2f52:	2e 96       	adiw	r28, 0x0e	; 14
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <ADC_Init>:
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 */
 /*****************************************************************************************************/
STD_Return ADC_Init(ADC__State_t State)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <ADC_Init+0x6>
    2f6a:	00 d0       	rcall	.+0      	; 0x2f6c <ADC_Init+0x8>
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	89 83       	std	Y+1, r24	; 0x01
	//Resolution Selection
	#if defined Resolution_8_Bit
	SET_BIT(ADMUX,ADLAR);
	#elif defined Resolution_10_Bit
	CLEAR_BIT(ADMUX,ADLAR);
    2f72:	a7 e2       	ldi	r26, 0x27	; 39
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e7 e2       	ldi	r30, 0x27	; 39
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	8f 7d       	andi	r24, 0xDF	; 223
    2f7e:	8c 93       	st	X, r24
	//Voltage Reference Selection
	#if defined AREF_Internal_VREF
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
	#elif defined AREF_External_VREF
	SET_BIT(ADMUX,REFS0);
    2f80:	a7 e2       	ldi	r26, 0x27	; 39
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e7 e2       	ldi	r30, 0x27	; 39
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	80 64       	ori	r24, 0x40	; 64
    2f8c:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    2f8e:	a7 e2       	ldi	r26, 0x27	; 39
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e7 e2       	ldi	r30, 0x27	; 39
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	8f 77       	andi	r24, 0x7F	; 127
    2f9a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_64
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_128
		SET_BIT(ADCSRA,ADPS0);
    2f9c:	a6 e2       	ldi	r26, 0x26	; 38
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e6 e2       	ldi	r30, 0x26	; 38
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	81 60       	ori	r24, 0x01	; 1
    2fa8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    2faa:	a6 e2       	ldi	r26, 0x26	; 38
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e6 e2       	ldi	r30, 0x26	; 38
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	82 60       	ori	r24, 0x02	; 2
    2fb6:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    2fb8:	a6 e2       	ldi	r26, 0x26	; 38
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e6 e2       	ldi	r30, 0x26	; 38
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	84 60       	ori	r24, 0x04	; 4
    2fc4:	8c 93       	st	X, r24
	#endif
	switch (State)
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	28 2f       	mov	r18, r24
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	3c 83       	std	Y+4, r19	; 0x04
    2fce:	2b 83       	std	Y+3, r18	; 0x03
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	31 f0       	breq	.+12     	; 0x2fe4 <ADC_Init+0x80>
    2fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fda:	3c 81       	ldd	r19, Y+4	; 0x04
    2fdc:	21 30       	cpi	r18, 0x01	; 1
    2fde:	31 05       	cpc	r19, r1
    2fe0:	49 f0       	breq	.+18     	; 0x2ff4 <ADC_Init+0x90>
    2fe2:	10 c0       	rjmp	.+32     	; 0x3004 <ADC_Init+0xa0>
		{
			case ADC_ENABLE:
				SET_BIT(ADCSRA,ADEN);
    2fe4:	a6 e2       	ldi	r26, 0x26	; 38
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e6 e2       	ldi	r30, 0x26	; 38
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	80 68       	ori	r24, 0x80	; 128
    2ff0:	8c 93       	st	X, r24
    2ff2:	0a c0       	rjmp	.+20     	; 0x3008 <ADC_Init+0xa4>
				break;
			case ADC_DISABLE:
				CLEAR_BIT(ADCSRA,ADEN);
    2ff4:	a6 e2       	ldi	r26, 0x26	; 38
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e6 e2       	ldi	r30, 0x26	; 38
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	8f 77       	andi	r24, 0x7F	; 127
    3000:	8c 93       	st	X, r24
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <ADC_Init+0xa4>
				break;
			default:
				return E_OK;
    3004:	1a 82       	std	Y+2, r1	; 0x02
    3006:	02 c0       	rjmp	.+4      	; 0x300c <ADC_Init+0xa8>
		}
		return E_NOK;
    3008:	31 e0       	ldi	r19, 0x01	; 1
    300a:	3a 83       	std	Y+2, r19	; 0x02
    300c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret

0000301c <ADC_SetInterrupt_Enable>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 */
STD_Return ADC_SetInterrupt_Enable(ADC_Interrupt_State_t State)
{
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	00 d0       	rcall	.+0      	; 0x3022 <ADC_SetInterrupt_Enable+0x6>
    3022:	00 d0       	rcall	.+0      	; 0x3024 <ADC_SetInterrupt_Enable+0x8>
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	3c 83       	std	Y+4, r19	; 0x04
    3032:	2b 83       	std	Y+3, r18	; 0x03
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	9c 81       	ldd	r25, Y+4	; 0x04
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	31 f0       	breq	.+12     	; 0x3048 <ADC_SetInterrupt_Enable+0x2c>
    303c:	2b 81       	ldd	r18, Y+3	; 0x03
    303e:	3c 81       	ldd	r19, Y+4	; 0x04
    3040:	21 30       	cpi	r18, 0x01	; 1
    3042:	31 05       	cpc	r19, r1
    3044:	49 f0       	breq	.+18     	; 0x3058 <ADC_SetInterrupt_Enable+0x3c>
    3046:	10 c0       	rjmp	.+32     	; 0x3068 <ADC_SetInterrupt_Enable+0x4c>
	{
		case ADC_Interrupt_ENABLE:
			SET_BIT(ADCSRA,ADIE);
    3048:	a6 e2       	ldi	r26, 0x26	; 38
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	e6 e2       	ldi	r30, 0x26	; 38
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	88 60       	ori	r24, 0x08	; 8
    3054:	8c 93       	st	X, r24
    3056:	0a c0       	rjmp	.+20     	; 0x306c <ADC_SetInterrupt_Enable+0x50>
			break;
		case ADC_Interrupt_DISABLE:
			CLEAR_BIT(ADCSRA,ADIE);
    3058:	a6 e2       	ldi	r26, 0x26	; 38
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	e6 e2       	ldi	r30, 0x26	; 38
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	87 7f       	andi	r24, 0xF7	; 247
    3064:	8c 93       	st	X, r24
    3066:	02 c0       	rjmp	.+4      	; 0x306c <ADC_SetInterrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    3068:	1a 82       	std	Y+2, r1	; 0x02
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <ADC_SetInterrupt_Enable+0x54>
	}
	return E_NOK;
    306c:	31 e0       	ldi	r19, 0x01	; 1
    306e:	3a 83       	std	Y+2, r19	; 0x02
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <ADC_Start_conversion>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Start_conversion(u8 channel)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <ADC_Start_conversion+0x6>
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	89 83       	std	Y+1, r24	; 0x01
	if (channel>MaxPinNum)
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	88 30       	cpi	r24, 0x08	; 8
    3090:	10 f0       	brcs	.+4      	; 0x3096 <ADC_Start_conversion+0x16>
	{
		return E_OK;
    3092:	1a 82       	std	Y+2, r1	; 0x02
    3094:	25 c0       	rjmp	.+74     	; 0x30e0 <ADC_Start_conversion+0x60>
	}
	else
	{

			//Mask for non used bits of the 8 bits of the Regsiter
			ADMUX &= Unselected_Channel_MASK;
    3096:	a7 e2       	ldi	r26, 0x27	; 39
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e7 e2       	ldi	r30, 0x27	; 39
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	88 7f       	andi	r24, 0xF8	; 248
    30a2:	8c 93       	st	X, r24

			//Mask for the usage 3 bits of the 8 bits
			ADMUX |= channel;
    30a4:	a7 e2       	ldi	r26, 0x27	; 39
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e7 e2       	ldi	r30, 0x27	; 39
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	90 81       	ld	r25, Z
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	89 2b       	or	r24, r25
    30b2:	8c 93       	st	X, r24

			//Set the AdcStartConversion
			SET_BIT(ADCSRA,ADSC);
    30b4:	a6 e2       	ldi	r26, 0x26	; 38
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e6 e2       	ldi	r30, 0x26	; 38
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	80 64       	ori	r24, 0x40	; 64
    30c0:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA,ADSC) == 1);
    30c2:	e6 e2       	ldi	r30, 0x26	; 38
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	82 95       	swap	r24
    30ca:	86 95       	lsr	r24
    30cc:	86 95       	lsr	r24
    30ce:	83 70       	andi	r24, 0x03	; 3
    30d0:	88 2f       	mov	r24, r24
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	81 70       	andi	r24, 0x01	; 1
    30d6:	90 70       	andi	r25, 0x00	; 0
    30d8:	88 23       	and	r24, r24
    30da:	99 f7       	brne	.-26     	; 0x30c2 <ADC_Start_conversion+0x42>
		 //Wait conversion to finish
	}
	return E_NOK;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	8a 83       	std	Y+2, r24	; 0x02
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	08 95       	ret

000030ec <ADC_Get_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Get_Value(u16 *AdcResult)
{
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	00 d0       	rcall	.+0      	; 0x30f2 <ADC_Get_Value+0x6>
    30f2:	00 d0       	rcall	.+0      	; 0x30f4 <ADC_Get_Value+0x8>
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	9c 83       	std	Y+4, r25	; 0x04
    30fa:	8b 83       	std	Y+3, r24	; 0x03
		u16 AdcResult_Temp=0;
    30fc:	1a 82       	std	Y+2, r1	; 0x02
    30fe:	19 82       	std	Y+1, r1	; 0x01
	#if defined Resolution_8_Bit
		*AdcResult=ADCH;
	#elif defined Resolution_10_Bit
		AdcResult_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    3100:	e4 e2       	ldi	r30, 0x24	; 36
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	e5 e2       	ldi	r30, 0x25	; 37
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	88 2f       	mov	r24, r24
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	98 2f       	mov	r25, r24
    3116:	88 27       	eor	r24, r24
    3118:	82 0f       	add	r24, r18
    311a:	93 1f       	adc	r25, r19
    311c:	9a 83       	std	Y+2, r25	; 0x02
    311e:	89 83       	std	Y+1, r24	; 0x01
		*AdcResult = (AdcResult_Temp & Resolution_10Bit_MASK);//Mask higher bits in ADCH and read only the 10 bits for the ADC
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	9a 81       	ldd	r25, Y+2	; 0x02
    3124:	93 70       	andi	r25, 0x03	; 3
    3126:	eb 81       	ldd	r30, Y+3	; 0x03
    3128:	fc 81       	ldd	r31, Y+4	; 0x04
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	80 83       	st	Z, r24
	#endif
		return E_NOK;
    312e:	81 e0       	ldi	r24, 0x01	; 1
}
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <ADC_Read_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Read_Value(u8 channel,u16 *AdcValue)
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	00 d0       	rcall	.+0      	; 0x3144 <ADC_Read_Value+0x6>
    3144:	00 d0       	rcall	.+0      	; 0x3146 <ADC_Read_Value+0x8>
    3146:	00 d0       	rcall	.+0      	; 0x3148 <ADC_Read_Value+0xa>
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	8b 83       	std	Y+3, r24	; 0x03
    314e:	7d 83       	std	Y+5, r23	; 0x05
    3150:	6c 83       	std	Y+4, r22	; 0x04
	u16 AdcValue_Temp=0;
    3152:	1a 82       	std	Y+2, r1	; 0x02
    3154:	19 82       	std	Y+1, r1	; 0x01
	if (channel>MaxPinNum)
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	88 30       	cpi	r24, 0x08	; 8
    315a:	c0 f0       	brcs	.+48     	; 0x318c <ADC_Read_Value+0x4e>
		{
			return E_OK;
    315c:	1e 82       	std	Y+6, r1	; 0x06
    315e:	3c c0       	rjmp	.+120    	; 0x31d8 <ADC_Read_Value+0x9a>
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
			{
				//Mask for non used bits of the 8 bits of the Regsiter
				ADMUX &= Unselected_Channel_MASK;
    3160:	a7 e2       	ldi	r26, 0x27	; 39
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e7 e2       	ldi	r30, 0x27	; 39
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	88 7f       	andi	r24, 0xF8	; 248
    316c:	8c 93       	st	X, r24

				//Mask for the usage 3 bits of the 8 bits
				ADMUX |= channel;
    316e:	a7 e2       	ldi	r26, 0x27	; 39
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e7 e2       	ldi	r30, 0x27	; 39
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	90 81       	ld	r25, Z
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	89 2b       	or	r24, r25
    317c:	8c 93       	st	X, r24

				//Set the AdcStartConversion
				SET_BIT(ADCSRA,ADSC);
    317e:	a6 e2       	ldi	r26, 0x26	; 38
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e6 e2       	ldi	r30, 0x26	; 38
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	80 64       	ori	r24, 0x40	; 64
    318a:	8c 93       	st	X, r24
		}
		else
		{
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
    318c:	e6 e2       	ldi	r30, 0x26	; 38
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	82 95       	swap	r24
    3194:	86 95       	lsr	r24
    3196:	86 95       	lsr	r24
    3198:	83 70       	andi	r24, 0x03	; 3
    319a:	88 2f       	mov	r24, r24
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	81 70       	andi	r24, 0x01	; 1
    31a0:	90 70       	andi	r25, 0x00	; 0
    31a2:	88 23       	and	r24, r24
    31a4:	e9 f6       	brne	.-70     	; 0x3160 <ADC_Read_Value+0x22>
			//return the read value

			#if defined Resolution_8_Bit
				*AdcValue=ADCH;
			#elif defined Resolution_10_Bit
				AdcValue_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    31a6:	e4 e2       	ldi	r30, 0x24	; 36
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	e5 e2       	ldi	r30, 0x25	; 37
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	88 2f       	mov	r24, r24
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	98 2f       	mov	r25, r24
    31bc:	88 27       	eor	r24, r24
    31be:	82 0f       	add	r24, r18
    31c0:	93 1f       	adc	r25, r19
    31c2:	9a 83       	std	Y+2, r25	; 0x02
    31c4:	89 83       	std	Y+1, r24	; 0x01
				*AdcValue = (AdcValue_Temp & Resolution_10Bit_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	93 70       	andi	r25, 0x03	; 3
    31cc:	ec 81       	ldd	r30, Y+4	; 0x04
    31ce:	fd 81       	ldd	r31, Y+5	; 0x05
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	80 83       	st	Z, r24
			#endif
		}
	return E_NOK;
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	8e 83       	std	Y+6, r24	; 0x06
    31d8:	8e 81       	ldd	r24, Y+6	; 0x06
}
    31da:	26 96       	adiw	r28, 0x06	; 6
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <ADC_ReadVolt>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_ReadVolt (u8 channel,f32 *AdcVolt)
	{
    31ec:	df 93       	push	r29
    31ee:	cf 93       	push	r28
    31f0:	00 d0       	rcall	.+0      	; 0x31f2 <ADC_ReadVolt+0x6>
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <ADC_ReadVolt+0x8>
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <ADC_ReadVolt+0xa>
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	8b 83       	std	Y+3, r24	; 0x03
    31fc:	7d 83       	std	Y+5, r23	; 0x05
    31fe:	6c 83       	std	Y+4, r22	; 0x04
		u16 AdcValue_Temp=0;
    3200:	1a 82       	std	Y+2, r1	; 0x02
    3202:	19 82       	std	Y+1, r1	; 0x01
		if(channel>MaxPinNum)
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	88 30       	cpi	r24, 0x08	; 8
    3208:	10 f0       	brcs	.+4      	; 0x320e <ADC_ReadVolt+0x22>
			{
				return E_OK;
    320a:	1e 82       	std	Y+6, r1	; 0x06
    320c:	2e c0       	rjmp	.+92     	; 0x326a <ADC_ReadVolt+0x7e>
			}
		else
			{
				ADC_Read_Value(channel,&AdcValue_Temp);
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9e 01       	movw	r18, r28
    3212:	2f 5f       	subi	r18, 0xFF	; 255
    3214:	3f 4f       	sbci	r19, 0xFF	; 255
    3216:	b9 01       	movw	r22, r18
    3218:	0e 94 9f 18 	call	0x313e	; 0x313e <ADC_Read_Value>
				*AdcVolt= (((f32)AdcValue_Temp)*((f32)VREF))/((f32)(ADC_MAX));
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	cc 01       	movw	r24, r24
    3222:	a0 e0       	ldi	r26, 0x00	; 0
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 ea       	ldi	r20, 0xA0	; 160
    323c:	50 e4       	ldi	r21, 0x40	; 64
    323e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e8       	ldi	r20, 0x80	; 128
    3250:	54 e4       	ldi	r21, 0x44	; 68
    3252:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	ec 81       	ldd	r30, Y+4	; 0x04
    325c:	fd 81       	ldd	r31, Y+5	; 0x05
    325e:	80 83       	st	Z, r24
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	a2 83       	std	Z+2, r26	; 0x02
    3264:	b3 83       	std	Z+3, r27	; 0x03
			}
		return E_NOK;
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	8e 83       	std	Y+6, r24	; 0x06
    326a:	8e 81       	ldd	r24, Y+6	; 0x06
	}
    326c:	26 96       	adiw	r28, 0x06	; 6
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <ADC_CallBack>:
 * 
 * @param func_ptr 		 :		pointer to function that points to the user/ External function
 * @return void			 : 		return nothing
 **/
void ADC_CallBack(void (*func_ptr)(void))
	{
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	00 d0       	rcall	.+0      	; 0x3284 <ADC_CallBack+0x6>
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	9a 83       	std	Y+2, r25	; 0x02
    328a:	89 83       	std	Y+1, r24	; 0x01
		User_Function = func_ptr;
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	9a 81       	ldd	r25, Y+2	; 0x02
    3290:	90 93 9f 01 	sts	0x019F, r25
    3294:	80 93 9e 01 	sts	0x019E, r24
	}
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <__vector_16>:
/*********************************ISR ADC Vector******************************************************/
ISR(ADC_Vect)
{
    32a2:	1f 92       	push	r1
    32a4:	0f 92       	push	r0
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	0f 92       	push	r0
    32aa:	11 24       	eor	r1, r1
    32ac:	2f 93       	push	r18
    32ae:	3f 93       	push	r19
    32b0:	4f 93       	push	r20
    32b2:	5f 93       	push	r21
    32b4:	6f 93       	push	r22
    32b6:	7f 93       	push	r23
    32b8:	8f 93       	push	r24
    32ba:	9f 93       	push	r25
    32bc:	af 93       	push	r26
    32be:	bf 93       	push	r27
    32c0:	ef 93       	push	r30
    32c2:	ff 93       	push	r31
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
	(*User_Function)();
    32cc:	e0 91 9e 01 	lds	r30, 0x019E
    32d0:	f0 91 9f 01 	lds	r31, 0x019F
    32d4:	09 95       	icall
}
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	ff 91       	pop	r31
    32dc:	ef 91       	pop	r30
    32de:	bf 91       	pop	r27
    32e0:	af 91       	pop	r26
    32e2:	9f 91       	pop	r25
    32e4:	8f 91       	pop	r24
    32e6:	7f 91       	pop	r23
    32e8:	6f 91       	pop	r22
    32ea:	5f 91       	pop	r21
    32ec:	4f 91       	pop	r20
    32ee:	3f 91       	pop	r19
    32f0:	2f 91       	pop	r18
    32f2:	0f 90       	pop	r0
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	0f 90       	pop	r0
    32f8:	1f 90       	pop	r1
    32fa:	18 95       	reti

000032fc <TimingSelection>:
 * @param TYPE 						: takes the sevensegment types CommonAnode/CommonCathode
 * @param Time 						: take which time will activated Sec01/Sec10/Min01/Min10			
 * @return STD_Return 
 */
STD_Return TimingSelection(u8 StopWatch_ControlPort,SevenSegment_Type_t TYPE,SevenSegment_Sel_t Time)
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	2a 97       	sbiw	r28, 0x0a	; 10
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	6a 83       	std	Y+2, r22	; 0x02
    3314:	4b 83       	std	Y+3, r20	; 0x03
	#ifdef StopWatch_ControlPort_A
	switch(TYPE)
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	3a 87       	std	Y+10, r19	; 0x0a
    331e:	29 87       	std	Y+9, r18	; 0x09
    3320:	89 85       	ldd	r24, Y+9	; 0x09
    3322:	9a 85       	ldd	r25, Y+10	; 0x0a
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	39 f0       	breq	.+14     	; 0x3336 <TimingSelection+0x3a>
    3328:	29 85       	ldd	r18, Y+9	; 0x09
    332a:	3a 85       	ldd	r19, Y+10	; 0x0a
    332c:	21 30       	cpi	r18, 0x01	; 1
    332e:	31 05       	cpc	r19, r1
    3330:	09 f4       	brne	.+2      	; 0x3334 <TimingSelection+0x38>
    3332:	77 c0       	rjmp	.+238    	; 0x3422 <TimingSelection+0x126>
    3334:	ec c0       	rjmp	.+472    	; 0x350e <TimingSelection+0x212>
	{
		case CommonCathod:
			switch(Time)
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	38 87       	std	Y+8, r19	; 0x08
    333e:	2f 83       	std	Y+7, r18	; 0x07
    3340:	8f 81       	ldd	r24, Y+7	; 0x07
    3342:	98 85       	ldd	r25, Y+8	; 0x08
    3344:	81 30       	cpi	r24, 0x01	; 1
    3346:	91 05       	cpc	r25, r1
    3348:	59 f1       	breq	.+86     	; 0x33a0 <TimingSelection+0xa4>
    334a:	2f 81       	ldd	r18, Y+7	; 0x07
    334c:	38 85       	ldd	r19, Y+8	; 0x08
    334e:	22 30       	cpi	r18, 0x02	; 2
    3350:	31 05       	cpc	r19, r1
    3352:	2c f4       	brge	.+10     	; 0x335e <TimingSelection+0x62>
    3354:	8f 81       	ldd	r24, Y+7	; 0x07
    3356:	98 85       	ldd	r25, Y+8	; 0x08
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	69 f0       	breq	.+26     	; 0x3376 <TimingSelection+0x7a>
    335c:	60 c0       	rjmp	.+192    	; 0x341e <TimingSelection+0x122>
    335e:	2f 81       	ldd	r18, Y+7	; 0x07
    3360:	38 85       	ldd	r19, Y+8	; 0x08
    3362:	22 30       	cpi	r18, 0x02	; 2
    3364:	31 05       	cpc	r19, r1
    3366:	89 f1       	breq	.+98     	; 0x33ca <TimingSelection+0xce>
    3368:	8f 81       	ldd	r24, Y+7	; 0x07
    336a:	98 85       	ldd	r25, Y+8	; 0x08
    336c:	83 30       	cpi	r24, 0x03	; 3
    336e:	91 05       	cpc	r25, r1
    3370:	09 f4       	brne	.+2      	; 0x3374 <TimingSelection+0x78>
    3372:	40 c0       	rjmp	.+128    	; 0x33f4 <TimingSelection+0xf8>
    3374:	54 c0       	rjmp	.+168    	; 0x341e <TimingSelection+0x122>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	41 e0       	ldi	r20, 0x01	; 1
    337c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	61 e0       	ldi	r22, 0x01	; 1
    3384:	41 e0       	ldi	r20, 0x01	; 1
    3386:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	60 e0       	ldi	r22, 0x00	; 0
    338e:	41 e0       	ldi	r20, 0x01	; 1
    3390:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	61 e0       	ldi	r22, 0x01	; 1
    3398:	41 e0       	ldi	r20, 0x01	; 1
    339a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    339e:	b9 c0       	rjmp	.+370    	; 0x3512 <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	60 e0       	ldi	r22, 0x00	; 0
    33a4:	41 e0       	ldi	r20, 0x01	; 1
    33a6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	61 e0       	ldi	r22, 0x01	; 1
    33ae:	41 e0       	ldi	r20, 0x01	; 1
    33b0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	40 e0       	ldi	r20, 0x00	; 0
    33ba:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    33c8:	a4 c0       	rjmp	.+328    	; 0x3512 <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	60 e0       	ldi	r22, 0x00	; 0
    33ce:	41 e0       	ldi	r20, 0x01	; 1
    33d0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	61 e0       	ldi	r22, 0x01	; 1
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	41 e0       	ldi	r20, 0x01	; 1
    33e4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    33e8:	80 e0       	ldi	r24, 0x00	; 0
    33ea:	61 e0       	ldi	r22, 0x01	; 1
    33ec:	40 e0       	ldi	r20, 0x00	; 0
    33ee:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    33f2:	8f c0       	rjmp	.+286    	; 0x3512 <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	41 e0       	ldi	r20, 0x01	; 1
    33fa:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	61 e0       	ldi	r22, 0x01	; 1
    3402:	41 e0       	ldi	r20, 0x01	; 1
    3404:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	60 e0       	ldi	r22, 0x00	; 0
    340c:	40 e0       	ldi	r20, 0x00	; 0
    340e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	61 e0       	ldi	r22, 0x01	; 1
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    341c:	7a c0       	rjmp	.+244    	; 0x3512 <TimingSelection+0x216>
						break;
					default: return E_OK;
    341e:	1e 82       	std	Y+6, r1	; 0x06
    3420:	7a c0       	rjmp	.+244    	; 0x3516 <TimingSelection+0x21a>
				}
		break;
		case CommonAnode:
			switch(Time)
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	3d 83       	std	Y+5, r19	; 0x05
    342a:	2c 83       	std	Y+4, r18	; 0x04
    342c:	8c 81       	ldd	r24, Y+4	; 0x04
    342e:	9d 81       	ldd	r25, Y+5	; 0x05
    3430:	81 30       	cpi	r24, 0x01	; 1
    3432:	91 05       	cpc	r25, r1
    3434:	59 f1       	breq	.+86     	; 0x348c <TimingSelection+0x190>
    3436:	2c 81       	ldd	r18, Y+4	; 0x04
    3438:	3d 81       	ldd	r19, Y+5	; 0x05
    343a:	22 30       	cpi	r18, 0x02	; 2
    343c:	31 05       	cpc	r19, r1
    343e:	2c f4       	brge	.+10     	; 0x344a <TimingSelection+0x14e>
    3440:	8c 81       	ldd	r24, Y+4	; 0x04
    3442:	9d 81       	ldd	r25, Y+5	; 0x05
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	69 f0       	breq	.+26     	; 0x3462 <TimingSelection+0x166>
    3448:	60 c0       	rjmp	.+192    	; 0x350a <TimingSelection+0x20e>
    344a:	2c 81       	ldd	r18, Y+4	; 0x04
    344c:	3d 81       	ldd	r19, Y+5	; 0x05
    344e:	22 30       	cpi	r18, 0x02	; 2
    3450:	31 05       	cpc	r19, r1
    3452:	89 f1       	breq	.+98     	; 0x34b6 <TimingSelection+0x1ba>
    3454:	8c 81       	ldd	r24, Y+4	; 0x04
    3456:	9d 81       	ldd	r25, Y+5	; 0x05
    3458:	83 30       	cpi	r24, 0x03	; 3
    345a:	91 05       	cpc	r25, r1
    345c:	09 f4       	brne	.+2      	; 0x3460 <TimingSelection+0x164>
    345e:	40 c0       	rjmp	.+128    	; 0x34e0 <TimingSelection+0x1e4>
    3460:	54 c0       	rjmp	.+168    	; 0x350a <TimingSelection+0x20e>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	60 e0       	ldi	r22, 0x00	; 0
    3466:	41 e0       	ldi	r20, 0x01	; 1
    3468:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	61 e0       	ldi	r22, 0x01	; 1
    3470:	41 e0       	ldi	r20, 0x01	; 1
    3472:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	60 e0       	ldi	r22, 0x00	; 0
    347a:	40 e0       	ldi	r20, 0x00	; 0
    347c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	61 e0       	ldi	r22, 0x01	; 1
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    348a:	43 c0       	rjmp	.+134    	; 0x3512 <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	60 e0       	ldi	r22, 0x00	; 0
    3490:	41 e0       	ldi	r20, 0x01	; 1
    3492:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	61 e0       	ldi	r22, 0x01	; 1
    349a:	41 e0       	ldi	r20, 0x01	; 1
    349c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	61 e0       	ldi	r22, 0x01	; 1
    34ae:	40 e0       	ldi	r20, 0x00	; 0
    34b0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    34b4:	2e c0       	rjmp	.+92     	; 0x3512 <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	41 e0       	ldi	r20, 0x01	; 1
    34bc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	61 e0       	ldi	r22, 0x01	; 1
    34c4:	41 e0       	ldi	r20, 0x01	; 1
    34c6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	40 e0       	ldi	r20, 0x00	; 0
    34d0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	61 e0       	ldi	r22, 0x01	; 1
    34d8:	41 e0       	ldi	r20, 0x01	; 1
    34da:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    34de:	19 c0       	rjmp	.+50     	; 0x3512 <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	61 e0       	ldi	r22, 0x01	; 1
    34ee:	41 e0       	ldi	r20, 0x01	; 1
    34f0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	60 e0       	ldi	r22, 0x00	; 0
    34f8:	41 e0       	ldi	r20, 0x01	; 1
    34fa:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	41 e0       	ldi	r20, 0x01	; 1
    3504:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3508:	04 c0       	rjmp	.+8      	; 0x3512 <TimingSelection+0x216>
						break;
					default: return E_OK;
    350a:	1e 82       	std	Y+6, r1	; 0x06
    350c:	04 c0       	rjmp	.+8      	; 0x3516 <TimingSelection+0x21a>
				}
		break;
		default:
		return E_OK;
    350e:	1e 82       	std	Y+6, r1	; 0x06
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <TimingSelection+0x21a>
			break;
			default:
			return E_OK;
		}
#endif
	return E_NOK;
    3512:	91 e0       	ldi	r25, 0x01	; 1
    3514:	9e 83       	std	Y+6, r25	; 0x06
    3516:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3518:	2a 96       	adiw	r28, 0x0a	; 10
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <SevenSegment_Display>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return SevenSegment_Display(DIO_Ports_t PORT,SevenSegment_Type_t TYPE,Display_Number_t NUM)
{
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	6e 97       	sbiw	r28, 0x1e	; 30
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	6a 83       	std	Y+2, r22	; 0x02
    3542:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT)
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	28 2f       	mov	r18, r24
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	3e 8f       	std	Y+30, r19	; 0x1e
    354c:	2d 8f       	std	Y+29, r18	; 0x1d
    354e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3550:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3552:	81 30       	cpi	r24, 0x01	; 1
    3554:	91 05       	cpc	r25, r1
    3556:	09 f4       	brne	.+2      	; 0x355a <SevenSegment_Display+0x30>
    3558:	4f c2       	rjmp	.+1182   	; 0x39f8 <SevenSegment_Display+0x4ce>
    355a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    355c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    355e:	22 30       	cpi	r18, 0x02	; 2
    3560:	31 05       	cpc	r19, r1
    3562:	34 f4       	brge	.+12     	; 0x3570 <SevenSegment_Display+0x46>
    3564:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3566:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	81 f0       	breq	.+32     	; 0x358c <SevenSegment_Display+0x62>
    356c:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <SevenSegment_Display+0x11ca>
    3570:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3572:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3574:	22 30       	cpi	r18, 0x02	; 2
    3576:	31 05       	cpc	r19, r1
    3578:	09 f4       	brne	.+2      	; 0x357c <SevenSegment_Display+0x52>
    357a:	68 c4       	rjmp	.+2256   	; 0x3e4c <SevenSegment_Display+0x922>
    357c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    357e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3580:	83 30       	cpi	r24, 0x03	; 3
    3582:	91 05       	cpc	r25, r1
    3584:	09 f4       	brne	.+2      	; 0x3588 <SevenSegment_Display+0x5e>
    3586:	8c c6       	rjmp	.+3352   	; 0x42a0 <SevenSegment_Display+0xd76>
    3588:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <SevenSegment_Display+0x11ca>
	{
		case DIO_PORTA:
		switch(TYPE)
    358c:	8a 81       	ldd	r24, Y+2	; 0x02
    358e:	28 2f       	mov	r18, r24
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	3c 8f       	std	Y+28, r19	; 0x1c
    3594:	2b 8f       	std	Y+27, r18	; 0x1b
    3596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	39 f0       	breq	.+14     	; 0x35ac <SevenSegment_Display+0x82>
    359e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    35a0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    35a2:	21 30       	cpi	r18, 0x01	; 1
    35a4:	31 05       	cpc	r19, r1
    35a6:	09 f4       	brne	.+2      	; 0x35aa <SevenSegment_Display+0x80>
    35a8:	18 c1       	rjmp	.+560    	; 0x37da <SevenSegment_Display+0x2b0>
    35aa:	24 c2       	rjmp	.+1096   	; 0x39f4 <SevenSegment_Display+0x4ca>
			{
				case CommonCathod:
					DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	6f ef       	ldi	r22, 0xFF	; 255
    35b0:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_LOW);
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	67 e0       	ldi	r22, 0x07	; 7
    35b8:	40 e0       	ldi	r20, 0x00	; 0
    35ba:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
					switch(NUM)
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	28 2f       	mov	r18, r24
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	3a 8f       	std	Y+26, r19	; 0x1a
    35c6:	29 8f       	std	Y+25, r18	; 0x19
    35c8:	89 8d       	ldd	r24, Y+25	; 0x19
    35ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35cc:	84 30       	cpi	r24, 0x04	; 4
    35ce:	91 05       	cpc	r25, r1
    35d0:	09 f4       	brne	.+2      	; 0x35d4 <SevenSegment_Display+0xaa>
    35d2:	92 c0       	rjmp	.+292    	; 0x36f8 <SevenSegment_Display+0x1ce>
    35d4:	29 8d       	ldd	r18, Y+25	; 0x19
    35d6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    35d8:	25 30       	cpi	r18, 0x05	; 5
    35da:	31 05       	cpc	r19, r1
    35dc:	ec f4       	brge	.+58     	; 0x3618 <SevenSegment_Display+0xee>
    35de:	89 8d       	ldd	r24, Y+25	; 0x19
    35e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35e2:	81 30       	cpi	r24, 0x01	; 1
    35e4:	91 05       	cpc	r25, r1
    35e6:	09 f4       	brne	.+2      	; 0x35ea <SevenSegment_Display+0xc0>
    35e8:	4b c0       	rjmp	.+150    	; 0x3680 <SevenSegment_Display+0x156>
    35ea:	29 8d       	ldd	r18, Y+25	; 0x19
    35ec:	3a 8d       	ldd	r19, Y+26	; 0x1a
    35ee:	22 30       	cpi	r18, 0x02	; 2
    35f0:	31 05       	cpc	r19, r1
    35f2:	2c f4       	brge	.+10     	; 0x35fe <SevenSegment_Display+0xd4>
    35f4:	89 8d       	ldd	r24, Y+25	; 0x19
    35f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35f8:	00 97       	sbiw	r24, 0x00	; 0
    35fa:	99 f1       	breq	.+102    	; 0x3662 <SevenSegment_Display+0x138>
    35fc:	eb c0       	rjmp	.+470    	; 0x37d4 <SevenSegment_Display+0x2aa>
    35fe:	29 8d       	ldd	r18, Y+25	; 0x19
    3600:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3602:	22 30       	cpi	r18, 0x02	; 2
    3604:	31 05       	cpc	r19, r1
    3606:	09 f4       	brne	.+2      	; 0x360a <SevenSegment_Display+0xe0>
    3608:	4f c0       	rjmp	.+158    	; 0x36a8 <SevenSegment_Display+0x17e>
    360a:	89 8d       	ldd	r24, Y+25	; 0x19
    360c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    360e:	83 30       	cpi	r24, 0x03	; 3
    3610:	91 05       	cpc	r25, r1
    3612:	09 f4       	brne	.+2      	; 0x3616 <SevenSegment_Display+0xec>
    3614:	5d c0       	rjmp	.+186    	; 0x36d0 <SevenSegment_Display+0x1a6>
    3616:	de c0       	rjmp	.+444    	; 0x37d4 <SevenSegment_Display+0x2aa>
    3618:	29 8d       	ldd	r18, Y+25	; 0x19
    361a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    361c:	27 30       	cpi	r18, 0x07	; 7
    361e:	31 05       	cpc	r19, r1
    3620:	09 f4       	brne	.+2      	; 0x3624 <SevenSegment_Display+0xfa>
    3622:	a6 c0       	rjmp	.+332    	; 0x3770 <SevenSegment_Display+0x246>
    3624:	89 8d       	ldd	r24, Y+25	; 0x19
    3626:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3628:	88 30       	cpi	r24, 0x08	; 8
    362a:	91 05       	cpc	r25, r1
    362c:	6c f4       	brge	.+26     	; 0x3648 <SevenSegment_Display+0x11e>
    362e:	29 8d       	ldd	r18, Y+25	; 0x19
    3630:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3632:	25 30       	cpi	r18, 0x05	; 5
    3634:	31 05       	cpc	r19, r1
    3636:	09 f4       	brne	.+2      	; 0x363a <SevenSegment_Display+0x110>
    3638:	78 c0       	rjmp	.+240    	; 0x372a <SevenSegment_Display+0x200>
    363a:	89 8d       	ldd	r24, Y+25	; 0x19
    363c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    363e:	86 30       	cpi	r24, 0x06	; 6
    3640:	91 05       	cpc	r25, r1
    3642:	09 f4       	brne	.+2      	; 0x3646 <SevenSegment_Display+0x11c>
    3644:	86 c0       	rjmp	.+268    	; 0x3752 <SevenSegment_Display+0x228>
    3646:	c6 c0       	rjmp	.+396    	; 0x37d4 <SevenSegment_Display+0x2aa>
    3648:	29 8d       	ldd	r18, Y+25	; 0x19
    364a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    364c:	28 30       	cpi	r18, 0x08	; 8
    364e:	31 05       	cpc	r19, r1
    3650:	09 f4       	brne	.+2      	; 0x3654 <SevenSegment_Display+0x12a>
    3652:	a7 c0       	rjmp	.+334    	; 0x37a2 <SevenSegment_Display+0x278>
    3654:	89 8d       	ldd	r24, Y+25	; 0x19
    3656:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3658:	89 30       	cpi	r24, 0x09	; 9
    365a:	91 05       	cpc	r25, r1
    365c:	09 f4       	brne	.+2      	; 0x3660 <SevenSegment_Display+0x136>
    365e:	ab c0       	rjmp	.+342    	; 0x37b6 <SevenSegment_Display+0x28c>
    3660:	b9 c0       	rjmp	.+370    	; 0x37d4 <SevenSegment_Display+0x2aa>
						{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	6f ef       	ldi	r22, 0xFF	; 255
    3666:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	6f ef       	ldi	r22, 0xFF	; 255
    366e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_LOW);
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	66 e0       	ldi	r22, 0x06	; 6
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    367c:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	6f ef       	ldi	r22, 0xFF	; 255
    3684:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	60 e0       	ldi	r22, 0x00	; 0
    368c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	61 e0       	ldi	r22, 0x01	; 1
    3694:	41 e0       	ldi	r20, 0x01	; 1
    3696:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	62 e0       	ldi	r22, 0x02	; 2
    369e:	41 e0       	ldi	r20, 0x01	; 1
    36a0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    36a4:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	6f ef       	ldi	r22, 0xFF	; 255
    36ac:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	6f ef       	ldi	r22, 0xFF	; 255
    36b4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	62 e0       	ldi	r22, 0x02	; 2
    36bc:	40 e0       	ldi	r20, 0x00	; 0
    36be:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	65 e0       	ldi	r22, 0x05	; 5
    36c6:	40 e0       	ldi	r20, 0x00	; 0
    36c8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    36cc:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	6f ef       	ldi	r22, 0xFF	; 255
    36d4:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	6f ef       	ldi	r22, 0xFF	; 255
    36dc:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	64 e0       	ldi	r22, 0x04	; 4
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	65 e0       	ldi	r22, 0x05	; 5
    36ee:	40 e0       	ldi	r20, 0x00	; 0
    36f0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    36f4:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	6f ef       	ldi	r22, 0xFF	; 255
    36fc:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	6f ef       	ldi	r22, 0xFF	; 255
    3704:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	60 e0       	ldi	r22, 0x00	; 0
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_LOW);
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	63 e0       	ldi	r22, 0x03	; 3
    3716:	40 e0       	ldi	r20, 0x00	; 0
    3718:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	64 e0       	ldi	r22, 0x04	; 4
    3720:	40 e0       	ldi	r20, 0x00	; 0
    3722:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3726:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	6f ef       	ldi	r22, 0xFF	; 255
    372e:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	6f ef       	ldi	r22, 0xFF	; 255
    3736:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	61 e0       	ldi	r22, 0x01	; 1
    373e:	40 e0       	ldi	r20, 0x00	; 0
    3740:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	64 e0       	ldi	r22, 0x04	; 4
    3748:	40 e0       	ldi	r20, 0x00	; 0
    374a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    374e:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	6f ef       	ldi	r22, 0xFF	; 255
    3756:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	6f ef       	ldi	r22, 0xFF	; 255
    375e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	61 e0       	ldi	r22, 0x01	; 1
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    376c:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	6f ef       	ldi	r22, 0xFF	; 255
    3774:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	60 e0       	ldi	r22, 0x00	; 0
    3784:	41 e0       	ldi	r20, 0x01	; 1
    3786:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	61 e0       	ldi	r22, 0x01	; 1
    378e:	41 e0       	ldi	r20, 0x01	; 1
    3790:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	62 e0       	ldi	r22, 0x02	; 2
    3798:	41 e0       	ldi	r20, 0x01	; 1
    379a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    379e:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	6f ef       	ldi	r22, 0xFF	; 255
    37a6:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	6f ef       	ldi	r22, 0xFF	; 255
    37ae:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
    37b2:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	6f ef       	ldi	r22, 0xFF	; 255
    37ba:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	6f ef       	ldi	r22, 0xFF	; 255
    37c2:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	64 e0       	ldi	r22, 0x04	; 4
    37ca:	40 e0       	ldi	r20, 0x00	; 0
    37cc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    37d0:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    37d4:	18 8e       	std	Y+24, r1	; 0x18
    37d6:	0c 94 7e 23 	jmp	0x46fc	; 0x46fc <SevenSegment_Display+0x11d2>
					}
					break;
			case CommonAnode:
				DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	6f ef       	ldi	r22, 0xFF	; 255
    37de:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
				DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_HIGH);
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	67 e0       	ldi	r22, 0x07	; 7
    37e6:	41 e0       	ldi	r20, 0x01	; 1
    37e8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
				switch(NUM)
    37ec:	8b 81       	ldd	r24, Y+3	; 0x03
    37ee:	28 2f       	mov	r18, r24
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	3f 8b       	std	Y+23, r19	; 0x17
    37f4:	2e 8b       	std	Y+22, r18	; 0x16
    37f6:	8e 89       	ldd	r24, Y+22	; 0x16
    37f8:	9f 89       	ldd	r25, Y+23	; 0x17
    37fa:	84 30       	cpi	r24, 0x04	; 4
    37fc:	91 05       	cpc	r25, r1
    37fe:	09 f4       	brne	.+2      	; 0x3802 <SevenSegment_Display+0x2d8>
    3800:	8f c0       	rjmp	.+286    	; 0x3920 <SevenSegment_Display+0x3f6>
    3802:	2e 89       	ldd	r18, Y+22	; 0x16
    3804:	3f 89       	ldd	r19, Y+23	; 0x17
    3806:	25 30       	cpi	r18, 0x05	; 5
    3808:	31 05       	cpc	r19, r1
    380a:	ec f4       	brge	.+58     	; 0x3846 <SevenSegment_Display+0x31c>
    380c:	8e 89       	ldd	r24, Y+22	; 0x16
    380e:	9f 89       	ldd	r25, Y+23	; 0x17
    3810:	81 30       	cpi	r24, 0x01	; 1
    3812:	91 05       	cpc	r25, r1
    3814:	09 f4       	brne	.+2      	; 0x3818 <SevenSegment_Display+0x2ee>
    3816:	4b c0       	rjmp	.+150    	; 0x38ae <SevenSegment_Display+0x384>
    3818:	2e 89       	ldd	r18, Y+22	; 0x16
    381a:	3f 89       	ldd	r19, Y+23	; 0x17
    381c:	22 30       	cpi	r18, 0x02	; 2
    381e:	31 05       	cpc	r19, r1
    3820:	2c f4       	brge	.+10     	; 0x382c <SevenSegment_Display+0x302>
    3822:	8e 89       	ldd	r24, Y+22	; 0x16
    3824:	9f 89       	ldd	r25, Y+23	; 0x17
    3826:	00 97       	sbiw	r24, 0x00	; 0
    3828:	99 f1       	breq	.+102    	; 0x3890 <SevenSegment_Display+0x366>
    382a:	e2 c0       	rjmp	.+452    	; 0x39f0 <SevenSegment_Display+0x4c6>
    382c:	2e 89       	ldd	r18, Y+22	; 0x16
    382e:	3f 89       	ldd	r19, Y+23	; 0x17
    3830:	22 30       	cpi	r18, 0x02	; 2
    3832:	31 05       	cpc	r19, r1
    3834:	09 f4       	brne	.+2      	; 0x3838 <SevenSegment_Display+0x30e>
    3836:	4e c0       	rjmp	.+156    	; 0x38d4 <SevenSegment_Display+0x3aa>
    3838:	8e 89       	ldd	r24, Y+22	; 0x16
    383a:	9f 89       	ldd	r25, Y+23	; 0x17
    383c:	83 30       	cpi	r24, 0x03	; 3
    383e:	91 05       	cpc	r25, r1
    3840:	09 f4       	brne	.+2      	; 0x3844 <SevenSegment_Display+0x31a>
    3842:	5b c0       	rjmp	.+182    	; 0x38fa <SevenSegment_Display+0x3d0>
    3844:	d5 c0       	rjmp	.+426    	; 0x39f0 <SevenSegment_Display+0x4c6>
    3846:	2e 89       	ldd	r18, Y+22	; 0x16
    3848:	3f 89       	ldd	r19, Y+23	; 0x17
    384a:	27 30       	cpi	r18, 0x07	; 7
    384c:	31 05       	cpc	r19, r1
    384e:	09 f4       	brne	.+2      	; 0x3852 <SevenSegment_Display+0x328>
    3850:	a0 c0       	rjmp	.+320    	; 0x3992 <SevenSegment_Display+0x468>
    3852:	8e 89       	ldd	r24, Y+22	; 0x16
    3854:	9f 89       	ldd	r25, Y+23	; 0x17
    3856:	88 30       	cpi	r24, 0x08	; 8
    3858:	91 05       	cpc	r25, r1
    385a:	6c f4       	brge	.+26     	; 0x3876 <SevenSegment_Display+0x34c>
    385c:	2e 89       	ldd	r18, Y+22	; 0x16
    385e:	3f 89       	ldd	r19, Y+23	; 0x17
    3860:	25 30       	cpi	r18, 0x05	; 5
    3862:	31 05       	cpc	r19, r1
    3864:	09 f4       	brne	.+2      	; 0x3868 <SevenSegment_Display+0x33e>
    3866:	74 c0       	rjmp	.+232    	; 0x3950 <SevenSegment_Display+0x426>
    3868:	8e 89       	ldd	r24, Y+22	; 0x16
    386a:	9f 89       	ldd	r25, Y+23	; 0x17
    386c:	86 30       	cpi	r24, 0x06	; 6
    386e:	91 05       	cpc	r25, r1
    3870:	09 f4       	brne	.+2      	; 0x3874 <SevenSegment_Display+0x34a>
    3872:	81 c0       	rjmp	.+258    	; 0x3976 <SevenSegment_Display+0x44c>
    3874:	bd c0       	rjmp	.+378    	; 0x39f0 <SevenSegment_Display+0x4c6>
    3876:	2e 89       	ldd	r18, Y+22	; 0x16
    3878:	3f 89       	ldd	r19, Y+23	; 0x17
    387a:	28 30       	cpi	r18, 0x08	; 8
    387c:	31 05       	cpc	r19, r1
    387e:	09 f4       	brne	.+2      	; 0x3882 <SevenSegment_Display+0x358>
    3880:	a0 c0       	rjmp	.+320    	; 0x39c2 <SevenSegment_Display+0x498>
    3882:	8e 89       	ldd	r24, Y+22	; 0x16
    3884:	9f 89       	ldd	r25, Y+23	; 0x17
    3886:	89 30       	cpi	r24, 0x09	; 9
    3888:	91 05       	cpc	r25, r1
    388a:	09 f4       	brne	.+2      	; 0x388e <SevenSegment_Display+0x364>
    388c:	a3 c0       	rjmp	.+326    	; 0x39d4 <SevenSegment_Display+0x4aa>
    388e:	b0 c0       	rjmp	.+352    	; 0x39f0 <SevenSegment_Display+0x4c6>
					{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	6f ef       	ldi	r22, 0xFF	; 255
    3894:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	60 e0       	ldi	r22, 0x00	; 0
    389c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_HIGH);
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	66 e0       	ldi	r22, 0x06	; 6
    38a4:	41 e0       	ldi	r20, 0x01	; 1
    38a6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    38aa:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	6f ef       	ldi	r22, 0xFF	; 255
    38b2:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	6f ef       	ldi	r22, 0xFF	; 255
    38ba:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	61 e0       	ldi	r22, 0x01	; 1
    38c2:	40 e0       	ldi	r20, 0x00	; 0
    38c4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	62 e0       	ldi	r22, 0x02	; 2
    38cc:	40 e0       	ldi	r20, 0x00	; 0
    38ce:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    38d2:	12 c7       	rjmp	.+3620   	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	6f ef       	ldi	r22, 0xFF	; 255
    38d8:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	60 e0       	ldi	r22, 0x00	; 0
    38e0:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	62 e0       	ldi	r22, 0x02	; 2
    38e8:	41 e0       	ldi	r20, 0x01	; 1
    38ea:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	65 e0       	ldi	r22, 0x05	; 5
    38f2:	41 e0       	ldi	r20, 0x01	; 1
    38f4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    38f8:	ff c6       	rjmp	.+3582   	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	6f ef       	ldi	r22, 0xFF	; 255
    38fe:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	60 e0       	ldi	r22, 0x00	; 0
    3906:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	64 e0       	ldi	r22, 0x04	; 4
    390e:	41 e0       	ldi	r20, 0x01	; 1
    3910:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	65 e0       	ldi	r22, 0x05	; 5
    3918:	41 e0       	ldi	r20, 0x01	; 1
    391a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    391e:	ec c6       	rjmp	.+3544   	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	6f ef       	ldi	r22, 0xFF	; 255
    3924:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	60 e0       	ldi	r22, 0x00	; 0
    392c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	60 e0       	ldi	r22, 0x00	; 0
    3934:	41 e0       	ldi	r20, 0x01	; 1
    3936:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_HIGH);
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	63 e0       	ldi	r22, 0x03	; 3
    393e:	41 e0       	ldi	r20, 0x01	; 1
    3940:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	64 e0       	ldi	r22, 0x04	; 4
    3948:	41 e0       	ldi	r20, 0x01	; 1
    394a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    394e:	d4 c6       	rjmp	.+3496   	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	6f ef       	ldi	r22, 0xFF	; 255
    3954:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	60 e0       	ldi	r22, 0x00	; 0
    395c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	61 e0       	ldi	r22, 0x01	; 1
    3964:	41 e0       	ldi	r20, 0x01	; 1
    3966:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	64 e0       	ldi	r22, 0x04	; 4
    396e:	41 e0       	ldi	r20, 0x01	; 1
    3970:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3974:	c1 c6       	rjmp	.+3458   	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	6f ef       	ldi	r22, 0xFF	; 255
    397a:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	61 e0       	ldi	r22, 0x01	; 1
    398a:	41 e0       	ldi	r20, 0x01	; 1
    398c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3990:	b3 c6       	rjmp	.+3430   	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	6f ef       	ldi	r22, 0xFF	; 255
    3996:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	6f ef       	ldi	r22, 0xFF	; 255
    399e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	40 e0       	ldi	r20, 0x00	; 0
    39a8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	61 e0       	ldi	r22, 0x01	; 1
    39b0:	40 e0       	ldi	r20, 0x00	; 0
    39b2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	62 e0       	ldi	r22, 0x02	; 2
    39ba:	40 e0       	ldi	r20, 0x00	; 0
    39bc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    39c0:	9b c6       	rjmp	.+3382   	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	6f ef       	ldi	r22, 0xFF	; 255
    39c6:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	60 e0       	ldi	r22, 0x00	; 0
    39ce:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
    39d2:	92 c6       	rjmp	.+3364   	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	6f ef       	ldi	r22, 0xFF	; 255
    39d8:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	60 e0       	ldi	r22, 0x00	; 0
    39e0:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	64 e0       	ldi	r22, 0x04	; 4
    39e8:	41 e0       	ldi	r20, 0x01	; 1
    39ea:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    39ee:	84 c6       	rjmp	.+3336   	; 0x46f8 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    39f0:	18 8e       	std	Y+24, r1	; 0x18
    39f2:	84 c6       	rjmp	.+3336   	; 0x46fc <SevenSegment_Display+0x11d2>
					}
			break;
			default:
			return E_OK;
    39f4:	18 8e       	std	Y+24, r1	; 0x18
    39f6:	82 c6       	rjmp	.+3332   	; 0x46fc <SevenSegment_Display+0x11d2>
		}
		break;
		case DIO_PORTB:
			switch(TYPE)
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	28 2f       	mov	r18, r24
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	3d 8b       	std	Y+21, r19	; 0x15
    3a00:	2c 8b       	std	Y+20, r18	; 0x14
    3a02:	8c 89       	ldd	r24, Y+20	; 0x14
    3a04:	9d 89       	ldd	r25, Y+21	; 0x15
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	39 f0       	breq	.+14     	; 0x3a18 <SevenSegment_Display+0x4ee>
    3a0a:	2c 89       	ldd	r18, Y+20	; 0x14
    3a0c:	3d 89       	ldd	r19, Y+21	; 0x15
    3a0e:	21 30       	cpi	r18, 0x01	; 1
    3a10:	31 05       	cpc	r19, r1
    3a12:	09 f4       	brne	.+2      	; 0x3a16 <SevenSegment_Display+0x4ec>
    3a14:	0d c1       	rjmp	.+538    	; 0x3c30 <SevenSegment_Display+0x706>
    3a16:	18 c2       	rjmp	.+1072   	; 0x3e48 <SevenSegment_Display+0x91e>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	6f ef       	ldi	r22, 0xFF	; 255
    3a1c:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_LOW);
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	67 e0       	ldi	r22, 0x07	; 7
    3a24:	40 e0       	ldi	r20, 0x00	; 0
    3a26:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						switch(NUM)
    3a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2c:	28 2f       	mov	r18, r24
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	3b 8b       	std	Y+19, r19	; 0x13
    3a32:	2a 8b       	std	Y+18, r18	; 0x12
    3a34:	8a 89       	ldd	r24, Y+18	; 0x12
    3a36:	9b 89       	ldd	r25, Y+19	; 0x13
    3a38:	84 30       	cpi	r24, 0x04	; 4
    3a3a:	91 05       	cpc	r25, r1
    3a3c:	09 f4       	brne	.+2      	; 0x3a40 <SevenSegment_Display+0x516>
    3a3e:	8e c0       	rjmp	.+284    	; 0x3b5c <SevenSegment_Display+0x632>
    3a40:	2a 89       	ldd	r18, Y+18	; 0x12
    3a42:	3b 89       	ldd	r19, Y+19	; 0x13
    3a44:	25 30       	cpi	r18, 0x05	; 5
    3a46:	31 05       	cpc	r19, r1
    3a48:	ec f4       	brge	.+58     	; 0x3a84 <SevenSegment_Display+0x55a>
    3a4a:	8a 89       	ldd	r24, Y+18	; 0x12
    3a4c:	9b 89       	ldd	r25, Y+19	; 0x13
    3a4e:	81 30       	cpi	r24, 0x01	; 1
    3a50:	91 05       	cpc	r25, r1
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <SevenSegment_Display+0x52c>
    3a54:	4a c0       	rjmp	.+148    	; 0x3aea <SevenSegment_Display+0x5c0>
    3a56:	2a 89       	ldd	r18, Y+18	; 0x12
    3a58:	3b 89       	ldd	r19, Y+19	; 0x13
    3a5a:	22 30       	cpi	r18, 0x02	; 2
    3a5c:	31 05       	cpc	r19, r1
    3a5e:	2c f4       	brge	.+10     	; 0x3a6a <SevenSegment_Display+0x540>
    3a60:	8a 89       	ldd	r24, Y+18	; 0x12
    3a62:	9b 89       	ldd	r25, Y+19	; 0x13
    3a64:	00 97       	sbiw	r24, 0x00	; 0
    3a66:	99 f1       	breq	.+102    	; 0x3ace <SevenSegment_Display+0x5a4>
    3a68:	e1 c0       	rjmp	.+450    	; 0x3c2c <SevenSegment_Display+0x702>
    3a6a:	2a 89       	ldd	r18, Y+18	; 0x12
    3a6c:	3b 89       	ldd	r19, Y+19	; 0x13
    3a6e:	22 30       	cpi	r18, 0x02	; 2
    3a70:	31 05       	cpc	r19, r1
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <SevenSegment_Display+0x54c>
    3a74:	4d c0       	rjmp	.+154    	; 0x3b10 <SevenSegment_Display+0x5e6>
    3a76:	8a 89       	ldd	r24, Y+18	; 0x12
    3a78:	9b 89       	ldd	r25, Y+19	; 0x13
    3a7a:	83 30       	cpi	r24, 0x03	; 3
    3a7c:	91 05       	cpc	r25, r1
    3a7e:	09 f4       	brne	.+2      	; 0x3a82 <SevenSegment_Display+0x558>
    3a80:	5a c0       	rjmp	.+180    	; 0x3b36 <SevenSegment_Display+0x60c>
    3a82:	d4 c0       	rjmp	.+424    	; 0x3c2c <SevenSegment_Display+0x702>
    3a84:	2a 89       	ldd	r18, Y+18	; 0x12
    3a86:	3b 89       	ldd	r19, Y+19	; 0x13
    3a88:	27 30       	cpi	r18, 0x07	; 7
    3a8a:	31 05       	cpc	r19, r1
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <SevenSegment_Display+0x566>
    3a8e:	9f c0       	rjmp	.+318    	; 0x3bce <SevenSegment_Display+0x6a4>
    3a90:	8a 89       	ldd	r24, Y+18	; 0x12
    3a92:	9b 89       	ldd	r25, Y+19	; 0x13
    3a94:	88 30       	cpi	r24, 0x08	; 8
    3a96:	91 05       	cpc	r25, r1
    3a98:	6c f4       	brge	.+26     	; 0x3ab4 <SevenSegment_Display+0x58a>
    3a9a:	2a 89       	ldd	r18, Y+18	; 0x12
    3a9c:	3b 89       	ldd	r19, Y+19	; 0x13
    3a9e:	25 30       	cpi	r18, 0x05	; 5
    3aa0:	31 05       	cpc	r19, r1
    3aa2:	09 f4       	brne	.+2      	; 0x3aa6 <SevenSegment_Display+0x57c>
    3aa4:	73 c0       	rjmp	.+230    	; 0x3b8c <SevenSegment_Display+0x662>
    3aa6:	8a 89       	ldd	r24, Y+18	; 0x12
    3aa8:	9b 89       	ldd	r25, Y+19	; 0x13
    3aaa:	86 30       	cpi	r24, 0x06	; 6
    3aac:	91 05       	cpc	r25, r1
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <SevenSegment_Display+0x588>
    3ab0:	80 c0       	rjmp	.+256    	; 0x3bb2 <SevenSegment_Display+0x688>
    3ab2:	bc c0       	rjmp	.+376    	; 0x3c2c <SevenSegment_Display+0x702>
    3ab4:	2a 89       	ldd	r18, Y+18	; 0x12
    3ab6:	3b 89       	ldd	r19, Y+19	; 0x13
    3ab8:	28 30       	cpi	r18, 0x08	; 8
    3aba:	31 05       	cpc	r19, r1
    3abc:	09 f4       	brne	.+2      	; 0x3ac0 <SevenSegment_Display+0x596>
    3abe:	9f c0       	rjmp	.+318    	; 0x3bfe <SevenSegment_Display+0x6d4>
    3ac0:	8a 89       	ldd	r24, Y+18	; 0x12
    3ac2:	9b 89       	ldd	r25, Y+19	; 0x13
    3ac4:	89 30       	cpi	r24, 0x09	; 9
    3ac6:	91 05       	cpc	r25, r1
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <SevenSegment_Display+0x5a2>
    3aca:	a2 c0       	rjmp	.+324    	; 0x3c10 <SevenSegment_Display+0x6e6>
    3acc:	af c0       	rjmp	.+350    	; 0x3c2c <SevenSegment_Display+0x702>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	6f ef       	ldi	r22, 0xFF	; 255
    3ad2:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	6f ef       	ldi	r22, 0xFF	; 255
    3ada:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_LOW);
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	66 e0       	ldi	r22, 0x06	; 6
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3ae8:	07 c6       	rjmp	.+3086   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	6f ef       	ldi	r22, 0xFF	; 255
    3aee:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	60 e0       	ldi	r22, 0x00	; 0
    3af6:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	61 e0       	ldi	r22, 0x01	; 1
    3afe:	41 e0       	ldi	r20, 0x01	; 1
    3b00:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	62 e0       	ldi	r22, 0x02	; 2
    3b08:	41 e0       	ldi	r20, 0x01	; 1
    3b0a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3b0e:	f4 c5       	rjmp	.+3048   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	6f ef       	ldi	r22, 0xFF	; 255
    3b14:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	6f ef       	ldi	r22, 0xFF	; 255
    3b1c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	62 e0       	ldi	r22, 0x02	; 2
    3b24:	40 e0       	ldi	r20, 0x00	; 0
    3b26:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	65 e0       	ldi	r22, 0x05	; 5
    3b2e:	40 e0       	ldi	r20, 0x00	; 0
    3b30:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3b34:	e1 c5       	rjmp	.+3010   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	6f ef       	ldi	r22, 0xFF	; 255
    3b3a:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	6f ef       	ldi	r22, 0xFF	; 255
    3b42:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	64 e0       	ldi	r22, 0x04	; 4
    3b4a:	40 e0       	ldi	r20, 0x00	; 0
    3b4c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	65 e0       	ldi	r22, 0x05	; 5
    3b54:	40 e0       	ldi	r20, 0x00	; 0
    3b56:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3b5a:	ce c5       	rjmp	.+2972   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	6f ef       	ldi	r22, 0xFF	; 255
    3b60:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	6f ef       	ldi	r22, 0xFF	; 255
    3b68:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	60 e0       	ldi	r22, 0x00	; 0
    3b70:	40 e0       	ldi	r20, 0x00	; 0
    3b72:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_LOW);
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	63 e0       	ldi	r22, 0x03	; 3
    3b7a:	40 e0       	ldi	r20, 0x00	; 0
    3b7c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	64 e0       	ldi	r22, 0x04	; 4
    3b84:	40 e0       	ldi	r20, 0x00	; 0
    3b86:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3b8a:	b6 c5       	rjmp	.+2924   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	6f ef       	ldi	r22, 0xFF	; 255
    3b90:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	6f ef       	ldi	r22, 0xFF	; 255
    3b98:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	61 e0       	ldi	r22, 0x01	; 1
    3ba0:	40 e0       	ldi	r20, 0x00	; 0
    3ba2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	64 e0       	ldi	r22, 0x04	; 4
    3baa:	40 e0       	ldi	r20, 0x00	; 0
    3bac:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3bb0:	a3 c5       	rjmp	.+2886   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	6f ef       	ldi	r22, 0xFF	; 255
    3bb6:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	6f ef       	ldi	r22, 0xFF	; 255
    3bbe:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	61 e0       	ldi	r22, 0x01	; 1
    3bc6:	40 e0       	ldi	r20, 0x00	; 0
    3bc8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3bcc:	95 c5       	rjmp	.+2858   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	6f ef       	ldi	r22, 0xFF	; 255
    3bd2:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	60 e0       	ldi	r22, 0x00	; 0
    3bda:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	41 e0       	ldi	r20, 0x01	; 1
    3be4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	61 e0       	ldi	r22, 0x01	; 1
    3bec:	41 e0       	ldi	r20, 0x01	; 1
    3bee:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	62 e0       	ldi	r22, 0x02	; 2
    3bf6:	41 e0       	ldi	r20, 0x01	; 1
    3bf8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3bfc:	7d c5       	rjmp	.+2810   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	6f ef       	ldi	r22, 0xFF	; 255
    3c02:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	6f ef       	ldi	r22, 0xFF	; 255
    3c0a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
    3c0e:	74 c5       	rjmp	.+2792   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	6f ef       	ldi	r22, 0xFF	; 255
    3c14:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	6f ef       	ldi	r22, 0xFF	; 255
    3c1c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	64 e0       	ldi	r22, 0x04	; 4
    3c24:	40 e0       	ldi	r20, 0x00	; 0
    3c26:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3c2a:	66 c5       	rjmp	.+2764   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3c2c:	18 8e       	std	Y+24, r1	; 0x18
    3c2e:	66 c5       	rjmp	.+2764   	; 0x46fc <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	6f ef       	ldi	r22, 0xFF	; 255
    3c34:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_HIGH);
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	67 e0       	ldi	r22, 0x07	; 7
    3c3c:	41 e0       	ldi	r20, 0x01	; 1
    3c3e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
					switch(NUM)
    3c42:	8b 81       	ldd	r24, Y+3	; 0x03
    3c44:	28 2f       	mov	r18, r24
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	39 8b       	std	Y+17, r19	; 0x11
    3c4a:	28 8b       	std	Y+16, r18	; 0x10
    3c4c:	88 89       	ldd	r24, Y+16	; 0x10
    3c4e:	99 89       	ldd	r25, Y+17	; 0x11
    3c50:	84 30       	cpi	r24, 0x04	; 4
    3c52:	91 05       	cpc	r25, r1
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <SevenSegment_Display+0x72e>
    3c56:	8e c0       	rjmp	.+284    	; 0x3d74 <SevenSegment_Display+0x84a>
    3c58:	28 89       	ldd	r18, Y+16	; 0x10
    3c5a:	39 89       	ldd	r19, Y+17	; 0x11
    3c5c:	25 30       	cpi	r18, 0x05	; 5
    3c5e:	31 05       	cpc	r19, r1
    3c60:	ec f4       	brge	.+58     	; 0x3c9c <SevenSegment_Display+0x772>
    3c62:	88 89       	ldd	r24, Y+16	; 0x10
    3c64:	99 89       	ldd	r25, Y+17	; 0x11
    3c66:	81 30       	cpi	r24, 0x01	; 1
    3c68:	91 05       	cpc	r25, r1
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <SevenSegment_Display+0x744>
    3c6c:	4a c0       	rjmp	.+148    	; 0x3d02 <SevenSegment_Display+0x7d8>
    3c6e:	28 89       	ldd	r18, Y+16	; 0x10
    3c70:	39 89       	ldd	r19, Y+17	; 0x11
    3c72:	22 30       	cpi	r18, 0x02	; 2
    3c74:	31 05       	cpc	r19, r1
    3c76:	2c f4       	brge	.+10     	; 0x3c82 <SevenSegment_Display+0x758>
    3c78:	88 89       	ldd	r24, Y+16	; 0x10
    3c7a:	99 89       	ldd	r25, Y+17	; 0x11
    3c7c:	00 97       	sbiw	r24, 0x00	; 0
    3c7e:	99 f1       	breq	.+102    	; 0x3ce6 <SevenSegment_Display+0x7bc>
    3c80:	e1 c0       	rjmp	.+450    	; 0x3e44 <SevenSegment_Display+0x91a>
    3c82:	28 89       	ldd	r18, Y+16	; 0x10
    3c84:	39 89       	ldd	r19, Y+17	; 0x11
    3c86:	22 30       	cpi	r18, 0x02	; 2
    3c88:	31 05       	cpc	r19, r1
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <SevenSegment_Display+0x764>
    3c8c:	4d c0       	rjmp	.+154    	; 0x3d28 <SevenSegment_Display+0x7fe>
    3c8e:	88 89       	ldd	r24, Y+16	; 0x10
    3c90:	99 89       	ldd	r25, Y+17	; 0x11
    3c92:	83 30       	cpi	r24, 0x03	; 3
    3c94:	91 05       	cpc	r25, r1
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <SevenSegment_Display+0x770>
    3c98:	5a c0       	rjmp	.+180    	; 0x3d4e <SevenSegment_Display+0x824>
    3c9a:	d4 c0       	rjmp	.+424    	; 0x3e44 <SevenSegment_Display+0x91a>
    3c9c:	28 89       	ldd	r18, Y+16	; 0x10
    3c9e:	39 89       	ldd	r19, Y+17	; 0x11
    3ca0:	27 30       	cpi	r18, 0x07	; 7
    3ca2:	31 05       	cpc	r19, r1
    3ca4:	09 f4       	brne	.+2      	; 0x3ca8 <SevenSegment_Display+0x77e>
    3ca6:	9f c0       	rjmp	.+318    	; 0x3de6 <SevenSegment_Display+0x8bc>
    3ca8:	88 89       	ldd	r24, Y+16	; 0x10
    3caa:	99 89       	ldd	r25, Y+17	; 0x11
    3cac:	88 30       	cpi	r24, 0x08	; 8
    3cae:	91 05       	cpc	r25, r1
    3cb0:	6c f4       	brge	.+26     	; 0x3ccc <SevenSegment_Display+0x7a2>
    3cb2:	28 89       	ldd	r18, Y+16	; 0x10
    3cb4:	39 89       	ldd	r19, Y+17	; 0x11
    3cb6:	25 30       	cpi	r18, 0x05	; 5
    3cb8:	31 05       	cpc	r19, r1
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <SevenSegment_Display+0x794>
    3cbc:	73 c0       	rjmp	.+230    	; 0x3da4 <SevenSegment_Display+0x87a>
    3cbe:	88 89       	ldd	r24, Y+16	; 0x10
    3cc0:	99 89       	ldd	r25, Y+17	; 0x11
    3cc2:	86 30       	cpi	r24, 0x06	; 6
    3cc4:	91 05       	cpc	r25, r1
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <SevenSegment_Display+0x7a0>
    3cc8:	80 c0       	rjmp	.+256    	; 0x3dca <SevenSegment_Display+0x8a0>
    3cca:	bc c0       	rjmp	.+376    	; 0x3e44 <SevenSegment_Display+0x91a>
    3ccc:	28 89       	ldd	r18, Y+16	; 0x10
    3cce:	39 89       	ldd	r19, Y+17	; 0x11
    3cd0:	28 30       	cpi	r18, 0x08	; 8
    3cd2:	31 05       	cpc	r19, r1
    3cd4:	09 f4       	brne	.+2      	; 0x3cd8 <SevenSegment_Display+0x7ae>
    3cd6:	9f c0       	rjmp	.+318    	; 0x3e16 <SevenSegment_Display+0x8ec>
    3cd8:	88 89       	ldd	r24, Y+16	; 0x10
    3cda:	99 89       	ldd	r25, Y+17	; 0x11
    3cdc:	89 30       	cpi	r24, 0x09	; 9
    3cde:	91 05       	cpc	r25, r1
    3ce0:	09 f4       	brne	.+2      	; 0x3ce4 <SevenSegment_Display+0x7ba>
    3ce2:	a2 c0       	rjmp	.+324    	; 0x3e28 <SevenSegment_Display+0x8fe>
    3ce4:	af c0       	rjmp	.+350    	; 0x3e44 <SevenSegment_Display+0x91a>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	6f ef       	ldi	r22, 0xFF	; 255
    3cea:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3cee:	81 e0       	ldi	r24, 0x01	; 1
    3cf0:	60 e0       	ldi	r22, 0x00	; 0
    3cf2:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_HIGH);
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	66 e0       	ldi	r22, 0x06	; 6
    3cfa:	41 e0       	ldi	r20, 0x01	; 1
    3cfc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3d00:	fb c4       	rjmp	.+2550   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	6f ef       	ldi	r22, 0xFF	; 255
    3d06:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	6f ef       	ldi	r22, 0xFF	; 255
    3d0e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	61 e0       	ldi	r22, 0x01	; 1
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	62 e0       	ldi	r22, 0x02	; 2
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3d26:	e8 c4       	rjmp	.+2512   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3d28:	81 e0       	ldi	r24, 0x01	; 1
    3d2a:	6f ef       	ldi	r22, 0xFF	; 255
    3d2c:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	60 e0       	ldi	r22, 0x00	; 0
    3d34:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	62 e0       	ldi	r22, 0x02	; 2
    3d3c:	41 e0       	ldi	r20, 0x01	; 1
    3d3e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	65 e0       	ldi	r22, 0x05	; 5
    3d46:	41 e0       	ldi	r20, 0x01	; 1
    3d48:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3d4c:	d5 c4       	rjmp	.+2474   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	6f ef       	ldi	r22, 0xFF	; 255
    3d52:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	60 e0       	ldi	r22, 0x00	; 0
    3d5a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	64 e0       	ldi	r22, 0x04	; 4
    3d62:	41 e0       	ldi	r20, 0x01	; 1
    3d64:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    3d68:	81 e0       	ldi	r24, 0x01	; 1
    3d6a:	65 e0       	ldi	r22, 0x05	; 5
    3d6c:	41 e0       	ldi	r20, 0x01	; 1
    3d6e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3d72:	c2 c4       	rjmp	.+2436   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	6f ef       	ldi	r22, 0xFF	; 255
    3d78:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	60 e0       	ldi	r22, 0x00	; 0
    3d80:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	60 e0       	ldi	r22, 0x00	; 0
    3d88:	41 e0       	ldi	r20, 0x01	; 1
    3d8a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_HIGH);
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	63 e0       	ldi	r22, 0x03	; 3
    3d92:	41 e0       	ldi	r20, 0x01	; 1
    3d94:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	64 e0       	ldi	r22, 0x04	; 4
    3d9c:	41 e0       	ldi	r20, 0x01	; 1
    3d9e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3da2:	aa c4       	rjmp	.+2388   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	6f ef       	ldi	r22, 0xFF	; 255
    3da8:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	60 e0       	ldi	r22, 0x00	; 0
    3db0:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	61 e0       	ldi	r22, 0x01	; 1
    3db8:	41 e0       	ldi	r20, 0x01	; 1
    3dba:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	64 e0       	ldi	r22, 0x04	; 4
    3dc2:	41 e0       	ldi	r20, 0x01	; 1
    3dc4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3dc8:	97 c4       	rjmp	.+2350   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	6f ef       	ldi	r22, 0xFF	; 255
    3dce:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	60 e0       	ldi	r22, 0x00	; 0
    3dd6:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	61 e0       	ldi	r22, 0x01	; 1
    3dde:	41 e0       	ldi	r20, 0x01	; 1
    3de0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3de4:	89 c4       	rjmp	.+2322   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	6f ef       	ldi	r22, 0xFF	; 255
    3dea:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	6f ef       	ldi	r22, 0xFF	; 255
    3df2:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	60 e0       	ldi	r22, 0x00	; 0
    3dfa:	40 e0       	ldi	r20, 0x00	; 0
    3dfc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	61 e0       	ldi	r22, 0x01	; 1
    3e04:	40 e0       	ldi	r20, 0x00	; 0
    3e06:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	62 e0       	ldi	r22, 0x02	; 2
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3e14:	71 c4       	rjmp	.+2274   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	6f ef       	ldi	r22, 0xFF	; 255
    3e1a:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	60 e0       	ldi	r22, 0x00	; 0
    3e22:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
    3e26:	68 c4       	rjmp	.+2256   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	6f ef       	ldi	r22, 0xFF	; 255
    3e2c:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	64 e0       	ldi	r22, 0x04	; 4
    3e3c:	41 e0       	ldi	r20, 0x01	; 1
    3e3e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3e42:	5a c4       	rjmp	.+2228   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3e44:	18 8e       	std	Y+24, r1	; 0x18
    3e46:	5a c4       	rjmp	.+2228   	; 0x46fc <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    3e48:	18 8e       	std	Y+24, r1	; 0x18
    3e4a:	58 c4       	rjmp	.+2224   	; 0x46fc <SevenSegment_Display+0x11d2>
			}
			break;
		case DIO_PORTC:
			switch(TYPE)
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	28 2f       	mov	r18, r24
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	3f 87       	std	Y+15, r19	; 0x0f
    3e54:	2e 87       	std	Y+14, r18	; 0x0e
    3e56:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e58:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e5a:	00 97       	sbiw	r24, 0x00	; 0
    3e5c:	39 f0       	breq	.+14     	; 0x3e6c <SevenSegment_Display+0x942>
    3e5e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3e60:	3f 85       	ldd	r19, Y+15	; 0x0f
    3e62:	21 30       	cpi	r18, 0x01	; 1
    3e64:	31 05       	cpc	r19, r1
    3e66:	09 f4       	brne	.+2      	; 0x3e6a <SevenSegment_Display+0x940>
    3e68:	0d c1       	rjmp	.+538    	; 0x4084 <SevenSegment_Display+0xb5a>
    3e6a:	18 c2       	rjmp	.+1072   	; 0x429c <SevenSegment_Display+0xd72>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3e6c:	82 e0       	ldi	r24, 0x02	; 2
    3e6e:	6f ef       	ldi	r22, 0xFF	; 255
    3e70:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_LOW);
    3e74:	82 e0       	ldi	r24, 0x02	; 2
    3e76:	67 e0       	ldi	r22, 0x07	; 7
    3e78:	40 e0       	ldi	r20, 0x00	; 0
    3e7a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						switch(NUM)
    3e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e80:	28 2f       	mov	r18, r24
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	3d 87       	std	Y+13, r19	; 0x0d
    3e86:	2c 87       	std	Y+12, r18	; 0x0c
    3e88:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e8c:	84 30       	cpi	r24, 0x04	; 4
    3e8e:	91 05       	cpc	r25, r1
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <SevenSegment_Display+0x96a>
    3e92:	8e c0       	rjmp	.+284    	; 0x3fb0 <SevenSegment_Display+0xa86>
    3e94:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e96:	3d 85       	ldd	r19, Y+13	; 0x0d
    3e98:	25 30       	cpi	r18, 0x05	; 5
    3e9a:	31 05       	cpc	r19, r1
    3e9c:	ec f4       	brge	.+58     	; 0x3ed8 <SevenSegment_Display+0x9ae>
    3e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ea0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ea2:	81 30       	cpi	r24, 0x01	; 1
    3ea4:	91 05       	cpc	r25, r1
    3ea6:	09 f4       	brne	.+2      	; 0x3eaa <SevenSegment_Display+0x980>
    3ea8:	4a c0       	rjmp	.+148    	; 0x3f3e <SevenSegment_Display+0xa14>
    3eaa:	2c 85       	ldd	r18, Y+12	; 0x0c
    3eac:	3d 85       	ldd	r19, Y+13	; 0x0d
    3eae:	22 30       	cpi	r18, 0x02	; 2
    3eb0:	31 05       	cpc	r19, r1
    3eb2:	2c f4       	brge	.+10     	; 0x3ebe <SevenSegment_Display+0x994>
    3eb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3eb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	99 f1       	breq	.+102    	; 0x3f22 <SevenSegment_Display+0x9f8>
    3ebc:	e1 c0       	rjmp	.+450    	; 0x4080 <SevenSegment_Display+0xb56>
    3ebe:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ec0:	3d 85       	ldd	r19, Y+13	; 0x0d
    3ec2:	22 30       	cpi	r18, 0x02	; 2
    3ec4:	31 05       	cpc	r19, r1
    3ec6:	09 f4       	brne	.+2      	; 0x3eca <SevenSegment_Display+0x9a0>
    3ec8:	4d c0       	rjmp	.+154    	; 0x3f64 <SevenSegment_Display+0xa3a>
    3eca:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ecc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ece:	83 30       	cpi	r24, 0x03	; 3
    3ed0:	91 05       	cpc	r25, r1
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <SevenSegment_Display+0x9ac>
    3ed4:	5a c0       	rjmp	.+180    	; 0x3f8a <SevenSegment_Display+0xa60>
    3ed6:	d4 c0       	rjmp	.+424    	; 0x4080 <SevenSegment_Display+0xb56>
    3ed8:	2c 85       	ldd	r18, Y+12	; 0x0c
    3eda:	3d 85       	ldd	r19, Y+13	; 0x0d
    3edc:	27 30       	cpi	r18, 0x07	; 7
    3ede:	31 05       	cpc	r19, r1
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <SevenSegment_Display+0x9ba>
    3ee2:	9f c0       	rjmp	.+318    	; 0x4022 <SevenSegment_Display+0xaf8>
    3ee4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ee6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ee8:	88 30       	cpi	r24, 0x08	; 8
    3eea:	91 05       	cpc	r25, r1
    3eec:	6c f4       	brge	.+26     	; 0x3f08 <SevenSegment_Display+0x9de>
    3eee:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ef0:	3d 85       	ldd	r19, Y+13	; 0x0d
    3ef2:	25 30       	cpi	r18, 0x05	; 5
    3ef4:	31 05       	cpc	r19, r1
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <SevenSegment_Display+0x9d0>
    3ef8:	73 c0       	rjmp	.+230    	; 0x3fe0 <SevenSegment_Display+0xab6>
    3efa:	8c 85       	ldd	r24, Y+12	; 0x0c
    3efc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3efe:	86 30       	cpi	r24, 0x06	; 6
    3f00:	91 05       	cpc	r25, r1
    3f02:	09 f4       	brne	.+2      	; 0x3f06 <SevenSegment_Display+0x9dc>
    3f04:	80 c0       	rjmp	.+256    	; 0x4006 <SevenSegment_Display+0xadc>
    3f06:	bc c0       	rjmp	.+376    	; 0x4080 <SevenSegment_Display+0xb56>
    3f08:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f0a:	3d 85       	ldd	r19, Y+13	; 0x0d
    3f0c:	28 30       	cpi	r18, 0x08	; 8
    3f0e:	31 05       	cpc	r19, r1
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <SevenSegment_Display+0x9ea>
    3f12:	9f c0       	rjmp	.+318    	; 0x4052 <SevenSegment_Display+0xb28>
    3f14:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f16:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f18:	89 30       	cpi	r24, 0x09	; 9
    3f1a:	91 05       	cpc	r25, r1
    3f1c:	09 f4       	brne	.+2      	; 0x3f20 <SevenSegment_Display+0x9f6>
    3f1e:	a2 c0       	rjmp	.+324    	; 0x4064 <SevenSegment_Display+0xb3a>
    3f20:	af c0       	rjmp	.+350    	; 0x4080 <SevenSegment_Display+0xb56>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f22:	82 e0       	ldi	r24, 0x02	; 2
    3f24:	6f ef       	ldi	r22, 0xFF	; 255
    3f26:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3f2a:	82 e0       	ldi	r24, 0x02	; 2
    3f2c:	6f ef       	ldi	r22, 0xFF	; 255
    3f2e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_LOW);
    3f32:	82 e0       	ldi	r24, 0x02	; 2
    3f34:	66 e0       	ldi	r22, 0x06	; 6
    3f36:	40 e0       	ldi	r20, 0x00	; 0
    3f38:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3f3c:	dd c3       	rjmp	.+1978   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f3e:	82 e0       	ldi	r24, 0x02	; 2
    3f40:	6f ef       	ldi	r22, 0xFF	; 255
    3f42:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3f46:	82 e0       	ldi	r24, 0x02	; 2
    3f48:	60 e0       	ldi	r22, 0x00	; 0
    3f4a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3f4e:	82 e0       	ldi	r24, 0x02	; 2
    3f50:	61 e0       	ldi	r22, 0x01	; 1
    3f52:	41 e0       	ldi	r20, 0x01	; 1
    3f54:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3f58:	82 e0       	ldi	r24, 0x02	; 2
    3f5a:	62 e0       	ldi	r22, 0x02	; 2
    3f5c:	41 e0       	ldi	r20, 0x01	; 1
    3f5e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3f62:	ca c3       	rjmp	.+1940   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f64:	82 e0       	ldi	r24, 0x02	; 2
    3f66:	6f ef       	ldi	r22, 0xFF	; 255
    3f68:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3f6c:	82 e0       	ldi	r24, 0x02	; 2
    3f6e:	6f ef       	ldi	r22, 0xFF	; 255
    3f70:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3f74:	82 e0       	ldi	r24, 0x02	; 2
    3f76:	62 e0       	ldi	r22, 0x02	; 2
    3f78:	40 e0       	ldi	r20, 0x00	; 0
    3f7a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    3f7e:	82 e0       	ldi	r24, 0x02	; 2
    3f80:	65 e0       	ldi	r22, 0x05	; 5
    3f82:	40 e0       	ldi	r20, 0x00	; 0
    3f84:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3f88:	b7 c3       	rjmp	.+1902   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f8a:	82 e0       	ldi	r24, 0x02	; 2
    3f8c:	6f ef       	ldi	r22, 0xFF	; 255
    3f8e:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3f92:	82 e0       	ldi	r24, 0x02	; 2
    3f94:	6f ef       	ldi	r22, 0xFF	; 255
    3f96:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3f9a:	82 e0       	ldi	r24, 0x02	; 2
    3f9c:	64 e0       	ldi	r22, 0x04	; 4
    3f9e:	40 e0       	ldi	r20, 0x00	; 0
    3fa0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    3fa4:	82 e0       	ldi	r24, 0x02	; 2
    3fa6:	65 e0       	ldi	r22, 0x05	; 5
    3fa8:	40 e0       	ldi	r20, 0x00	; 0
    3faa:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3fae:	a4 c3       	rjmp	.+1864   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3fb0:	82 e0       	ldi	r24, 0x02	; 2
    3fb2:	6f ef       	ldi	r22, 0xFF	; 255
    3fb4:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3fb8:	82 e0       	ldi	r24, 0x02	; 2
    3fba:	6f ef       	ldi	r22, 0xFF	; 255
    3fbc:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    3fc0:	82 e0       	ldi	r24, 0x02	; 2
    3fc2:	60 e0       	ldi	r22, 0x00	; 0
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_LOW);
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	63 e0       	ldi	r22, 0x03	; 3
    3fce:	40 e0       	ldi	r20, 0x00	; 0
    3fd0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3fd4:	82 e0       	ldi	r24, 0x02	; 2
    3fd6:	64 e0       	ldi	r22, 0x04	; 4
    3fd8:	40 e0       	ldi	r20, 0x00	; 0
    3fda:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    3fde:	8c c3       	rjmp	.+1816   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3fe0:	82 e0       	ldi	r24, 0x02	; 2
    3fe2:	6f ef       	ldi	r22, 0xFF	; 255
    3fe4:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3fe8:	82 e0       	ldi	r24, 0x02	; 2
    3fea:	6f ef       	ldi	r22, 0xFF	; 255
    3fec:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    3ff0:	82 e0       	ldi	r24, 0x02	; 2
    3ff2:	61 e0       	ldi	r22, 0x01	; 1
    3ff4:	40 e0       	ldi	r20, 0x00	; 0
    3ff6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3ffa:	82 e0       	ldi	r24, 0x02	; 2
    3ffc:	64 e0       	ldi	r22, 0x04	; 4
    3ffe:	40 e0       	ldi	r20, 0x00	; 0
    4000:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4004:	79 c3       	rjmp	.+1778   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4006:	82 e0       	ldi	r24, 0x02	; 2
    4008:	6f ef       	ldi	r22, 0xFF	; 255
    400a:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    400e:	82 e0       	ldi	r24, 0x02	; 2
    4010:	6f ef       	ldi	r22, 0xFF	; 255
    4012:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    4016:	82 e0       	ldi	r24, 0x02	; 2
    4018:	61 e0       	ldi	r22, 0x01	; 1
    401a:	40 e0       	ldi	r20, 0x00	; 0
    401c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4020:	6b c3       	rjmp	.+1750   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4022:	82 e0       	ldi	r24, 0x02	; 2
    4024:	6f ef       	ldi	r22, 0xFF	; 255
    4026:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    402a:	82 e0       	ldi	r24, 0x02	; 2
    402c:	60 e0       	ldi	r22, 0x00	; 0
    402e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    4032:	82 e0       	ldi	r24, 0x02	; 2
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	41 e0       	ldi	r20, 0x01	; 1
    4038:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    403c:	82 e0       	ldi	r24, 0x02	; 2
    403e:	61 e0       	ldi	r22, 0x01	; 1
    4040:	41 e0       	ldi	r20, 0x01	; 1
    4042:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    4046:	82 e0       	ldi	r24, 0x02	; 2
    4048:	62 e0       	ldi	r22, 0x02	; 2
    404a:	41 e0       	ldi	r20, 0x01	; 1
    404c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4050:	53 c3       	rjmp	.+1702   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4052:	82 e0       	ldi	r24, 0x02	; 2
    4054:	6f ef       	ldi	r22, 0xFF	; 255
    4056:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    405a:	82 e0       	ldi	r24, 0x02	; 2
    405c:	6f ef       	ldi	r22, 0xFF	; 255
    405e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
    4062:	4a c3       	rjmp	.+1684   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4064:	82 e0       	ldi	r24, 0x02	; 2
    4066:	6f ef       	ldi	r22, 0xFF	; 255
    4068:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    406c:	82 e0       	ldi	r24, 0x02	; 2
    406e:	6f ef       	ldi	r22, 0xFF	; 255
    4070:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    4074:	82 e0       	ldi	r24, 0x02	; 2
    4076:	64 e0       	ldi	r22, 0x04	; 4
    4078:	40 e0       	ldi	r20, 0x00	; 0
    407a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    407e:	3c c3       	rjmp	.+1656   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    4080:	18 8e       	std	Y+24, r1	; 0x18
    4082:	3c c3       	rjmp	.+1656   	; 0x46fc <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4084:	82 e0       	ldi	r24, 0x02	; 2
    4086:	6f ef       	ldi	r22, 0xFF	; 255
    4088:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_HIGH);
    408c:	82 e0       	ldi	r24, 0x02	; 2
    408e:	67 e0       	ldi	r22, 0x07	; 7
    4090:	41 e0       	ldi	r20, 0x01	; 1
    4092:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
					switch(NUM)
    4096:	8b 81       	ldd	r24, Y+3	; 0x03
    4098:	28 2f       	mov	r18, r24
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	3b 87       	std	Y+11, r19	; 0x0b
    409e:	2a 87       	std	Y+10, r18	; 0x0a
    40a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    40a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    40a4:	84 30       	cpi	r24, 0x04	; 4
    40a6:	91 05       	cpc	r25, r1
    40a8:	09 f4       	brne	.+2      	; 0x40ac <SevenSegment_Display+0xb82>
    40aa:	8e c0       	rjmp	.+284    	; 0x41c8 <SevenSegment_Display+0xc9e>
    40ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    40ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    40b0:	25 30       	cpi	r18, 0x05	; 5
    40b2:	31 05       	cpc	r19, r1
    40b4:	ec f4       	brge	.+58     	; 0x40f0 <SevenSegment_Display+0xbc6>
    40b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    40b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    40ba:	81 30       	cpi	r24, 0x01	; 1
    40bc:	91 05       	cpc	r25, r1
    40be:	09 f4       	brne	.+2      	; 0x40c2 <SevenSegment_Display+0xb98>
    40c0:	4a c0       	rjmp	.+148    	; 0x4156 <SevenSegment_Display+0xc2c>
    40c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    40c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    40c6:	22 30       	cpi	r18, 0x02	; 2
    40c8:	31 05       	cpc	r19, r1
    40ca:	2c f4       	brge	.+10     	; 0x40d6 <SevenSegment_Display+0xbac>
    40cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    40ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    40d0:	00 97       	sbiw	r24, 0x00	; 0
    40d2:	99 f1       	breq	.+102    	; 0x413a <SevenSegment_Display+0xc10>
    40d4:	e1 c0       	rjmp	.+450    	; 0x4298 <SevenSegment_Display+0xd6e>
    40d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    40d8:	3b 85       	ldd	r19, Y+11	; 0x0b
    40da:	22 30       	cpi	r18, 0x02	; 2
    40dc:	31 05       	cpc	r19, r1
    40de:	09 f4       	brne	.+2      	; 0x40e2 <SevenSegment_Display+0xbb8>
    40e0:	4d c0       	rjmp	.+154    	; 0x417c <SevenSegment_Display+0xc52>
    40e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    40e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    40e6:	83 30       	cpi	r24, 0x03	; 3
    40e8:	91 05       	cpc	r25, r1
    40ea:	09 f4       	brne	.+2      	; 0x40ee <SevenSegment_Display+0xbc4>
    40ec:	5a c0       	rjmp	.+180    	; 0x41a2 <SevenSegment_Display+0xc78>
    40ee:	d4 c0       	rjmp	.+424    	; 0x4298 <SevenSegment_Display+0xd6e>
    40f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    40f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    40f4:	27 30       	cpi	r18, 0x07	; 7
    40f6:	31 05       	cpc	r19, r1
    40f8:	09 f4       	brne	.+2      	; 0x40fc <SevenSegment_Display+0xbd2>
    40fa:	9f c0       	rjmp	.+318    	; 0x423a <SevenSegment_Display+0xd10>
    40fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    40fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4100:	88 30       	cpi	r24, 0x08	; 8
    4102:	91 05       	cpc	r25, r1
    4104:	6c f4       	brge	.+26     	; 0x4120 <SevenSegment_Display+0xbf6>
    4106:	2a 85       	ldd	r18, Y+10	; 0x0a
    4108:	3b 85       	ldd	r19, Y+11	; 0x0b
    410a:	25 30       	cpi	r18, 0x05	; 5
    410c:	31 05       	cpc	r19, r1
    410e:	09 f4       	brne	.+2      	; 0x4112 <SevenSegment_Display+0xbe8>
    4110:	73 c0       	rjmp	.+230    	; 0x41f8 <SevenSegment_Display+0xcce>
    4112:	8a 85       	ldd	r24, Y+10	; 0x0a
    4114:	9b 85       	ldd	r25, Y+11	; 0x0b
    4116:	86 30       	cpi	r24, 0x06	; 6
    4118:	91 05       	cpc	r25, r1
    411a:	09 f4       	brne	.+2      	; 0x411e <SevenSegment_Display+0xbf4>
    411c:	80 c0       	rjmp	.+256    	; 0x421e <SevenSegment_Display+0xcf4>
    411e:	bc c0       	rjmp	.+376    	; 0x4298 <SevenSegment_Display+0xd6e>
    4120:	2a 85       	ldd	r18, Y+10	; 0x0a
    4122:	3b 85       	ldd	r19, Y+11	; 0x0b
    4124:	28 30       	cpi	r18, 0x08	; 8
    4126:	31 05       	cpc	r19, r1
    4128:	09 f4       	brne	.+2      	; 0x412c <SevenSegment_Display+0xc02>
    412a:	9f c0       	rjmp	.+318    	; 0x426a <SevenSegment_Display+0xd40>
    412c:	8a 85       	ldd	r24, Y+10	; 0x0a
    412e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4130:	89 30       	cpi	r24, 0x09	; 9
    4132:	91 05       	cpc	r25, r1
    4134:	09 f4       	brne	.+2      	; 0x4138 <SevenSegment_Display+0xc0e>
    4136:	a2 c0       	rjmp	.+324    	; 0x427c <SevenSegment_Display+0xd52>
    4138:	af c0       	rjmp	.+350    	; 0x4298 <SevenSegment_Display+0xd6e>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    413a:	82 e0       	ldi	r24, 0x02	; 2
    413c:	6f ef       	ldi	r22, 0xFF	; 255
    413e:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4142:	82 e0       	ldi	r24, 0x02	; 2
    4144:	60 e0       	ldi	r22, 0x00	; 0
    4146:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_HIGH);
    414a:	82 e0       	ldi	r24, 0x02	; 2
    414c:	66 e0       	ldi	r22, 0x06	; 6
    414e:	41 e0       	ldi	r20, 0x01	; 1
    4150:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4154:	d1 c2       	rjmp	.+1442   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4156:	82 e0       	ldi	r24, 0x02	; 2
    4158:	6f ef       	ldi	r22, 0xFF	; 255
    415a:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    415e:	82 e0       	ldi	r24, 0x02	; 2
    4160:	6f ef       	ldi	r22, 0xFF	; 255
    4162:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    4166:	82 e0       	ldi	r24, 0x02	; 2
    4168:	61 e0       	ldi	r22, 0x01	; 1
    416a:	40 e0       	ldi	r20, 0x00	; 0
    416c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    4170:	82 e0       	ldi	r24, 0x02	; 2
    4172:	62 e0       	ldi	r22, 0x02	; 2
    4174:	40 e0       	ldi	r20, 0x00	; 0
    4176:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    417a:	be c2       	rjmp	.+1404   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    417c:	82 e0       	ldi	r24, 0x02	; 2
    417e:	6f ef       	ldi	r22, 0xFF	; 255
    4180:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4184:	82 e0       	ldi	r24, 0x02	; 2
    4186:	60 e0       	ldi	r22, 0x00	; 0
    4188:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    418c:	82 e0       	ldi	r24, 0x02	; 2
    418e:	62 e0       	ldi	r22, 0x02	; 2
    4190:	41 e0       	ldi	r20, 0x01	; 1
    4192:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    4196:	82 e0       	ldi	r24, 0x02	; 2
    4198:	65 e0       	ldi	r22, 0x05	; 5
    419a:	41 e0       	ldi	r20, 0x01	; 1
    419c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    41a0:	ab c2       	rjmp	.+1366   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	6f ef       	ldi	r22, 0xFF	; 255
    41a6:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    41aa:	82 e0       	ldi	r24, 0x02	; 2
    41ac:	60 e0       	ldi	r22, 0x00	; 0
    41ae:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    41b2:	82 e0       	ldi	r24, 0x02	; 2
    41b4:	64 e0       	ldi	r22, 0x04	; 4
    41b6:	41 e0       	ldi	r20, 0x01	; 1
    41b8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    41bc:	82 e0       	ldi	r24, 0x02	; 2
    41be:	65 e0       	ldi	r22, 0x05	; 5
    41c0:	41 e0       	ldi	r20, 0x01	; 1
    41c2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    41c6:	98 c2       	rjmp	.+1328   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    41c8:	82 e0       	ldi	r24, 0x02	; 2
    41ca:	6f ef       	ldi	r22, 0xFF	; 255
    41cc:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	60 e0       	ldi	r22, 0x00	; 0
    41d4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    41d8:	82 e0       	ldi	r24, 0x02	; 2
    41da:	60 e0       	ldi	r22, 0x00	; 0
    41dc:	41 e0       	ldi	r20, 0x01	; 1
    41de:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_HIGH);
    41e2:	82 e0       	ldi	r24, 0x02	; 2
    41e4:	63 e0       	ldi	r22, 0x03	; 3
    41e6:	41 e0       	ldi	r20, 0x01	; 1
    41e8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    41ec:	82 e0       	ldi	r24, 0x02	; 2
    41ee:	64 e0       	ldi	r22, 0x04	; 4
    41f0:	41 e0       	ldi	r20, 0x01	; 1
    41f2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    41f6:	80 c2       	rjmp	.+1280   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    41f8:	82 e0       	ldi	r24, 0x02	; 2
    41fa:	6f ef       	ldi	r22, 0xFF	; 255
    41fc:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4200:	82 e0       	ldi	r24, 0x02	; 2
    4202:	60 e0       	ldi	r22, 0x00	; 0
    4204:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    4208:	82 e0       	ldi	r24, 0x02	; 2
    420a:	61 e0       	ldi	r22, 0x01	; 1
    420c:	41 e0       	ldi	r20, 0x01	; 1
    420e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    4212:	82 e0       	ldi	r24, 0x02	; 2
    4214:	64 e0       	ldi	r22, 0x04	; 4
    4216:	41 e0       	ldi	r20, 0x01	; 1
    4218:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    421c:	6d c2       	rjmp	.+1242   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    421e:	82 e0       	ldi	r24, 0x02	; 2
    4220:	6f ef       	ldi	r22, 0xFF	; 255
    4222:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4226:	82 e0       	ldi	r24, 0x02	; 2
    4228:	60 e0       	ldi	r22, 0x00	; 0
    422a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    422e:	82 e0       	ldi	r24, 0x02	; 2
    4230:	61 e0       	ldi	r22, 0x01	; 1
    4232:	41 e0       	ldi	r20, 0x01	; 1
    4234:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4238:	5f c2       	rjmp	.+1214   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    423a:	82 e0       	ldi	r24, 0x02	; 2
    423c:	6f ef       	ldi	r22, 0xFF	; 255
    423e:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    4242:	82 e0       	ldi	r24, 0x02	; 2
    4244:	6f ef       	ldi	r22, 0xFF	; 255
    4246:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    424a:	82 e0       	ldi	r24, 0x02	; 2
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	40 e0       	ldi	r20, 0x00	; 0
    4250:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    4254:	82 e0       	ldi	r24, 0x02	; 2
    4256:	61 e0       	ldi	r22, 0x01	; 1
    4258:	40 e0       	ldi	r20, 0x00	; 0
    425a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    425e:	82 e0       	ldi	r24, 0x02	; 2
    4260:	62 e0       	ldi	r22, 0x02	; 2
    4262:	40 e0       	ldi	r20, 0x00	; 0
    4264:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4268:	47 c2       	rjmp	.+1166   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    426a:	82 e0       	ldi	r24, 0x02	; 2
    426c:	6f ef       	ldi	r22, 0xFF	; 255
    426e:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	60 e0       	ldi	r22, 0x00	; 0
    4276:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
    427a:	3e c2       	rjmp	.+1148   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    427c:	82 e0       	ldi	r24, 0x02	; 2
    427e:	6f ef       	ldi	r22, 0xFF	; 255
    4280:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4284:	82 e0       	ldi	r24, 0x02	; 2
    4286:	60 e0       	ldi	r22, 0x00	; 0
    4288:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    428c:	82 e0       	ldi	r24, 0x02	; 2
    428e:	64 e0       	ldi	r22, 0x04	; 4
    4290:	41 e0       	ldi	r20, 0x01	; 1
    4292:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4296:	30 c2       	rjmp	.+1120   	; 0x46f8 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    4298:	18 8e       	std	Y+24, r1	; 0x18
    429a:	30 c2       	rjmp	.+1120   	; 0x46fc <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    429c:	18 8e       	std	Y+24, r1	; 0x18
    429e:	2e c2       	rjmp	.+1116   	; 0x46fc <SevenSegment_Display+0x11d2>
			}
			break;
			case DIO_PORTD:
				switch(TYPE)
    42a0:	8a 81       	ldd	r24, Y+2	; 0x02
    42a2:	28 2f       	mov	r18, r24
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	39 87       	std	Y+9, r19	; 0x09
    42a8:	28 87       	std	Y+8, r18	; 0x08
    42aa:	88 85       	ldd	r24, Y+8	; 0x08
    42ac:	99 85       	ldd	r25, Y+9	; 0x09
    42ae:	00 97       	sbiw	r24, 0x00	; 0
    42b0:	39 f0       	breq	.+14     	; 0x42c0 <SevenSegment_Display+0xd96>
    42b2:	28 85       	ldd	r18, Y+8	; 0x08
    42b4:	39 85       	ldd	r19, Y+9	; 0x09
    42b6:	21 30       	cpi	r18, 0x01	; 1
    42b8:	31 05       	cpc	r19, r1
    42ba:	09 f4       	brne	.+2      	; 0x42be <SevenSegment_Display+0xd94>
    42bc:	0d c1       	rjmp	.+538    	; 0x44d8 <SevenSegment_Display+0xfae>
    42be:	18 c2       	rjmp	.+1072   	; 0x46f0 <SevenSegment_Display+0x11c6>
					{
						case CommonCathod:
							DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    42c0:	83 e0       	ldi	r24, 0x03	; 3
    42c2:	6f ef       	ldi	r22, 0xFF	; 255
    42c4:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
							DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_LOW);
    42c8:	83 e0       	ldi	r24, 0x03	; 3
    42ca:	67 e0       	ldi	r22, 0x07	; 7
    42cc:	40 e0       	ldi	r20, 0x00	; 0
    42ce:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
							switch(NUM)
    42d2:	8b 81       	ldd	r24, Y+3	; 0x03
    42d4:	28 2f       	mov	r18, r24
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	3f 83       	std	Y+7, r19	; 0x07
    42da:	2e 83       	std	Y+6, r18	; 0x06
    42dc:	8e 81       	ldd	r24, Y+6	; 0x06
    42de:	9f 81       	ldd	r25, Y+7	; 0x07
    42e0:	84 30       	cpi	r24, 0x04	; 4
    42e2:	91 05       	cpc	r25, r1
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <SevenSegment_Display+0xdbe>
    42e6:	8e c0       	rjmp	.+284    	; 0x4404 <SevenSegment_Display+0xeda>
    42e8:	2e 81       	ldd	r18, Y+6	; 0x06
    42ea:	3f 81       	ldd	r19, Y+7	; 0x07
    42ec:	25 30       	cpi	r18, 0x05	; 5
    42ee:	31 05       	cpc	r19, r1
    42f0:	ec f4       	brge	.+58     	; 0x432c <SevenSegment_Display+0xe02>
    42f2:	8e 81       	ldd	r24, Y+6	; 0x06
    42f4:	9f 81       	ldd	r25, Y+7	; 0x07
    42f6:	81 30       	cpi	r24, 0x01	; 1
    42f8:	91 05       	cpc	r25, r1
    42fa:	09 f4       	brne	.+2      	; 0x42fe <SevenSegment_Display+0xdd4>
    42fc:	4a c0       	rjmp	.+148    	; 0x4392 <SevenSegment_Display+0xe68>
    42fe:	2e 81       	ldd	r18, Y+6	; 0x06
    4300:	3f 81       	ldd	r19, Y+7	; 0x07
    4302:	22 30       	cpi	r18, 0x02	; 2
    4304:	31 05       	cpc	r19, r1
    4306:	2c f4       	brge	.+10     	; 0x4312 <SevenSegment_Display+0xde8>
    4308:	8e 81       	ldd	r24, Y+6	; 0x06
    430a:	9f 81       	ldd	r25, Y+7	; 0x07
    430c:	00 97       	sbiw	r24, 0x00	; 0
    430e:	99 f1       	breq	.+102    	; 0x4376 <SevenSegment_Display+0xe4c>
    4310:	e1 c0       	rjmp	.+450    	; 0x44d4 <SevenSegment_Display+0xfaa>
    4312:	2e 81       	ldd	r18, Y+6	; 0x06
    4314:	3f 81       	ldd	r19, Y+7	; 0x07
    4316:	22 30       	cpi	r18, 0x02	; 2
    4318:	31 05       	cpc	r19, r1
    431a:	09 f4       	brne	.+2      	; 0x431e <SevenSegment_Display+0xdf4>
    431c:	4d c0       	rjmp	.+154    	; 0x43b8 <SevenSegment_Display+0xe8e>
    431e:	8e 81       	ldd	r24, Y+6	; 0x06
    4320:	9f 81       	ldd	r25, Y+7	; 0x07
    4322:	83 30       	cpi	r24, 0x03	; 3
    4324:	91 05       	cpc	r25, r1
    4326:	09 f4       	brne	.+2      	; 0x432a <SevenSegment_Display+0xe00>
    4328:	5a c0       	rjmp	.+180    	; 0x43de <SevenSegment_Display+0xeb4>
    432a:	d4 c0       	rjmp	.+424    	; 0x44d4 <SevenSegment_Display+0xfaa>
    432c:	2e 81       	ldd	r18, Y+6	; 0x06
    432e:	3f 81       	ldd	r19, Y+7	; 0x07
    4330:	27 30       	cpi	r18, 0x07	; 7
    4332:	31 05       	cpc	r19, r1
    4334:	09 f4       	brne	.+2      	; 0x4338 <SevenSegment_Display+0xe0e>
    4336:	9f c0       	rjmp	.+318    	; 0x4476 <SevenSegment_Display+0xf4c>
    4338:	8e 81       	ldd	r24, Y+6	; 0x06
    433a:	9f 81       	ldd	r25, Y+7	; 0x07
    433c:	88 30       	cpi	r24, 0x08	; 8
    433e:	91 05       	cpc	r25, r1
    4340:	6c f4       	brge	.+26     	; 0x435c <SevenSegment_Display+0xe32>
    4342:	2e 81       	ldd	r18, Y+6	; 0x06
    4344:	3f 81       	ldd	r19, Y+7	; 0x07
    4346:	25 30       	cpi	r18, 0x05	; 5
    4348:	31 05       	cpc	r19, r1
    434a:	09 f4       	brne	.+2      	; 0x434e <SevenSegment_Display+0xe24>
    434c:	73 c0       	rjmp	.+230    	; 0x4434 <SevenSegment_Display+0xf0a>
    434e:	8e 81       	ldd	r24, Y+6	; 0x06
    4350:	9f 81       	ldd	r25, Y+7	; 0x07
    4352:	86 30       	cpi	r24, 0x06	; 6
    4354:	91 05       	cpc	r25, r1
    4356:	09 f4       	brne	.+2      	; 0x435a <SevenSegment_Display+0xe30>
    4358:	80 c0       	rjmp	.+256    	; 0x445a <SevenSegment_Display+0xf30>
    435a:	bc c0       	rjmp	.+376    	; 0x44d4 <SevenSegment_Display+0xfaa>
    435c:	2e 81       	ldd	r18, Y+6	; 0x06
    435e:	3f 81       	ldd	r19, Y+7	; 0x07
    4360:	28 30       	cpi	r18, 0x08	; 8
    4362:	31 05       	cpc	r19, r1
    4364:	09 f4       	brne	.+2      	; 0x4368 <SevenSegment_Display+0xe3e>
    4366:	9f c0       	rjmp	.+318    	; 0x44a6 <SevenSegment_Display+0xf7c>
    4368:	8e 81       	ldd	r24, Y+6	; 0x06
    436a:	9f 81       	ldd	r25, Y+7	; 0x07
    436c:	89 30       	cpi	r24, 0x09	; 9
    436e:	91 05       	cpc	r25, r1
    4370:	09 f4       	brne	.+2      	; 0x4374 <SevenSegment_Display+0xe4a>
    4372:	a2 c0       	rjmp	.+324    	; 0x44b8 <SevenSegment_Display+0xf8e>
    4374:	af c0       	rjmp	.+350    	; 0x44d4 <SevenSegment_Display+0xfaa>
								{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4376:	83 e0       	ldi	r24, 0x03	; 3
    4378:	6f ef       	ldi	r22, 0xFF	; 255
    437a:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    437e:	83 e0       	ldi	r24, 0x03	; 3
    4380:	6f ef       	ldi	r22, 0xFF	; 255
    4382:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_LOW);
    4386:	83 e0       	ldi	r24, 0x03	; 3
    4388:	66 e0       	ldi	r22, 0x06	; 6
    438a:	40 e0       	ldi	r20, 0x00	; 0
    438c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4390:	b3 c1       	rjmp	.+870    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4392:	83 e0       	ldi	r24, 0x03	; 3
    4394:	6f ef       	ldi	r22, 0xFF	; 255
    4396:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    439a:	83 e0       	ldi	r24, 0x03	; 3
    439c:	60 e0       	ldi	r22, 0x00	; 0
    439e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    43a2:	83 e0       	ldi	r24, 0x03	; 3
    43a4:	61 e0       	ldi	r22, 0x01	; 1
    43a6:	41 e0       	ldi	r20, 0x01	; 1
    43a8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    43ac:	83 e0       	ldi	r24, 0x03	; 3
    43ae:	62 e0       	ldi	r22, 0x02	; 2
    43b0:	41 e0       	ldi	r20, 0x01	; 1
    43b2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    43b6:	a0 c1       	rjmp	.+832    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    43b8:	83 e0       	ldi	r24, 0x03	; 3
    43ba:	6f ef       	ldi	r22, 0xFF	; 255
    43bc:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    43c0:	83 e0       	ldi	r24, 0x03	; 3
    43c2:	6f ef       	ldi	r22, 0xFF	; 255
    43c4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    43c8:	83 e0       	ldi	r24, 0x03	; 3
    43ca:	62 e0       	ldi	r22, 0x02	; 2
    43cc:	40 e0       	ldi	r20, 0x00	; 0
    43ce:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    43d2:	83 e0       	ldi	r24, 0x03	; 3
    43d4:	65 e0       	ldi	r22, 0x05	; 5
    43d6:	40 e0       	ldi	r20, 0x00	; 0
    43d8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    43dc:	8d c1       	rjmp	.+794    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    43de:	83 e0       	ldi	r24, 0x03	; 3
    43e0:	6f ef       	ldi	r22, 0xFF	; 255
    43e2:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    43e6:	83 e0       	ldi	r24, 0x03	; 3
    43e8:	6f ef       	ldi	r22, 0xFF	; 255
    43ea:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    43ee:	83 e0       	ldi	r24, 0x03	; 3
    43f0:	64 e0       	ldi	r22, 0x04	; 4
    43f2:	40 e0       	ldi	r20, 0x00	; 0
    43f4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    43f8:	83 e0       	ldi	r24, 0x03	; 3
    43fa:	65 e0       	ldi	r22, 0x05	; 5
    43fc:	40 e0       	ldi	r20, 0x00	; 0
    43fe:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4402:	7a c1       	rjmp	.+756    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4404:	83 e0       	ldi	r24, 0x03	; 3
    4406:	6f ef       	ldi	r22, 0xFF	; 255
    4408:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    440c:	83 e0       	ldi	r24, 0x03	; 3
    440e:	6f ef       	ldi	r22, 0xFF	; 255
    4410:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    4414:	83 e0       	ldi	r24, 0x03	; 3
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	40 e0       	ldi	r20, 0x00	; 0
    441a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_LOW);
    441e:	83 e0       	ldi	r24, 0x03	; 3
    4420:	63 e0       	ldi	r22, 0x03	; 3
    4422:	40 e0       	ldi	r20, 0x00	; 0
    4424:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    4428:	83 e0       	ldi	r24, 0x03	; 3
    442a:	64 e0       	ldi	r22, 0x04	; 4
    442c:	40 e0       	ldi	r20, 0x00	; 0
    442e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4432:	62 c1       	rjmp	.+708    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4434:	83 e0       	ldi	r24, 0x03	; 3
    4436:	6f ef       	ldi	r22, 0xFF	; 255
    4438:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    443c:	83 e0       	ldi	r24, 0x03	; 3
    443e:	6f ef       	ldi	r22, 0xFF	; 255
    4440:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    4444:	83 e0       	ldi	r24, 0x03	; 3
    4446:	61 e0       	ldi	r22, 0x01	; 1
    4448:	40 e0       	ldi	r20, 0x00	; 0
    444a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    444e:	83 e0       	ldi	r24, 0x03	; 3
    4450:	64 e0       	ldi	r22, 0x04	; 4
    4452:	40 e0       	ldi	r20, 0x00	; 0
    4454:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4458:	4f c1       	rjmp	.+670    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    445a:	83 e0       	ldi	r24, 0x03	; 3
    445c:	6f ef       	ldi	r22, 0xFF	; 255
    445e:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4462:	83 e0       	ldi	r24, 0x03	; 3
    4464:	6f ef       	ldi	r22, 0xFF	; 255
    4466:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    446a:	83 e0       	ldi	r24, 0x03	; 3
    446c:	61 e0       	ldi	r22, 0x01	; 1
    446e:	40 e0       	ldi	r20, 0x00	; 0
    4470:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4474:	41 c1       	rjmp	.+642    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4476:	83 e0       	ldi	r24, 0x03	; 3
    4478:	6f ef       	ldi	r22, 0xFF	; 255
    447a:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    447e:	83 e0       	ldi	r24, 0x03	; 3
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    4486:	83 e0       	ldi	r24, 0x03	; 3
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	41 e0       	ldi	r20, 0x01	; 1
    448c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    4490:	83 e0       	ldi	r24, 0x03	; 3
    4492:	61 e0       	ldi	r22, 0x01	; 1
    4494:	41 e0       	ldi	r20, 0x01	; 1
    4496:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    449a:	83 e0       	ldi	r24, 0x03	; 3
    449c:	62 e0       	ldi	r22, 0x02	; 2
    449e:	41 e0       	ldi	r20, 0x01	; 1
    44a0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    44a4:	29 c1       	rjmp	.+594    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    44a6:	83 e0       	ldi	r24, 0x03	; 3
    44a8:	6f ef       	ldi	r22, 0xFF	; 255
    44aa:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    44ae:	83 e0       	ldi	r24, 0x03	; 3
    44b0:	6f ef       	ldi	r22, 0xFF	; 255
    44b2:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
    44b6:	20 c1       	rjmp	.+576    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    44b8:	83 e0       	ldi	r24, 0x03	; 3
    44ba:	6f ef       	ldi	r22, 0xFF	; 255
    44bc:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    44c0:	83 e0       	ldi	r24, 0x03	; 3
    44c2:	6f ef       	ldi	r22, 0xFF	; 255
    44c4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    44c8:	83 e0       	ldi	r24, 0x03	; 3
    44ca:	64 e0       	ldi	r22, 0x04	; 4
    44cc:	40 e0       	ldi	r20, 0x00	; 0
    44ce:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    44d2:	12 c1       	rjmp	.+548    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    44d4:	18 8e       	std	Y+24, r1	; 0x18
    44d6:	12 c1       	rjmp	.+548    	; 0x46fc <SevenSegment_Display+0x11d2>
							}
							break;
					case CommonAnode:
						DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    44d8:	83 e0       	ldi	r24, 0x03	; 3
    44da:	6f ef       	ldi	r22, 0xFF	; 255
    44dc:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_HIGH);
    44e0:	83 e0       	ldi	r24, 0x03	; 3
    44e2:	67 e0       	ldi	r22, 0x07	; 7
    44e4:	41 e0       	ldi	r20, 0x01	; 1
    44e6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
						switch(NUM)
    44ea:	8b 81       	ldd	r24, Y+3	; 0x03
    44ec:	28 2f       	mov	r18, r24
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	3d 83       	std	Y+5, r19	; 0x05
    44f2:	2c 83       	std	Y+4, r18	; 0x04
    44f4:	8c 81       	ldd	r24, Y+4	; 0x04
    44f6:	9d 81       	ldd	r25, Y+5	; 0x05
    44f8:	84 30       	cpi	r24, 0x04	; 4
    44fa:	91 05       	cpc	r25, r1
    44fc:	09 f4       	brne	.+2      	; 0x4500 <SevenSegment_Display+0xfd6>
    44fe:	8e c0       	rjmp	.+284    	; 0x461c <SevenSegment_Display+0x10f2>
    4500:	2c 81       	ldd	r18, Y+4	; 0x04
    4502:	3d 81       	ldd	r19, Y+5	; 0x05
    4504:	25 30       	cpi	r18, 0x05	; 5
    4506:	31 05       	cpc	r19, r1
    4508:	ec f4       	brge	.+58     	; 0x4544 <SevenSegment_Display+0x101a>
    450a:	8c 81       	ldd	r24, Y+4	; 0x04
    450c:	9d 81       	ldd	r25, Y+5	; 0x05
    450e:	81 30       	cpi	r24, 0x01	; 1
    4510:	91 05       	cpc	r25, r1
    4512:	09 f4       	brne	.+2      	; 0x4516 <SevenSegment_Display+0xfec>
    4514:	4a c0       	rjmp	.+148    	; 0x45aa <SevenSegment_Display+0x1080>
    4516:	2c 81       	ldd	r18, Y+4	; 0x04
    4518:	3d 81       	ldd	r19, Y+5	; 0x05
    451a:	22 30       	cpi	r18, 0x02	; 2
    451c:	31 05       	cpc	r19, r1
    451e:	2c f4       	brge	.+10     	; 0x452a <SevenSegment_Display+0x1000>
    4520:	8c 81       	ldd	r24, Y+4	; 0x04
    4522:	9d 81       	ldd	r25, Y+5	; 0x05
    4524:	00 97       	sbiw	r24, 0x00	; 0
    4526:	99 f1       	breq	.+102    	; 0x458e <SevenSegment_Display+0x1064>
    4528:	e1 c0       	rjmp	.+450    	; 0x46ec <SevenSegment_Display+0x11c2>
    452a:	2c 81       	ldd	r18, Y+4	; 0x04
    452c:	3d 81       	ldd	r19, Y+5	; 0x05
    452e:	22 30       	cpi	r18, 0x02	; 2
    4530:	31 05       	cpc	r19, r1
    4532:	09 f4       	brne	.+2      	; 0x4536 <SevenSegment_Display+0x100c>
    4534:	4d c0       	rjmp	.+154    	; 0x45d0 <SevenSegment_Display+0x10a6>
    4536:	8c 81       	ldd	r24, Y+4	; 0x04
    4538:	9d 81       	ldd	r25, Y+5	; 0x05
    453a:	83 30       	cpi	r24, 0x03	; 3
    453c:	91 05       	cpc	r25, r1
    453e:	09 f4       	brne	.+2      	; 0x4542 <SevenSegment_Display+0x1018>
    4540:	5a c0       	rjmp	.+180    	; 0x45f6 <SevenSegment_Display+0x10cc>
    4542:	d4 c0       	rjmp	.+424    	; 0x46ec <SevenSegment_Display+0x11c2>
    4544:	2c 81       	ldd	r18, Y+4	; 0x04
    4546:	3d 81       	ldd	r19, Y+5	; 0x05
    4548:	27 30       	cpi	r18, 0x07	; 7
    454a:	31 05       	cpc	r19, r1
    454c:	09 f4       	brne	.+2      	; 0x4550 <SevenSegment_Display+0x1026>
    454e:	9f c0       	rjmp	.+318    	; 0x468e <SevenSegment_Display+0x1164>
    4550:	8c 81       	ldd	r24, Y+4	; 0x04
    4552:	9d 81       	ldd	r25, Y+5	; 0x05
    4554:	88 30       	cpi	r24, 0x08	; 8
    4556:	91 05       	cpc	r25, r1
    4558:	6c f4       	brge	.+26     	; 0x4574 <SevenSegment_Display+0x104a>
    455a:	2c 81       	ldd	r18, Y+4	; 0x04
    455c:	3d 81       	ldd	r19, Y+5	; 0x05
    455e:	25 30       	cpi	r18, 0x05	; 5
    4560:	31 05       	cpc	r19, r1
    4562:	09 f4       	brne	.+2      	; 0x4566 <SevenSegment_Display+0x103c>
    4564:	73 c0       	rjmp	.+230    	; 0x464c <SevenSegment_Display+0x1122>
    4566:	8c 81       	ldd	r24, Y+4	; 0x04
    4568:	9d 81       	ldd	r25, Y+5	; 0x05
    456a:	86 30       	cpi	r24, 0x06	; 6
    456c:	91 05       	cpc	r25, r1
    456e:	09 f4       	brne	.+2      	; 0x4572 <SevenSegment_Display+0x1048>
    4570:	80 c0       	rjmp	.+256    	; 0x4672 <SevenSegment_Display+0x1148>
    4572:	bc c0       	rjmp	.+376    	; 0x46ec <SevenSegment_Display+0x11c2>
    4574:	2c 81       	ldd	r18, Y+4	; 0x04
    4576:	3d 81       	ldd	r19, Y+5	; 0x05
    4578:	28 30       	cpi	r18, 0x08	; 8
    457a:	31 05       	cpc	r19, r1
    457c:	09 f4       	brne	.+2      	; 0x4580 <SevenSegment_Display+0x1056>
    457e:	9f c0       	rjmp	.+318    	; 0x46be <SevenSegment_Display+0x1194>
    4580:	8c 81       	ldd	r24, Y+4	; 0x04
    4582:	9d 81       	ldd	r25, Y+5	; 0x05
    4584:	89 30       	cpi	r24, 0x09	; 9
    4586:	91 05       	cpc	r25, r1
    4588:	09 f4       	brne	.+2      	; 0x458c <SevenSegment_Display+0x1062>
    458a:	a2 c0       	rjmp	.+324    	; 0x46d0 <SevenSegment_Display+0x11a6>
    458c:	af c0       	rjmp	.+350    	; 0x46ec <SevenSegment_Display+0x11c2>
							{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    458e:	83 e0       	ldi	r24, 0x03	; 3
    4590:	6f ef       	ldi	r22, 0xFF	; 255
    4592:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4596:	83 e0       	ldi	r24, 0x03	; 3
    4598:	60 e0       	ldi	r22, 0x00	; 0
    459a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_HIGH);
    459e:	83 e0       	ldi	r24, 0x03	; 3
    45a0:	66 e0       	ldi	r22, 0x06	; 6
    45a2:	41 e0       	ldi	r20, 0x01	; 1
    45a4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    45a8:	a7 c0       	rjmp	.+334    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    45aa:	83 e0       	ldi	r24, 0x03	; 3
    45ac:	6f ef       	ldi	r22, 0xFF	; 255
    45ae:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    45b2:	83 e0       	ldi	r24, 0x03	; 3
    45b4:	6f ef       	ldi	r22, 0xFF	; 255
    45b6:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    45ba:	83 e0       	ldi	r24, 0x03	; 3
    45bc:	61 e0       	ldi	r22, 0x01	; 1
    45be:	40 e0       	ldi	r20, 0x00	; 0
    45c0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    45c4:	83 e0       	ldi	r24, 0x03	; 3
    45c6:	62 e0       	ldi	r22, 0x02	; 2
    45c8:	40 e0       	ldi	r20, 0x00	; 0
    45ca:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    45ce:	94 c0       	rjmp	.+296    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    45d0:	83 e0       	ldi	r24, 0x03	; 3
    45d2:	6f ef       	ldi	r22, 0xFF	; 255
    45d4:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    45d8:	83 e0       	ldi	r24, 0x03	; 3
    45da:	60 e0       	ldi	r22, 0x00	; 0
    45dc:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    45e0:	83 e0       	ldi	r24, 0x03	; 3
    45e2:	62 e0       	ldi	r22, 0x02	; 2
    45e4:	41 e0       	ldi	r20, 0x01	; 1
    45e6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    45ea:	83 e0       	ldi	r24, 0x03	; 3
    45ec:	65 e0       	ldi	r22, 0x05	; 5
    45ee:	41 e0       	ldi	r20, 0x01	; 1
    45f0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    45f4:	81 c0       	rjmp	.+258    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    45f6:	83 e0       	ldi	r24, 0x03	; 3
    45f8:	6f ef       	ldi	r22, 0xFF	; 255
    45fa:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    45fe:	83 e0       	ldi	r24, 0x03	; 3
    4600:	60 e0       	ldi	r22, 0x00	; 0
    4602:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    4606:	83 e0       	ldi	r24, 0x03	; 3
    4608:	64 e0       	ldi	r22, 0x04	; 4
    460a:	41 e0       	ldi	r20, 0x01	; 1
    460c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    4610:	83 e0       	ldi	r24, 0x03	; 3
    4612:	65 e0       	ldi	r22, 0x05	; 5
    4614:	41 e0       	ldi	r20, 0x01	; 1
    4616:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    461a:	6e c0       	rjmp	.+220    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    461c:	83 e0       	ldi	r24, 0x03	; 3
    461e:	6f ef       	ldi	r22, 0xFF	; 255
    4620:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4624:	83 e0       	ldi	r24, 0x03	; 3
    4626:	60 e0       	ldi	r22, 0x00	; 0
    4628:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    462c:	83 e0       	ldi	r24, 0x03	; 3
    462e:	60 e0       	ldi	r22, 0x00	; 0
    4630:	41 e0       	ldi	r20, 0x01	; 1
    4632:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_HIGH);
    4636:	83 e0       	ldi	r24, 0x03	; 3
    4638:	63 e0       	ldi	r22, 0x03	; 3
    463a:	41 e0       	ldi	r20, 0x01	; 1
    463c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    4640:	83 e0       	ldi	r24, 0x03	; 3
    4642:	64 e0       	ldi	r22, 0x04	; 4
    4644:	41 e0       	ldi	r20, 0x01	; 1
    4646:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    464a:	56 c0       	rjmp	.+172    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    464c:	83 e0       	ldi	r24, 0x03	; 3
    464e:	6f ef       	ldi	r22, 0xFF	; 255
    4650:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4654:	83 e0       	ldi	r24, 0x03	; 3
    4656:	60 e0       	ldi	r22, 0x00	; 0
    4658:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    465c:	83 e0       	ldi	r24, 0x03	; 3
    465e:	61 e0       	ldi	r22, 0x01	; 1
    4660:	41 e0       	ldi	r20, 0x01	; 1
    4662:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    4666:	83 e0       	ldi	r24, 0x03	; 3
    4668:	64 e0       	ldi	r22, 0x04	; 4
    466a:	41 e0       	ldi	r20, 0x01	; 1
    466c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4670:	43 c0       	rjmp	.+134    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4672:	83 e0       	ldi	r24, 0x03	; 3
    4674:	6f ef       	ldi	r22, 0xFF	; 255
    4676:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    467a:	83 e0       	ldi	r24, 0x03	; 3
    467c:	60 e0       	ldi	r22, 0x00	; 0
    467e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    4682:	83 e0       	ldi	r24, 0x03	; 3
    4684:	61 e0       	ldi	r22, 0x01	; 1
    4686:	41 e0       	ldi	r20, 0x01	; 1
    4688:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    468c:	35 c0       	rjmp	.+106    	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    468e:	83 e0       	ldi	r24, 0x03	; 3
    4690:	6f ef       	ldi	r22, 0xFF	; 255
    4692:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4696:	83 e0       	ldi	r24, 0x03	; 3
    4698:	6f ef       	ldi	r22, 0xFF	; 255
    469a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    469e:	83 e0       	ldi	r24, 0x03	; 3
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	40 e0       	ldi	r20, 0x00	; 0
    46a4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    46a8:	83 e0       	ldi	r24, 0x03	; 3
    46aa:	61 e0       	ldi	r22, 0x01	; 1
    46ac:	40 e0       	ldi	r20, 0x00	; 0
    46ae:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    46b2:	83 e0       	ldi	r24, 0x03	; 3
    46b4:	62 e0       	ldi	r22, 0x02	; 2
    46b6:	40 e0       	ldi	r20, 0x00	; 0
    46b8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    46bc:	1d c0       	rjmp	.+58     	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    46be:	83 e0       	ldi	r24, 0x03	; 3
    46c0:	6f ef       	ldi	r22, 0xFF	; 255
    46c2:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    46c6:	83 e0       	ldi	r24, 0x03	; 3
    46c8:	60 e0       	ldi	r22, 0x00	; 0
    46ca:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
    46ce:	14 c0       	rjmp	.+40     	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    46d0:	83 e0       	ldi	r24, 0x03	; 3
    46d2:	6f ef       	ldi	r22, 0xFF	; 255
    46d4:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    46d8:	83 e0       	ldi	r24, 0x03	; 3
    46da:	60 e0       	ldi	r22, 0x00	; 0
    46dc:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    46e0:	83 e0       	ldi	r24, 0x03	; 3
    46e2:	64 e0       	ldi	r22, 0x04	; 4
    46e4:	41 e0       	ldi	r20, 0x01	; 1
    46e6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    46ea:	06 c0       	rjmp	.+12     	; 0x46f8 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    46ec:	18 8e       	std	Y+24, r1	; 0x18
    46ee:	06 c0       	rjmp	.+12     	; 0x46fc <SevenSegment_Display+0x11d2>
							}
					break;
					default:
					return E_OK;
    46f0:	18 8e       	std	Y+24, r1	; 0x18
    46f2:	04 c0       	rjmp	.+8      	; 0x46fc <SevenSegment_Display+0x11d2>
				}
				break;
	default:
	return E_OK;
    46f4:	18 8e       	std	Y+24, r1	; 0x18
    46f6:	02 c0       	rjmp	.+4      	; 0x46fc <SevenSegment_Display+0x11d2>
}
	return E_NOK;
    46f8:	91 e0       	ldi	r25, 0x01	; 1
    46fa:	98 8f       	std	Y+24, r25	; 0x18
    46fc:	88 8d       	ldd	r24, Y+24	; 0x18
}
    46fe:	6e 96       	adiw	r28, 0x1e	; 30
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	de bf       	out	0x3e, r29	; 62
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	cd bf       	out	0x3d, r28	; 61
    470a:	cf 91       	pop	r28
    470c:	df 91       	pop	r29
    470e:	08 95       	ret

00004710 <CLCD_init>:
#include "LCD_Config.h"
#include <util/delay.h>


void CLCD_init(void)
{
    4710:	df 93       	push	r29
    4712:	cf 93       	push	r28
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	e8 97       	sbiw	r28, 0x38	; 56
    471a:	0f b6       	in	r0, 0x3f	; 63
    471c:	f8 94       	cli
    471e:	de bf       	out	0x3e, r29	; 62
    4720:	0f be       	out	0x3f, r0	; 63
    4722:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(40);


	#elif defined CLCD_4_BitMode
			/*Initialize LCD pins direction*/
				DIO_SetPinDirection(CLCD_DataPort,Data_Pin7,DIO_OUTPUT);
    4724:	82 e0       	ldi	r24, 0x02	; 2
    4726:	67 e0       	ldi	r22, 0x07	; 7
    4728:	41 e0       	ldi	r20, 0x01	; 1
    472a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_DataPort,Data_Pin6,DIO_OUTPUT);
    472e:	82 e0       	ldi	r24, 0x02	; 2
    4730:	66 e0       	ldi	r22, 0x06	; 6
    4732:	41 e0       	ldi	r20, 0x01	; 1
    4734:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_DataPort,Data_Pin5,DIO_OUTPUT);
    4738:	82 e0       	ldi	r24, 0x02	; 2
    473a:	65 e0       	ldi	r22, 0x05	; 5
    473c:	41 e0       	ldi	r20, 0x01	; 1
    473e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_DataPort,Data_Pin5,DIO_OUTPUT);
    4742:	82 e0       	ldi	r24, 0x02	; 2
    4744:	65 e0       	ldi	r22, 0x05	; 5
    4746:	41 e0       	ldi	r20, 0x01	; 1
    4748:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>

				DIO_SetPinDirection(CLCD_ControlPort,CLCD_RS_PIN,DIO_OUTPUT);
    474c:	81 e0       	ldi	r24, 0x01	; 1
    474e:	60 e0       	ldi	r22, 0x00	; 0
    4750:	41 e0       	ldi	r20, 0x01	; 1
    4752:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_ControlPort,CLCD_RW_PIN,DIO_OUTPUT);
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	61 e0       	ldi	r22, 0x01	; 1
    475a:	41 e0       	ldi	r20, 0x01	; 1
    475c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_ControlPort,CLCD_E_PIN,DIO_OUTPUT);
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	62 e0       	ldi	r22, 0x02	; 2
    4764:	41 e0       	ldi	r20, 0x01	; 1
    4766:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	a0 e2       	ldi	r26, 0x20	; 32
    4770:	b2 e4       	ldi	r27, 0x42	; 66
    4772:	8d ab       	std	Y+53, r24	; 0x35
    4774:	9e ab       	std	Y+54, r25	; 0x36
    4776:	af ab       	std	Y+55, r26	; 0x37
    4778:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    477a:	6d a9       	ldd	r22, Y+53	; 0x35
    477c:	7e a9       	ldd	r23, Y+54	; 0x36
    477e:	8f a9       	ldd	r24, Y+55	; 0x37
    4780:	98 ad       	ldd	r25, Y+56	; 0x38
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	4a ef       	ldi	r20, 0xFA	; 250
    4788:	54 e4       	ldi	r21, 0x44	; 68
    478a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	89 ab       	std	Y+49, r24	; 0x31
    4794:	9a ab       	std	Y+50, r25	; 0x32
    4796:	ab ab       	std	Y+51, r26	; 0x33
    4798:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    479a:	69 a9       	ldd	r22, Y+49	; 0x31
    479c:	7a a9       	ldd	r23, Y+50	; 0x32
    479e:	8b a9       	ldd	r24, Y+51	; 0x33
    47a0:	9c a9       	ldd	r25, Y+52	; 0x34
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	40 e8       	ldi	r20, 0x80	; 128
    47a8:	5f e3       	ldi	r21, 0x3F	; 63
    47aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ae:	88 23       	and	r24, r24
    47b0:	2c f4       	brge	.+10     	; 0x47bc <CLCD_init+0xac>
		__ticks = 1;
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	98 ab       	std	Y+48, r25	; 0x30
    47b8:	8f a7       	std	Y+47, r24	; 0x2f
    47ba:	3f c0       	rjmp	.+126    	; 0x483a <CLCD_init+0x12a>
	else if (__tmp > 65535)
    47bc:	69 a9       	ldd	r22, Y+49	; 0x31
    47be:	7a a9       	ldd	r23, Y+50	; 0x32
    47c0:	8b a9       	ldd	r24, Y+51	; 0x33
    47c2:	9c a9       	ldd	r25, Y+52	; 0x34
    47c4:	20 e0       	ldi	r18, 0x00	; 0
    47c6:	3f ef       	ldi	r19, 0xFF	; 255
    47c8:	4f e7       	ldi	r20, 0x7F	; 127
    47ca:	57 e4       	ldi	r21, 0x47	; 71
    47cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47d0:	18 16       	cp	r1, r24
    47d2:	4c f5       	brge	.+82     	; 0x4826 <CLCD_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d4:	6d a9       	ldd	r22, Y+53	; 0x35
    47d6:	7e a9       	ldd	r23, Y+54	; 0x36
    47d8:	8f a9       	ldd	r24, Y+55	; 0x37
    47da:	98 ad       	ldd	r25, Y+56	; 0x38
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	40 e2       	ldi	r20, 0x20	; 32
    47e2:	51 e4       	ldi	r21, 0x41	; 65
    47e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	bc 01       	movw	r22, r24
    47ee:	cd 01       	movw	r24, r26
    47f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f4:	dc 01       	movw	r26, r24
    47f6:	cb 01       	movw	r24, r22
    47f8:	98 ab       	std	Y+48, r25	; 0x30
    47fa:	8f a7       	std	Y+47, r24	; 0x2f
    47fc:	0f c0       	rjmp	.+30     	; 0x481c <CLCD_init+0x10c>
    47fe:	88 ec       	ldi	r24, 0xC8	; 200
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	9e a7       	std	Y+46, r25	; 0x2e
    4804:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4806:	8d a5       	ldd	r24, Y+45	; 0x2d
    4808:	9e a5       	ldd	r25, Y+46	; 0x2e
    480a:	01 97       	sbiw	r24, 0x01	; 1
    480c:	f1 f7       	brne	.-4      	; 0x480a <CLCD_init+0xfa>
    480e:	9e a7       	std	Y+46, r25	; 0x2e
    4810:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4812:	8f a5       	ldd	r24, Y+47	; 0x2f
    4814:	98 a9       	ldd	r25, Y+48	; 0x30
    4816:	01 97       	sbiw	r24, 0x01	; 1
    4818:	98 ab       	std	Y+48, r25	; 0x30
    481a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    481c:	8f a5       	ldd	r24, Y+47	; 0x2f
    481e:	98 a9       	ldd	r25, Y+48	; 0x30
    4820:	00 97       	sbiw	r24, 0x00	; 0
    4822:	69 f7       	brne	.-38     	; 0x47fe <CLCD_init+0xee>
    4824:	14 c0       	rjmp	.+40     	; 0x484e <CLCD_init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4826:	69 a9       	ldd	r22, Y+49	; 0x31
    4828:	7a a9       	ldd	r23, Y+50	; 0x32
    482a:	8b a9       	ldd	r24, Y+51	; 0x33
    482c:	9c a9       	ldd	r25, Y+52	; 0x34
    482e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	98 ab       	std	Y+48, r25	; 0x30
    4838:	8f a7       	std	Y+47, r24	; 0x2f
    483a:	8f a5       	ldd	r24, Y+47	; 0x2f
    483c:	98 a9       	ldd	r25, Y+48	; 0x30
    483e:	9c a7       	std	Y+44, r25	; 0x2c
    4840:	8b a7       	std	Y+43, r24	; 0x2b
    4842:	8b a5       	ldd	r24, Y+43	; 0x2b
    4844:	9c a5       	ldd	r25, Y+44	; 0x2c
    4846:	01 97       	sbiw	r24, 0x01	; 1
    4848:	f1 f7       	brne	.-4      	; 0x4846 <CLCD_init+0x136>
    484a:	9c a7       	std	Y+44, r25	; 0x2c
    484c:	8b a7       	std	Y+43, r24	; 0x2b

				/*Wait for more than 30 ms*/
				_delay_ms(40);

				DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	60 e0       	ldi	r22, 0x00	; 0
    4852:	40 e0       	ldi	r20, 0x00	; 0
    4854:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
				DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    4858:	81 e0       	ldi	r24, 0x01	; 1
    485a:	61 e0       	ldi	r22, 0x01	; 1
    485c:	40 e0       	ldi	r20, 0x00	; 0
    485e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>

			/*Set command to data pins*/
			DIO_SetPinValue(CLCD_DataPort,Data_Pin7,DIO_LOW);
    4862:	82 e0       	ldi	r24, 0x02	; 2
    4864:	67 e0       	ldi	r22, 0x07	; 7
    4866:	40 e0       	ldi	r20, 0x00	; 0
    4868:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin6,DIO_LOW);
    486c:	82 e0       	ldi	r24, 0x02	; 2
    486e:	66 e0       	ldi	r22, 0x06	; 6
    4870:	40 e0       	ldi	r20, 0x00	; 0
    4872:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin5,DIO_HIGH);
    4876:	82 e0       	ldi	r24, 0x02	; 2
    4878:	65 e0       	ldi	r22, 0x05	; 5
    487a:	41 e0       	ldi	r20, 0x01	; 1
    487c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin4,DIO_LOW);
    4880:	82 e0       	ldi	r24, 0x02	; 2
    4882:	64 e0       	ldi	r22, 0x04	; 4
    4884:	40 e0       	ldi	r20, 0x00	; 0
    4886:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
			/*Send enable pulse*/
		    DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	62 e0       	ldi	r22, 0x02	; 2
    488e:	41 e0       	ldi	r20, 0x01	; 1
    4890:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	a0 e0       	ldi	r26, 0x00	; 0
    489a:	b0 e4       	ldi	r27, 0x40	; 64
    489c:	8f a3       	std	Y+39, r24	; 0x27
    489e:	98 a7       	std	Y+40, r25	; 0x28
    48a0:	a9 a7       	std	Y+41, r26	; 0x29
    48a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a4:	6f a1       	ldd	r22, Y+39	; 0x27
    48a6:	78 a5       	ldd	r23, Y+40	; 0x28
    48a8:	89 a5       	ldd	r24, Y+41	; 0x29
    48aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	4a ef       	ldi	r20, 0xFA	; 250
    48b2:	54 e4       	ldi	r21, 0x44	; 68
    48b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	8b a3       	std	Y+35, r24	; 0x23
    48be:	9c a3       	std	Y+36, r25	; 0x24
    48c0:	ad a3       	std	Y+37, r26	; 0x25
    48c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    48c4:	6b a1       	ldd	r22, Y+35	; 0x23
    48c6:	7c a1       	ldd	r23, Y+36	; 0x24
    48c8:	8d a1       	ldd	r24, Y+37	; 0x25
    48ca:	9e a1       	ldd	r25, Y+38	; 0x26
    48cc:	20 e0       	ldi	r18, 0x00	; 0
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	40 e8       	ldi	r20, 0x80	; 128
    48d2:	5f e3       	ldi	r21, 0x3F	; 63
    48d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48d8:	88 23       	and	r24, r24
    48da:	2c f4       	brge	.+10     	; 0x48e6 <CLCD_init+0x1d6>
		__ticks = 1;
    48dc:	81 e0       	ldi	r24, 0x01	; 1
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	9a a3       	std	Y+34, r25	; 0x22
    48e2:	89 a3       	std	Y+33, r24	; 0x21
    48e4:	3f c0       	rjmp	.+126    	; 0x4964 <CLCD_init+0x254>
	else if (__tmp > 65535)
    48e6:	6b a1       	ldd	r22, Y+35	; 0x23
    48e8:	7c a1       	ldd	r23, Y+36	; 0x24
    48ea:	8d a1       	ldd	r24, Y+37	; 0x25
    48ec:	9e a1       	ldd	r25, Y+38	; 0x26
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	3f ef       	ldi	r19, 0xFF	; 255
    48f2:	4f e7       	ldi	r20, 0x7F	; 127
    48f4:	57 e4       	ldi	r21, 0x47	; 71
    48f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48fa:	18 16       	cp	r1, r24
    48fc:	4c f5       	brge	.+82     	; 0x4950 <CLCD_init+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48fe:	6f a1       	ldd	r22, Y+39	; 0x27
    4900:	78 a5       	ldd	r23, Y+40	; 0x28
    4902:	89 a5       	ldd	r24, Y+41	; 0x29
    4904:	9a a5       	ldd	r25, Y+42	; 0x2a
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	40 e2       	ldi	r20, 0x20	; 32
    490c:	51 e4       	ldi	r21, 0x41	; 65
    490e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	bc 01       	movw	r22, r24
    4918:	cd 01       	movw	r24, r26
    491a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	9a a3       	std	Y+34, r25	; 0x22
    4924:	89 a3       	std	Y+33, r24	; 0x21
    4926:	0f c0       	rjmp	.+30     	; 0x4946 <CLCD_init+0x236>
    4928:	88 ec       	ldi	r24, 0xC8	; 200
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	98 a3       	std	Y+32, r25	; 0x20
    492e:	8f 8f       	std	Y+31, r24	; 0x1f
    4930:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4932:	98 a1       	ldd	r25, Y+32	; 0x20
    4934:	01 97       	sbiw	r24, 0x01	; 1
    4936:	f1 f7       	brne	.-4      	; 0x4934 <CLCD_init+0x224>
    4938:	98 a3       	std	Y+32, r25	; 0x20
    493a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    493c:	89 a1       	ldd	r24, Y+33	; 0x21
    493e:	9a a1       	ldd	r25, Y+34	; 0x22
    4940:	01 97       	sbiw	r24, 0x01	; 1
    4942:	9a a3       	std	Y+34, r25	; 0x22
    4944:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4946:	89 a1       	ldd	r24, Y+33	; 0x21
    4948:	9a a1       	ldd	r25, Y+34	; 0x22
    494a:	00 97       	sbiw	r24, 0x00	; 0
    494c:	69 f7       	brne	.-38     	; 0x4928 <CLCD_init+0x218>
    494e:	14 c0       	rjmp	.+40     	; 0x4978 <CLCD_init+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4950:	6b a1       	ldd	r22, Y+35	; 0x23
    4952:	7c a1       	ldd	r23, Y+36	; 0x24
    4954:	8d a1       	ldd	r24, Y+37	; 0x25
    4956:	9e a1       	ldd	r25, Y+38	; 0x26
    4958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    495c:	dc 01       	movw	r26, r24
    495e:	cb 01       	movw	r24, r22
    4960:	9a a3       	std	Y+34, r25	; 0x22
    4962:	89 a3       	std	Y+33, r24	; 0x21
    4964:	89 a1       	ldd	r24, Y+33	; 0x21
    4966:	9a a1       	ldd	r25, Y+34	; 0x22
    4968:	9e 8f       	std	Y+30, r25	; 0x1e
    496a:	8d 8f       	std	Y+29, r24	; 0x1d
    496c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    496e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4970:	01 97       	sbiw	r24, 0x01	; 1
    4972:	f1 f7       	brne	.-4      	; 0x4970 <CLCD_init+0x260>
    4974:	9e 8f       	std	Y+30, r25	; 0x1e
    4976:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(2);
		    DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	62 e0       	ldi	r22, 0x02	; 2
    497c:	40 e0       	ldi	r20, 0x00	; 0
    497e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
			/*Set command to data pins*/
			DIO_SetPinValue(CLCD_DataPort,Data_Pin7,DIO_LOW);
    4982:	82 e0       	ldi	r24, 0x02	; 2
    4984:	67 e0       	ldi	r22, 0x07	; 7
    4986:	40 e0       	ldi	r20, 0x00	; 0
    4988:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin6,DIO_LOW);
    498c:	82 e0       	ldi	r24, 0x02	; 2
    498e:	66 e0       	ldi	r22, 0x06	; 6
    4990:	40 e0       	ldi	r20, 0x00	; 0
    4992:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin5,DIO_HIGH);
    4996:	82 e0       	ldi	r24, 0x02	; 2
    4998:	65 e0       	ldi	r22, 0x05	; 5
    499a:	41 e0       	ldi	r20, 0x01	; 1
    499c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin4,DIO_LOW);
    49a0:	82 e0       	ldi	r24, 0x02	; 2
    49a2:	64 e0       	ldi	r22, 0x04	; 4
    49a4:	40 e0       	ldi	r20, 0x00	; 0
    49a6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
			/*Send enable pulse*/
		    DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    49aa:	81 e0       	ldi	r24, 0x01	; 1
    49ac:	62 e0       	ldi	r22, 0x02	; 2
    49ae:	41 e0       	ldi	r20, 0x01	; 1
    49b0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	a0 e0       	ldi	r26, 0x00	; 0
    49ba:	b0 e4       	ldi	r27, 0x40	; 64
    49bc:	89 8f       	std	Y+25, r24	; 0x19
    49be:	9a 8f       	std	Y+26, r25	; 0x1a
    49c0:	ab 8f       	std	Y+27, r26	; 0x1b
    49c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49c4:	69 8d       	ldd	r22, Y+25	; 0x19
    49c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	4a ef       	ldi	r20, 0xFA	; 250
    49d2:	54 e4       	ldi	r21, 0x44	; 68
    49d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d8:	dc 01       	movw	r26, r24
    49da:	cb 01       	movw	r24, r22
    49dc:	8d 8b       	std	Y+21, r24	; 0x15
    49de:	9e 8b       	std	Y+22, r25	; 0x16
    49e0:	af 8b       	std	Y+23, r26	; 0x17
    49e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    49e4:	6d 89       	ldd	r22, Y+21	; 0x15
    49e6:	7e 89       	ldd	r23, Y+22	; 0x16
    49e8:	8f 89       	ldd	r24, Y+23	; 0x17
    49ea:	98 8d       	ldd	r25, Y+24	; 0x18
    49ec:	20 e0       	ldi	r18, 0x00	; 0
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	40 e8       	ldi	r20, 0x80	; 128
    49f2:	5f e3       	ldi	r21, 0x3F	; 63
    49f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49f8:	88 23       	and	r24, r24
    49fa:	2c f4       	brge	.+10     	; 0x4a06 <CLCD_init+0x2f6>
		__ticks = 1;
    49fc:	81 e0       	ldi	r24, 0x01	; 1
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	9c 8b       	std	Y+20, r25	; 0x14
    4a02:	8b 8b       	std	Y+19, r24	; 0x13
    4a04:	3f c0       	rjmp	.+126    	; 0x4a84 <CLCD_init+0x374>
	else if (__tmp > 65535)
    4a06:	6d 89       	ldd	r22, Y+21	; 0x15
    4a08:	7e 89       	ldd	r23, Y+22	; 0x16
    4a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	3f ef       	ldi	r19, 0xFF	; 255
    4a12:	4f e7       	ldi	r20, 0x7F	; 127
    4a14:	57 e4       	ldi	r21, 0x47	; 71
    4a16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a1a:	18 16       	cp	r1, r24
    4a1c:	4c f5       	brge	.+82     	; 0x4a70 <CLCD_init+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    4a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a26:	20 e0       	ldi	r18, 0x00	; 0
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	40 e2       	ldi	r20, 0x20	; 32
    4a2c:	51 e4       	ldi	r21, 0x41	; 65
    4a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a32:	dc 01       	movw	r26, r24
    4a34:	cb 01       	movw	r24, r22
    4a36:	bc 01       	movw	r22, r24
    4a38:	cd 01       	movw	r24, r26
    4a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	cb 01       	movw	r24, r22
    4a42:	9c 8b       	std	Y+20, r25	; 0x14
    4a44:	8b 8b       	std	Y+19, r24	; 0x13
    4a46:	0f c0       	rjmp	.+30     	; 0x4a66 <CLCD_init+0x356>
    4a48:	88 ec       	ldi	r24, 0xC8	; 200
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	9a 8b       	std	Y+18, r25	; 0x12
    4a4e:	89 8b       	std	Y+17, r24	; 0x11
    4a50:	89 89       	ldd	r24, Y+17	; 0x11
    4a52:	9a 89       	ldd	r25, Y+18	; 0x12
    4a54:	01 97       	sbiw	r24, 0x01	; 1
    4a56:	f1 f7       	brne	.-4      	; 0x4a54 <CLCD_init+0x344>
    4a58:	9a 8b       	std	Y+18, r25	; 0x12
    4a5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    4a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    4a60:	01 97       	sbiw	r24, 0x01	; 1
    4a62:	9c 8b       	std	Y+20, r25	; 0x14
    4a64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a66:	8b 89       	ldd	r24, Y+19	; 0x13
    4a68:	9c 89       	ldd	r25, Y+20	; 0x14
    4a6a:	00 97       	sbiw	r24, 0x00	; 0
    4a6c:	69 f7       	brne	.-38     	; 0x4a48 <CLCD_init+0x338>
    4a6e:	14 c0       	rjmp	.+40     	; 0x4a98 <CLCD_init+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a70:	6d 89       	ldd	r22, Y+21	; 0x15
    4a72:	7e 89       	ldd	r23, Y+22	; 0x16
    4a74:	8f 89       	ldd	r24, Y+23	; 0x17
    4a76:	98 8d       	ldd	r25, Y+24	; 0x18
    4a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	9c 8b       	std	Y+20, r25	; 0x14
    4a82:	8b 8b       	std	Y+19, r24	; 0x13
    4a84:	8b 89       	ldd	r24, Y+19	; 0x13
    4a86:	9c 89       	ldd	r25, Y+20	; 0x14
    4a88:	98 8b       	std	Y+16, r25	; 0x10
    4a8a:	8f 87       	std	Y+15, r24	; 0x0f
    4a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a8e:	98 89       	ldd	r25, Y+16	; 0x10
    4a90:	01 97       	sbiw	r24, 0x01	; 1
    4a92:	f1 f7       	brne	.-4      	; 0x4a90 <CLCD_init+0x380>
    4a94:	98 8b       	std	Y+16, r25	; 0x10
    4a96:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(2);
		    DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	62 e0       	ldi	r22, 0x02	; 2
    4a9c:	40 e0       	ldi	r20, 0x00	; 0
    4a9e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
  			DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    		_delay_ms(2);
    		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);

		  #elif defined CLCD_TwoLines_5x8Size
            DIO_SetPinValue(CLCD_DataPort,Data_Pin7,DIO_HIGH);
    4aa2:	82 e0       	ldi	r24, 0x02	; 2
    4aa4:	67 e0       	ldi	r22, 0x07	; 7
    4aa6:	41 e0       	ldi	r20, 0x01	; 1
    4aa8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
            DIO_SetPinValue(CLCD_DataPort,Data_Pin6,DIO_LOW);
    4aac:	82 e0       	ldi	r24, 0x02	; 2
    4aae:	66 e0       	ldi	r22, 0x06	; 6
    4ab0:	40 e0       	ldi	r20, 0x00	; 0
    4ab2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>

            DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	62 e0       	ldi	r22, 0x02	; 2
    4aba:	41 e0       	ldi	r20, 0x01	; 1
    4abc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4ac0:	80 e0       	ldi	r24, 0x00	; 0
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	a0 e0       	ldi	r26, 0x00	; 0
    4ac6:	b0 e4       	ldi	r27, 0x40	; 64
    4ac8:	8b 87       	std	Y+11, r24	; 0x0b
    4aca:	9c 87       	std	Y+12, r25	; 0x0c
    4acc:	ad 87       	std	Y+13, r26	; 0x0d
    4ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	4a ef       	ldi	r20, 0xFA	; 250
    4ade:	54 e4       	ldi	r21, 0x44	; 68
    4ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae4:	dc 01       	movw	r26, r24
    4ae6:	cb 01       	movw	r24, r22
    4ae8:	8f 83       	std	Y+7, r24	; 0x07
    4aea:	98 87       	std	Y+8, r25	; 0x08
    4aec:	a9 87       	std	Y+9, r26	; 0x09
    4aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4af0:	6f 81       	ldd	r22, Y+7	; 0x07
    4af2:	78 85       	ldd	r23, Y+8	; 0x08
    4af4:	89 85       	ldd	r24, Y+9	; 0x09
    4af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af8:	20 e0       	ldi	r18, 0x00	; 0
    4afa:	30 e0       	ldi	r19, 0x00	; 0
    4afc:	40 e8       	ldi	r20, 0x80	; 128
    4afe:	5f e3       	ldi	r21, 0x3F	; 63
    4b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b04:	88 23       	and	r24, r24
    4b06:	2c f4       	brge	.+10     	; 0x4b12 <CLCD_init+0x402>
		__ticks = 1;
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	9e 83       	std	Y+6, r25	; 0x06
    4b0e:	8d 83       	std	Y+5, r24	; 0x05
    4b10:	3f c0       	rjmp	.+126    	; 0x4b90 <CLCD_init+0x480>
	else if (__tmp > 65535)
    4b12:	6f 81       	ldd	r22, Y+7	; 0x07
    4b14:	78 85       	ldd	r23, Y+8	; 0x08
    4b16:	89 85       	ldd	r24, Y+9	; 0x09
    4b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	3f ef       	ldi	r19, 0xFF	; 255
    4b1e:	4f e7       	ldi	r20, 0x7F	; 127
    4b20:	57 e4       	ldi	r21, 0x47	; 71
    4b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b26:	18 16       	cp	r1, r24
    4b28:	4c f5       	brge	.+82     	; 0x4b7c <CLCD_init+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	40 e2       	ldi	r20, 0x20	; 32
    4b38:	51 e4       	ldi	r21, 0x41	; 65
    4b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	bc 01       	movw	r22, r24
    4b44:	cd 01       	movw	r24, r26
    4b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	cb 01       	movw	r24, r22
    4b4e:	9e 83       	std	Y+6, r25	; 0x06
    4b50:	8d 83       	std	Y+5, r24	; 0x05
    4b52:	0f c0       	rjmp	.+30     	; 0x4b72 <CLCD_init+0x462>
    4b54:	88 ec       	ldi	r24, 0xC8	; 200
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	9c 83       	std	Y+4, r25	; 0x04
    4b5a:	8b 83       	std	Y+3, r24	; 0x03
    4b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b60:	01 97       	sbiw	r24, 0x01	; 1
    4b62:	f1 f7       	brne	.-4      	; 0x4b60 <CLCD_init+0x450>
    4b64:	9c 83       	std	Y+4, r25	; 0x04
    4b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b68:	8d 81       	ldd	r24, Y+5	; 0x05
    4b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b6c:	01 97       	sbiw	r24, 0x01	; 1
    4b6e:	9e 83       	std	Y+6, r25	; 0x06
    4b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b72:	8d 81       	ldd	r24, Y+5	; 0x05
    4b74:	9e 81       	ldd	r25, Y+6	; 0x06
    4b76:	00 97       	sbiw	r24, 0x00	; 0
    4b78:	69 f7       	brne	.-38     	; 0x4b54 <CLCD_init+0x444>
    4b7a:	14 c0       	rjmp	.+40     	; 0x4ba4 <CLCD_init+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b7e:	78 85       	ldd	r23, Y+8	; 0x08
    4b80:	89 85       	ldd	r24, Y+9	; 0x09
    4b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b88:	dc 01       	movw	r26, r24
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	9e 83       	std	Y+6, r25	; 0x06
    4b8e:	8d 83       	std	Y+5, r24	; 0x05
    4b90:	8d 81       	ldd	r24, Y+5	; 0x05
    4b92:	9e 81       	ldd	r25, Y+6	; 0x06
    4b94:	9a 83       	std	Y+2, r25	; 0x02
    4b96:	89 83       	std	Y+1, r24	; 0x01
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9c:	01 97       	sbiw	r24, 0x01	; 1
    4b9e:	f1 f7       	brne	.-4      	; 0x4b9c <CLCD_init+0x48c>
    4ba0:	9a 83       	std	Y+2, r25	; 0x02
    4ba2:	89 83       	std	Y+1, r24	; 0x01
    		_delay_ms(2);
    		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    4ba4:	81 e0       	ldi	r24, 0x01	; 1
    4ba6:	62 e0       	ldi	r22, 0x02	; 2
    4ba8:	40 e0       	ldi	r20, 0x00	; 0
    4baa:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>

#elif defined CLCD_Curser_ON_NoBlinking
        CLCD_SendCommand(CLCD_DISP_ON_CURSOR);

#elif defined CLCD_Curser_ON_Blinking
        CLCD_SendCommand(CLCD_DISP_ON_CURSOR_BLINK);
    4bae:	8f e0       	ldi	r24, 0x0F	; 15
    4bb0:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <CLCD_SendCommand>

#endif
      	/*Clear display*/
        CLCD_SendCommand(CLCD_CLEAR);
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <CLCD_SendCommand>
}
    4bba:	e8 96       	adiw	r28, 0x38	; 56
    4bbc:	0f b6       	in	r0, 0x3f	; 63
    4bbe:	f8 94       	cli
    4bc0:	de bf       	out	0x3e, r29	; 62
    4bc2:	0f be       	out	0x3f, r0	; 63
    4bc4:	cd bf       	out	0x3d, r28	; 61
    4bc6:	cf 91       	pop	r28
    4bc8:	df 91       	pop	r29
    4bca:	08 95       	ret

00004bcc <CLCD_SendCommand>:

void CLCD_SendCommand(u8 Command)
{
    4bcc:	0f 93       	push	r16
    4bce:	1f 93       	push	r17
    4bd0:	df 93       	push	r29
    4bd2:	cf 93       	push	r28
    4bd4:	cd b7       	in	r28, 0x3d	; 61
    4bd6:	de b7       	in	r29, 0x3e	; 62
    4bd8:	c9 54       	subi	r28, 0x49	; 73
    4bda:	d0 40       	sbci	r29, 0x00	; 0
    4bdc:	0f b6       	in	r0, 0x3f	; 63
    4bde:	f8 94       	cli
    4be0:	de bf       	out	0x3e, r29	; 62
    4be2:	0f be       	out	0x3f, r0	; 63
    4be4:	cd bf       	out	0x3d, r28	; 61
    4be6:	fe 01       	movw	r30, r28
    4be8:	e7 5b       	subi	r30, 0xB7	; 183
    4bea:	ff 4f       	sbci	r31, 0xFF	; 255
    4bec:	80 83       	st	Z, r24
	/*Set RS pin to low for command*/
    DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	60 e0       	ldi	r22, 0x00	; 0
    4bf2:	40 e0       	ldi	r20, 0x00	; 0
    4bf4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>

    /*Set RW pin to low for write*/
    DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	61 e0       	ldi	r22, 0x01	; 1
    4bfc:	40 e0       	ldi	r20, 0x00	; 0
    4bfe:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
        _delay_ms(2);
        DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);

	#elif defined CLCD_4_BitMode

		DataPort =  (DataPort & 0x0F)| (UpperNibble_BitMask_Command); //send upper 4 bit
    4c02:	a5 e3       	ldi	r26, 0x35	; 53
    4c04:	b0 e0       	ldi	r27, 0x00	; 0
    4c06:	e5 e3       	ldi	r30, 0x35	; 53
    4c08:	f0 e0       	ldi	r31, 0x00	; 0
    4c0a:	80 81       	ld	r24, Z
    4c0c:	98 2f       	mov	r25, r24
    4c0e:	9f 70       	andi	r25, 0x0F	; 15
    4c10:	fe 01       	movw	r30, r28
    4c12:	e7 5b       	subi	r30, 0xB7	; 183
    4c14:	ff 4f       	sbci	r31, 0xFF	; 255
    4c16:	80 81       	ld	r24, Z
    4c18:	80 7f       	andi	r24, 0xF0	; 240
    4c1a:	89 2b       	or	r24, r25
    4c1c:	8c 93       	st	X, r24

		DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
    4c20:	60 e0       	ldi	r22, 0x00	; 0
    4c22:	40 e0       	ldi	r20, 0x00	; 0
    4c24:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	62 e0       	ldi	r22, 0x02	; 2
    4c2c:	41 e0       	ldi	r20, 0x01	; 1
    4c2e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4c32:	fe 01       	movw	r30, r28
    4c34:	eb 5b       	subi	r30, 0xBB	; 187
    4c36:	ff 4f       	sbci	r31, 0xFF	; 255
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	a8 e4       	ldi	r26, 0x48	; 72
    4c3e:	b2 e4       	ldi	r27, 0x42	; 66
    4c40:	80 83       	st	Z, r24
    4c42:	91 83       	std	Z+1, r25	; 0x01
    4c44:	a2 83       	std	Z+2, r26	; 0x02
    4c46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4c48:	8e 01       	movw	r16, r28
    4c4a:	0f 5b       	subi	r16, 0xBF	; 191
    4c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4e:	fe 01       	movw	r30, r28
    4c50:	eb 5b       	subi	r30, 0xBB	; 187
    4c52:	ff 4f       	sbci	r31, 0xFF	; 255
    4c54:	60 81       	ld	r22, Z
    4c56:	71 81       	ldd	r23, Z+1	; 0x01
    4c58:	82 81       	ldd	r24, Z+2	; 0x02
    4c5a:	93 81       	ldd	r25, Z+3	; 0x03
    4c5c:	2b ea       	ldi	r18, 0xAB	; 171
    4c5e:	3a ea       	ldi	r19, 0xAA	; 170
    4c60:	4a e2       	ldi	r20, 0x2A	; 42
    4c62:	50 e4       	ldi	r21, 0x40	; 64
    4c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	f8 01       	movw	r30, r16
    4c6e:	80 83       	st	Z, r24
    4c70:	91 83       	std	Z+1, r25	; 0x01
    4c72:	a2 83       	std	Z+2, r26	; 0x02
    4c74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c76:	fe 01       	movw	r30, r28
    4c78:	ef 5b       	subi	r30, 0xBF	; 191
    4c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7c:	60 81       	ld	r22, Z
    4c7e:	71 81       	ldd	r23, Z+1	; 0x01
    4c80:	82 81       	ldd	r24, Z+2	; 0x02
    4c82:	93 81       	ldd	r25, Z+3	; 0x03
    4c84:	20 e0       	ldi	r18, 0x00	; 0
    4c86:	30 e0       	ldi	r19, 0x00	; 0
    4c88:	40 e8       	ldi	r20, 0x80	; 128
    4c8a:	5f e3       	ldi	r21, 0x3F	; 63
    4c8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c90:	88 23       	and	r24, r24
    4c92:	34 f4       	brge	.+12     	; 0x4ca0 <CLCD_SendCommand+0xd4>
		__ticks = 1;
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	fe 01       	movw	r30, r28
    4c98:	e0 5c       	subi	r30, 0xC0	; 192
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	80 83       	st	Z, r24
    4c9e:	9d c0       	rjmp	.+314    	; 0x4dda <CLCD_SendCommand+0x20e>
	else if (__tmp > 255)
    4ca0:	fe 01       	movw	r30, r28
    4ca2:	ef 5b       	subi	r30, 0xBF	; 191
    4ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca6:	60 81       	ld	r22, Z
    4ca8:	71 81       	ldd	r23, Z+1	; 0x01
    4caa:	82 81       	ldd	r24, Z+2	; 0x02
    4cac:	93 81       	ldd	r25, Z+3	; 0x03
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	4f e7       	ldi	r20, 0x7F	; 127
    4cb4:	53 e4       	ldi	r21, 0x43	; 67
    4cb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cba:	18 16       	cp	r1, r24
    4cbc:	0c f0       	brlt	.+2      	; 0x4cc0 <CLCD_SendCommand+0xf4>
    4cbe:	7e c0       	rjmp	.+252    	; 0x4dbc <CLCD_SendCommand+0x1f0>
	{
		_delay_ms(__us / 1000.0);
    4cc0:	fe 01       	movw	r30, r28
    4cc2:	eb 5b       	subi	r30, 0xBB	; 187
    4cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc6:	60 81       	ld	r22, Z
    4cc8:	71 81       	ldd	r23, Z+1	; 0x01
    4cca:	82 81       	ldd	r24, Z+2	; 0x02
    4ccc:	93 81       	ldd	r25, Z+3	; 0x03
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	4a e7       	ldi	r20, 0x7A	; 122
    4cd4:	54 e4       	ldi	r21, 0x44	; 68
    4cd6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	cb 01       	movw	r24, r22
    4cde:	8c af       	std	Y+60, r24	; 0x3c
    4ce0:	9d af       	std	Y+61, r25	; 0x3d
    4ce2:	ae af       	std	Y+62, r26	; 0x3e
    4ce4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce6:	6c ad       	ldd	r22, Y+60	; 0x3c
    4ce8:	7d ad       	ldd	r23, Y+61	; 0x3d
    4cea:	8e ad       	ldd	r24, Y+62	; 0x3e
    4cec:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cee:	20 e0       	ldi	r18, 0x00	; 0
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	4a ef       	ldi	r20, 0xFA	; 250
    4cf4:	54 e4       	ldi	r21, 0x44	; 68
    4cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	cb 01       	movw	r24, r22
    4cfe:	88 af       	std	Y+56, r24	; 0x38
    4d00:	99 af       	std	Y+57, r25	; 0x39
    4d02:	aa af       	std	Y+58, r26	; 0x3a
    4d04:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4d06:	68 ad       	ldd	r22, Y+56	; 0x38
    4d08:	79 ad       	ldd	r23, Y+57	; 0x39
    4d0a:	8a ad       	ldd	r24, Y+58	; 0x3a
    4d0c:	9b ad       	ldd	r25, Y+59	; 0x3b
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	30 e0       	ldi	r19, 0x00	; 0
    4d12:	40 e8       	ldi	r20, 0x80	; 128
    4d14:	5f e3       	ldi	r21, 0x3F	; 63
    4d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d1a:	88 23       	and	r24, r24
    4d1c:	2c f4       	brge	.+10     	; 0x4d28 <CLCD_SendCommand+0x15c>
		__ticks = 1;
    4d1e:	81 e0       	ldi	r24, 0x01	; 1
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	9f ab       	std	Y+55, r25	; 0x37
    4d24:	8e ab       	std	Y+54, r24	; 0x36
    4d26:	3f c0       	rjmp	.+126    	; 0x4da6 <CLCD_SendCommand+0x1da>
	else if (__tmp > 65535)
    4d28:	68 ad       	ldd	r22, Y+56	; 0x38
    4d2a:	79 ad       	ldd	r23, Y+57	; 0x39
    4d2c:	8a ad       	ldd	r24, Y+58	; 0x3a
    4d2e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	3f ef       	ldi	r19, 0xFF	; 255
    4d34:	4f e7       	ldi	r20, 0x7F	; 127
    4d36:	57 e4       	ldi	r21, 0x47	; 71
    4d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d3c:	18 16       	cp	r1, r24
    4d3e:	4c f5       	brge	.+82     	; 0x4d92 <CLCD_SendCommand+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d40:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d42:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d44:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d46:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d48:	20 e0       	ldi	r18, 0x00	; 0
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	40 e2       	ldi	r20, 0x20	; 32
    4d4e:	51 e4       	ldi	r21, 0x41	; 65
    4d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	bc 01       	movw	r22, r24
    4d5a:	cd 01       	movw	r24, r26
    4d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d60:	dc 01       	movw	r26, r24
    4d62:	cb 01       	movw	r24, r22
    4d64:	9f ab       	std	Y+55, r25	; 0x37
    4d66:	8e ab       	std	Y+54, r24	; 0x36
    4d68:	0f c0       	rjmp	.+30     	; 0x4d88 <CLCD_SendCommand+0x1bc>
    4d6a:	88 ec       	ldi	r24, 0xC8	; 200
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	9d ab       	std	Y+53, r25	; 0x35
    4d70:	8c ab       	std	Y+52, r24	; 0x34
    4d72:	8c a9       	ldd	r24, Y+52	; 0x34
    4d74:	9d a9       	ldd	r25, Y+53	; 0x35
    4d76:	01 97       	sbiw	r24, 0x01	; 1
    4d78:	f1 f7       	brne	.-4      	; 0x4d76 <CLCD_SendCommand+0x1aa>
    4d7a:	9d ab       	std	Y+53, r25	; 0x35
    4d7c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d7e:	8e a9       	ldd	r24, Y+54	; 0x36
    4d80:	9f a9       	ldd	r25, Y+55	; 0x37
    4d82:	01 97       	sbiw	r24, 0x01	; 1
    4d84:	9f ab       	std	Y+55, r25	; 0x37
    4d86:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d88:	8e a9       	ldd	r24, Y+54	; 0x36
    4d8a:	9f a9       	ldd	r25, Y+55	; 0x37
    4d8c:	00 97       	sbiw	r24, 0x00	; 0
    4d8e:	69 f7       	brne	.-38     	; 0x4d6a <CLCD_SendCommand+0x19e>
    4d90:	2d c0       	rjmp	.+90     	; 0x4dec <CLCD_SendCommand+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d92:	68 ad       	ldd	r22, Y+56	; 0x38
    4d94:	79 ad       	ldd	r23, Y+57	; 0x39
    4d96:	8a ad       	ldd	r24, Y+58	; 0x3a
    4d98:	9b ad       	ldd	r25, Y+59	; 0x3b
    4d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	9f ab       	std	Y+55, r25	; 0x37
    4da4:	8e ab       	std	Y+54, r24	; 0x36
    4da6:	8e a9       	ldd	r24, Y+54	; 0x36
    4da8:	9f a9       	ldd	r25, Y+55	; 0x37
    4daa:	9b ab       	std	Y+51, r25	; 0x33
    4dac:	8a ab       	std	Y+50, r24	; 0x32
    4dae:	8a a9       	ldd	r24, Y+50	; 0x32
    4db0:	9b a9       	ldd	r25, Y+51	; 0x33
    4db2:	01 97       	sbiw	r24, 0x01	; 1
    4db4:	f1 f7       	brne	.-4      	; 0x4db2 <CLCD_SendCommand+0x1e6>
    4db6:	9b ab       	std	Y+51, r25	; 0x33
    4db8:	8a ab       	std	Y+50, r24	; 0x32
    4dba:	18 c0       	rjmp	.+48     	; 0x4dec <CLCD_SendCommand+0x220>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4dbc:	fe 01       	movw	r30, r28
    4dbe:	ef 5b       	subi	r30, 0xBF	; 191
    4dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc2:	60 81       	ld	r22, Z
    4dc4:	71 81       	ldd	r23, Z+1	; 0x01
    4dc6:	82 81       	ldd	r24, Z+2	; 0x02
    4dc8:	93 81       	ldd	r25, Z+3	; 0x03
    4dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dce:	dc 01       	movw	r26, r24
    4dd0:	cb 01       	movw	r24, r22
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	e0 5c       	subi	r30, 0xC0	; 192
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	80 83       	st	Z, r24
    4dda:	fe 01       	movw	r30, r28
    4ddc:	e0 5c       	subi	r30, 0xC0	; 192
    4dde:	ff 4f       	sbci	r31, 0xFF	; 255
    4de0:	80 81       	ld	r24, Z
    4de2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4de4:	89 a9       	ldd	r24, Y+49	; 0x31
    4de6:	8a 95       	dec	r24
    4de8:	f1 f7       	brne	.-4      	; 0x4de6 <CLCD_SendCommand+0x21a>
    4dea:	89 ab       	std	Y+49, r24	; 0x31

		_delay_us(50);
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	62 e0       	ldi	r22, 0x02	; 2
    4df0:	40 e0       	ldi	r20, 0x00	; 0
    4df2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	a8 e4       	ldi	r26, 0x48	; 72
    4dfc:	b3 e4       	ldi	r27, 0x43	; 67
    4dfe:	8d a7       	std	Y+45, r24	; 0x2d
    4e00:	9e a7       	std	Y+46, r25	; 0x2e
    4e02:	af a7       	std	Y+47, r26	; 0x2f
    4e04:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4e06:	6d a5       	ldd	r22, Y+45	; 0x2d
    4e08:	7e a5       	ldd	r23, Y+46	; 0x2e
    4e0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e0c:	98 a9       	ldd	r25, Y+48	; 0x30
    4e0e:	2b ea       	ldi	r18, 0xAB	; 171
    4e10:	3a ea       	ldi	r19, 0xAA	; 170
    4e12:	4a e2       	ldi	r20, 0x2A	; 42
    4e14:	50 e4       	ldi	r21, 0x40	; 64
    4e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	89 a7       	std	Y+41, r24	; 0x29
    4e20:	9a a7       	std	Y+42, r25	; 0x2a
    4e22:	ab a7       	std	Y+43, r26	; 0x2b
    4e24:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4e26:	69 a5       	ldd	r22, Y+41	; 0x29
    4e28:	7a a5       	ldd	r23, Y+42	; 0x2a
    4e2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	30 e0       	ldi	r19, 0x00	; 0
    4e32:	40 e8       	ldi	r20, 0x80	; 128
    4e34:	5f e3       	ldi	r21, 0x3F	; 63
    4e36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e3a:	88 23       	and	r24, r24
    4e3c:	1c f4       	brge	.+6      	; 0x4e44 <CLCD_SendCommand+0x278>
		__ticks = 1;
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	88 a7       	std	Y+40, r24	; 0x28
    4e42:	91 c0       	rjmp	.+290    	; 0x4f66 <CLCD_SendCommand+0x39a>
	else if (__tmp > 255)
    4e44:	69 a5       	ldd	r22, Y+41	; 0x29
    4e46:	7a a5       	ldd	r23, Y+42	; 0x2a
    4e48:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e4c:	20 e0       	ldi	r18, 0x00	; 0
    4e4e:	30 e0       	ldi	r19, 0x00	; 0
    4e50:	4f e7       	ldi	r20, 0x7F	; 127
    4e52:	53 e4       	ldi	r21, 0x43	; 67
    4e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e58:	18 16       	cp	r1, r24
    4e5a:	0c f0       	brlt	.+2      	; 0x4e5e <CLCD_SendCommand+0x292>
    4e5c:	7b c0       	rjmp	.+246    	; 0x4f54 <CLCD_SendCommand+0x388>
	{
		_delay_ms(__us / 1000.0);
    4e5e:	6d a5       	ldd	r22, Y+45	; 0x2d
    4e60:	7e a5       	ldd	r23, Y+46	; 0x2e
    4e62:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e64:	98 a9       	ldd	r25, Y+48	; 0x30
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	4a e7       	ldi	r20, 0x7A	; 122
    4e6c:	54 e4       	ldi	r21, 0x44	; 68
    4e6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	8c a3       	std	Y+36, r24	; 0x24
    4e78:	9d a3       	std	Y+37, r25	; 0x25
    4e7a:	ae a3       	std	Y+38, r26	; 0x26
    4e7c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e7e:	6c a1       	ldd	r22, Y+36	; 0x24
    4e80:	7d a1       	ldd	r23, Y+37	; 0x25
    4e82:	8e a1       	ldd	r24, Y+38	; 0x26
    4e84:	9f a1       	ldd	r25, Y+39	; 0x27
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	4a ef       	ldi	r20, 0xFA	; 250
    4e8c:	54 e4       	ldi	r21, 0x44	; 68
    4e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e92:	dc 01       	movw	r26, r24
    4e94:	cb 01       	movw	r24, r22
    4e96:	88 a3       	std	Y+32, r24	; 0x20
    4e98:	99 a3       	std	Y+33, r25	; 0x21
    4e9a:	aa a3       	std	Y+34, r26	; 0x22
    4e9c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4e9e:	68 a1       	ldd	r22, Y+32	; 0x20
    4ea0:	79 a1       	ldd	r23, Y+33	; 0x21
    4ea2:	8a a1       	ldd	r24, Y+34	; 0x22
    4ea4:	9b a1       	ldd	r25, Y+35	; 0x23
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	40 e8       	ldi	r20, 0x80	; 128
    4eac:	5f e3       	ldi	r21, 0x3F	; 63
    4eae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eb2:	88 23       	and	r24, r24
    4eb4:	2c f4       	brge	.+10     	; 0x4ec0 <CLCD_SendCommand+0x2f4>
		__ticks = 1;
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	9f 8f       	std	Y+31, r25	; 0x1f
    4ebc:	8e 8f       	std	Y+30, r24	; 0x1e
    4ebe:	3f c0       	rjmp	.+126    	; 0x4f3e <CLCD_SendCommand+0x372>
	else if (__tmp > 65535)
    4ec0:	68 a1       	ldd	r22, Y+32	; 0x20
    4ec2:	79 a1       	ldd	r23, Y+33	; 0x21
    4ec4:	8a a1       	ldd	r24, Y+34	; 0x22
    4ec6:	9b a1       	ldd	r25, Y+35	; 0x23
    4ec8:	20 e0       	ldi	r18, 0x00	; 0
    4eca:	3f ef       	ldi	r19, 0xFF	; 255
    4ecc:	4f e7       	ldi	r20, 0x7F	; 127
    4ece:	57 e4       	ldi	r21, 0x47	; 71
    4ed0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ed4:	18 16       	cp	r1, r24
    4ed6:	4c f5       	brge	.+82     	; 0x4f2a <CLCD_SendCommand+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed8:	6c a1       	ldd	r22, Y+36	; 0x24
    4eda:	7d a1       	ldd	r23, Y+37	; 0x25
    4edc:	8e a1       	ldd	r24, Y+38	; 0x26
    4ede:	9f a1       	ldd	r25, Y+39	; 0x27
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	40 e2       	ldi	r20, 0x20	; 32
    4ee6:	51 e4       	ldi	r21, 0x41	; 65
    4ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eec:	dc 01       	movw	r26, r24
    4eee:	cb 01       	movw	r24, r22
    4ef0:	bc 01       	movw	r22, r24
    4ef2:	cd 01       	movw	r24, r26
    4ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef8:	dc 01       	movw	r26, r24
    4efa:	cb 01       	movw	r24, r22
    4efc:	9f 8f       	std	Y+31, r25	; 0x1f
    4efe:	8e 8f       	std	Y+30, r24	; 0x1e
    4f00:	0f c0       	rjmp	.+30     	; 0x4f20 <CLCD_SendCommand+0x354>
    4f02:	88 ec       	ldi	r24, 0xC8	; 200
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	9d 8f       	std	Y+29, r25	; 0x1d
    4f08:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4f0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4f0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4f0e:	01 97       	sbiw	r24, 0x01	; 1
    4f10:	f1 f7       	brne	.-4      	; 0x4f0e <CLCD_SendCommand+0x342>
    4f12:	9d 8f       	std	Y+29, r25	; 0x1d
    4f14:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4f1a:	01 97       	sbiw	r24, 0x01	; 1
    4f1c:	9f 8f       	std	Y+31, r25	; 0x1f
    4f1e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f22:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4f24:	00 97       	sbiw	r24, 0x00	; 0
    4f26:	69 f7       	brne	.-38     	; 0x4f02 <CLCD_SendCommand+0x336>
    4f28:	24 c0       	rjmp	.+72     	; 0x4f72 <CLCD_SendCommand+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f2a:	68 a1       	ldd	r22, Y+32	; 0x20
    4f2c:	79 a1       	ldd	r23, Y+33	; 0x21
    4f2e:	8a a1       	ldd	r24, Y+34	; 0x22
    4f30:	9b a1       	ldd	r25, Y+35	; 0x23
    4f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f36:	dc 01       	movw	r26, r24
    4f38:	cb 01       	movw	r24, r22
    4f3a:	9f 8f       	std	Y+31, r25	; 0x1f
    4f3c:	8e 8f       	std	Y+30, r24	; 0x1e
    4f3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4f42:	9b 8f       	std	Y+27, r25	; 0x1b
    4f44:	8a 8f       	std	Y+26, r24	; 0x1a
    4f46:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4f48:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4f4a:	01 97       	sbiw	r24, 0x01	; 1
    4f4c:	f1 f7       	brne	.-4      	; 0x4f4a <CLCD_SendCommand+0x37e>
    4f4e:	9b 8f       	std	Y+27, r25	; 0x1b
    4f50:	8a 8f       	std	Y+26, r24	; 0x1a
    4f52:	0f c0       	rjmp	.+30     	; 0x4f72 <CLCD_SendCommand+0x3a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4f54:	69 a5       	ldd	r22, Y+41	; 0x29
    4f56:	7a a5       	ldd	r23, Y+42	; 0x2a
    4f58:	8b a5       	ldd	r24, Y+43	; 0x2b
    4f5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f60:	dc 01       	movw	r26, r24
    4f62:	cb 01       	movw	r24, r22
    4f64:	88 a7       	std	Y+40, r24	; 0x28
    4f66:	88 a5       	ldd	r24, Y+40	; 0x28
    4f68:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4f6a:	89 8d       	ldd	r24, Y+25	; 0x19
    4f6c:	8a 95       	dec	r24
    4f6e:	f1 f7       	brne	.-4      	; 0x4f6c <CLCD_SendCommand+0x3a0>
    4f70:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(200);

		DataPort =  (DataPort & 0x0F)| (LowerNibble_BitMask_Command);	//send lower 4 bit
    4f72:	a5 e3       	ldi	r26, 0x35	; 53
    4f74:	b0 e0       	ldi	r27, 0x00	; 0
    4f76:	e5 e3       	ldi	r30, 0x35	; 53
    4f78:	f0 e0       	ldi	r31, 0x00	; 0
    4f7a:	80 81       	ld	r24, Z
    4f7c:	28 2f       	mov	r18, r24
    4f7e:	2f 70       	andi	r18, 0x0F	; 15
    4f80:	fe 01       	movw	r30, r28
    4f82:	e7 5b       	subi	r30, 0xB7	; 183
    4f84:	ff 4f       	sbci	r31, 0xFF	; 255
    4f86:	80 81       	ld	r24, Z
    4f88:	88 2f       	mov	r24, r24
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	82 95       	swap	r24
    4f8e:	92 95       	swap	r25
    4f90:	90 7f       	andi	r25, 0xF0	; 240
    4f92:	98 27       	eor	r25, r24
    4f94:	80 7f       	andi	r24, 0xF0	; 240
    4f96:	98 27       	eor	r25, r24
    4f98:	82 2b       	or	r24, r18
    4f9a:	8c 93       	st	X, r24

		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	62 e0       	ldi	r22, 0x02	; 2
    4fa0:	41 e0       	ldi	r20, 0x01	; 1
    4fa2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	aa ef       	ldi	r26, 0xFA	; 250
    4fac:	b4 e4       	ldi	r27, 0x44	; 68
    4fae:	8d 8b       	std	Y+21, r24	; 0x15
    4fb0:	9e 8b       	std	Y+22, r25	; 0x16
    4fb2:	af 8b       	std	Y+23, r26	; 0x17
    4fb4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    4fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    4fba:	8f 89       	ldd	r24, Y+23	; 0x17
    4fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    4fbe:	2b ea       	ldi	r18, 0xAB	; 171
    4fc0:	3a ea       	ldi	r19, 0xAA	; 170
    4fc2:	4a e2       	ldi	r20, 0x2A	; 42
    4fc4:	50 e4       	ldi	r21, 0x40	; 64
    4fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	89 8b       	std	Y+17, r24	; 0x11
    4fd0:	9a 8b       	std	Y+18, r25	; 0x12
    4fd2:	ab 8b       	std	Y+19, r26	; 0x13
    4fd4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4fd6:	69 89       	ldd	r22, Y+17	; 0x11
    4fd8:	7a 89       	ldd	r23, Y+18	; 0x12
    4fda:	8b 89       	ldd	r24, Y+19	; 0x13
    4fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    4fde:	20 e0       	ldi	r18, 0x00	; 0
    4fe0:	30 e0       	ldi	r19, 0x00	; 0
    4fe2:	40 e8       	ldi	r20, 0x80	; 128
    4fe4:	5f e3       	ldi	r21, 0x3F	; 63
    4fe6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fea:	88 23       	and	r24, r24
    4fec:	1c f4       	brge	.+6      	; 0x4ff4 <CLCD_SendCommand+0x428>
		__ticks = 1;
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	88 8b       	std	Y+16, r24	; 0x10
    4ff2:	91 c0       	rjmp	.+290    	; 0x5116 <CLCD_SendCommand+0x54a>
	else if (__tmp > 255)
    4ff4:	69 89       	ldd	r22, Y+17	; 0x11
    4ff6:	7a 89       	ldd	r23, Y+18	; 0x12
    4ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    4ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    4ffc:	20 e0       	ldi	r18, 0x00	; 0
    4ffe:	30 e0       	ldi	r19, 0x00	; 0
    5000:	4f e7       	ldi	r20, 0x7F	; 127
    5002:	53 e4       	ldi	r21, 0x43	; 67
    5004:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5008:	18 16       	cp	r1, r24
    500a:	0c f0       	brlt	.+2      	; 0x500e <CLCD_SendCommand+0x442>
    500c:	7b c0       	rjmp	.+246    	; 0x5104 <CLCD_SendCommand+0x538>
	{
		_delay_ms(__us / 1000.0);
    500e:	6d 89       	ldd	r22, Y+21	; 0x15
    5010:	7e 89       	ldd	r23, Y+22	; 0x16
    5012:	8f 89       	ldd	r24, Y+23	; 0x17
    5014:	98 8d       	ldd	r25, Y+24	; 0x18
    5016:	20 e0       	ldi	r18, 0x00	; 0
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	4a e7       	ldi	r20, 0x7A	; 122
    501c:	54 e4       	ldi	r21, 0x44	; 68
    501e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5022:	dc 01       	movw	r26, r24
    5024:	cb 01       	movw	r24, r22
    5026:	8c 87       	std	Y+12, r24	; 0x0c
    5028:	9d 87       	std	Y+13, r25	; 0x0d
    502a:	ae 87       	std	Y+14, r26	; 0x0e
    502c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    502e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5030:	7d 85       	ldd	r23, Y+13	; 0x0d
    5032:	8e 85       	ldd	r24, Y+14	; 0x0e
    5034:	9f 85       	ldd	r25, Y+15	; 0x0f
    5036:	20 e0       	ldi	r18, 0x00	; 0
    5038:	30 e0       	ldi	r19, 0x00	; 0
    503a:	4a ef       	ldi	r20, 0xFA	; 250
    503c:	54 e4       	ldi	r21, 0x44	; 68
    503e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5042:	dc 01       	movw	r26, r24
    5044:	cb 01       	movw	r24, r22
    5046:	88 87       	std	Y+8, r24	; 0x08
    5048:	99 87       	std	Y+9, r25	; 0x09
    504a:	aa 87       	std	Y+10, r26	; 0x0a
    504c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    504e:	68 85       	ldd	r22, Y+8	; 0x08
    5050:	79 85       	ldd	r23, Y+9	; 0x09
    5052:	8a 85       	ldd	r24, Y+10	; 0x0a
    5054:	9b 85       	ldd	r25, Y+11	; 0x0b
    5056:	20 e0       	ldi	r18, 0x00	; 0
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	40 e8       	ldi	r20, 0x80	; 128
    505c:	5f e3       	ldi	r21, 0x3F	; 63
    505e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5062:	88 23       	and	r24, r24
    5064:	2c f4       	brge	.+10     	; 0x5070 <CLCD_SendCommand+0x4a4>
		__ticks = 1;
    5066:	81 e0       	ldi	r24, 0x01	; 1
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	9f 83       	std	Y+7, r25	; 0x07
    506c:	8e 83       	std	Y+6, r24	; 0x06
    506e:	3f c0       	rjmp	.+126    	; 0x50ee <CLCD_SendCommand+0x522>
	else if (__tmp > 65535)
    5070:	68 85       	ldd	r22, Y+8	; 0x08
    5072:	79 85       	ldd	r23, Y+9	; 0x09
    5074:	8a 85       	ldd	r24, Y+10	; 0x0a
    5076:	9b 85       	ldd	r25, Y+11	; 0x0b
    5078:	20 e0       	ldi	r18, 0x00	; 0
    507a:	3f ef       	ldi	r19, 0xFF	; 255
    507c:	4f e7       	ldi	r20, 0x7F	; 127
    507e:	57 e4       	ldi	r21, 0x47	; 71
    5080:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5084:	18 16       	cp	r1, r24
    5086:	4c f5       	brge	.+82     	; 0x50da <CLCD_SendCommand+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5088:	6c 85       	ldd	r22, Y+12	; 0x0c
    508a:	7d 85       	ldd	r23, Y+13	; 0x0d
    508c:	8e 85       	ldd	r24, Y+14	; 0x0e
    508e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5090:	20 e0       	ldi	r18, 0x00	; 0
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	40 e2       	ldi	r20, 0x20	; 32
    5096:	51 e4       	ldi	r21, 0x41	; 65
    5098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    509c:	dc 01       	movw	r26, r24
    509e:	cb 01       	movw	r24, r22
    50a0:	bc 01       	movw	r22, r24
    50a2:	cd 01       	movw	r24, r26
    50a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a8:	dc 01       	movw	r26, r24
    50aa:	cb 01       	movw	r24, r22
    50ac:	9f 83       	std	Y+7, r25	; 0x07
    50ae:	8e 83       	std	Y+6, r24	; 0x06
    50b0:	0f c0       	rjmp	.+30     	; 0x50d0 <CLCD_SendCommand+0x504>
    50b2:	88 ec       	ldi	r24, 0xC8	; 200
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	9d 83       	std	Y+5, r25	; 0x05
    50b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    50ba:	8c 81       	ldd	r24, Y+4	; 0x04
    50bc:	9d 81       	ldd	r25, Y+5	; 0x05
    50be:	01 97       	sbiw	r24, 0x01	; 1
    50c0:	f1 f7       	brne	.-4      	; 0x50be <CLCD_SendCommand+0x4f2>
    50c2:	9d 83       	std	Y+5, r25	; 0x05
    50c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c6:	8e 81       	ldd	r24, Y+6	; 0x06
    50c8:	9f 81       	ldd	r25, Y+7	; 0x07
    50ca:	01 97       	sbiw	r24, 0x01	; 1
    50cc:	9f 83       	std	Y+7, r25	; 0x07
    50ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d0:	8e 81       	ldd	r24, Y+6	; 0x06
    50d2:	9f 81       	ldd	r25, Y+7	; 0x07
    50d4:	00 97       	sbiw	r24, 0x00	; 0
    50d6:	69 f7       	brne	.-38     	; 0x50b2 <CLCD_SendCommand+0x4e6>
    50d8:	24 c0       	rjmp	.+72     	; 0x5122 <CLCD_SendCommand+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50da:	68 85       	ldd	r22, Y+8	; 0x08
    50dc:	79 85       	ldd	r23, Y+9	; 0x09
    50de:	8a 85       	ldd	r24, Y+10	; 0x0a
    50e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    50e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e6:	dc 01       	movw	r26, r24
    50e8:	cb 01       	movw	r24, r22
    50ea:	9f 83       	std	Y+7, r25	; 0x07
    50ec:	8e 83       	std	Y+6, r24	; 0x06
    50ee:	8e 81       	ldd	r24, Y+6	; 0x06
    50f0:	9f 81       	ldd	r25, Y+7	; 0x07
    50f2:	9b 83       	std	Y+3, r25	; 0x03
    50f4:	8a 83       	std	Y+2, r24	; 0x02
    50f6:	8a 81       	ldd	r24, Y+2	; 0x02
    50f8:	9b 81       	ldd	r25, Y+3	; 0x03
    50fa:	01 97       	sbiw	r24, 0x01	; 1
    50fc:	f1 f7       	brne	.-4      	; 0x50fa <CLCD_SendCommand+0x52e>
    50fe:	9b 83       	std	Y+3, r25	; 0x03
    5100:	8a 83       	std	Y+2, r24	; 0x02
    5102:	0f c0       	rjmp	.+30     	; 0x5122 <CLCD_SendCommand+0x556>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5104:	69 89       	ldd	r22, Y+17	; 0x11
    5106:	7a 89       	ldd	r23, Y+18	; 0x12
    5108:	8b 89       	ldd	r24, Y+19	; 0x13
    510a:	9c 89       	ldd	r25, Y+20	; 0x14
    510c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5110:	dc 01       	movw	r26, r24
    5112:	cb 01       	movw	r24, r22
    5114:	88 8b       	std	Y+16, r24	; 0x10
    5116:	88 89       	ldd	r24, Y+16	; 0x10
    5118:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    511a:	89 81       	ldd	r24, Y+1	; 0x01
    511c:	8a 95       	dec	r24
    511e:	f1 f7       	brne	.-4      	; 0x511c <CLCD_SendCommand+0x550>
    5120:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(2000);
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    5122:	81 e0       	ldi	r24, 0x01	; 1
    5124:	62 e0       	ldi	r22, 0x02	; 2
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
#endif
}
    512c:	c7 5b       	subi	r28, 0xB7	; 183
    512e:	df 4f       	sbci	r29, 0xFF	; 255
    5130:	0f b6       	in	r0, 0x3f	; 63
    5132:	f8 94       	cli
    5134:	de bf       	out	0x3e, r29	; 62
    5136:	0f be       	out	0x3f, r0	; 63
    5138:	cd bf       	out	0x3d, r28	; 61
    513a:	cf 91       	pop	r28
    513c:	df 91       	pop	r29
    513e:	1f 91       	pop	r17
    5140:	0f 91       	pop	r16
    5142:	08 95       	ret

00005144 <CLCD_SendData>:

void CLCD_SendData(u8 Data)
{
    5144:	0f 93       	push	r16
    5146:	1f 93       	push	r17
    5148:	df 93       	push	r29
    514a:	cf 93       	push	r28
    514c:	cd b7       	in	r28, 0x3d	; 61
    514e:	de b7       	in	r29, 0x3e	; 62
    5150:	c9 54       	subi	r28, 0x49	; 73
    5152:	d0 40       	sbci	r29, 0x00	; 0
    5154:	0f b6       	in	r0, 0x3f	; 63
    5156:	f8 94       	cli
    5158:	de bf       	out	0x3e, r29	; 62
    515a:	0f be       	out	0x3f, r0	; 63
    515c:	cd bf       	out	0x3d, r28	; 61
    515e:	fe 01       	movw	r30, r28
    5160:	e7 5b       	subi	r30, 0xB7	; 183
    5162:	ff 4f       	sbci	r31, 0xFF	; 255
    5164:	80 83       	st	Z, r24
	/*Set RS pin to High for Data*/
    DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    5166:	81 e0       	ldi	r24, 0x01	; 1
    5168:	60 e0       	ldi	r22, 0x00	; 0
    516a:	41 e0       	ldi	r20, 0x01	; 1
    516c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>

    /*Set RW pin to low for write*/
    DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	61 e0       	ldi	r22, 0x01	; 1
    5174:	40 e0       	ldi	r20, 0x00	; 0
    5176:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
       DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
       _delay_ms(2);
       DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);

	#elif defined CLCD_4_BitMode
		DataPort = (DataPort & 0x0F) | (UpperNibble_BitMask_Data);	//send upper 4 bit
    517a:	a5 e3       	ldi	r26, 0x35	; 53
    517c:	b0 e0       	ldi	r27, 0x00	; 0
    517e:	e5 e3       	ldi	r30, 0x35	; 53
    5180:	f0 e0       	ldi	r31, 0x00	; 0
    5182:	80 81       	ld	r24, Z
    5184:	98 2f       	mov	r25, r24
    5186:	9f 70       	andi	r25, 0x0F	; 15
    5188:	fe 01       	movw	r30, r28
    518a:	e7 5b       	subi	r30, 0xB7	; 183
    518c:	ff 4f       	sbci	r31, 0xFF	; 255
    518e:	80 81       	ld	r24, Z
    5190:	80 7f       	andi	r24, 0xF0	; 240
    5192:	89 2b       	or	r24, r25
    5194:	8c 93       	st	X, r24

		DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    5196:	81 e0       	ldi	r24, 0x01	; 1
    5198:	60 e0       	ldi	r22, 0x00	; 0
    519a:	41 e0       	ldi	r20, 0x01	; 1
    519c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    51a0:	81 e0       	ldi	r24, 0x01	; 1
    51a2:	62 e0       	ldi	r22, 0x02	; 2
    51a4:	41 e0       	ldi	r20, 0x01	; 1
    51a6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    51aa:	fe 01       	movw	r30, r28
    51ac:	eb 5b       	subi	r30, 0xBB	; 187
    51ae:	ff 4f       	sbci	r31, 0xFF	; 255
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	a8 e4       	ldi	r26, 0x48	; 72
    51b6:	b2 e4       	ldi	r27, 0x42	; 66
    51b8:	80 83       	st	Z, r24
    51ba:	91 83       	std	Z+1, r25	; 0x01
    51bc:	a2 83       	std	Z+2, r26	; 0x02
    51be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    51c0:	8e 01       	movw	r16, r28
    51c2:	0f 5b       	subi	r16, 0xBF	; 191
    51c4:	1f 4f       	sbci	r17, 0xFF	; 255
    51c6:	fe 01       	movw	r30, r28
    51c8:	eb 5b       	subi	r30, 0xBB	; 187
    51ca:	ff 4f       	sbci	r31, 0xFF	; 255
    51cc:	60 81       	ld	r22, Z
    51ce:	71 81       	ldd	r23, Z+1	; 0x01
    51d0:	82 81       	ldd	r24, Z+2	; 0x02
    51d2:	93 81       	ldd	r25, Z+3	; 0x03
    51d4:	2b ea       	ldi	r18, 0xAB	; 171
    51d6:	3a ea       	ldi	r19, 0xAA	; 170
    51d8:	4a e2       	ldi	r20, 0x2A	; 42
    51da:	50 e4       	ldi	r21, 0x40	; 64
    51dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51e0:	dc 01       	movw	r26, r24
    51e2:	cb 01       	movw	r24, r22
    51e4:	f8 01       	movw	r30, r16
    51e6:	80 83       	st	Z, r24
    51e8:	91 83       	std	Z+1, r25	; 0x01
    51ea:	a2 83       	std	Z+2, r26	; 0x02
    51ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51ee:	fe 01       	movw	r30, r28
    51f0:	ef 5b       	subi	r30, 0xBF	; 191
    51f2:	ff 4f       	sbci	r31, 0xFF	; 255
    51f4:	60 81       	ld	r22, Z
    51f6:	71 81       	ldd	r23, Z+1	; 0x01
    51f8:	82 81       	ldd	r24, Z+2	; 0x02
    51fa:	93 81       	ldd	r25, Z+3	; 0x03
    51fc:	20 e0       	ldi	r18, 0x00	; 0
    51fe:	30 e0       	ldi	r19, 0x00	; 0
    5200:	40 e8       	ldi	r20, 0x80	; 128
    5202:	5f e3       	ldi	r21, 0x3F	; 63
    5204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5208:	88 23       	and	r24, r24
    520a:	34 f4       	brge	.+12     	; 0x5218 <CLCD_SendData+0xd4>
		__ticks = 1;
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	fe 01       	movw	r30, r28
    5210:	e0 5c       	subi	r30, 0xC0	; 192
    5212:	ff 4f       	sbci	r31, 0xFF	; 255
    5214:	80 83       	st	Z, r24
    5216:	9d c0       	rjmp	.+314    	; 0x5352 <CLCD_SendData+0x20e>
	else if (__tmp > 255)
    5218:	fe 01       	movw	r30, r28
    521a:	ef 5b       	subi	r30, 0xBF	; 191
    521c:	ff 4f       	sbci	r31, 0xFF	; 255
    521e:	60 81       	ld	r22, Z
    5220:	71 81       	ldd	r23, Z+1	; 0x01
    5222:	82 81       	ldd	r24, Z+2	; 0x02
    5224:	93 81       	ldd	r25, Z+3	; 0x03
    5226:	20 e0       	ldi	r18, 0x00	; 0
    5228:	30 e0       	ldi	r19, 0x00	; 0
    522a:	4f e7       	ldi	r20, 0x7F	; 127
    522c:	53 e4       	ldi	r21, 0x43	; 67
    522e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5232:	18 16       	cp	r1, r24
    5234:	0c f0       	brlt	.+2      	; 0x5238 <CLCD_SendData+0xf4>
    5236:	7e c0       	rjmp	.+252    	; 0x5334 <CLCD_SendData+0x1f0>
	{
		_delay_ms(__us / 1000.0);
    5238:	fe 01       	movw	r30, r28
    523a:	eb 5b       	subi	r30, 0xBB	; 187
    523c:	ff 4f       	sbci	r31, 0xFF	; 255
    523e:	60 81       	ld	r22, Z
    5240:	71 81       	ldd	r23, Z+1	; 0x01
    5242:	82 81       	ldd	r24, Z+2	; 0x02
    5244:	93 81       	ldd	r25, Z+3	; 0x03
    5246:	20 e0       	ldi	r18, 0x00	; 0
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	4a e7       	ldi	r20, 0x7A	; 122
    524c:	54 e4       	ldi	r21, 0x44	; 68
    524e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5252:	dc 01       	movw	r26, r24
    5254:	cb 01       	movw	r24, r22
    5256:	8c af       	std	Y+60, r24	; 0x3c
    5258:	9d af       	std	Y+61, r25	; 0x3d
    525a:	ae af       	std	Y+62, r26	; 0x3e
    525c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    525e:	6c ad       	ldd	r22, Y+60	; 0x3c
    5260:	7d ad       	ldd	r23, Y+61	; 0x3d
    5262:	8e ad       	ldd	r24, Y+62	; 0x3e
    5264:	9f ad       	ldd	r25, Y+63	; 0x3f
    5266:	20 e0       	ldi	r18, 0x00	; 0
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	4a ef       	ldi	r20, 0xFA	; 250
    526c:	54 e4       	ldi	r21, 0x44	; 68
    526e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5272:	dc 01       	movw	r26, r24
    5274:	cb 01       	movw	r24, r22
    5276:	88 af       	std	Y+56, r24	; 0x38
    5278:	99 af       	std	Y+57, r25	; 0x39
    527a:	aa af       	std	Y+58, r26	; 0x3a
    527c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    527e:	68 ad       	ldd	r22, Y+56	; 0x38
    5280:	79 ad       	ldd	r23, Y+57	; 0x39
    5282:	8a ad       	ldd	r24, Y+58	; 0x3a
    5284:	9b ad       	ldd	r25, Y+59	; 0x3b
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	40 e8       	ldi	r20, 0x80	; 128
    528c:	5f e3       	ldi	r21, 0x3F	; 63
    528e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5292:	88 23       	and	r24, r24
    5294:	2c f4       	brge	.+10     	; 0x52a0 <CLCD_SendData+0x15c>
		__ticks = 1;
    5296:	81 e0       	ldi	r24, 0x01	; 1
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	9f ab       	std	Y+55, r25	; 0x37
    529c:	8e ab       	std	Y+54, r24	; 0x36
    529e:	3f c0       	rjmp	.+126    	; 0x531e <CLCD_SendData+0x1da>
	else if (__tmp > 65535)
    52a0:	68 ad       	ldd	r22, Y+56	; 0x38
    52a2:	79 ad       	ldd	r23, Y+57	; 0x39
    52a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    52a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    52a8:	20 e0       	ldi	r18, 0x00	; 0
    52aa:	3f ef       	ldi	r19, 0xFF	; 255
    52ac:	4f e7       	ldi	r20, 0x7F	; 127
    52ae:	57 e4       	ldi	r21, 0x47	; 71
    52b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52b4:	18 16       	cp	r1, r24
    52b6:	4c f5       	brge	.+82     	; 0x530a <CLCD_SendData+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    52ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    52bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    52be:	9f ad       	ldd	r25, Y+63	; 0x3f
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	40 e2       	ldi	r20, 0x20	; 32
    52c6:	51 e4       	ldi	r21, 0x41	; 65
    52c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52cc:	dc 01       	movw	r26, r24
    52ce:	cb 01       	movw	r24, r22
    52d0:	bc 01       	movw	r22, r24
    52d2:	cd 01       	movw	r24, r26
    52d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52d8:	dc 01       	movw	r26, r24
    52da:	cb 01       	movw	r24, r22
    52dc:	9f ab       	std	Y+55, r25	; 0x37
    52de:	8e ab       	std	Y+54, r24	; 0x36
    52e0:	0f c0       	rjmp	.+30     	; 0x5300 <CLCD_SendData+0x1bc>
    52e2:	88 ec       	ldi	r24, 0xC8	; 200
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	9d ab       	std	Y+53, r25	; 0x35
    52e8:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    52ea:	8c a9       	ldd	r24, Y+52	; 0x34
    52ec:	9d a9       	ldd	r25, Y+53	; 0x35
    52ee:	01 97       	sbiw	r24, 0x01	; 1
    52f0:	f1 f7       	brne	.-4      	; 0x52ee <CLCD_SendData+0x1aa>
    52f2:	9d ab       	std	Y+53, r25	; 0x35
    52f4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52f6:	8e a9       	ldd	r24, Y+54	; 0x36
    52f8:	9f a9       	ldd	r25, Y+55	; 0x37
    52fa:	01 97       	sbiw	r24, 0x01	; 1
    52fc:	9f ab       	std	Y+55, r25	; 0x37
    52fe:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5300:	8e a9       	ldd	r24, Y+54	; 0x36
    5302:	9f a9       	ldd	r25, Y+55	; 0x37
    5304:	00 97       	sbiw	r24, 0x00	; 0
    5306:	69 f7       	brne	.-38     	; 0x52e2 <CLCD_SendData+0x19e>
    5308:	2d c0       	rjmp	.+90     	; 0x5364 <CLCD_SendData+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    530a:	68 ad       	ldd	r22, Y+56	; 0x38
    530c:	79 ad       	ldd	r23, Y+57	; 0x39
    530e:	8a ad       	ldd	r24, Y+58	; 0x3a
    5310:	9b ad       	ldd	r25, Y+59	; 0x3b
    5312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5316:	dc 01       	movw	r26, r24
    5318:	cb 01       	movw	r24, r22
    531a:	9f ab       	std	Y+55, r25	; 0x37
    531c:	8e ab       	std	Y+54, r24	; 0x36
    531e:	8e a9       	ldd	r24, Y+54	; 0x36
    5320:	9f a9       	ldd	r25, Y+55	; 0x37
    5322:	9b ab       	std	Y+51, r25	; 0x33
    5324:	8a ab       	std	Y+50, r24	; 0x32
    5326:	8a a9       	ldd	r24, Y+50	; 0x32
    5328:	9b a9       	ldd	r25, Y+51	; 0x33
    532a:	01 97       	sbiw	r24, 0x01	; 1
    532c:	f1 f7       	brne	.-4      	; 0x532a <CLCD_SendData+0x1e6>
    532e:	9b ab       	std	Y+51, r25	; 0x33
    5330:	8a ab       	std	Y+50, r24	; 0x32
    5332:	18 c0       	rjmp	.+48     	; 0x5364 <CLCD_SendData+0x220>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5334:	fe 01       	movw	r30, r28
    5336:	ef 5b       	subi	r30, 0xBF	; 191
    5338:	ff 4f       	sbci	r31, 0xFF	; 255
    533a:	60 81       	ld	r22, Z
    533c:	71 81       	ldd	r23, Z+1	; 0x01
    533e:	82 81       	ldd	r24, Z+2	; 0x02
    5340:	93 81       	ldd	r25, Z+3	; 0x03
    5342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	fe 01       	movw	r30, r28
    534c:	e0 5c       	subi	r30, 0xC0	; 192
    534e:	ff 4f       	sbci	r31, 0xFF	; 255
    5350:	80 83       	st	Z, r24
    5352:	fe 01       	movw	r30, r28
    5354:	e0 5c       	subi	r30, 0xC0	; 192
    5356:	ff 4f       	sbci	r31, 0xFF	; 255
    5358:	80 81       	ld	r24, Z
    535a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    535c:	89 a9       	ldd	r24, Y+49	; 0x31
    535e:	8a 95       	dec	r24
    5360:	f1 f7       	brne	.-4      	; 0x535e <CLCD_SendData+0x21a>
    5362:	89 ab       	std	Y+49, r24	; 0x31

		_delay_us(50);
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	62 e0       	ldi	r22, 0x02	; 2
    5368:	40 e0       	ldi	r20, 0x00	; 0
    536a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    536e:	80 e0       	ldi	r24, 0x00	; 0
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	aa ef       	ldi	r26, 0xFA	; 250
    5374:	b4 e4       	ldi	r27, 0x44	; 68
    5376:	8d a7       	std	Y+45, r24	; 0x2d
    5378:	9e a7       	std	Y+46, r25	; 0x2e
    537a:	af a7       	std	Y+47, r26	; 0x2f
    537c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    537e:	6d a5       	ldd	r22, Y+45	; 0x2d
    5380:	7e a5       	ldd	r23, Y+46	; 0x2e
    5382:	8f a5       	ldd	r24, Y+47	; 0x2f
    5384:	98 a9       	ldd	r25, Y+48	; 0x30
    5386:	2b ea       	ldi	r18, 0xAB	; 171
    5388:	3a ea       	ldi	r19, 0xAA	; 170
    538a:	4a e2       	ldi	r20, 0x2A	; 42
    538c:	50 e4       	ldi	r21, 0x40	; 64
    538e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5392:	dc 01       	movw	r26, r24
    5394:	cb 01       	movw	r24, r22
    5396:	89 a7       	std	Y+41, r24	; 0x29
    5398:	9a a7       	std	Y+42, r25	; 0x2a
    539a:	ab a7       	std	Y+43, r26	; 0x2b
    539c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    539e:	69 a5       	ldd	r22, Y+41	; 0x29
    53a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    53a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    53a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    53a6:	20 e0       	ldi	r18, 0x00	; 0
    53a8:	30 e0       	ldi	r19, 0x00	; 0
    53aa:	40 e8       	ldi	r20, 0x80	; 128
    53ac:	5f e3       	ldi	r21, 0x3F	; 63
    53ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53b2:	88 23       	and	r24, r24
    53b4:	1c f4       	brge	.+6      	; 0x53bc <CLCD_SendData+0x278>
		__ticks = 1;
    53b6:	81 e0       	ldi	r24, 0x01	; 1
    53b8:	88 a7       	std	Y+40, r24	; 0x28
    53ba:	91 c0       	rjmp	.+290    	; 0x54de <CLCD_SendData+0x39a>
	else if (__tmp > 255)
    53bc:	69 a5       	ldd	r22, Y+41	; 0x29
    53be:	7a a5       	ldd	r23, Y+42	; 0x2a
    53c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    53c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    53c4:	20 e0       	ldi	r18, 0x00	; 0
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	4f e7       	ldi	r20, 0x7F	; 127
    53ca:	53 e4       	ldi	r21, 0x43	; 67
    53cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53d0:	18 16       	cp	r1, r24
    53d2:	0c f0       	brlt	.+2      	; 0x53d6 <CLCD_SendData+0x292>
    53d4:	7b c0       	rjmp	.+246    	; 0x54cc <CLCD_SendData+0x388>
	{
		_delay_ms(__us / 1000.0);
    53d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    53d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    53da:	8f a5       	ldd	r24, Y+47	; 0x2f
    53dc:	98 a9       	ldd	r25, Y+48	; 0x30
    53de:	20 e0       	ldi	r18, 0x00	; 0
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	4a e7       	ldi	r20, 0x7A	; 122
    53e4:	54 e4       	ldi	r21, 0x44	; 68
    53e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    53ea:	dc 01       	movw	r26, r24
    53ec:	cb 01       	movw	r24, r22
    53ee:	8c a3       	std	Y+36, r24	; 0x24
    53f0:	9d a3       	std	Y+37, r25	; 0x25
    53f2:	ae a3       	std	Y+38, r26	; 0x26
    53f4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53f6:	6c a1       	ldd	r22, Y+36	; 0x24
    53f8:	7d a1       	ldd	r23, Y+37	; 0x25
    53fa:	8e a1       	ldd	r24, Y+38	; 0x26
    53fc:	9f a1       	ldd	r25, Y+39	; 0x27
    53fe:	20 e0       	ldi	r18, 0x00	; 0
    5400:	30 e0       	ldi	r19, 0x00	; 0
    5402:	4a ef       	ldi	r20, 0xFA	; 250
    5404:	54 e4       	ldi	r21, 0x44	; 68
    5406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    540a:	dc 01       	movw	r26, r24
    540c:	cb 01       	movw	r24, r22
    540e:	88 a3       	std	Y+32, r24	; 0x20
    5410:	99 a3       	std	Y+33, r25	; 0x21
    5412:	aa a3       	std	Y+34, r26	; 0x22
    5414:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5416:	68 a1       	ldd	r22, Y+32	; 0x20
    5418:	79 a1       	ldd	r23, Y+33	; 0x21
    541a:	8a a1       	ldd	r24, Y+34	; 0x22
    541c:	9b a1       	ldd	r25, Y+35	; 0x23
    541e:	20 e0       	ldi	r18, 0x00	; 0
    5420:	30 e0       	ldi	r19, 0x00	; 0
    5422:	40 e8       	ldi	r20, 0x80	; 128
    5424:	5f e3       	ldi	r21, 0x3F	; 63
    5426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    542a:	88 23       	and	r24, r24
    542c:	2c f4       	brge	.+10     	; 0x5438 <CLCD_SendData+0x2f4>
		__ticks = 1;
    542e:	81 e0       	ldi	r24, 0x01	; 1
    5430:	90 e0       	ldi	r25, 0x00	; 0
    5432:	9f 8f       	std	Y+31, r25	; 0x1f
    5434:	8e 8f       	std	Y+30, r24	; 0x1e
    5436:	3f c0       	rjmp	.+126    	; 0x54b6 <CLCD_SendData+0x372>
	else if (__tmp > 65535)
    5438:	68 a1       	ldd	r22, Y+32	; 0x20
    543a:	79 a1       	ldd	r23, Y+33	; 0x21
    543c:	8a a1       	ldd	r24, Y+34	; 0x22
    543e:	9b a1       	ldd	r25, Y+35	; 0x23
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	3f ef       	ldi	r19, 0xFF	; 255
    5444:	4f e7       	ldi	r20, 0x7F	; 127
    5446:	57 e4       	ldi	r21, 0x47	; 71
    5448:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    544c:	18 16       	cp	r1, r24
    544e:	4c f5       	brge	.+82     	; 0x54a2 <CLCD_SendData+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5450:	6c a1       	ldd	r22, Y+36	; 0x24
    5452:	7d a1       	ldd	r23, Y+37	; 0x25
    5454:	8e a1       	ldd	r24, Y+38	; 0x26
    5456:	9f a1       	ldd	r25, Y+39	; 0x27
    5458:	20 e0       	ldi	r18, 0x00	; 0
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	40 e2       	ldi	r20, 0x20	; 32
    545e:	51 e4       	ldi	r21, 0x41	; 65
    5460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5464:	dc 01       	movw	r26, r24
    5466:	cb 01       	movw	r24, r22
    5468:	bc 01       	movw	r22, r24
    546a:	cd 01       	movw	r24, r26
    546c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5470:	dc 01       	movw	r26, r24
    5472:	cb 01       	movw	r24, r22
    5474:	9f 8f       	std	Y+31, r25	; 0x1f
    5476:	8e 8f       	std	Y+30, r24	; 0x1e
    5478:	0f c0       	rjmp	.+30     	; 0x5498 <CLCD_SendData+0x354>
    547a:	88 ec       	ldi	r24, 0xC8	; 200
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	9d 8f       	std	Y+29, r25	; 0x1d
    5480:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5482:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5484:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5486:	01 97       	sbiw	r24, 0x01	; 1
    5488:	f1 f7       	brne	.-4      	; 0x5486 <CLCD_SendData+0x342>
    548a:	9d 8f       	std	Y+29, r25	; 0x1d
    548c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    548e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5490:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5492:	01 97       	sbiw	r24, 0x01	; 1
    5494:	9f 8f       	std	Y+31, r25	; 0x1f
    5496:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5498:	8e 8d       	ldd	r24, Y+30	; 0x1e
    549a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    549c:	00 97       	sbiw	r24, 0x00	; 0
    549e:	69 f7       	brne	.-38     	; 0x547a <CLCD_SendData+0x336>
    54a0:	24 c0       	rjmp	.+72     	; 0x54ea <CLCD_SendData+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54a2:	68 a1       	ldd	r22, Y+32	; 0x20
    54a4:	79 a1       	ldd	r23, Y+33	; 0x21
    54a6:	8a a1       	ldd	r24, Y+34	; 0x22
    54a8:	9b a1       	ldd	r25, Y+35	; 0x23
    54aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ae:	dc 01       	movw	r26, r24
    54b0:	cb 01       	movw	r24, r22
    54b2:	9f 8f       	std	Y+31, r25	; 0x1f
    54b4:	8e 8f       	std	Y+30, r24	; 0x1e
    54b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    54b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    54ba:	9b 8f       	std	Y+27, r25	; 0x1b
    54bc:	8a 8f       	std	Y+26, r24	; 0x1a
    54be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    54c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    54c2:	01 97       	sbiw	r24, 0x01	; 1
    54c4:	f1 f7       	brne	.-4      	; 0x54c2 <CLCD_SendData+0x37e>
    54c6:	9b 8f       	std	Y+27, r25	; 0x1b
    54c8:	8a 8f       	std	Y+26, r24	; 0x1a
    54ca:	0f c0       	rjmp	.+30     	; 0x54ea <CLCD_SendData+0x3a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    54cc:	69 a5       	ldd	r22, Y+41	; 0x29
    54ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    54d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    54d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    54d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54d8:	dc 01       	movw	r26, r24
    54da:	cb 01       	movw	r24, r22
    54dc:	88 a7       	std	Y+40, r24	; 0x28
    54de:	88 a5       	ldd	r24, Y+40	; 0x28
    54e0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    54e2:	89 8d       	ldd	r24, Y+25	; 0x19
    54e4:	8a 95       	dec	r24
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <CLCD_SendData+0x3a0>
    54e8:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(2000);

		DataPort = (DataPort & 0x0F) | (LowerNibble_BitMask_Data); 	//send lower 4 bit
    54ea:	a5 e3       	ldi	r26, 0x35	; 53
    54ec:	b0 e0       	ldi	r27, 0x00	; 0
    54ee:	e5 e3       	ldi	r30, 0x35	; 53
    54f0:	f0 e0       	ldi	r31, 0x00	; 0
    54f2:	80 81       	ld	r24, Z
    54f4:	28 2f       	mov	r18, r24
    54f6:	2f 70       	andi	r18, 0x0F	; 15
    54f8:	fe 01       	movw	r30, r28
    54fa:	e7 5b       	subi	r30, 0xB7	; 183
    54fc:	ff 4f       	sbci	r31, 0xFF	; 255
    54fe:	80 81       	ld	r24, Z
    5500:	88 2f       	mov	r24, r24
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	82 95       	swap	r24
    5506:	92 95       	swap	r25
    5508:	90 7f       	andi	r25, 0xF0	; 240
    550a:	98 27       	eor	r25, r24
    550c:	80 7f       	andi	r24, 0xF0	; 240
    550e:	98 27       	eor	r25, r24
    5510:	82 2b       	or	r24, r18
    5512:	8c 93       	st	X, r24

		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    5514:	81 e0       	ldi	r24, 0x01	; 1
    5516:	62 e0       	ldi	r22, 0x02	; 2
    5518:	41 e0       	ldi	r20, 0x01	; 1
    551a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
    551e:	80 e0       	ldi	r24, 0x00	; 0
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	aa ef       	ldi	r26, 0xFA	; 250
    5524:	b4 e4       	ldi	r27, 0x44	; 68
    5526:	8d 8b       	std	Y+21, r24	; 0x15
    5528:	9e 8b       	std	Y+22, r25	; 0x16
    552a:	af 8b       	std	Y+23, r26	; 0x17
    552c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    552e:	6d 89       	ldd	r22, Y+21	; 0x15
    5530:	7e 89       	ldd	r23, Y+22	; 0x16
    5532:	8f 89       	ldd	r24, Y+23	; 0x17
    5534:	98 8d       	ldd	r25, Y+24	; 0x18
    5536:	2b ea       	ldi	r18, 0xAB	; 171
    5538:	3a ea       	ldi	r19, 0xAA	; 170
    553a:	4a e2       	ldi	r20, 0x2A	; 42
    553c:	50 e4       	ldi	r21, 0x40	; 64
    553e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5542:	dc 01       	movw	r26, r24
    5544:	cb 01       	movw	r24, r22
    5546:	89 8b       	std	Y+17, r24	; 0x11
    5548:	9a 8b       	std	Y+18, r25	; 0x12
    554a:	ab 8b       	std	Y+19, r26	; 0x13
    554c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    554e:	69 89       	ldd	r22, Y+17	; 0x11
    5550:	7a 89       	ldd	r23, Y+18	; 0x12
    5552:	8b 89       	ldd	r24, Y+19	; 0x13
    5554:	9c 89       	ldd	r25, Y+20	; 0x14
    5556:	20 e0       	ldi	r18, 0x00	; 0
    5558:	30 e0       	ldi	r19, 0x00	; 0
    555a:	40 e8       	ldi	r20, 0x80	; 128
    555c:	5f e3       	ldi	r21, 0x3F	; 63
    555e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5562:	88 23       	and	r24, r24
    5564:	1c f4       	brge	.+6      	; 0x556c <CLCD_SendData+0x428>
		__ticks = 1;
    5566:	81 e0       	ldi	r24, 0x01	; 1
    5568:	88 8b       	std	Y+16, r24	; 0x10
    556a:	91 c0       	rjmp	.+290    	; 0x568e <CLCD_SendData+0x54a>
	else if (__tmp > 255)
    556c:	69 89       	ldd	r22, Y+17	; 0x11
    556e:	7a 89       	ldd	r23, Y+18	; 0x12
    5570:	8b 89       	ldd	r24, Y+19	; 0x13
    5572:	9c 89       	ldd	r25, Y+20	; 0x14
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	4f e7       	ldi	r20, 0x7F	; 127
    557a:	53 e4       	ldi	r21, 0x43	; 67
    557c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5580:	18 16       	cp	r1, r24
    5582:	0c f0       	brlt	.+2      	; 0x5586 <CLCD_SendData+0x442>
    5584:	7b c0       	rjmp	.+246    	; 0x567c <CLCD_SendData+0x538>
	{
		_delay_ms(__us / 1000.0);
    5586:	6d 89       	ldd	r22, Y+21	; 0x15
    5588:	7e 89       	ldd	r23, Y+22	; 0x16
    558a:	8f 89       	ldd	r24, Y+23	; 0x17
    558c:	98 8d       	ldd	r25, Y+24	; 0x18
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	4a e7       	ldi	r20, 0x7A	; 122
    5594:	54 e4       	ldi	r21, 0x44	; 68
    5596:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    559a:	dc 01       	movw	r26, r24
    559c:	cb 01       	movw	r24, r22
    559e:	8c 87       	std	Y+12, r24	; 0x0c
    55a0:	9d 87       	std	Y+13, r25	; 0x0d
    55a2:	ae 87       	std	Y+14, r26	; 0x0e
    55a4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    55a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    55aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    55ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    55ae:	20 e0       	ldi	r18, 0x00	; 0
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	4a ef       	ldi	r20, 0xFA	; 250
    55b4:	54 e4       	ldi	r21, 0x44	; 68
    55b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ba:	dc 01       	movw	r26, r24
    55bc:	cb 01       	movw	r24, r22
    55be:	88 87       	std	Y+8, r24	; 0x08
    55c0:	99 87       	std	Y+9, r25	; 0x09
    55c2:	aa 87       	std	Y+10, r26	; 0x0a
    55c4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    55c6:	68 85       	ldd	r22, Y+8	; 0x08
    55c8:	79 85       	ldd	r23, Y+9	; 0x09
    55ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    55cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    55ce:	20 e0       	ldi	r18, 0x00	; 0
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	40 e8       	ldi	r20, 0x80	; 128
    55d4:	5f e3       	ldi	r21, 0x3F	; 63
    55d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55da:	88 23       	and	r24, r24
    55dc:	2c f4       	brge	.+10     	; 0x55e8 <CLCD_SendData+0x4a4>
		__ticks = 1;
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	9f 83       	std	Y+7, r25	; 0x07
    55e4:	8e 83       	std	Y+6, r24	; 0x06
    55e6:	3f c0       	rjmp	.+126    	; 0x5666 <CLCD_SendData+0x522>
	else if (__tmp > 65535)
    55e8:	68 85       	ldd	r22, Y+8	; 0x08
    55ea:	79 85       	ldd	r23, Y+9	; 0x09
    55ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    55ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    55f0:	20 e0       	ldi	r18, 0x00	; 0
    55f2:	3f ef       	ldi	r19, 0xFF	; 255
    55f4:	4f e7       	ldi	r20, 0x7F	; 127
    55f6:	57 e4       	ldi	r21, 0x47	; 71
    55f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55fc:	18 16       	cp	r1, r24
    55fe:	4c f5       	brge	.+82     	; 0x5652 <CLCD_SendData+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5600:	6c 85       	ldd	r22, Y+12	; 0x0c
    5602:	7d 85       	ldd	r23, Y+13	; 0x0d
    5604:	8e 85       	ldd	r24, Y+14	; 0x0e
    5606:	9f 85       	ldd	r25, Y+15	; 0x0f
    5608:	20 e0       	ldi	r18, 0x00	; 0
    560a:	30 e0       	ldi	r19, 0x00	; 0
    560c:	40 e2       	ldi	r20, 0x20	; 32
    560e:	51 e4       	ldi	r21, 0x41	; 65
    5610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5614:	dc 01       	movw	r26, r24
    5616:	cb 01       	movw	r24, r22
    5618:	bc 01       	movw	r22, r24
    561a:	cd 01       	movw	r24, r26
    561c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5620:	dc 01       	movw	r26, r24
    5622:	cb 01       	movw	r24, r22
    5624:	9f 83       	std	Y+7, r25	; 0x07
    5626:	8e 83       	std	Y+6, r24	; 0x06
    5628:	0f c0       	rjmp	.+30     	; 0x5648 <CLCD_SendData+0x504>
    562a:	88 ec       	ldi	r24, 0xC8	; 200
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	9d 83       	std	Y+5, r25	; 0x05
    5630:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5632:	8c 81       	ldd	r24, Y+4	; 0x04
    5634:	9d 81       	ldd	r25, Y+5	; 0x05
    5636:	01 97       	sbiw	r24, 0x01	; 1
    5638:	f1 f7       	brne	.-4      	; 0x5636 <CLCD_SendData+0x4f2>
    563a:	9d 83       	std	Y+5, r25	; 0x05
    563c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    563e:	8e 81       	ldd	r24, Y+6	; 0x06
    5640:	9f 81       	ldd	r25, Y+7	; 0x07
    5642:	01 97       	sbiw	r24, 0x01	; 1
    5644:	9f 83       	std	Y+7, r25	; 0x07
    5646:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5648:	8e 81       	ldd	r24, Y+6	; 0x06
    564a:	9f 81       	ldd	r25, Y+7	; 0x07
    564c:	00 97       	sbiw	r24, 0x00	; 0
    564e:	69 f7       	brne	.-38     	; 0x562a <CLCD_SendData+0x4e6>
    5650:	24 c0       	rjmp	.+72     	; 0x569a <CLCD_SendData+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5652:	68 85       	ldd	r22, Y+8	; 0x08
    5654:	79 85       	ldd	r23, Y+9	; 0x09
    5656:	8a 85       	ldd	r24, Y+10	; 0x0a
    5658:	9b 85       	ldd	r25, Y+11	; 0x0b
    565a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    565e:	dc 01       	movw	r26, r24
    5660:	cb 01       	movw	r24, r22
    5662:	9f 83       	std	Y+7, r25	; 0x07
    5664:	8e 83       	std	Y+6, r24	; 0x06
    5666:	8e 81       	ldd	r24, Y+6	; 0x06
    5668:	9f 81       	ldd	r25, Y+7	; 0x07
    566a:	9b 83       	std	Y+3, r25	; 0x03
    566c:	8a 83       	std	Y+2, r24	; 0x02
    566e:	8a 81       	ldd	r24, Y+2	; 0x02
    5670:	9b 81       	ldd	r25, Y+3	; 0x03
    5672:	01 97       	sbiw	r24, 0x01	; 1
    5674:	f1 f7       	brne	.-4      	; 0x5672 <CLCD_SendData+0x52e>
    5676:	9b 83       	std	Y+3, r25	; 0x03
    5678:	8a 83       	std	Y+2, r24	; 0x02
    567a:	0f c0       	rjmp	.+30     	; 0x569a <CLCD_SendData+0x556>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    567c:	69 89       	ldd	r22, Y+17	; 0x11
    567e:	7a 89       	ldd	r23, Y+18	; 0x12
    5680:	8b 89       	ldd	r24, Y+19	; 0x13
    5682:	9c 89       	ldd	r25, Y+20	; 0x14
    5684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5688:	dc 01       	movw	r26, r24
    568a:	cb 01       	movw	r24, r22
    568c:	88 8b       	std	Y+16, r24	; 0x10
    568e:	88 89       	ldd	r24, Y+16	; 0x10
    5690:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5692:	89 81       	ldd	r24, Y+1	; 0x01
    5694:	8a 95       	dec	r24
    5696:	f1 f7       	brne	.-4      	; 0x5694 <CLCD_SendData+0x550>
    5698:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(2000);
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	62 e0       	ldi	r22, 0x02	; 2
    569e:	40 e0       	ldi	r20, 0x00	; 0
    56a0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>
#endif
}
    56a4:	c7 5b       	subi	r28, 0xB7	; 183
    56a6:	df 4f       	sbci	r29, 0xFF	; 255
    56a8:	0f b6       	in	r0, 0x3f	; 63
    56aa:	f8 94       	cli
    56ac:	de bf       	out	0x3e, r29	; 62
    56ae:	0f be       	out	0x3f, r0	; 63
    56b0:	cd bf       	out	0x3d, r28	; 61
    56b2:	cf 91       	pop	r28
    56b4:	df 91       	pop	r29
    56b6:	1f 91       	pop	r17
    56b8:	0f 91       	pop	r16
    56ba:	08 95       	ret

000056bc <CLCD_SendWord>:

void CLCD_SendWord(u8 *Word)
{
    56bc:	df 93       	push	r29
    56be:	cf 93       	push	r28
    56c0:	00 d0       	rcall	.+0      	; 0x56c2 <CLCD_SendWord+0x6>
    56c2:	0f 92       	push	r0
    56c4:	cd b7       	in	r28, 0x3d	; 61
    56c6:	de b7       	in	r29, 0x3e	; 62
    56c8:	9b 83       	std	Y+3, r25	; 0x03
    56ca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    56cc:	19 82       	std	Y+1, r1	; 0x01
    56ce:	15 c0       	rjmp	.+42     	; 0x56fa <CLCD_SendWord+0x3e>
	while(Word[Counter]!='\0')
	{
		CLCD_SendData(Word[Counter]);
    56d0:	89 81       	ldd	r24, Y+1	; 0x01
    56d2:	28 2f       	mov	r18, r24
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	8a 81       	ldd	r24, Y+2	; 0x02
    56d8:	9b 81       	ldd	r25, Y+3	; 0x03
    56da:	fc 01       	movw	r30, r24
    56dc:	e2 0f       	add	r30, r18
    56de:	f3 1f       	adc	r31, r19
    56e0:	80 81       	ld	r24, Z
    56e2:	0e 94 a2 28 	call	0x5144	; 0x5144 <CLCD_SendData>
		Counter++;
    56e6:	89 81       	ldd	r24, Y+1	; 0x01
    56e8:	8f 5f       	subi	r24, 0xFF	; 255
    56ea:	89 83       	std	Y+1, r24	; 0x01
		if(Counter==16)
    56ec:	89 81       	ldd	r24, Y+1	; 0x01
    56ee:	80 31       	cpi	r24, 0x10	; 16
    56f0:	21 f4       	brne	.+8      	; 0x56fa <CLCD_SendWord+0x3e>
			CLCD_GoToXY(1,0);
    56f2:	81 e0       	ldi	r24, 0x01	; 1
    56f4:	60 e0       	ldi	r22, 0x00	; 0
    56f6:	0e 94 8e 2b 	call	0x571c	; 0x571c <CLCD_GoToXY>
}

void CLCD_SendWord(u8 *Word)
{
	u8 Counter=0;
	while(Word[Counter]!='\0')
    56fa:	89 81       	ldd	r24, Y+1	; 0x01
    56fc:	28 2f       	mov	r18, r24
    56fe:	30 e0       	ldi	r19, 0x00	; 0
    5700:	8a 81       	ldd	r24, Y+2	; 0x02
    5702:	9b 81       	ldd	r25, Y+3	; 0x03
    5704:	fc 01       	movw	r30, r24
    5706:	e2 0f       	add	r30, r18
    5708:	f3 1f       	adc	r31, r19
    570a:	80 81       	ld	r24, Z
    570c:	88 23       	and	r24, r24
    570e:	01 f7       	brne	.-64     	; 0x56d0 <CLCD_SendWord+0x14>
		CLCD_SendData(Word[Counter]);
		Counter++;
		if(Counter==16)
			CLCD_GoToXY(1,0);
	}
}
    5710:	0f 90       	pop	r0
    5712:	0f 90       	pop	r0
    5714:	0f 90       	pop	r0
    5716:	cf 91       	pop	r28
    5718:	df 91       	pop	r29
    571a:	08 95       	ret

0000571c <CLCD_GoToXY>:

void CLCD_GoToXY(u8 X_Position,u8 Y_Position)
{
    571c:	df 93       	push	r29
    571e:	cf 93       	push	r28
    5720:	00 d0       	rcall	.+0      	; 0x5722 <CLCD_GoToXY+0x6>
    5722:	0f 92       	push	r0
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
    5728:	8a 83       	std	Y+2, r24	; 0x02
    572a:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_address;
	if(Y_Position == 0)
    572c:	8b 81       	ldd	r24, Y+3	; 0x03
    572e:	88 23       	and	r24, r24
    5730:	39 f4       	brne	.+14     	; 0x5740 <CLCD_GoToXY+0x24>
		{
			DDRAM_address = X_Position;
    5732:	8a 81       	ldd	r24, Y+2	; 0x02
    5734:	89 83       	std	Y+1, r24	; 0x01
			CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    5736:	89 81       	ldd	r24, Y+1	; 0x01
    5738:	80 58       	subi	r24, 0x80	; 128
    573a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <CLCD_SendCommand>
    573e:	0a c0       	rjmp	.+20     	; 0x5754 <CLCD_GoToXY+0x38>
		}
	else if (Y_Position == 1)
    5740:	8b 81       	ldd	r24, Y+3	; 0x03
    5742:	81 30       	cpi	r24, 0x01	; 1
    5744:	39 f4       	brne	.+14     	; 0x5754 <CLCD_GoToXY+0x38>
		{
		DDRAM_address = X_Position + FirstLoc_SecondLine;
    5746:	8a 81       	ldd	r24, Y+2	; 0x02
    5748:	80 5c       	subi	r24, 0xC0	; 192
    574a:	89 83       	std	Y+1, r24	; 0x01
		CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    574c:	89 81       	ldd	r24, Y+1	; 0x01
    574e:	80 58       	subi	r24, 0x80	; 128
    5750:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <CLCD_SendCommand>
		}
}
    5754:	0f 90       	pop	r0
    5756:	0f 90       	pop	r0
    5758:	0f 90       	pop	r0
    575a:	cf 91       	pop	r28
    575c:	df 91       	pop	r29
    575e:	08 95       	ret

00005760 <CLCD_SendSpecialChar>:

void CLCD_SendSpecialChar(u8 *Pattern,u8 BlockNumber,u8 X_Position,u8 Y_Position)
{
    5760:	df 93       	push	r29
    5762:	cf 93       	push	r28
    5764:	cd b7       	in	r28, 0x3d	; 61
    5766:	de b7       	in	r29, 0x3e	; 62
    5768:	27 97       	sbiw	r28, 0x07	; 7
    576a:	0f b6       	in	r0, 0x3f	; 63
    576c:	f8 94       	cli
    576e:	de bf       	out	0x3e, r29	; 62
    5770:	0f be       	out	0x3f, r0	; 63
    5772:	cd bf       	out	0x3d, r28	; 61
    5774:	9c 83       	std	Y+4, r25	; 0x04
    5776:	8b 83       	std	Y+3, r24	; 0x03
    5778:	6d 83       	std	Y+5, r22	; 0x05
    577a:	4e 83       	std	Y+6, r20	; 0x06
    577c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Counter,CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	CGRAM_Address = BlockNumber*8;
    577e:	8d 81       	ldd	r24, Y+5	; 0x05
    5780:	88 2f       	mov	r24, r24
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	88 0f       	add	r24, r24
    5786:	99 1f       	adc	r25, r25
    5788:	88 0f       	add	r24, r24
    578a:	99 1f       	adc	r25, r25
    578c:	88 0f       	add	r24, r24
    578e:	99 1f       	adc	r25, r25
    5790:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_SendCommand(CGRAM_Address+Set_Bit6);
    5792:	89 81       	ldd	r24, Y+1	; 0x01
    5794:	80 5c       	subi	r24, 0xC0	; 192
    5796:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <CLCD_SendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Counter=0;Counter<8;Counter++)
    579a:	1a 82       	std	Y+2, r1	; 0x02
    579c:	0e c0       	rjmp	.+28     	; 0x57ba <CLCD_SendSpecialChar+0x5a>
		{
			CLCD_SendData(Pattern[Counter]);
    579e:	8a 81       	ldd	r24, Y+2	; 0x02
    57a0:	28 2f       	mov	r18, r24
    57a2:	30 e0       	ldi	r19, 0x00	; 0
    57a4:	8b 81       	ldd	r24, Y+3	; 0x03
    57a6:	9c 81       	ldd	r25, Y+4	; 0x04
    57a8:	fc 01       	movw	r30, r24
    57aa:	e2 0f       	add	r30, r18
    57ac:	f3 1f       	adc	r31, r19
    57ae:	80 81       	ld	r24, Z
    57b0:	0e 94 a2 28 	call	0x5144	; 0x5144 <CLCD_SendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_SendCommand(CGRAM_Address+Set_Bit6);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Counter=0;Counter<8;Counter++)
    57b4:	8a 81       	ldd	r24, Y+2	; 0x02
    57b6:	8f 5f       	subi	r24, 0xFF	; 255
    57b8:	8a 83       	std	Y+2, r24	; 0x02
    57ba:	8a 81       	ldd	r24, Y+2	; 0x02
    57bc:	88 30       	cpi	r24, 0x08	; 8
    57be:	78 f3       	brcs	.-34     	; 0x579e <CLCD_SendSpecialChar+0x3e>
		{
			CLCD_SendData(Pattern[Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_GoToXY(X_Position,Y_Position);
    57c0:	8e 81       	ldd	r24, Y+6	; 0x06
    57c2:	6f 81       	ldd	r22, Y+7	; 0x07
    57c4:	0e 94 8e 2b 	call	0x571c	; 0x571c <CLCD_GoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_SendData(BlockNumber);
    57c8:	8d 81       	ldd	r24, Y+5	; 0x05
    57ca:	0e 94 a2 28 	call	0x5144	; 0x5144 <CLCD_SendData>
}
    57ce:	27 96       	adiw	r28, 0x07	; 7
    57d0:	0f b6       	in	r0, 0x3f	; 63
    57d2:	f8 94       	cli
    57d4:	de bf       	out	0x3e, r29	; 62
    57d6:	0f be       	out	0x3f, r0	; 63
    57d8:	cd bf       	out	0x3d, r28	; 61
    57da:	cf 91       	pop	r28
    57dc:	df 91       	pop	r29
    57de:	08 95       	ret

000057e0 <CLCD_Display_Decimal_Number>:


void CLCD_Display_Decimal_Number(s32 num)
{
    57e0:	df 93       	push	r29
    57e2:	cf 93       	push	r28
    57e4:	cd b7       	in	r28, 0x3d	; 61
    57e6:	de b7       	in	r29, 0x3e	; 62
    57e8:	61 97       	sbiw	r28, 0x11	; 17
    57ea:	0f b6       	in	r0, 0x3f	; 63
    57ec:	f8 94       	cli
    57ee:	de bf       	out	0x3e, r29	; 62
    57f0:	0f be       	out	0x3f, r0	; 63
    57f2:	cd bf       	out	0x3d, r28	; 61
    57f4:	6e 87       	std	Y+14, r22	; 0x0e
    57f6:	7f 87       	std	Y+15, r23	; 0x0f
    57f8:	88 8b       	std	Y+16, r24	; 0x10
    57fa:	99 8b       	std	Y+17, r25	; 0x11
	u8 i = 0, j, digit, str[10];
    57fc:	1b 82       	std	Y+3, r1	; 0x03

	/* if number 0 */
	if (0 == num)
    57fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    5800:	9f 85       	ldd	r25, Y+15	; 0x0f
    5802:	a8 89       	ldd	r26, Y+16	; 0x10
    5804:	b9 89       	ldd	r27, Y+17	; 0x11
    5806:	00 97       	sbiw	r24, 0x00	; 0
    5808:	a1 05       	cpc	r26, r1
    580a:	b1 05       	cpc	r27, r1
    580c:	19 f4       	brne	.+6      	; 0x5814 <CLCD_Display_Decimal_Number+0x34>
	{
		CLCD_SendData('0');
    580e:	80 e3       	ldi	r24, 0x30	; 48
    5810:	0e 94 a2 28 	call	0x5144	; 0x5144 <CLCD_SendData>
	}

	/* if the number is negative */
	if (num < 0)
    5814:	8e 85       	ldd	r24, Y+14	; 0x0e
    5816:	9f 85       	ldd	r25, Y+15	; 0x0f
    5818:	a8 89       	ldd	r26, Y+16	; 0x10
    581a:	b9 89       	ldd	r27, Y+17	; 0x11
    581c:	bb 23       	and	r27, r27
    581e:	0c f0       	brlt	.+2      	; 0x5822 <CLCD_Display_Decimal_Number+0x42>
    5820:	42 c0       	rjmp	.+132    	; 0x58a6 <CLCD_Display_Decimal_Number+0xc6>
	{
		CLCD_SendData('-');
    5822:	8d e2       	ldi	r24, 0x2D	; 45
    5824:	0e 94 a2 28 	call	0x5144	; 0x5144 <CLCD_SendData>

		/* convert to positive form */
		num = num * -1;
    5828:	8e 85       	ldd	r24, Y+14	; 0x0e
    582a:	9f 85       	ldd	r25, Y+15	; 0x0f
    582c:	a8 89       	ldd	r26, Y+16	; 0x10
    582e:	b9 89       	ldd	r27, Y+17	; 0x11
    5830:	b0 95       	com	r27
    5832:	a0 95       	com	r26
    5834:	90 95       	com	r25
    5836:	81 95       	neg	r24
    5838:	9f 4f       	sbci	r25, 0xFF	; 255
    583a:	af 4f       	sbci	r26, 0xFF	; 255
    583c:	bf 4f       	sbci	r27, 0xFF	; 255
    583e:	8e 87       	std	Y+14, r24	; 0x0e
    5840:	9f 87       	std	Y+15, r25	; 0x0f
    5842:	a8 8b       	std	Y+16, r26	; 0x10
    5844:	b9 8b       	std	Y+17, r27	; 0x11
    5846:	2f c0       	rjmp	.+94     	; 0x58a6 <CLCD_Display_Decimal_Number+0xc6>
	}

	/* loop on digits of the number */
	while (num > 0)
	{
		digit = (num % 10) + '0';
    5848:	8e 85       	ldd	r24, Y+14	; 0x0e
    584a:	9f 85       	ldd	r25, Y+15	; 0x0f
    584c:	a8 89       	ldd	r26, Y+16	; 0x10
    584e:	b9 89       	ldd	r27, Y+17	; 0x11
    5850:	2a e0       	ldi	r18, 0x0A	; 10
    5852:	30 e0       	ldi	r19, 0x00	; 0
    5854:	40 e0       	ldi	r20, 0x00	; 0
    5856:	50 e0       	ldi	r21, 0x00	; 0
    5858:	bc 01       	movw	r22, r24
    585a:	cd 01       	movw	r24, r26
    585c:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <__divmodsi4>
    5860:	dc 01       	movw	r26, r24
    5862:	cb 01       	movw	r24, r22
    5864:	80 5d       	subi	r24, 0xD0	; 208
    5866:	89 83       	std	Y+1, r24	; 0x01
		str[i] = digit;
    5868:	8b 81       	ldd	r24, Y+3	; 0x03
    586a:	28 2f       	mov	r18, r24
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	ce 01       	movw	r24, r28
    5870:	04 96       	adiw	r24, 0x04	; 4
    5872:	fc 01       	movw	r30, r24
    5874:	e2 0f       	add	r30, r18
    5876:	f3 1f       	adc	r31, r19
    5878:	89 81       	ldd	r24, Y+1	; 0x01
    587a:	80 83       	st	Z, r24
		num /= 10;
    587c:	8e 85       	ldd	r24, Y+14	; 0x0e
    587e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5880:	a8 89       	ldd	r26, Y+16	; 0x10
    5882:	b9 89       	ldd	r27, Y+17	; 0x11
    5884:	2a e0       	ldi	r18, 0x0A	; 10
    5886:	30 e0       	ldi	r19, 0x00	; 0
    5888:	40 e0       	ldi	r20, 0x00	; 0
    588a:	50 e0       	ldi	r21, 0x00	; 0
    588c:	bc 01       	movw	r22, r24
    588e:	cd 01       	movw	r24, r26
    5890:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <__divmodsi4>
    5894:	da 01       	movw	r26, r20
    5896:	c9 01       	movw	r24, r18
    5898:	8e 87       	std	Y+14, r24	; 0x0e
    589a:	9f 87       	std	Y+15, r25	; 0x0f
    589c:	a8 8b       	std	Y+16, r26	; 0x10
    589e:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    58a0:	8b 81       	ldd	r24, Y+3	; 0x03
    58a2:	8f 5f       	subi	r24, 0xFF	; 255
    58a4:	8b 83       	std	Y+3, r24	; 0x03
		/* convert to positive form */
		num = num * -1;
	}

	/* loop on digits of the number */
	while (num > 0)
    58a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    58a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    58aa:	a8 89       	ldd	r26, Y+16	; 0x10
    58ac:	b9 89       	ldd	r27, Y+17	; 0x11
    58ae:	18 16       	cp	r1, r24
    58b0:	19 06       	cpc	r1, r25
    58b2:	1a 06       	cpc	r1, r26
    58b4:	1b 06       	cpc	r1, r27
    58b6:	44 f2       	brlt	.-112    	; 0x5848 <CLCD_Display_Decimal_Number+0x68>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    58b8:	8b 81       	ldd	r24, Y+3	; 0x03
    58ba:	8a 83       	std	Y+2, r24	; 0x02
    58bc:	11 c0       	rjmp	.+34     	; 0x58e0 <CLCD_Display_Decimal_Number+0x100>
	{
		CLCD_SendData(str[j - 1]);
    58be:	8a 81       	ldd	r24, Y+2	; 0x02
    58c0:	88 2f       	mov	r24, r24
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	9c 01       	movw	r18, r24
    58c6:	21 50       	subi	r18, 0x01	; 1
    58c8:	30 40       	sbci	r19, 0x00	; 0
    58ca:	ce 01       	movw	r24, r28
    58cc:	04 96       	adiw	r24, 0x04	; 4
    58ce:	fc 01       	movw	r30, r24
    58d0:	e2 0f       	add	r30, r18
    58d2:	f3 1f       	adc	r31, r19
    58d4:	80 81       	ld	r24, Z
    58d6:	0e 94 a2 28 	call	0x5144	; 0x5144 <CLCD_SendData>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    58da:	8a 81       	ldd	r24, Y+2	; 0x02
    58dc:	81 50       	subi	r24, 0x01	; 1
    58de:	8a 83       	std	Y+2, r24	; 0x02
    58e0:	8a 81       	ldd	r24, Y+2	; 0x02
    58e2:	88 23       	and	r24, r24
    58e4:	61 f7       	brne	.-40     	; 0x58be <CLCD_Display_Decimal_Number+0xde>
	{
		CLCD_SendData(str[j - 1]);
	}
}
    58e6:	61 96       	adiw	r28, 0x11	; 17
    58e8:	0f b6       	in	r0, 0x3f	; 63
    58ea:	f8 94       	cli
    58ec:	de bf       	out	0x3e, r29	; 62
    58ee:	0f be       	out	0x3f, r0	; 63
    58f0:	cd bf       	out	0x3d, r28	; 61
    58f2:	cf 91       	pop	r28
    58f4:	df 91       	pop	r29
    58f6:	08 95       	ret

000058f8 <CLCD_Display_RealNumber>:

void CLCD_Display_RealNumber(f32 num)
{
    58f8:	df 93       	push	r29
    58fa:	cf 93       	push	r28
    58fc:	cd b7       	in	r28, 0x3d	; 61
    58fe:	de b7       	in	r29, 0x3e	; 62
    5900:	29 97       	sbiw	r28, 0x09	; 9
    5902:	0f b6       	in	r0, 0x3f	; 63
    5904:	f8 94       	cli
    5906:	de bf       	out	0x3e, r29	; 62
    5908:	0f be       	out	0x3f, r0	; 63
    590a:	cd bf       	out	0x3d, r28	; 61
    590c:	6e 83       	std	Y+6, r22	; 0x06
    590e:	7f 83       	std	Y+7, r23	; 0x07
    5910:	88 87       	std	Y+8, r24	; 0x08
    5912:	99 87       	std	Y+9, r25	; 0x09
	//Left number to the decimal point
	s32 left = (s32)num;
    5914:	6e 81       	ldd	r22, Y+6	; 0x06
    5916:	7f 81       	ldd	r23, Y+7	; 0x07
    5918:	88 85       	ldd	r24, Y+8	; 0x08
    591a:	99 85       	ldd	r25, Y+9	; 0x09
    591c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	8a 83       	std	Y+2, r24	; 0x02
    5926:	9b 83       	std	Y+3, r25	; 0x03
    5928:	ac 83       	std	Y+4, r26	; 0x04
    592a:	bd 83       	std	Y+5, r27	; 0x05
	//calculation to the Right number to the decimal point
	u8 right = (f32)(num - left) * 100;
    592c:	6a 81       	ldd	r22, Y+2	; 0x02
    592e:	7b 81       	ldd	r23, Y+3	; 0x03
    5930:	8c 81       	ldd	r24, Y+4	; 0x04
    5932:	9d 81       	ldd	r25, Y+5	; 0x05
    5934:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5938:	9b 01       	movw	r18, r22
    593a:	ac 01       	movw	r20, r24
    593c:	6e 81       	ldd	r22, Y+6	; 0x06
    593e:	7f 81       	ldd	r23, Y+7	; 0x07
    5940:	88 85       	ldd	r24, Y+8	; 0x08
    5942:	99 85       	ldd	r25, Y+9	; 0x09
    5944:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5948:	dc 01       	movw	r26, r24
    594a:	cb 01       	movw	r24, r22
    594c:	bc 01       	movw	r22, r24
    594e:	cd 01       	movw	r24, r26
    5950:	20 e0       	ldi	r18, 0x00	; 0
    5952:	30 e0       	ldi	r19, 0x00	; 0
    5954:	48 ec       	ldi	r20, 0xC8	; 200
    5956:	52 e4       	ldi	r21, 0x42	; 66
    5958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    595c:	dc 01       	movw	r26, r24
    595e:	cb 01       	movw	r24, r22
    5960:	bc 01       	movw	r22, r24
    5962:	cd 01       	movw	r24, r26
    5964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5968:	dc 01       	movw	r26, r24
    596a:	cb 01       	movw	r24, r22
    596c:	89 83       	std	Y+1, r24	; 0x01
	//Display Left number to the decimal point
	CLCD_Display_Decimal_Number(left);
    596e:	8a 81       	ldd	r24, Y+2	; 0x02
    5970:	9b 81       	ldd	r25, Y+3	; 0x03
    5972:	ac 81       	ldd	r26, Y+4	; 0x04
    5974:	bd 81       	ldd	r27, Y+5	; 0x05
    5976:	bc 01       	movw	r22, r24
    5978:	cd 01       	movw	r24, r26
    597a:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <CLCD_Display_Decimal_Number>
	//Display the decimal point
	CLCD_SendData('.');
    597e:	8e e2       	ldi	r24, 0x2E	; 46
    5980:	0e 94 a2 28 	call	0x5144	; 0x5144 <CLCD_SendData>
	//Display the Right number to the decimal point
	CLCD_Display_Decimal_Number(right);
    5984:	89 81       	ldd	r24, Y+1	; 0x01
    5986:	88 2f       	mov	r24, r24
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	a0 e0       	ldi	r26, 0x00	; 0
    598c:	b0 e0       	ldi	r27, 0x00	; 0
    598e:	bc 01       	movw	r22, r24
    5990:	cd 01       	movw	r24, r26
    5992:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <CLCD_Display_Decimal_Number>
}
    5996:	29 96       	adiw	r28, 0x09	; 9
    5998:	0f b6       	in	r0, 0x3f	; 63
    599a:	f8 94       	cli
    599c:	de bf       	out	0x3e, r29	; 62
    599e:	0f be       	out	0x3f, r0	; 63
    59a0:	cd bf       	out	0x3d, r28	; 61
    59a2:	cf 91       	pop	r28
    59a4:	df 91       	pop	r29
    59a6:	08 95       	ret

000059a8 <KeyPad_Pressed_Key>:
 * Description          : function to define which switch is pressed in the keypad
 * 
 * @return u8           : return the value of the pressed switch 
 */
u8 KeyPad_Pressed_Key(void)
{
    59a8:	df 93       	push	r29
    59aa:	cf 93       	push	r28
    59ac:	00 d0       	rcall	.+0      	; 0x59ae <KeyPad_Pressed_Key+0x6>
    59ae:	00 d0       	rcall	.+0      	; 0x59b0 <KeyPad_Pressed_Key+0x8>
    59b0:	0f 92       	push	r0
    59b2:	cd b7       	in	r28, 0x3d	; 61
    59b4:	de b7       	in	r29, 0x3e	; 62
	u8 ColumnIndex,RowIndex,PinState,PressedKey;

	PressedKey=Key_Not_Pressed;
    59b6:	8f ef       	ldi	r24, 0xFF	; 255
    59b8:	89 83       	std	Y+1, r24	; 0x01

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    59ba:	1b 82       	std	Y+3, r1	; 0x03
    59bc:	7a c0       	rjmp	.+244    	; 0x5ab2 <KeyPad_Pressed_Key+0x10a>
	{
		//Set column of Keypad Output
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
    59be:	81 e0       	ldi	r24, 0x01	; 1
    59c0:	6f ef       	ldi	r22, 0xFF	; 255
    59c2:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);
    59c6:	8b 81       	ldd	r24, Y+3	; 0x03
    59c8:	88 2f       	mov	r24, r24
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	fc 01       	movw	r30, r24
    59ce:	e8 59       	subi	r30, 0x98	; 152
    59d0:	fe 4f       	sbci	r31, 0xFE	; 254
    59d2:	90 81       	ld	r25, Z
    59d4:	81 e0       	ldi	r24, 0x01	; 1
    59d6:	69 2f       	mov	r22, r25
    59d8:	40 e0       	ldi	r20, 0x00	; 0
    59da:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    59de:	1a 82       	std	Y+2, r1	; 0x02
    59e0:	55 c0       	rjmp	.+170    	; 0x5a8c <KeyPad_Pressed_Key+0xe4>
		{
			//Set Row input and activate pull-up
			DIO_SetPinDirection(KeyPad_Port,KeyPad_Row_Arr[RowIndex],DIO_INPUT);
    59e2:	8a 81       	ldd	r24, Y+2	; 0x02
    59e4:	88 2f       	mov	r24, r24
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	fc 01       	movw	r30, r24
    59ea:	e4 59       	subi	r30, 0x94	; 148
    59ec:	fe 4f       	sbci	r31, 0xFE	; 254
    59ee:	90 81       	ld	r25, Z
    59f0:	81 e0       	ldi	r24, 0x01	; 1
    59f2:	69 2f       	mov	r22, r25
    59f4:	40 e0       	ldi	r20, 0x00	; 0
    59f6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_SetPinDirection>
			DIO_EnablePullup(KeyPad_Port,KeyPad_Row_Arr[RowIndex],ENABLE_PullUp);
    59fa:	8a 81       	ldd	r24, Y+2	; 0x02
    59fc:	88 2f       	mov	r24, r24
    59fe:	90 e0       	ldi	r25, 0x00	; 0
    5a00:	fc 01       	movw	r30, r24
    5a02:	e4 59       	subi	r30, 0x94	; 148
    5a04:	fe 4f       	sbci	r31, 0xFE	; 254
    5a06:	90 81       	ld	r25, Z
    5a08:	81 e0       	ldi	r24, 0x01	; 1
    5a0a:	69 2f       	mov	r22, r25
    5a0c:	40 e0       	ldi	r20, 0x00	; 0
    5a0e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <DIO_EnablePullup>

			//Read the current row
			DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    5a12:	8a 81       	ldd	r24, Y+2	; 0x02
    5a14:	88 2f       	mov	r24, r24
    5a16:	90 e0       	ldi	r25, 0x00	; 0
    5a18:	fc 01       	movw	r30, r24
    5a1a:	e4 59       	subi	r30, 0x94	; 148
    5a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a1e:	90 81       	ld	r25, Z
    5a20:	9e 01       	movw	r18, r28
    5a22:	2c 5f       	subi	r18, 0xFC	; 252
    5a24:	3f 4f       	sbci	r19, 0xFF	; 255
    5a26:	81 e0       	ldi	r24, 0x01	; 1
    5a28:	69 2f       	mov	r22, r25
    5a2a:	a9 01       	movw	r20, r18
    5a2c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <DIO_GetPinValue>

			//Check if switch is pressed
			if(PinState==DIO_LOW)
    5a30:	8c 81       	ldd	r24, Y+4	; 0x04
    5a32:	88 23       	and	r24, r24
    5a34:	41 f5       	brne	.+80     	; 0x5a86 <KeyPad_Pressed_Key+0xde>
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];
    5a36:	8a 81       	ldd	r24, Y+2	; 0x02
    5a38:	48 2f       	mov	r20, r24
    5a3a:	50 e0       	ldi	r21, 0x00	; 0
    5a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a3e:	28 2f       	mov	r18, r24
    5a40:	30 e0       	ldi	r19, 0x00	; 0
    5a42:	ca 01       	movw	r24, r20
    5a44:	88 0f       	add	r24, r24
    5a46:	99 1f       	adc	r25, r25
    5a48:	88 0f       	add	r24, r24
    5a4a:	99 1f       	adc	r25, r25
    5a4c:	82 0f       	add	r24, r18
    5a4e:	93 1f       	adc	r25, r19
    5a50:	fc 01       	movw	r30, r24
    5a52:	e0 59       	subi	r30, 0x90	; 144
    5a54:	fe 4f       	sbci	r31, 0xFE	; 254
    5a56:	80 81       	ld	r24, Z
    5a58:	89 83       	std	Y+1, r24	; 0x01
    5a5a:	0f c0       	rjmp	.+30     	; 0x5a7a <KeyPad_Pressed_Key+0xd2>

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    5a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5e:	88 2f       	mov	r24, r24
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	fc 01       	movw	r30, r24
    5a64:	e4 59       	subi	r30, 0x94	; 148
    5a66:	fe 4f       	sbci	r31, 0xFE	; 254
    5a68:	90 81       	ld	r25, Z
    5a6a:	9e 01       	movw	r18, r28
    5a6c:	2c 5f       	subi	r18, 0xFC	; 252
    5a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a70:	81 e0       	ldi	r24, 0x01	; 1
    5a72:	69 2f       	mov	r22, r25
    5a74:	a9 01       	movw	r20, r18
    5a76:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <DIO_GetPinValue>
			if(PinState==DIO_LOW)
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
    5a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a7c:	88 23       	and	r24, r24
    5a7e:	71 f3       	breq	.-36     	; 0x5a5c <KeyPad_Pressed_Key+0xb4>
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
				}
				return PressedKey;
    5a80:	89 81       	ldd	r24, Y+1	; 0x01
    5a82:	8d 83       	std	Y+5, r24	; 0x05
    5a84:	1c c0       	rjmp	.+56     	; 0x5abe <KeyPad_Pressed_Key+0x116>
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    5a86:	8a 81       	ldd	r24, Y+2	; 0x02
    5a88:	8f 5f       	subi	r24, 0xFF	; 255
    5a8a:	8a 83       	std	Y+2, r24	; 0x02
    5a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a8e:	84 30       	cpi	r24, 0x04	; 4
    5a90:	08 f4       	brcc	.+2      	; 0x5a94 <KeyPad_Pressed_Key+0xec>
    5a92:	a7 cf       	rjmp	.-178    	; 0x59e2 <KeyPad_Pressed_Key+0x3a>
				}
				return PressedKey;
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
    5a94:	8b 81       	ldd	r24, Y+3	; 0x03
    5a96:	88 2f       	mov	r24, r24
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	e8 59       	subi	r30, 0x98	; 152
    5a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    5aa0:	90 81       	ld	r25, Z
    5aa2:	81 e0       	ldi	r24, 0x01	; 1
    5aa4:	69 2f       	mov	r22, r25
    5aa6:	41 e0       	ldi	r20, 0x01	; 1
    5aa8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <DIO_SetPinValue>

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    5aac:	8b 81       	ldd	r24, Y+3	; 0x03
    5aae:	8f 5f       	subi	r24, 0xFF	; 255
    5ab0:	8b 83       	std	Y+3, r24	; 0x03
    5ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ab4:	84 30       	cpi	r24, 0x04	; 4
    5ab6:	08 f4       	brcc	.+2      	; 0x5aba <KeyPad_Pressed_Key+0x112>
    5ab8:	82 cf       	rjmp	.-252    	; 0x59be <KeyPad_Pressed_Key+0x16>
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
	}
	return PressedKey;
    5aba:	89 81       	ldd	r24, Y+1	; 0x01
    5abc:	8d 83       	std	Y+5, r24	; 0x05
    5abe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5ac0:	0f 90       	pop	r0
    5ac2:	0f 90       	pop	r0
    5ac4:	0f 90       	pop	r0
    5ac6:	0f 90       	pop	r0
    5ac8:	0f 90       	pop	r0
    5aca:	cf 91       	pop	r28
    5acc:	df 91       	pop	r29
    5ace:	08 95       	ret

00005ad0 <main>:
#include "MCAL/External_Interrupt/External_Interrupt.h"
#include "avr/delay.h"

u8 Svar ;
void main (void)
{
    5ad0:	df 93       	push	r29
    5ad2:	cf 93       	push	r28
    5ad4:	cd b7       	in	r28, 0x3d	; 61
    5ad6:	de b7       	in	r29, 0x3e	; 62
	I2C_init_Salve(0x20); // the TWBR that made the required speed , and the address of the master
    5ad8:	80 e2       	ldi	r24, 0x20	; 32
    5ada:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <I2C_init_Salve>

	 DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    5ae0:	6f ef       	ldi	r22, 0xFF	; 255
    5ae2:	0e 94 98 13 	call	0x2730	; 0x2730 <DIO_SetPortDirection>
	 DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    5ae6:	80 e0       	ldi	r24, 0x00	; 0
    5ae8:	60 e0       	ldi	r22, 0x00	; 0
    5aea:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>

		//I2C_Interrupt_Enable(I2C_Enable);
		//Enable_Global_Interrupt(Enable_GIE_Interrupt);
	 I2C_SalveListenToBus();
    5aee:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <I2C_SalveListenToBus>
	 I2C_SalveReceiveData(&Svar);
    5af2:	80 ea       	ldi	r24, 0xA0	; 160
    5af4:	91 e0       	ldi	r25, 0x01	; 1
    5af6:	0e 94 65 0f 	call	0x1eca	; 0x1eca <I2C_SalveReceiveData>
while(1)
{
	 DIO_SetPortValue(DIO_PORTA,Svar);
    5afa:	90 91 a0 01 	lds	r25, 0x01A0
    5afe:	80 e0       	ldi	r24, 0x00	; 0
    5b00:	69 2f       	mov	r22, r25
    5b02:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_SetPortValue>
    5b06:	f9 cf       	rjmp	.-14     	; 0x5afa <main+0x2a>

00005b08 <__divmodsi4>:
    5b08:	97 fb       	bst	r25, 7
    5b0a:	09 2e       	mov	r0, r25
    5b0c:	05 26       	eor	r0, r21
    5b0e:	0e d0       	rcall	.+28     	; 0x5b2c <__divmodsi4_neg1>
    5b10:	57 fd       	sbrc	r21, 7
    5b12:	04 d0       	rcall	.+8      	; 0x5b1c <__divmodsi4_neg2>
    5b14:	14 d0       	rcall	.+40     	; 0x5b3e <__udivmodsi4>
    5b16:	0a d0       	rcall	.+20     	; 0x5b2c <__divmodsi4_neg1>
    5b18:	00 1c       	adc	r0, r0
    5b1a:	38 f4       	brcc	.+14     	; 0x5b2a <__divmodsi4_exit>

00005b1c <__divmodsi4_neg2>:
    5b1c:	50 95       	com	r21
    5b1e:	40 95       	com	r20
    5b20:	30 95       	com	r19
    5b22:	21 95       	neg	r18
    5b24:	3f 4f       	sbci	r19, 0xFF	; 255
    5b26:	4f 4f       	sbci	r20, 0xFF	; 255
    5b28:	5f 4f       	sbci	r21, 0xFF	; 255

00005b2a <__divmodsi4_exit>:
    5b2a:	08 95       	ret

00005b2c <__divmodsi4_neg1>:
    5b2c:	f6 f7       	brtc	.-4      	; 0x5b2a <__divmodsi4_exit>
    5b2e:	90 95       	com	r25
    5b30:	80 95       	com	r24
    5b32:	70 95       	com	r23
    5b34:	61 95       	neg	r22
    5b36:	7f 4f       	sbci	r23, 0xFF	; 255
    5b38:	8f 4f       	sbci	r24, 0xFF	; 255
    5b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b3c:	08 95       	ret

00005b3e <__udivmodsi4>:
    5b3e:	a1 e2       	ldi	r26, 0x21	; 33
    5b40:	1a 2e       	mov	r1, r26
    5b42:	aa 1b       	sub	r26, r26
    5b44:	bb 1b       	sub	r27, r27
    5b46:	fd 01       	movw	r30, r26
    5b48:	0d c0       	rjmp	.+26     	; 0x5b64 <__udivmodsi4_ep>

00005b4a <__udivmodsi4_loop>:
    5b4a:	aa 1f       	adc	r26, r26
    5b4c:	bb 1f       	adc	r27, r27
    5b4e:	ee 1f       	adc	r30, r30
    5b50:	ff 1f       	adc	r31, r31
    5b52:	a2 17       	cp	r26, r18
    5b54:	b3 07       	cpc	r27, r19
    5b56:	e4 07       	cpc	r30, r20
    5b58:	f5 07       	cpc	r31, r21
    5b5a:	20 f0       	brcs	.+8      	; 0x5b64 <__udivmodsi4_ep>
    5b5c:	a2 1b       	sub	r26, r18
    5b5e:	b3 0b       	sbc	r27, r19
    5b60:	e4 0b       	sbc	r30, r20
    5b62:	f5 0b       	sbc	r31, r21

00005b64 <__udivmodsi4_ep>:
    5b64:	66 1f       	adc	r22, r22
    5b66:	77 1f       	adc	r23, r23
    5b68:	88 1f       	adc	r24, r24
    5b6a:	99 1f       	adc	r25, r25
    5b6c:	1a 94       	dec	r1
    5b6e:	69 f7       	brne	.-38     	; 0x5b4a <__udivmodsi4_loop>
    5b70:	60 95       	com	r22
    5b72:	70 95       	com	r23
    5b74:	80 95       	com	r24
    5b76:	90 95       	com	r25
    5b78:	9b 01       	movw	r18, r22
    5b7a:	ac 01       	movw	r20, r24
    5b7c:	bd 01       	movw	r22, r26
    5b7e:	cf 01       	movw	r24, r30
    5b80:	08 95       	ret

00005b82 <__prologue_saves__>:
    5b82:	2f 92       	push	r2
    5b84:	3f 92       	push	r3
    5b86:	4f 92       	push	r4
    5b88:	5f 92       	push	r5
    5b8a:	6f 92       	push	r6
    5b8c:	7f 92       	push	r7
    5b8e:	8f 92       	push	r8
    5b90:	9f 92       	push	r9
    5b92:	af 92       	push	r10
    5b94:	bf 92       	push	r11
    5b96:	cf 92       	push	r12
    5b98:	df 92       	push	r13
    5b9a:	ef 92       	push	r14
    5b9c:	ff 92       	push	r15
    5b9e:	0f 93       	push	r16
    5ba0:	1f 93       	push	r17
    5ba2:	cf 93       	push	r28
    5ba4:	df 93       	push	r29
    5ba6:	cd b7       	in	r28, 0x3d	; 61
    5ba8:	de b7       	in	r29, 0x3e	; 62
    5baa:	ca 1b       	sub	r28, r26
    5bac:	db 0b       	sbc	r29, r27
    5bae:	0f b6       	in	r0, 0x3f	; 63
    5bb0:	f8 94       	cli
    5bb2:	de bf       	out	0x3e, r29	; 62
    5bb4:	0f be       	out	0x3f, r0	; 63
    5bb6:	cd bf       	out	0x3d, r28	; 61
    5bb8:	09 94       	ijmp

00005bba <__epilogue_restores__>:
    5bba:	2a 88       	ldd	r2, Y+18	; 0x12
    5bbc:	39 88       	ldd	r3, Y+17	; 0x11
    5bbe:	48 88       	ldd	r4, Y+16	; 0x10
    5bc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    5bc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    5bc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    5bc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    5bc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    5bca:	aa 84       	ldd	r10, Y+10	; 0x0a
    5bcc:	b9 84       	ldd	r11, Y+9	; 0x09
    5bce:	c8 84       	ldd	r12, Y+8	; 0x08
    5bd0:	df 80       	ldd	r13, Y+7	; 0x07
    5bd2:	ee 80       	ldd	r14, Y+6	; 0x06
    5bd4:	fd 80       	ldd	r15, Y+5	; 0x05
    5bd6:	0c 81       	ldd	r16, Y+4	; 0x04
    5bd8:	1b 81       	ldd	r17, Y+3	; 0x03
    5bda:	aa 81       	ldd	r26, Y+2	; 0x02
    5bdc:	b9 81       	ldd	r27, Y+1	; 0x01
    5bde:	ce 0f       	add	r28, r30
    5be0:	d1 1d       	adc	r29, r1
    5be2:	0f b6       	in	r0, 0x3f	; 63
    5be4:	f8 94       	cli
    5be6:	de bf       	out	0x3e, r29	; 62
    5be8:	0f be       	out	0x3f, r0	; 63
    5bea:	cd bf       	out	0x3d, r28	; 61
    5bec:	ed 01       	movw	r28, r26
    5bee:	08 95       	ret

00005bf0 <_exit>:
    5bf0:	f8 94       	cli

00005bf2 <__stop_program>:
    5bf2:	ff cf       	rjmp	.-2      	; 0x5bf2 <__stop_program>
