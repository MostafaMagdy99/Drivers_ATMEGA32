
SPI_Test_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ea4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00004ea4  00004f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800180  00800180  00005058  2**0
                  ALLOC
  3 .stab         00005bbc  00000000  00000000  00005058  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e51  00000000  00000000  0000ac14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000da65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000dc25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000de39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0001044b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00011919  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00012e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001310b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__vector_1>
       8:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__vector_2>
       c:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_3>
      10:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__vector_4>
      14:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_5>
      18:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_6>
      1c:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_7>
      20:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__vector_8>
      24:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__vector_9>
      28:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__vector_10>
      2c:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_11>
      30:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_12>
      34:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__vector_13>
      38:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_14>
      3c:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_15>
      40:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <main>
      8a:	0c 94 50 27 	jmp	0x4ea0	; 0x4ea0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 3e 27 	jmp	0x4e7c	; 0x4e7c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 29 27 	jmp	0x4e52	; 0x4e52 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <USART_init>:
static void (*TXC_CallBackFunc)(void);
static void (*RXC_CallBackFunc)(void);
static void (*UDRE_CallBackFunc)(void);

void USART_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <USART_init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
   u16 UBBR_Temp = 0;
     ef4:	1a 82       	std	Y+2, r1	; 0x02
     ef6:	19 82       	std	Y+1, r1	; 0x01
	#if defined USART_Tx_Only
	SET_BIT(UCSRB,TXEN);
	#elif defined USART_Rx_Only
	SET_BIT(UCSRB,RXEN);
	#elif defined USART_Tx_Rx
	SET_BIT(UCSRB,TXEN);
     ef8:	aa e2       	ldi	r26, 0x2A	; 42
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ea e2       	ldi	r30, 0x2A	; 42
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     f06:	aa e2       	ldi	r26, 0x2A	; 42
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea e2       	ldi	r30, 0x2A	; 42
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 61       	ori	r24, 0x10	; 16
     f12:	8c 93       	st	X, r24
	#elif defined USART_Tx_InterruptEnable
    SET_BIT(UCSRB,TXCIE);
	#elif defined USART_UDRE_InterruptEnable
    SET_BIT(UCSRB,UDRIE);
	#elif defined USART_RxComplete_TxComplete_InterruptEnable
    SET_BIT(UCSRB,RXCIE);
     f14:	aa e2       	ldi	r26, 0x2A	; 42
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ea e2       	ldi	r30, 0x2A	; 42
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	8c 93       	st	X, r24
    SET_BIT(UCSRB,TXCIE);
     f22:	aa e2       	ldi	r26, 0x2A	; 42
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e2       	ldi	r30, 0x2A	; 42
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 64       	ori	r24, 0x40	; 64
     f2e:	8c 93       	st	X, r24
    SET_BIT(UCSRB,TXCIE);
    SET_BIT(UCSRB,UDRIE);
	#endif
    //ProcessorType
	#if defined USART_SingleProcessor
    CLEAR_BIT(UCSRA,MPCM);
     f30:	ab e2       	ldi	r26, 0x2B	; 43
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	eb e2       	ldi	r30, 0x2B	; 43
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8e 7f       	andi	r24, 0xFE	; 254
     f3c:	8c 93       	st	X, r24
    SET_BIT(UCSRA,MPCM);
    #endif

    //OperationMode
    #if defined USART_Asynchronus_NormalSpeed
    UBBR_Temp=((f32)F_CPU) /((16.0)*(BaudRate))-0.5;
     f3e:	83 e3       	ldi	r24, 0x33	; 51
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9a 83       	std	Y+2, r25	; 0x02
     f44:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(UCSRC,URSEL);
     f46:	a0 e4       	ldi	r26, 0x40	; 64
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e0 e4       	ldi	r30, 0x40	; 64
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	8c 93       	st	X, r24
    SET_BIT(UCSRC,URSEL);
    SET_BIT(UCSRC,UMSEL);
	#endif

    //Set BaudRate Value in UBRR Register
    UBRRH = (u16)(UBBR_Temp>>8);
     f54:	e0 e4       	ldi	r30, 0x40	; 64
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	89 2f       	mov	r24, r25
     f5e:	99 27       	eor	r25, r25
     f60:	80 83       	st	Z, r24
    UBRRL = (u8)UBBR_Temp;
     f62:	e9 e2       	ldi	r30, 0x29	; 41
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	80 83       	st	Z, r24

    //ClockPolarity
	#if defined USART_Recieve_Sample_OnFalling_Transmit_Sample_OnRising
    CLEAR_BIT(UCSRC,UCPOL);
	#elif defined USART_Recieve_Sample_OnRising_Transmit_Sample_OnFalling
    SET_BIT(UCSRC,UCPOL);
     f6a:	a0 e4       	ldi	r26, 0x40	; 64
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e0 e4       	ldi	r30, 0x40	; 64
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	8c 93       	st	X, r24
    #endif
    //ControlFrame
    //StopBit Number
    #if defined USART_Frame_1StopBit
    CLEAR_BIT(UCSRC,USBS);
     f78:	a0 e4       	ldi	r26, 0x40	; 64
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e0 e4       	ldi	r30, 0x40	; 64
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	87 7f       	andi	r24, 0xF7	; 247
     f84:	8c 93       	st	X, r24
    #elif defined USART_Frame_2StopBit
    SET_BIT(UCSRC,USBS);
    #endif
    //Parity
    #if defined USART_Frame_DisableParity
    CLEAR_BIT(UCSRC,UPM0);
     f86:	a0 e4       	ldi	r26, 0x40	; 64
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e0 e4       	ldi	r30, 0x40	; 64
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8f 7e       	andi	r24, 0xEF	; 239
     f92:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC,UPM1);
     f94:	a0 e4       	ldi	r26, 0x40	; 64
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e0 e4       	ldi	r30, 0x40	; 64
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8f 7d       	andi	r24, 0xDF	; 223
     fa0:	8c 93       	st	X, r24
	#elif defined USART_7DataBit
    CLEAR_BIT(UCSRC,UCSZ0);
    SET_BIT(UCSRC,UCSZ1);
    CLEAR_BIT(UCSRC,UCSZ2);
	#elif defined USART_8DataBit
    SET_BIT(UCSRC,UCSZ0);
     fa2:	a0 e4       	ldi	r26, 0x40	; 64
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e0 e4       	ldi	r30, 0x40	; 64
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	82 60       	ori	r24, 0x02	; 2
     fae:	8c 93       	st	X, r24
    SET_BIT(UCSRC,UCSZ1);
     fb0:	a0 e4       	ldi	r26, 0x40	; 64
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e0 e4       	ldi	r30, 0x40	; 64
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	84 60       	ori	r24, 0x04	; 4
     fbc:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC,UCSZ2);
     fbe:	a0 e4       	ldi	r26, 0x40	; 64
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e0 e4       	ldi	r30, 0x40	; 64
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8b 7f       	andi	r24, 0xFB	; 251
     fca:	8c 93       	st	X, r24
    SET_BIT(UCSRC,UCSZ0);
    SET_BIT(UCSRC,UCSZ1);
    SET_BIT(UCSRC,UCSZ2);
    #endif

}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <USART_Transmit_Data>:

void USART_Transmit_Data(u8 Tx_Data)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01
	/* by using interrupt method when the UDRE ready and equal 1 start to transmit*/
	while(IS_BIT_CLEAR(UCSRA, UDRE));
     fe2:	eb e2       	ldi	r30, 0x2B	; 43
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	80 72       	andi	r24, 0x20	; 32
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	b9 f3       	breq	.-18     	; 0xfe2 <USART_Transmit_Data+0xc>
		#elif defined USART_6DataBit
		UDR = Tx_Data;
		#elif defined USART_7DataBit
		UDR = Tx_Data;
		#elif defined USART_8DataBit
		UDR = Tx_Data;
     ff4:	ec e2       	ldi	r30, 0x2C	; 44
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	80 83       	st	Z, r24
		/*Clear bit of TXB8 and select bit no of Data 9 and shifted it TXB8 bit*/
		UCSRB |= (UCSRB & CLEAR_TXB8) | ((Tx_Data&(Select_bit_9))>>Shift_No_from_9th_DataBit_to_TXB8_bit);
		/*Rest of 9 bit data stored in the UDR Register*/
		UDR = Tx_Data;
		#endif
}
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <USART_Receive_Data>:
STD_Return USART_Receive_Data(u8 *Rx_Data)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <USART_Receive_Data+0x6>
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	9a 83       	std	Y+2, r25	; 0x02
    1012:	89 83       	std	Y+1, r24	; 0x01

	while(IS_BIT_CLEAR(UCSRA,RXC));
    1014:	eb e2       	ldi	r30, 0x2B	; 43
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 23       	and	r24, r24
    101c:	dc f7       	brge	.-10     	; 0x1014 <USART_Receive_Data+0x10>
		//Error found solve by users
			if ((IS_BIT_SET(UCSRA,FE))||(IS_BIT_SET(UCSRA,DOR))||(IS_BIT_SET(UCSRA,PE)))
    101e:	eb e2       	ldi	r30, 0x2B	; 43
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	80 71       	andi	r24, 0x10	; 16
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	91 f4       	brne	.+36     	; 0x1054 <USART_Receive_Data+0x50>
    1030:	eb e2       	ldi	r30, 0x2B	; 43
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	88 70       	andi	r24, 0x08	; 8
    103c:	90 70       	andi	r25, 0x00	; 0
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	49 f4       	brne	.+18     	; 0x1054 <USART_Receive_Data+0x50>
    1042:	eb e2       	ldi	r30, 0x2B	; 43
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	84 70       	andi	r24, 0x04	; 4
    104e:	90 70       	andi	r25, 0x00	; 0
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	11 f0       	breq	.+4      	; 0x1058 <USART_Receive_Data+0x54>
			{
				return E_OK;
    1054:	1b 82       	std	Y+3, r1	; 0x03
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <USART_Receive_Data+0x64>
					#elif defined USART_6DataBit
					*Rx_Data = UDR;
					#elif defined USART_7DataBit
					*Rx_Data = UDR;
					#elif defined USART_8DataBit
					*Rx_Data = UDR;
    1058:	ec e2       	ldi	r30, 0x2C	; 44
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	e9 81       	ldd	r30, Y+1	; 0x01
    1060:	fa 81       	ldd	r31, Y+2	; 0x02
    1062:	80 83       	st	Z, r24
					#elif defined USART_9DataBit
					*Rx_Data |= ((UCSRB&Select_bit_RXB8)<<Shift_No_from_RXB8_to_9th_DataBit);
					*Rx_Data |= UDR;
					#endif
	}
	return E_NOK;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <TXC_Callback>:

void TXC_Callback(void(*Func_PTR)(void))
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <TXC_Callback+0x6>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	89 83       	std	Y+1, r24	; 0x01
	TXC_CallBackFunc = Func_PTR;
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	90 93 81 01 	sts	0x0181, r25
    108c:	80 93 80 01 	sts	0x0180, r24
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <__vector_15>:
ISR(USART_TXC_vect)
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	(*TXC_CallBackFunc)();
    10c4:	e0 91 80 01 	lds	r30, 0x0180
    10c8:	f0 91 81 01 	lds	r31, 0x0181
    10cc:	09 95       	icall
}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	0f 90       	pop	r0
    10f0:	1f 90       	pop	r1
    10f2:	18 95       	reti

000010f4 <RXC_Callback>:

void RXC_Callback(void(*Func_PTR)(void))
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <RXC_Callback+0x6>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	89 83       	std	Y+1, r24	; 0x01
	RXC_CallBackFunc = Func_PTR;
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	90 93 83 01 	sts	0x0183, r25
    110a:	80 93 82 01 	sts	0x0182, r24
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <__vector_13>:
ISR(USART_RXC_vect)
{
    1118:	1f 92       	push	r1
    111a:	0f 92       	push	r0
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	0f 92       	push	r0
    1120:	11 24       	eor	r1, r1
    1122:	2f 93       	push	r18
    1124:	3f 93       	push	r19
    1126:	4f 93       	push	r20
    1128:	5f 93       	push	r21
    112a:	6f 93       	push	r22
    112c:	7f 93       	push	r23
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
    1132:	af 93       	push	r26
    1134:	bf 93       	push	r27
    1136:	ef 93       	push	r30
    1138:	ff 93       	push	r31
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	(*RXC_CallBackFunc)();
    1142:	e0 91 82 01 	lds	r30, 0x0182
    1146:	f0 91 83 01 	lds	r31, 0x0183
    114a:	09 95       	icall
}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	ff 91       	pop	r31
    1152:	ef 91       	pop	r30
    1154:	bf 91       	pop	r27
    1156:	af 91       	pop	r26
    1158:	9f 91       	pop	r25
    115a:	8f 91       	pop	r24
    115c:	7f 91       	pop	r23
    115e:	6f 91       	pop	r22
    1160:	5f 91       	pop	r21
    1162:	4f 91       	pop	r20
    1164:	3f 91       	pop	r19
    1166:	2f 91       	pop	r18
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	0f 90       	pop	r0
    116e:	1f 90       	pop	r1
    1170:	18 95       	reti

00001172 <UDRE_Callback>:

void UDRE_Callback(void(*Func_PTR)(void))
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <UDRE_Callback+0x6>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
	UDRE_CallBackFunc = Func_PTR;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	90 93 85 01 	sts	0x0185, r25
    1188:	80 93 84 01 	sts	0x0184, r24
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <__vector_14>:

ISR(USART_UDRE_vect)
{
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	2f 93       	push	r18
    11a2:	3f 93       	push	r19
    11a4:	4f 93       	push	r20
    11a6:	5f 93       	push	r21
    11a8:	6f 93       	push	r22
    11aa:	7f 93       	push	r23
    11ac:	8f 93       	push	r24
    11ae:	9f 93       	push	r25
    11b0:	af 93       	push	r26
    11b2:	bf 93       	push	r27
    11b4:	ef 93       	push	r30
    11b6:	ff 93       	push	r31
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	(*UDRE_CallBackFunc)();
    11c0:	e0 91 84 01 	lds	r30, 0x0184
    11c4:	f0 91 85 01 	lds	r31, 0x0185
    11c8:	09 95       	icall
}
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	ff 91       	pop	r31
    11d0:	ef 91       	pop	r30
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	7f 91       	pop	r23
    11dc:	6f 91       	pop	r22
    11de:	5f 91       	pop	r21
    11e0:	4f 91       	pop	r20
    11e2:	3f 91       	pop	r19
    11e4:	2f 91       	pop	r18
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	0f 90       	pop	r0
    11ec:	1f 90       	pop	r1
    11ee:	18 95       	reti

000011f0 <Timer0_init>:
static void (*Timer1_ICU_CallBackFunc)(void);
static void (*Timer2_OVF_CallBack_Func)(void);
static void (*Timer2_CTC_CallBack_Func)(void);

void Timer0_init(void)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
						SET_BIT(TCCR0,COM00);
						SET_BIT(TCCR0,COM01);
		#endif

#elif  defined Timer0_Fast_PWM_Mode
		SET_BIT(TCCR0,WGM00);
    11f8:	a3 e5       	ldi	r26, 0x53	; 83
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e3 e5       	ldi	r30, 0x53	; 83
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 64       	ori	r24, 0x40	; 64
    1204:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1206:	a3 e5       	ldi	r26, 0x53	; 83
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e3 e5       	ldi	r30, 0x53	; 83
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	88 60       	ori	r24, 0x08	; 8
    1212:	8c 93       	st	X, r24
		/*OC0 -> PINB3 in Atmega32*/
		#if defined Normal_PORT_Operation //OC0 Disconnected
				CLEAR_BIT(TCCR0,COM00);
				CLEAR_BIT(TCCR0,COM01);
		#elif defined ClearCompareMatch_SetTop_OCO	//Non_Inverted Mode
				CLEAR_BIT(TCCR0,COM00);
    1214:	a3 e5       	ldi	r26, 0x53	; 83
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e3 e5       	ldi	r30, 0x53	; 83
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	8f 7e       	andi	r24, 0xEF	; 239
    1220:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
    1222:	a3 e5       	ldi	r26, 0x53	; 83
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e3 e5       	ldi	r30, 0x53	; 83
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	80 62       	ori	r24, 0x20	; 32
    122e:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_No_Prescaler
				SET_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
		#elif defined Timer0_CLK_8_Prescaler
				CLEAR_BIT(TCCR0,CS00);
    1230:	a3 e5       	ldi	r26, 0x53	; 83
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e3 e5       	ldi	r30, 0x53	; 83
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8e 7f       	andi	r24, 0xFE	; 254
    123c:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    123e:	a3 e5       	ldi	r26, 0x53	; 83
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e3 e5       	ldi	r30, 0x53	; 83
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	82 60       	ori	r24, 0x02	; 2
    124a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
    124c:	a3 e5       	ldi	r26, 0x53	; 83
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e3 e5       	ldi	r30, 0x53	; 83
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	8b 7f       	andi	r24, 0xFB	; 251
    1258:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_External_RisingEdge_CounterMode //On Pin T0
				SET_BIT(TCCR0,CS00);
				SET_BIT(TCCR0,CS01);
				SET_BIT(TCCR0,CS02);
		#endif
}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <Timer0_SetValue>:
void Timer0_SetValue(u8 Value)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer0_CTC_Timer_Mode
	OCR0 = Value; //Set Compare Output Value
#elif defined Timer0_PhaseCorrect_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer0_Fast_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
    126c:	ec e5       	ldi	r30, 0x5C	; 92
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	80 83       	st	Z, r24
#endif
}
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <Timer0_CallBack>:

void Timer0_CallBack(void (*FUNC_PTR)(void))
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <Timer0_CallBack+0x6>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer0_Normal_Timer_Mode
		Timer0_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer0_CTC_Timer_Mode
		Timer0_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	Timer0_OVF_CallBack_Func();
    12be:	e0 91 86 01 	lds	r30, 0x0186
    12c2:	f0 91 87 01 	lds	r31, 0x0187
    12c6:	09 95       	icall
}
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	ff 91       	pop	r31
    12ce:	ef 91       	pop	r30
    12d0:	bf 91       	pop	r27
    12d2:	af 91       	pop	r26
    12d4:	9f 91       	pop	r25
    12d6:	8f 91       	pop	r24
    12d8:	7f 91       	pop	r23
    12da:	6f 91       	pop	r22
    12dc:	5f 91       	pop	r21
    12de:	4f 91       	pop	r20
    12e0:	3f 91       	pop	r19
    12e2:	2f 91       	pop	r18
    12e4:	0f 90       	pop	r0
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	0f 90       	pop	r0
    12ea:	1f 90       	pop	r1
    12ec:	18 95       	reti

000012ee <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	2f 93       	push	r18
    12fa:	3f 93       	push	r19
    12fc:	4f 93       	push	r20
    12fe:	5f 93       	push	r21
    1300:	6f 93       	push	r22
    1302:	7f 93       	push	r23
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
    1308:	af 93       	push	r26
    130a:	bf 93       	push	r27
    130c:	ef 93       	push	r30
    130e:	ff 93       	push	r31
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_CallBack_Func();
    1318:	e0 91 88 01 	lds	r30, 0x0188
    131c:	f0 91 89 01 	lds	r31, 0x0189
    1320:	09 95       	icall
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <Timer1_init>:


void Timer1_init(void)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
	#elif defined Timer1_CLK_No_Prescaler
			SET_BIT(TCCR1B,CS10);
			CLEAR_BIT(TCCR1B,CS11);
			CLEAR_BIT(TCCR1B,CS12);
	#elif defined Timer1_CLK_8_Prescaler
			CLEAR_BIT(TCCR1B,CS10);
    1350:	ae e4       	ldi	r26, 0x4E	; 78
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	ee e4       	ldi	r30, 0x4E	; 78
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8e 7f       	andi	r24, 0xFE	; 254
    135c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    135e:	ae e4       	ldi	r26, 0x4E	; 78
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ee e4       	ldi	r30, 0x4E	; 78
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS12);
    136c:	ae e4       	ldi	r26, 0x4E	; 78
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	ee e4       	ldi	r30, 0x4E	; 78
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8b 7f       	andi	r24, 0xFB	; 251
    1378:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
	#endif

/*********************************WaveMode Generation Mode Selection************************************/
#if defined Timer1_Normal_Timer_Mode
				CLEAR_BIT(TCCR1A,WGM10);
    137a:	af e4       	ldi	r26, 0x4F	; 79
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ef e4       	ldi	r30, 0x4F	; 79
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8e 7f       	andi	r24, 0xFE	; 254
    1386:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    1388:	af e4       	ldi	r26, 0x4F	; 79
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ef e4       	ldi	r30, 0x4F	; 79
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8d 7f       	andi	r24, 0xFD	; 253
    1394:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM12);
    1396:	ae e4       	ldi	r26, 0x4E	; 78
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ee e4       	ldi	r30, 0x4E	; 78
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	87 7f       	andi	r24, 0xF7	; 247
    13a2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    13a4:	ae e4       	ldi	r26, 0x4E	; 78
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ee e4       	ldi	r30, 0x4E	; 78
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 7e       	andi	r24, 0xEF	; 239
    13b0:	8c 93       	st	X, r24
				SET_BIT(TIMSK,TOIE1);
    13b2:	a9 e5       	ldi	r26, 0x59	; 89
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e9 e5       	ldi	r30, 0x59	; 89
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	84 60       	ori	r24, 0x04	; 4
    13be:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
			CLEAR_BIT(TCCR1A,WGM11);
			SET_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
#endif
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <Timer1_SetValueChannelA>:

void Timer1_SetValueChannelA(u16 Value)	//to Set value of timer ChannelA
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <Timer1_SetValueChannelA+0x6>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	9a 83       	std	Y+2, r25	; 0x02
    13d2:	89 83       	std	Y+1, r24	; 0x01
#if defined TIMER1_ChannelA
	#if defined Timer1_Normal_Timer_Mode
		TCNT1 = Value; //Set Overflow Value
    13d4:	ec e4       	ldi	r30, 0x4C	; 76
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24
		OCR1A = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelA
		OCR1A=Value;
	#endif
#endif
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <Timer1_SetValueChannelB>:
void Timer1_SetValueChannelB(u16 Value)	//to Set value of timer ChannelB
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <Timer1_SetValueChannelB+0x6>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelB
		OCR1B=Value;
	#endif
#endif
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <Timer1_ReadValueChannelA>:

void Timer1_ReadValueChannelA(u16 *value)	//to Read value of timer
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <Timer1_ReadValueChannelA+0x6>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01
#if defined TIMER1_ChannelA
#if defined Timer1_Normal_Timer_Mode
	*value=TCNT1; //Set Overflow Value
    1410:	ec e4       	ldi	r30, 0x4C	; 76
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	e9 81       	ldd	r30, Y+1	; 0x01
    141a:	fa 81       	ldd	r31, Y+2	; 0x02
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	80 83       	st	Z, r24
			*value=OCR1A;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
			*value=OCR1A;
#endif
#endif
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <Timer1_ReadValueChannelB>:

void Timer1_ReadValueChannelB(u16 *value)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <Timer1_ReadValueChannelB+0x6>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	89 83       	std	Y+1, r24	; 0x01
	*value=OCR1B;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
	*value=OCR1B;
#endif
#endif
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <Timer1_ICU_EdgeSelection>:

STD_Return Timer1_ICU_EdgeSelection(ICU_Edge_Control_t State) //for Edge Selection which ICU will used
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <Timer1_ICU_EdgeSelection+0x6>
    1448:	00 d0       	rcall	.+0      	; 0x144a <Timer1_ICU_EdgeSelection+0x8>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3c 83       	std	Y+4, r19	; 0x04
    1458:	2b 83       	std	Y+3, r18	; 0x03
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	69 f0       	breq	.+26     	; 0x147c <Timer1_ICU_EdgeSelection+0x3a>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	21 30       	cpi	r18, 0x01	; 1
    1468:	31 05       	cpc	r19, r1
    146a:	81 f4       	brne	.+32     	; 0x148c <Timer1_ICU_EdgeSelection+0x4a>
	{
		case ICU_Rising_Edge:
			SET_BIT(TCCR1B,ICES1);
    146c:	ae e4       	ldi	r26, 0x4E	; 78
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ee e4       	ldi	r30, 0x4E	; 78
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 64       	ori	r24, 0x40	; 64
    1478:	8c 93       	st	X, r24
    147a:	0a c0       	rjmp	.+20     	; 0x1490 <Timer1_ICU_EdgeSelection+0x4e>
			break;
		case ICU_Falling_Edge:
			CLEAR_BIT(TCCR1B,ICES1);
    147c:	ae e4       	ldi	r26, 0x4E	; 78
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ee e4       	ldi	r30, 0x4E	; 78
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8f 7b       	andi	r24, 0xBF	; 191
    1488:	8c 93       	st	X, r24
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <Timer1_ICU_EdgeSelection+0x4e>
			break;
		default:
			return E_OK;
    148c:	1a 82       	std	Y+2, r1	; 0x02
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <Timer1_ICU_EdgeSelection+0x52>
	}
	return E_NOK;
    1490:	31 e0       	ldi	r19, 0x01	; 1
    1492:	3a 83       	std	Y+2, r19	; 0x02
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <Timer1_ICU_Interrupt>:
STD_Return Timer1_ICU_Interrupt(ICU_Interrupt_State State) //Enable or Disable ICU interrupt
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <Timer1_ICU_Interrupt+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <Timer1_ICU_Interrupt+0x8>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3c 83       	std	Y+4, r19	; 0x04
    14ba:	2b 83       	std	Y+3, r18	; 0x03
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	31 f0       	breq	.+12     	; 0x14d0 <Timer1_ICU_Interrupt+0x2c>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	21 30       	cpi	r18, 0x01	; 1
    14ca:	31 05       	cpc	r19, r1
    14cc:	49 f0       	breq	.+18     	; 0x14e0 <Timer1_ICU_Interrupt+0x3c>
    14ce:	10 c0       	rjmp	.+32     	; 0x14f0 <Timer1_ICU_Interrupt+0x4c>
	{
	//receive the ICU  result on the ICP pin => pin 6 portD
	case Enable_ICU_Interrupt:
		//Enable Input Capture Interrupt
		SET_BIT(TIMSK,TICIE1);
    14d0:	a9 e5       	ldi	r26, 0x59	; 89
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e9 e5       	ldi	r30, 0x59	; 89
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	80 62       	ori	r24, 0x20	; 32
    14dc:	8c 93       	st	X, r24
    14de:	0a c0       	rjmp	.+20     	; 0x14f4 <Timer1_ICU_Interrupt+0x50>
		break;
	case Disable_ICU_Interrupt:
		//disable Input Capture Interrupt
		CLEAR_BIT(TIMSK,TICIE1);
    14e0:	a9 e5       	ldi	r26, 0x59	; 89
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e9 e5       	ldi	r30, 0x59	; 89
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 7d       	andi	r24, 0xDF	; 223
    14ec:	8c 93       	st	X, r24
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <Timer1_ICU_Interrupt+0x50>
		break;
	default:
		return E_OK;
    14f0:	1a 82       	std	Y+2, r1	; 0x02
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <Timer1_ICU_Interrupt+0x54>
	}
return E_NOK;
    14f4:	31 e0       	ldi	r19, 0x01	; 1
    14f6:	3a 83       	std	Y+2, r19	; 0x02
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <Timer1_SetICR1_TopValue>:

void Timer1_SetICR1_TopValue(u16 Top_Value) //ICR1
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <Timer1_SetICR1_TopValue+0x6>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Top_Value;
    1516:	e6 e4       	ldi	r30, 0x46	; 70
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <Timer1_Read_ICR_Value>:

void Timer1_Read_ICR_Value(u16  *value)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <Timer1_Read_ICR_Value+0x6>
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
	//Store value of InputCaptureRegister & get it back
	*value=ICR1;
    153a:	e6 e4       	ldi	r30, 0x46	; 70
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <ICU_CallBack_Func>:
void ICU_CallBack_Func(void(*PTR_Func)(void))
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <ICU_CallBack_Func+0x6>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	9a 83       	std	Y+2, r25	; 0x02
    1560:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_CallBackFunc=PTR_Func;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	90 93 91 01 	sts	0x0191, r25
    156a:	80 93 90 01 	sts	0x0190, r24
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <Timer1_CallBack>:

void Timer1_CallBack(void (*FUNC_PTR)(void))
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <Timer1_CallBack+0x6>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer1_Normal_Timer_Mode
	Timer1_OVF_CallBack_Func = FUNC_PTR;
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	90 93 8b 01 	sts	0x018B, r25
    158e:	80 93 8a 01 	sts	0x018A, r24
		Timer1_CTC_A_CallBack_Func = FUNC_PTR;
	#elif defined TIMER1_ChannelB
		Timer1_CTC_B_CallBack_Func = FUNC_PTR;
	#endif
		#endif
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <__vector_9>:
//ISR of OVF
ISR(TIMER1_OVF_vect)
{
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	0f 92       	push	r0
    15a4:	11 24       	eor	r1, r1
    15a6:	2f 93       	push	r18
    15a8:	3f 93       	push	r19
    15aa:	4f 93       	push	r20
    15ac:	5f 93       	push	r21
    15ae:	6f 93       	push	r22
    15b0:	7f 93       	push	r23
    15b2:	8f 93       	push	r24
    15b4:	9f 93       	push	r25
    15b6:	af 93       	push	r26
    15b8:	bf 93       	push	r27
    15ba:	ef 93       	push	r30
    15bc:	ff 93       	push	r31
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	Timer1_OVF_CallBack_Func();
    15c6:	e0 91 8a 01 	lds	r30, 0x018A
    15ca:	f0 91 8b 01 	lds	r31, 0x018B
    15ce:	09 95       	icall
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	ff 91       	pop	r31
    15d6:	ef 91       	pop	r30
    15d8:	bf 91       	pop	r27
    15da:	af 91       	pop	r26
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	7f 91       	pop	r23
    15e2:	6f 91       	pop	r22
    15e4:	5f 91       	pop	r21
    15e6:	4f 91       	pop	r20
    15e8:	3f 91       	pop	r19
    15ea:	2f 91       	pop	r18
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	0f 90       	pop	r0
    15f2:	1f 90       	pop	r1
    15f4:	18 95       	reti

000015f6 <__vector_7>:
//ISR of COMP_ChannelA
ISR(TIMER1_COMPA_vect)
{
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_A_CallBack_Func();
    1620:	e0 91 8c 01 	lds	r30, 0x018C
    1624:	f0 91 8d 01 	lds	r31, 0x018D
    1628:	09 95       	icall
}
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	ff 91       	pop	r31
    1630:	ef 91       	pop	r30
    1632:	bf 91       	pop	r27
    1634:	af 91       	pop	r26
    1636:	9f 91       	pop	r25
    1638:	8f 91       	pop	r24
    163a:	7f 91       	pop	r23
    163c:	6f 91       	pop	r22
    163e:	5f 91       	pop	r21
    1640:	4f 91       	pop	r20
    1642:	3f 91       	pop	r19
    1644:	2f 91       	pop	r18
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	0f 90       	pop	r0
    164c:	1f 90       	pop	r1
    164e:	18 95       	reti

00001650 <__vector_8>:
//ISR of COMP_ChannelB
ISR(TIMER1_COMPB_vect)
{
    1650:	1f 92       	push	r1
    1652:	0f 92       	push	r0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	0f 92       	push	r0
    1658:	11 24       	eor	r1, r1
    165a:	2f 93       	push	r18
    165c:	3f 93       	push	r19
    165e:	4f 93       	push	r20
    1660:	5f 93       	push	r21
    1662:	6f 93       	push	r22
    1664:	7f 93       	push	r23
    1666:	8f 93       	push	r24
    1668:	9f 93       	push	r25
    166a:	af 93       	push	r26
    166c:	bf 93       	push	r27
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_B_CallBack_Func();
    167a:	e0 91 8e 01 	lds	r30, 0x018E
    167e:	f0 91 8f 01 	lds	r31, 0x018F
    1682:	09 95       	icall
}
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	ff 91       	pop	r31
    168a:	ef 91       	pop	r30
    168c:	bf 91       	pop	r27
    168e:	af 91       	pop	r26
    1690:	9f 91       	pop	r25
    1692:	8f 91       	pop	r24
    1694:	7f 91       	pop	r23
    1696:	6f 91       	pop	r22
    1698:	5f 91       	pop	r21
    169a:	4f 91       	pop	r20
    169c:	3f 91       	pop	r19
    169e:	2f 91       	pop	r18
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	0f 90       	pop	r0
    16a6:	1f 90       	pop	r1
    16a8:	18 95       	reti

000016aa <__vector_6>:
//ISR of ICU
ISR(TIMER1_ICU_vect)
{
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	2f 93       	push	r18
    16b6:	3f 93       	push	r19
    16b8:	4f 93       	push	r20
    16ba:	5f 93       	push	r21
    16bc:	6f 93       	push	r22
    16be:	7f 93       	push	r23
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	af 93       	push	r26
    16c6:	bf 93       	push	r27
    16c8:	ef 93       	push	r30
    16ca:	ff 93       	push	r31
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	Timer1_ICU_CallBackFunc();
    16d4:	e0 91 90 01 	lds	r30, 0x0190
    16d8:	f0 91 91 01 	lds	r31, 0x0191
    16dc:	09 95       	icall
}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	0f 90       	pop	r0
    1700:	1f 90       	pop	r1
    1702:	18 95       	reti

00001704 <Timer2_init>:
void Timer2_init(void)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
		#elif defined Timer2_CLK_External_RisingEdge_CounterMode //On Pin T2
				SET_BIT(TCCR2,CS20);
				SET_BIT(TCCR2,CS21);
				SET_BIT(TCCR2,CS22);
		#endif
}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <Timer2_SetValue>:
void Timer2_SetValue(u8 Value)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	0f 92       	push	r0
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer2_PhaseCorrect_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer2_Fast_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#endif
}
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <Timer2_CallBack>:

void Timer2_CallBack(void (*FUNC_PTR)(void))
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <Timer2_CallBack+0x6>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer2_Normal_Timer_Mode
		Timer2_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer2_CTC_Timer_Mode
		Timer2_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
    1748:	2f 93       	push	r18
    174a:	3f 93       	push	r19
    174c:	4f 93       	push	r20
    174e:	5f 93       	push	r21
    1750:	6f 93       	push	r22
    1752:	7f 93       	push	r23
    1754:	8f 93       	push	r24
    1756:	9f 93       	push	r25
    1758:	af 93       	push	r26
    175a:	bf 93       	push	r27
    175c:	ef 93       	push	r30
    175e:	ff 93       	push	r31
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
	Timer2_OVF_CallBack_Func();
    1768:	e0 91 92 01 	lds	r30, 0x0192
    176c:	f0 91 93 01 	lds	r31, 0x0193
    1770:	09 95       	icall
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	ff 91       	pop	r31
    1778:	ef 91       	pop	r30
    177a:	bf 91       	pop	r27
    177c:	af 91       	pop	r26
    177e:	9f 91       	pop	r25
    1780:	8f 91       	pop	r24
    1782:	7f 91       	pop	r23
    1784:	6f 91       	pop	r22
    1786:	5f 91       	pop	r21
    1788:	4f 91       	pop	r20
    178a:	3f 91       	pop	r19
    178c:	2f 91       	pop	r18
    178e:	0f 90       	pop	r0
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	0f 90       	pop	r0
    1794:	1f 90       	pop	r1
    1796:	18 95       	reti

00001798 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1798:	1f 92       	push	r1
    179a:	0f 92       	push	r0
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	0f 92       	push	r0
    17a0:	11 24       	eor	r1, r1
    17a2:	2f 93       	push	r18
    17a4:	3f 93       	push	r19
    17a6:	4f 93       	push	r20
    17a8:	5f 93       	push	r21
    17aa:	6f 93       	push	r22
    17ac:	7f 93       	push	r23
    17ae:	8f 93       	push	r24
    17b0:	9f 93       	push	r25
    17b2:	af 93       	push	r26
    17b4:	bf 93       	push	r27
    17b6:	ef 93       	push	r30
    17b8:	ff 93       	push	r31
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
	Timer2_CTC_CallBack_Func();
    17c2:	e0 91 94 01 	lds	r30, 0x0194
    17c6:	f0 91 95 01 	lds	r31, 0x0195
    17ca:	09 95       	icall
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	ff 91       	pop	r31
    17d2:	ef 91       	pop	r30
    17d4:	bf 91       	pop	r27
    17d6:	af 91       	pop	r26
    17d8:	9f 91       	pop	r25
    17da:	8f 91       	pop	r24
    17dc:	7f 91       	pop	r23
    17de:	6f 91       	pop	r22
    17e0:	5f 91       	pop	r21
    17e2:	4f 91       	pop	r20
    17e4:	3f 91       	pop	r19
    17e6:	2f 91       	pop	r18
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	0f 90       	pop	r0
    17ee:	1f 90       	pop	r1
    17f0:	18 95       	reti

000017f2 <SPI_init>:
#include "SPI.h"

static void (*STC_Callback_Func)(void);

void SPI_init(void)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(SPCR,SPE);
    17fa:	ad e2       	ldi	r26, 0x2D	; 45
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ed e2       	ldi	r30, 0x2D	; 45
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 64       	ori	r24, 0x40	; 64
    1806:	8c 93       	st	X, r24
	    #if defined DataOrder_MSB
	    CLEAR_BIT(SPCR,DORD);	//leave it cleared by default or CLEAR_BIT
	    #elif defined DataOrder_LSB
	    SET_BIT(SPCR,DORD);
    1808:	ad e2       	ldi	r26, 0x2D	; 45
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ed e2       	ldi	r30, 0x2D	; 45
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	80 62       	ori	r24, 0x20	; 32
    1814:	8c 93       	st	X, r24
	    #endif

	    #if defined SCK_FREQUENCY_4
	    //leave it cleared by default
	    #elif defined SCK_FREQUENCY_16
	    SET_BIT(SPCR,SPR0);
    1816:	ad e2       	ldi	r26, 0x2D	; 45
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ed e2       	ldi	r30, 0x2D	; 45
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	81 60       	ori	r24, 0x01	; 1
    1822:	8c 93       	st	X, r24
	    SET_BIT(SPCR,SPR0);
	    SET_BIT(SPCR,SPR1);
	    #endif

	    #if defined Leading_Edge_Rising_Trailling_Edge_Falling
			CLEAR_BIT(SPCR,CPOL);
    1824:	ad e2       	ldi	r26, 0x2D	; 45
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ed e2       	ldi	r30, 0x2D	; 45
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	87 7f       	andi	r24, 0xF7	; 247
    1830:	8c 93       	st	X, r24
			SET_BIT(SPCR,CPOL);
		#endif

		//Clock phase selection
		#if defined Receive_First_Send_Second
			CLEAR_BIT(SPCR,CPHA);
    1832:	ad e2       	ldi	r26, 0x2D	; 45
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ed e2       	ldi	r30, 0x2D	; 45
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8b 7f       	andi	r24, 0xFB	; 251
    183e:	8c 93       	st	X, r24
		#elif defined Send_First_Receive_Second
			SET_BIT(SPCR,CPHA);
		#endif
}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <SPI_Interrupt_State>:

STD_Return SPI_Interrupt_State(SPI_Interrupt_State_t state)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <SPI_Interrupt_State+0x6>
    184c:	00 d0       	rcall	.+0      	; 0x184e <SPI_Interrupt_State+0x8>
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3c 83       	std	Y+4, r19	; 0x04
    185c:	2b 83       	std	Y+3, r18	; 0x03
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	31 f0       	breq	.+12     	; 0x1872 <SPI_Interrupt_State+0x2c>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	21 30       	cpi	r18, 0x01	; 1
    186c:	31 05       	cpc	r19, r1
    186e:	49 f0       	breq	.+18     	; 0x1882 <SPI_Interrupt_State+0x3c>
    1870:	10 c0       	rjmp	.+32     	; 0x1892 <SPI_Interrupt_State+0x4c>
		{
			case SPI_Interrupt_Enable:
				SET_BIT(SPCR,SPIE);
    1872:	ad e2       	ldi	r26, 0x2D	; 45
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ed e2       	ldi	r30, 0x2D	; 45
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	80 68       	ori	r24, 0x80	; 128
    187e:	8c 93       	st	X, r24
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <SPI_Interrupt_State+0x50>
				break;
			case SPI_Interrupt_Disable:
				CLEAR_BIT(SPCR,SPIE);
    1882:	ad e2       	ldi	r26, 0x2D	; 45
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ed e2       	ldi	r30, 0x2D	; 45
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 77       	andi	r24, 0x7F	; 127
    188e:	8c 93       	st	X, r24
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <SPI_Interrupt_State+0x50>
				break;
			default:
		       return E_OK;
    1892:	1a 82       	std	Y+2, r1	; 0x02
    1894:	02 c0       	rjmp	.+4      	; 0x189a <SPI_Interrupt_State+0x54>
		}
	return E_NOK;
    1896:	31 e0       	ldi	r19, 0x01	; 1
    1898:	3a 83       	std	Y+2, r19	; 0x02
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <SPI_MasterSlave_Selection>:

STD_Return SPI_MasterSlave_Selection(SPI_Mode_Selection_t mode)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <SPI_MasterSlave_Selection+0x6>
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <SPI_MasterSlave_Selection+0x8>
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3c 83       	std	Y+4, r19	; 0x04
    18c0:	2b 83       	std	Y+3, r18	; 0x03
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	09 f1       	breq	.+66     	; 0x190c <SPI_MasterSlave_Selection+0x62>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	21 30       	cpi	r18, 0x01	; 1
    18d0:	31 05       	cpc	r19, r1
    18d2:	c1 f5       	brne	.+112    	; 0x1944 <SPI_MasterSlave_Selection+0x9a>
		{
    		case SPI_MASTER:
				SET_BIT(SPCR,MSTR);
    18d4:	ad e2       	ldi	r26, 0x2D	; 45
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	ed e2       	ldi	r30, 0x2D	; 45
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 61       	ori	r24, 0x10	; 16
    18e0:	8c 93       	st	X, r24
				DIO_SetPinDirection(MISO_PORT,MISO_PIN,DIO_INPUT);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	66 e0       	ldi	r22, 0x06	; 6
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
				DIO_SetPinDirection(MOSI_PORT,MOSI_PIN,DIO_OUTPUT);
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	65 e0       	ldi	r22, 0x05	; 5
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
				DIO_SetPinDirection(SCK_PORT,SCK_PIN,DIO_OUTPUT);
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	67 e0       	ldi	r22, 0x07	; 7
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
				/*to keep master is master must have always input high except that it will be slave*/
				DIO_EnablePullup(SS_PORT,SS_PIN,ENABLE_PullUp);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	64 e0       	ldi	r22, 0x04	; 4
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	0e 94 5e 15 	call	0x2abc	; 0x2abc <DIO_EnablePullup>
    190a:	1e c0       	rjmp	.+60     	; 0x1948 <SPI_MasterSlave_Selection+0x9e>

    				break;
			case SPI_SLAVE:
				CLEAR_BIT(SPCR,MSTR);
    190c:	ad e2       	ldi	r26, 0x2D	; 45
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ed e2       	ldi	r30, 0x2D	; 45
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	8f 7e       	andi	r24, 0xEF	; 239
    1918:	8c 93       	st	X, r24
				DIO_SetPinDirection(MOSI_PORT,MOSI_PIN,DIO_INPUT);
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	65 e0       	ldi	r22, 0x05	; 5
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
				DIO_SetPinDirection(SCK_PORT,SCK_PIN,DIO_INPUT);
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	67 e0       	ldi	r22, 0x07	; 7
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
				DIO_SetPinDirection(MISO_PORT,MISO_PIN,DIO_OUTPUT);
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	66 e0       	ldi	r22, 0x06	; 6
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
				/*to keep all slaves unselected till put on it LOW*/
				DIO_EnablePullup(SS_PORT,SS_PIN,ENABLE_PullUp);
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	64 e0       	ldi	r22, 0x04	; 4
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <DIO_EnablePullup>
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <SPI_MasterSlave_Selection+0x9e>

				break;

			default:
				return E_OK;
    1944:	1a 82       	std	Y+2, r1	; 0x02
    1946:	02 c0       	rjmp	.+4      	; 0x194c <SPI_MasterSlave_Selection+0xa2>
		}
	return E_NOK;
    1948:	31 e0       	ldi	r19, 0x01	; 1
    194a:	3a 83       	std	Y+2, r19	; 0x02
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <SPI_Transmit_Data>:


void SPI_Transmit_Data(u8 Trasnsmitted_Data)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	0f 92       	push	r0
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinValue(SS_PORT,SS_PIN,DIO_LOW); //ENABLE SLAVE
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	64 e0       	ldi	r22, 0x04	; 4
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
	SPDR= Trasnsmitted_Data;
    1972:	ef e2       	ldi	r30, 0x2F	; 47
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	80 83       	st	Z, r24
	while (IS_BIT_CLEAR(SPSR, SPIF));
    197a:	ee e2       	ldi	r30, 0x2E	; 46
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	88 23       	and	r24, r24
    1982:	dc f7       	brge	.-10     	; 0x197a <SPI_Transmit_Data+0x1e>
	DIO_SetPinValue(SS_PORT,SS_PIN,DIO_HIGH); //DIABLE SLAVE
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	64 e0       	ldi	r22, 0x04	; 4
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>

}
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <SPI_Receive_Data>:
void SPI_Receive_Data(u8 *Received_Data)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <SPI_Receive_Data+0x6>
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01
	while (IS_BIT_CLEAR(SPSR, SPIF));
    19a4:	ee e2       	ldi	r30, 0x2E	; 46
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	88 23       	and	r24, r24
    19ac:	dc f7       	brge	.-10     	; 0x19a4 <SPI_Receive_Data+0xe>
	*Received_Data=SPDR;
    19ae:	ef e2       	ldi	r30, 0x2F	; 47
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	e9 81       	ldd	r30, Y+1	; 0x01
    19b6:	fa 81       	ldd	r31, Y+2	; 0x02
    19b8:	80 83       	st	Z, r24
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <SPI_TranRec_Data>:

void SPI_TranRec_Data(u8 TransmitData,u8 *ReceiveData)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <SPI_TranRec_Data+0x6>
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	7b 83       	std	Y+3, r23	; 0x03
    19d4:	6a 83       	std	Y+2, r22	; 0x02
	/*send data*/
	SPDR= TransmitData;
    19d6:	ef e2       	ldi	r30, 0x2F	; 47
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	80 83       	st	Z, r24
	/*wait till transfer completed*/
	while (GET_BIT(SPSR, SPIF)==0);
    19de:	ee e2       	ldi	r30, 0x2E	; 46
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	88 23       	and	r24, r24
    19e6:	dc f7       	brge	.-10     	; 0x19de <SPI_TranRec_Data+0x1a>
	/*receive data*/
	*ReceiveData=SPDR;
    19e8:	ef e2       	ldi	r30, 0x2F	; 47
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	ea 81       	ldd	r30, Y+2	; 0x02
    19f0:	fb 81       	ldd	r31, Y+3	; 0x03
    19f2:	80 83       	st	Z, r24
}
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <STC_Callback>:

void STC_Callback(void(*func_ptr)(void))
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <STC_Callback+0x6>
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	9a 83       	std	Y+2, r25	; 0x02
    1a0c:	89 83       	std	Y+1, r24	; 0x01
	STC_Callback_Func=func_ptr;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	9a 81       	ldd	r25, Y+2	; 0x02
    1a12:	90 93 97 01 	sts	0x0197, r25
    1a16:	80 93 96 01 	sts	0x0196, r24
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <__vector_12>:

ISR(SPI_STC_vect)
{
    1a24:	1f 92       	push	r1
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	0f 92       	push	r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	af 93       	push	r26
    1a40:	bf 93       	push	r27
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
	(*STC_Callback_Func)();
    1a4e:	e0 91 96 01 	lds	r30, 0x0196
    1a52:	f0 91 97 01 	lds	r31, 0x0197
    1a56:	09 95       	icall
}
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	ff 91       	pop	r31
    1a5e:	ef 91       	pop	r30
    1a60:	bf 91       	pop	r27
    1a62:	af 91       	pop	r26
    1a64:	9f 91       	pop	r25
    1a66:	8f 91       	pop	r24
    1a68:	7f 91       	pop	r23
    1a6a:	6f 91       	pop	r22
    1a6c:	5f 91       	pop	r21
    1a6e:	4f 91       	pop	r20
    1a70:	3f 91       	pop	r19
    1a72:	2f 91       	pop	r18
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <I2C_init>:
 *      Author: Seko
 */
#include "I2C.h"

void I2C_init(u8 address)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	0f 92       	push	r0
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	89 83       	std	Y+1, r24	; 0x01
	#if defined Master_Mode
	#if defined Prescaler_0
		CLEAR_BIT(TWSR,TWPS0);
    1a8a:	a1 e2       	ldi	r26, 0x21	; 33
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e1 e2       	ldi	r30, 0x21	; 33
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8e 7f       	andi	r24, 0xFE	; 254
    1a96:	8c 93       	st	X, r24
		CLEAR_BIT(TWSR,TWPS1);
    1a98:	a1 e2       	ldi	r26, 0x21	; 33
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e1 e2       	ldi	r30, 0x21	; 33
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8d 7f       	andi	r24, 0xFD	; 253
    1aa4:	8c 93       	st	X, r24
		SET_BIT(TWAR,TWGCE);
		#elif Slave_defined Not_Recognize_GeneralCall
		CLEAR_BIT(TWAR,TWGCE);
#endif
		#endif
	SET_BIT(TWCR,TWEN);
    1aa6:	a6 e5       	ldi	r26, 0x56	; 86
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e6 e5       	ldi	r30, 0x56	; 86
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	84 60       	ori	r24, 0x04	; 4
    1ab2:	8c 93       	st	X, r24
}
    1ab4:	0f 90       	pop	r0
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <I2C_Interrupt_Enable>:

STD_Return I2C_Interrupt_Enable(I2C_Interrupt_Enable_t state)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <I2C_Interrupt_Enable+0x6>
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <I2C_Interrupt_Enable+0x8>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	3c 83       	std	Y+4, r19	; 0x04
    1ad2:	2b 83       	std	Y+3, r18	; 0x03
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	31 f0       	breq	.+12     	; 0x1ae8 <I2C_Interrupt_Enable+0x2c>
    1adc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ade:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae0:	21 30       	cpi	r18, 0x01	; 1
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	49 f0       	breq	.+18     	; 0x1af8 <I2C_Interrupt_Enable+0x3c>
    1ae6:	10 c0       	rjmp	.+32     	; 0x1b08 <I2C_Interrupt_Enable+0x4c>
	{
		case I2C_Enable:
			SET_BIT(TWCR,TWIE);
    1ae8:	a6 e5       	ldi	r26, 0x56	; 86
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e6 e5       	ldi	r30, 0x56	; 86
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	81 60       	ori	r24, 0x01	; 1
    1af4:	8c 93       	st	X, r24
    1af6:	0a c0       	rjmp	.+20     	; 0x1b0c <I2C_Interrupt_Enable+0x50>
			break;
		case I2C_Disable:
			CLEAR_BIT(TWCR,TWIE);
    1af8:	a6 e5       	ldi	r26, 0x56	; 86
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e6 e5       	ldi	r30, 0x56	; 86
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8e 7f       	andi	r24, 0xFE	; 254
    1b04:	8c 93       	st	X, r24
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <I2C_Interrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    1b08:	1a 82       	std	Y+2, r1	; 0x02
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <I2C_Interrupt_Enable+0x54>
	}
	return E_NOK;
    1b0c:	31 e0       	ldi	r19, 0x01	; 1
    1b0e:	3a 83       	std	Y+2, r19	; 0x02
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <I2C_ACK_Mode>:

STD_Return I2C_ACK_Mode(I2C_ACK_State_t state)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <I2C_ACK_Mode+0x6>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <I2C_ACK_Mode+0x8>
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	3c 83       	std	Y+4, r19	; 0x04
    1b36:	2b 83       	std	Y+3, r18	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	31 f0       	breq	.+12     	; 0x1b4c <I2C_ACK_Mode+0x2c>
    1b40:	2b 81       	ldd	r18, Y+3	; 0x03
    1b42:	3c 81       	ldd	r19, Y+4	; 0x04
    1b44:	21 30       	cpi	r18, 0x01	; 1
    1b46:	31 05       	cpc	r19, r1
    1b48:	49 f0       	breq	.+18     	; 0x1b5c <I2C_ACK_Mode+0x3c>
    1b4a:	10 c0       	rjmp	.+32     	; 0x1b6c <I2C_ACK_Mode+0x4c>
	{
		case I2C_ACK:
			SET_BIT(TWCR,TWEA);
    1b4c:	a6 e5       	ldi	r26, 0x56	; 86
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e6 e5       	ldi	r30, 0x56	; 86
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 64       	ori	r24, 0x40	; 64
    1b58:	8c 93       	st	X, r24
    1b5a:	0a c0       	rjmp	.+20     	; 0x1b70 <I2C_ACK_Mode+0x50>
			break;
		case I2C_NACK:
			CLEAR_BIT(TWCR,TWEA);
    1b5c:	a6 e5       	ldi	r26, 0x56	; 86
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e6 e5       	ldi	r30, 0x56	; 86
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	8f 7b       	andi	r24, 0xBF	; 191
    1b68:	8c 93       	st	X, r24
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <I2C_ACK_Mode+0x50>
			break;
		default:
			return E_OK;
    1b6c:	1a 82       	std	Y+2, r1	; 0x02
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <I2C_ACK_Mode+0x54>
	}
	return E_NOK;
    1b70:	31 e0       	ldi	r19, 0x01	; 1
    1b72:	3a 83       	std	Y+2, r19	; 0x02
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <I2C_Send_Condtion>:

STD_Return I2C_Send_Condtion(I2C_Condition_State_t State)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <I2C_Send_Condtion+0x6>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <I2C_Send_Condtion+0x8>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3c 83       	std	Y+4, r19	; 0x04
    1b9a:	2b 83       	std	Y+3, r18	; 0x03
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	51 f1       	breq	.+84     	; 0x1bfa <I2C_Send_Condtion+0x76>
    1ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba8:	3c 81       	ldd	r19, Y+4	; 0x04
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <I2C_Send_Condtion+0x2e>
    1bb0:	43 c0       	rjmp	.+134    	; 0x1c38 <I2C_Send_Condtion+0xb4>
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <I2C_Send_Condtion+0x38>
    1bba:	4d c0       	rjmp	.+154    	; 0x1c56 <I2C_Send_Condtion+0xd2>
	{
		case I2C_Start_Condition:
			/* Send Start condition*/
			SET_BIT(TWCR,TWSTA);
    1bbc:	a6 e5       	ldi	r26, 0x56	; 86
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e6 e5       	ldi	r30, 0x56	; 86
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	80 62       	ori	r24, 0x20	; 32
    1bc8:	8c 93       	st	X, r24
			/* Clear the interrupt flag to operate the start condition*/
			SET_BIT(TWCR,TWINT);
    1bca:	a6 e5       	ldi	r26, 0x56	; 86
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e6 e5       	ldi	r30, 0x56	; 86
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 68       	ori	r24, 0x80	; 128
    1bd6:	8c 93       	st	X, r24
			/*wait until the interrupt flag raise again and previous operation is completed*/
			while((GET_BIT(TWCR,TWINT))==0);
    1bd8:	e6 e5       	ldi	r30, 0x56	; 86
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	88 23       	and	r24, r24
    1be0:	dc f7       	brge	.-10     	; 0x1bd8 <I2C_Send_Condtion+0x54>
			/* check operation status register*/
			if ((TWSR & Mask_Selected_Bit) != START_ACK)
    1be2:	e1 e2       	ldi	r30, 0x21	; 33
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	88 7f       	andi	r24, 0xF8	; 248
    1bee:	90 70       	andi	r25, 0x00	; 0
    1bf0:	88 30       	cpi	r24, 0x08	; 8
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	91 f1       	breq	.+100    	; 0x1c5a <I2C_Send_Condtion+0xd6>
			{
				return E_OK;
    1bf6:	1a 82       	std	Y+2, r1	; 0x02
    1bf8:	32 c0       	rjmp	.+100    	; 0x1c5e <I2C_Send_Condtion+0xda>
			}
			break;
		case I2C_RepeatedStart_Condition:
			/* Send Repeated Start condition*/
			SET_BIT(TWCR,TWSTA);
    1bfa:	a6 e5       	ldi	r26, 0x56	; 86
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e6 e5       	ldi	r30, 0x56	; 86
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	80 62       	ori	r24, 0x20	; 32
    1c06:	8c 93       	st	X, r24
			/* Clear the interrupt flag to operate the start condition*/
			SET_BIT(TWCR,TWINT);
    1c08:	a6 e5       	ldi	r26, 0x56	; 86
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e6 e5       	ldi	r30, 0x56	; 86
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	80 68       	ori	r24, 0x80	; 128
    1c14:	8c 93       	st	X, r24
			/*wait until the interrupt flag raise again and previous operation is completed*/
			while((GET_BIT(TWCR,TWINT))==0);
    1c16:	e6 e5       	ldi	r30, 0x56	; 86
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 23       	and	r24, r24
    1c1e:	dc f7       	brge	.-10     	; 0x1c16 <I2C_Send_Condtion+0x92>
			/* check operation status register*/
			if ((TWSR & Mask_Selected_Bit) != REP_START_ACK)
    1c20:	e1 e2       	ldi	r30, 0x21	; 33
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	88 7f       	andi	r24, 0xF8	; 248
    1c2c:	90 70       	andi	r25, 0x00	; 0
    1c2e:	80 31       	cpi	r24, 0x10	; 16
    1c30:	91 05       	cpc	r25, r1
    1c32:	99 f0       	breq	.+38     	; 0x1c5a <I2C_Send_Condtion+0xd6>
			{
				return E_OK;
    1c34:	1a 82       	std	Y+2, r1	; 0x02
    1c36:	13 c0       	rjmp	.+38     	; 0x1c5e <I2C_Send_Condtion+0xda>
			}
			break;
		case I2C_Stop_Condition:
			SET_BIT(TWCR,TWSTO);
    1c38:	a6 e5       	ldi	r26, 0x56	; 86
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e6 e5       	ldi	r30, 0x56	; 86
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 61       	ori	r24, 0x10	; 16
    1c44:	8c 93       	st	X, r24
			/* Clear the interrupt flag to operate the stop condition*/
			SET_BIT(TWCR,TWINT);
    1c46:	a6 e5       	ldi	r26, 0x56	; 86
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e6 e5       	ldi	r30, 0x56	; 86
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	80 68       	ori	r24, 0x80	; 128
    1c52:	8c 93       	st	X, r24
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <I2C_Send_Condtion+0xd6>
			break;
		default:
			return E_OK;
    1c56:	1a 82       	std	Y+2, r1	; 0x02
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <I2C_Send_Condtion+0xda>
	}
	return E_NOK;
    1c5a:	91 e0       	ldi	r25, 0x01	; 1
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <I2C_Slave_Address_Mode>:

STD_Return I2C_Slave_Address_Mode(I2C_SlaveAddress_State_t State,u8 address)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <I2C_Slave_Address_Mode+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <I2C_Slave_Address_Mode+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	6a 83       	std	Y+2, r22	; 0x02
	switch (State)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3d 83       	std	Y+5, r19	; 0x05
    1c88:	2c 83       	std	Y+4, r18	; 0x04
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	31 f0       	breq	.+12     	; 0x1c9e <I2C_Slave_Address_Mode+0x30>
    1c92:	2c 81       	ldd	r18, Y+4	; 0x04
    1c94:	3d 81       	ldd	r19, Y+5	; 0x05
    1c96:	21 30       	cpi	r18, 0x01	; 1
    1c98:	31 05       	cpc	r19, r1
    1c9a:	29 f1       	breq	.+74     	; 0x1ce6 <I2C_Slave_Address_Mode+0x78>
    1c9c:	48 c0       	rjmp	.+144    	; 0x1d2e <I2C_Slave_Address_Mode+0xc0>
	{
		case I2C_SlaveAddress_Read:
			SET_BIT(TWDR,Read_Write);
    1c9e:	a3 e2       	ldi	r26, 0x23	; 35
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e3 e2       	ldi	r30, 0x23	; 35
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	81 60       	ori	r24, 0x01	; 1
    1caa:	8c 93       	st	X, r24
			/*Set the Slave Address in the MSB 7 bits in data register*/
			TWDR = address << 1;
    1cac:	e3 e2       	ldi	r30, 0x23	; 35
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	88 0f       	add	r24, r24
    1cb4:	80 83       	st	Z, r24
			/* Clear the interrupt flag to operate the Slave Start Read*/
			SET_BIT(TWCR,TWINT);
    1cb6:	a6 e5       	ldi	r26, 0x56	; 86
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e6 e5       	ldi	r30, 0x56	; 86
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	80 68       	ori	r24, 0x80	; 128
    1cc2:	8c 93       	st	X, r24
			/*wait until the interrupt flag raise again and previous operation is completed*/
			while((GET_BIT(TWCR,TWINT))==0);
    1cc4:	e6 e5       	ldi	r30, 0x56	; 86
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 23       	and	r24, r24
    1ccc:	dc f7       	brge	.-10     	; 0x1cc4 <I2C_Slave_Address_Mode+0x56>
#if defined Status_With_ACK
			/* check operation status register*/
			if ((TWSR & Mask_Selected_Bit) != MasterSend_SLA_RDR_ACK)
    1cce:	e1 e2       	ldi	r30, 0x21	; 33
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	88 7f       	andi	r24, 0xF8	; 248
    1cda:	90 70       	andi	r25, 0x00	; 0
    1cdc:	80 34       	cpi	r24, 0x40	; 64
    1cde:	91 05       	cpc	r25, r1
    1ce0:	41 f1       	breq	.+80     	; 0x1d32 <I2C_Slave_Address_Mode+0xc4>
			{
				return E_OK;
    1ce2:	1b 82       	std	Y+3, r1	; 0x03
    1ce4:	28 c0       	rjmp	.+80     	; 0x1d36 <I2C_Slave_Address_Mode+0xc8>
		return E_OK;
	}
#endif
			break;
		case I2C_SlaveAddress_Write:
			CLEAR_BIT(TWDR,Read_Write);
    1ce6:	a3 e2       	ldi	r26, 0x23	; 35
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e3 e2       	ldi	r30, 0x23	; 35
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	8e 7f       	andi	r24, 0xFE	; 254
    1cf2:	8c 93       	st	X, r24
			/*Set the Slave Address in the MSB 7 bits in data register*/
			TWDR = address << 1;
    1cf4:	e3 e2       	ldi	r30, 0x23	; 35
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	88 0f       	add	r24, r24
    1cfc:	80 83       	st	Z, r24
			/* Clear the interrupt flag to operate the start Slave Start Write*/
			SET_BIT(TWCR,TWINT);
    1cfe:	a6 e5       	ldi	r26, 0x56	; 86
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e6 e5       	ldi	r30, 0x56	; 86
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	80 68       	ori	r24, 0x80	; 128
    1d0a:	8c 93       	st	X, r24
			/*wait until the interrupt flag raise again and previous operation is completed*/
			while((GET_BIT(TWCR,TWINT))==0);
    1d0c:	e6 e5       	ldi	r30, 0x56	; 86
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	88 23       	and	r24, r24
    1d14:	dc f7       	brge	.-10     	; 0x1d0c <I2C_Slave_Address_Mode+0x9e>
#if defined Status_With_ACK
			/* check operation status register*/
			if ((TWSR & Mask_Selected_Bit) != MasterSend_SLA_WRR_ACK)
    1d16:	e1 e2       	ldi	r30, 0x21	; 33
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	88 7f       	andi	r24, 0xF8	; 248
    1d22:	90 70       	andi	r25, 0x00	; 0
    1d24:	88 31       	cpi	r24, 0x18	; 24
    1d26:	91 05       	cpc	r25, r1
    1d28:	21 f0       	breq	.+8      	; 0x1d32 <I2C_Slave_Address_Mode+0xc4>
			{
				return E_OK;
    1d2a:	1b 82       	std	Y+3, r1	; 0x03
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <I2C_Slave_Address_Mode+0xc8>
		return E_OK;
	}
#endif
			break;
		default:
			return E_OK;
    1d2e:	1b 82       	std	Y+3, r1	; 0x03
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <I2C_Slave_Address_Mode+0xc8>
	}

	return E_NOK;
    1d32:	31 e0       	ldi	r19, 0x01	; 1
    1d34:	3b 83       	std	Y+3, r19	; 0x03
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <I2C_Master_WriteData_Mode>:

STD_Return I2C_Master_WriteData_Mode(u8 Data)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <I2C_Master_WriteData_Mode+0x6>
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	89 83       	std	Y+1, r24	; 0x01
	/*Write Data byte*/
	TWDR = Data;
    1d54:	e3 e2       	ldi	r30, 0x23	; 35
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	80 83       	st	Z, r24
	/* Clear the interrupt flag to operate the Master Sending Data*/
	SET_BIT(TWCR,TWINT);
    1d5c:	a6 e5       	ldi	r26, 0x56	; 86
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e6 e5       	ldi	r30, 0x56	; 86
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	80 68       	ori	r24, 0x80	; 128
    1d68:	8c 93       	st	X, r24
	/*wait until the interrupt flag rise again and previous operation is completed*/
	while((GET_BIT(TWCR,TWINT))==0);
    1d6a:	e6 e5       	ldi	r30, 0x56	; 86
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	88 23       	and	r24, r24
    1d72:	dc f7       	brge	.-10     	; 0x1d6a <I2C_Master_WriteData_Mode+0x22>
	/* check operation status register*/

#if defined Status_With_ACK
	if ((TWSR & Mask_Selected_Bit) != MasterSend_DataByte_ACK)
    1d74:	e1 e2       	ldi	r30, 0x21	; 33
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	88 7f       	andi	r24, 0xF8	; 248
    1d80:	90 70       	andi	r25, 0x00	; 0
    1d82:	88 32       	cpi	r24, 0x28	; 40
    1d84:	91 05       	cpc	r25, r1
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <I2C_Master_WriteData_Mode+0x44>
	{
		return E_OK;
    1d88:	1a 82       	std	Y+2, r1	; 0x02
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <I2C_Master_WriteData_Mode+0x48>
	if ((TWSR & Mask_Selected_Bit) != MasterSend_DataByte_NACK)
	{
		return E_OK;
	}
#endif
	return E_NOK;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <I2C_Master_ReceiveData_Mode>:
STD_Return I2C_Master_ReceiveData_Mode(u8 *Data)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <I2C_Master_ReceiveData_Mode+0x6>
    1da2:	0f 92       	push	r0
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01
	/* Clear the interrupt flag to operate the Slave Sending data Operation*/
	SET_BIT(TWCR,TWINT);
    1dac:	a6 e5       	ldi	r26, 0x56	; 86
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e6 e5       	ldi	r30, 0x56	; 86
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	80 68       	ori	r24, 0x80	; 128
    1db8:	8c 93       	st	X, r24
	/*wait until the interrupt flag raise again and previous operation is completed*/
	while((GET_BIT(TWCR,TWINT))==0);
    1dba:	e6 e5       	ldi	r30, 0x56	; 86
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	88 23       	and	r24, r24
    1dc2:	dc f7       	brge	.-10     	; 0x1dba <I2C_Master_ReceiveData_Mode+0x1e>

#if defined Status_With_ACK
	/* check operation status register*/
	if ((TWSR & Mask_Selected_Bit) != MasterReceive_DataByte_ACK)
    1dc4:	e1 e2       	ldi	r30, 0x21	; 33
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	88 7f       	andi	r24, 0xF8	; 248
    1dd0:	90 70       	andi	r25, 0x00	; 0
    1dd2:	80 35       	cpi	r24, 0x50	; 80
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	11 f0       	breq	.+4      	; 0x1ddc <I2C_Master_ReceiveData_Mode+0x40>
	{
		return E_OK;
    1dd8:	1b 82       	std	Y+3, r1	; 0x03
    1dda:	08 c0       	rjmp	.+16     	; 0x1dec <I2C_Master_ReceiveData_Mode+0x50>
	}
	else
		{
			/*Read Data byte after flag cleared*/
			 *Data = TWDR;
    1ddc:	e3 e2       	ldi	r30, 0x23	; 35
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	e9 81       	ldd	r30, Y+1	; 0x01
    1de4:	fa 81       	ldd	r31, Y+2	; 0x02
    1de6:	80 83       	st	Z, r24
		/*Read Data byte after flag cleared*/
		 *Data = TWDR;
	}
#endif

	return E_NOK;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	8b 83       	std	Y+3, r24	; 0x03
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <__vector_1>:
static void (*External_Function0)(void);
static void (*External_Function1)(void);
static void (*External_Function2)(void);
/****************************************ISR for INT0*************************************************/
ISR(INT0_Vect)
{
    1dfa:	1f 92       	push	r1
    1dfc:	0f 92       	push	r0
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	0f 92       	push	r0
    1e02:	11 24       	eor	r1, r1
    1e04:	2f 93       	push	r18
    1e06:	3f 93       	push	r19
    1e08:	4f 93       	push	r20
    1e0a:	5f 93       	push	r21
    1e0c:	6f 93       	push	r22
    1e0e:	7f 93       	push	r23
    1e10:	8f 93       	push	r24
    1e12:	9f 93       	push	r25
    1e14:	af 93       	push	r26
    1e16:	bf 93       	push	r27
    1e18:	ef 93       	push	r30
    1e1a:	ff 93       	push	r31
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	(*External_Function0)();
    1e24:	e0 91 98 01 	lds	r30, 0x0198
    1e28:	f0 91 99 01 	lds	r31, 0x0199
    1e2c:	09 95       	icall
}
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	ff 91       	pop	r31
    1e34:	ef 91       	pop	r30
    1e36:	bf 91       	pop	r27
    1e38:	af 91       	pop	r26
    1e3a:	9f 91       	pop	r25
    1e3c:	8f 91       	pop	r24
    1e3e:	7f 91       	pop	r23
    1e40:	6f 91       	pop	r22
    1e42:	5f 91       	pop	r21
    1e44:	4f 91       	pop	r20
    1e46:	3f 91       	pop	r19
    1e48:	2f 91       	pop	r18
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	0f 90       	pop	r0
    1e50:	1f 90       	pop	r1
    1e52:	18 95       	reti

00001e54 <__vector_2>:
/****************************************ISR for INT1*************************************************/
ISR(INT1_Vect)
{
    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	0f 92       	push	r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	2f 93       	push	r18
    1e60:	3f 93       	push	r19
    1e62:	4f 93       	push	r20
    1e64:	5f 93       	push	r21
    1e66:	6f 93       	push	r22
    1e68:	7f 93       	push	r23
    1e6a:	8f 93       	push	r24
    1e6c:	9f 93       	push	r25
    1e6e:	af 93       	push	r26
    1e70:	bf 93       	push	r27
    1e72:	ef 93       	push	r30
    1e74:	ff 93       	push	r31
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
	(*External_Function1)();
    1e7e:	e0 91 9a 01 	lds	r30, 0x019A
    1e82:	f0 91 9b 01 	lds	r31, 0x019B
    1e86:	09 95       	icall
}
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	ff 91       	pop	r31
    1e8e:	ef 91       	pop	r30
    1e90:	bf 91       	pop	r27
    1e92:	af 91       	pop	r26
    1e94:	9f 91       	pop	r25
    1e96:	8f 91       	pop	r24
    1e98:	7f 91       	pop	r23
    1e9a:	6f 91       	pop	r22
    1e9c:	5f 91       	pop	r21
    1e9e:	4f 91       	pop	r20
    1ea0:	3f 91       	pop	r19
    1ea2:	2f 91       	pop	r18
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti

00001eae <__vector_3>:
/****************************************ISR for INT2*************************************************/
ISR(INT2_Vect)
{
    1eae:	1f 92       	push	r1
    1eb0:	0f 92       	push	r0
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	0f 92       	push	r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	2f 93       	push	r18
    1eba:	3f 93       	push	r19
    1ebc:	4f 93       	push	r20
    1ebe:	5f 93       	push	r21
    1ec0:	6f 93       	push	r22
    1ec2:	7f 93       	push	r23
    1ec4:	8f 93       	push	r24
    1ec6:	9f 93       	push	r25
    1ec8:	af 93       	push	r26
    1eca:	bf 93       	push	r27
    1ecc:	ef 93       	push	r30
    1ece:	ff 93       	push	r31
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	(*External_Function2)();
    1ed8:	e0 91 9c 01 	lds	r30, 0x019C
    1edc:	f0 91 9d 01 	lds	r31, 0x019D
    1ee0:	09 95       	icall
}
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	ff 91       	pop	r31
    1ee8:	ef 91       	pop	r30
    1eea:	bf 91       	pop	r27
    1eec:	af 91       	pop	r26
    1eee:	9f 91       	pop	r25
    1ef0:	8f 91       	pop	r24
    1ef2:	7f 91       	pop	r23
    1ef4:	6f 91       	pop	r22
    1ef6:	5f 91       	pop	r21
    1ef8:	4f 91       	pop	r20
    1efa:	3f 91       	pop	r19
    1efc:	2f 91       	pop	r18
    1efe:	0f 90       	pop	r0
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	0f 90       	pop	r0
    1f04:	1f 90       	pop	r1
    1f06:	18 95       	reti

00001f08 <Enable_Global_Interrupt>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return Enable_Global_Interrupt(Global_Interrupt_State_t state)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <Enable_Global_Interrupt+0x6>
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <Enable_Global_Interrupt+0x8>
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	3c 83       	std	Y+4, r19	; 0x04
    1f1e:	2b 83       	std	Y+3, r18	; 0x03
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	31 f0       	breq	.+12     	; 0x1f34 <Enable_Global_Interrupt+0x2c>
    1f28:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2c:	21 30       	cpi	r18, 0x01	; 1
    1f2e:	31 05       	cpc	r19, r1
    1f30:	49 f0       	breq	.+18     	; 0x1f44 <Enable_Global_Interrupt+0x3c>
    1f32:	10 c0       	rjmp	.+32     	; 0x1f54 <Enable_Global_Interrupt+0x4c>
		{
			case Enable_GIE_Interrupt:
				SET_BIT(SREG,GIE);
    1f34:	af e5       	ldi	r26, 0x5F	; 95
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	ef e5       	ldi	r30, 0x5F	; 95
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 68       	ori	r24, 0x80	; 128
    1f40:	8c 93       	st	X, r24
    1f42:	0a c0       	rjmp	.+20     	; 0x1f58 <Enable_Global_Interrupt+0x50>
				break;
			case Disable_GIE_Interrupt:
				CLEAR_BIT(SREG,GIE);
    1f44:	af e5       	ldi	r26, 0x5F	; 95
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	ef e5       	ldi	r30, 0x5F	; 95
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8f 77       	andi	r24, 0x7F	; 127
    1f50:	8c 93       	st	X, r24
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <Enable_Global_Interrupt+0x50>
				break;
			default:
				return E_OK;
    1f54:	1a 82       	std	Y+2, r1	; 0x02
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <Enable_Global_Interrupt+0x54>
		}
	return E_NOK;
    1f58:	31 e0       	ldi	r19, 0x01	; 1
    1f5a:	3a 83       	std	Y+2, r19	; 0x02
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <Enable_External_INT0>:
/*****************************************************************************************************/
STD_Return Enable_External_INT0(Peripheral_Interrupt_State_t State)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <Enable_External_INT0+0x6>
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <Enable_External_INT0+0x8>
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	3c 83       	std	Y+4, r19	; 0x04
    1f82:	2b 83       	std	Y+3, r18	; 0x03
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	31 f0       	breq	.+12     	; 0x1f98 <Enable_External_INT0+0x2c>
    1f8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f90:	21 30       	cpi	r18, 0x01	; 1
    1f92:	31 05       	cpc	r19, r1
    1f94:	49 f0       	breq	.+18     	; 0x1fa8 <Enable_External_INT0+0x3c>
    1f96:	10 c0       	rjmp	.+32     	; 0x1fb8 <Enable_External_INT0+0x4c>
	{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT0);
    1f98:	ab e5       	ldi	r26, 0x5B	; 91
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	eb e5       	ldi	r30, 0x5B	; 91
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	80 64       	ori	r24, 0x40	; 64
    1fa4:	8c 93       	st	X, r24
    1fa6:	0a c0       	rjmp	.+20     	; 0x1fbc <Enable_External_INT0+0x50>

	break;
	case Disable_PIE_Interrupt:
		CLEAR_BIT(GICR,INT0);
    1fa8:	ab e5       	ldi	r26, 0x5B	; 91
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	eb e5       	ldi	r30, 0x5B	; 91
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8f 7b       	andi	r24, 0xBF	; 191
    1fb4:	8c 93       	st	X, r24
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <Enable_External_INT0+0x50>
	break;
	default:
		return E_OK;
    1fb8:	1a 82       	std	Y+2, r1	; 0x02
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <Enable_External_INT0+0x54>
	}
	return E_NOK;
    1fbc:	31 e0       	ldi	r19, 0x01	; 1
    1fbe:	3a 83       	std	Y+2, r19	; 0x02
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <External_Int0_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int0_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <External_Int0_EdgeSelection+0x6>
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <External_Int0_EdgeSelection+0x8>
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	89 83       	std	Y+1, r24	; 0x01
			switch(SenseLevel)
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	3c 83       	std	Y+4, r19	; 0x04
    1fe6:	2b 83       	std	Y+3, r18	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	a1 f0       	breq	.+40     	; 0x2018 <External_Int0_EdgeSelection+0x48>
    1ff0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff4:	21 30       	cpi	r18, 0x01	; 1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	f1 f4       	brne	.+60     	; 0x2036 <External_Int0_EdgeSelection+0x66>
				{
					case Rising_Edge_Sense:
							SET_BIT(MCUCR,ISC00);
    1ffa:	a5 e5       	ldi	r26, 0x55	; 85
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e5 e5       	ldi	r30, 0x55	; 85
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	81 60       	ori	r24, 0x01	; 1
    2006:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    2008:	a5 e5       	ldi	r26, 0x55	; 85
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e5 e5       	ldi	r30, 0x55	; 85
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	82 60       	ori	r24, 0x02	; 2
    2014:	8c 93       	st	X, r24
    2016:	11 c0       	rjmp	.+34     	; 0x203a <External_Int0_EdgeSelection+0x6a>
							break;
					case Falling_Edge_Sense:
							CLEAR_BIT(MCUCR,ISC00);
    2018:	a5 e5       	ldi	r26, 0x55	; 85
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e5 e5       	ldi	r30, 0x55	; 85
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	8e 7f       	andi	r24, 0xFE	; 254
    2024:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    2026:	a5 e5       	ldi	r26, 0x55	; 85
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e5 e5       	ldi	r30, 0x55	; 85
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	82 60       	ori	r24, 0x02	; 2
    2032:	8c 93       	st	X, r24
    2034:	02 c0       	rjmp	.+4      	; 0x203a <External_Int0_EdgeSelection+0x6a>
							break;
					default:
						return E_OK;
    2036:	1a 82       	std	Y+2, r1	; 0x02
    2038:	02 c0       	rjmp	.+4      	; 0x203e <External_Int0_EdgeSelection+0x6e>
				}
	return E_NOK;
    203a:	31 e0       	ldi	r19, 0x01	; 1
    203c:	3a 83       	std	Y+2, r19	; 0x02
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <CallBack_Int0>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int0(void (*Func_Ptr)(void))
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	00 d0       	rcall	.+0      	; 0x2054 <CallBack_Int0+0x6>
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
	External_Function0=Func_Ptr;
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	90 93 99 01 	sts	0x0199, r25
    2064:	80 93 98 01 	sts	0x0198, r24
	return E_NOK;
    2068:	81 e0       	ldi	r24, 0x01	; 1
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <Enable_External_INT1>:
/*****************************************************************************************************/
STD_Return Enable_External_INT1(Peripheral_Interrupt_State_t State)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	00 d0       	rcall	.+0      	; 0x207a <Enable_External_INT1+0x6>
    207a:	00 d0       	rcall	.+0      	; 0x207c <Enable_External_INT1+0x8>
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	3c 83       	std	Y+4, r19	; 0x04
    208a:	2b 83       	std	Y+3, r18	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	31 f0       	breq	.+12     	; 0x20a0 <Enable_External_INT1+0x2c>
    2094:	2b 81       	ldd	r18, Y+3	; 0x03
    2096:	3c 81       	ldd	r19, Y+4	; 0x04
    2098:	21 30       	cpi	r18, 0x01	; 1
    209a:	31 05       	cpc	r19, r1
    209c:	49 f0       	breq	.+18     	; 0x20b0 <Enable_External_INT1+0x3c>
    209e:	10 c0       	rjmp	.+32     	; 0x20c0 <Enable_External_INT1+0x4c>
		{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT1);
    20a0:	ab e5       	ldi	r26, 0x5B	; 91
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	eb e5       	ldi	r30, 0x5B	; 91
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	80 68       	ori	r24, 0x80	; 128
    20ac:	8c 93       	st	X, r24
    20ae:	0a c0       	rjmp	.+20     	; 0x20c4 <Enable_External_INT1+0x50>
		break;
		case Disable_PIE_Interrupt:
			CLEAR_BIT(GICR,INT1);
    20b0:	ab e5       	ldi	r26, 0x5B	; 91
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	eb e5       	ldi	r30, 0x5B	; 91
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	8f 77       	andi	r24, 0x7F	; 127
    20bc:	8c 93       	st	X, r24
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <Enable_External_INT1+0x50>
		break;
		default:
			return E_OK;
    20c0:	1a 82       	std	Y+2, r1	; 0x02
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <Enable_External_INT1+0x54>
		}
	return E_NOK;
    20c4:	31 e0       	ldi	r19, 0x01	; 1
    20c6:	3a 83       	std	Y+2, r19	; 0x02
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <External_Int1_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int1_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <External_Int1_EdgeSelection+0x6>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <External_Int1_EdgeSelection+0x8>
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	3c 83       	std	Y+4, r19	; 0x04
    20ee:	2b 83       	std	Y+3, r18	; 0x03
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	b1 f0       	breq	.+44     	; 0x2124 <External_Int1_EdgeSelection+0x4c>
    20f8:	2b 81       	ldd	r18, Y+3	; 0x03
    20fa:	3c 81       	ldd	r19, Y+4	; 0x04
    20fc:	21 30       	cpi	r18, 0x01	; 1
    20fe:	31 05       	cpc	r19, r1
    2100:	11 f5       	brne	.+68     	; 0x2146 <External_Int1_EdgeSelection+0x6e>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCR,ISC10);
    2102:	a5 e5       	ldi	r26, 0x55	; 85
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e5 e5       	ldi	r30, 0x55	; 85
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	84 60       	ori	r24, 0x04	; 4
    210e:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    2110:	a5 e5       	ldi	r26, 0x55	; 85
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e5 e5       	ldi	r30, 0x55	; 85
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	88 60       	ori	r24, 0x08	; 8
    211c:	8c 93       	st	X, r24
								return E_NOK;
    211e:	31 e0       	ldi	r19, 0x01	; 1
    2120:	3a 83       	std	Y+2, r19	; 0x02
    2122:	12 c0       	rjmp	.+36     	; 0x2148 <External_Int1_EdgeSelection+0x70>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCR,ISC10);
    2124:	a5 e5       	ldi	r26, 0x55	; 85
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e5 e5       	ldi	r30, 0x55	; 85
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	8b 7f       	andi	r24, 0xFB	; 251
    2130:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    2132:	a5 e5       	ldi	r26, 0x55	; 85
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e5 e5       	ldi	r30, 0x55	; 85
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	88 60       	ori	r24, 0x08	; 8
    213e:	8c 93       	st	X, r24
								return E_NOK;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	01 c0       	rjmp	.+2      	; 0x2148 <External_Int1_EdgeSelection+0x70>
								break;
						default:
							return E_OK;
    2146:	1a 82       	std	Y+2, r1	; 0x02
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
					}
		return E_NOK;
}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <CallBack_Int1>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int1(void (*Func_Ptr)(void))
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <CallBack_Int1+0x6>
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
	External_Function1=Func_Ptr;
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	90 93 9b 01 	sts	0x019B, r25
    216e:	80 93 9a 01 	sts	0x019A, r24
	return E_NOK;
    2172:	81 e0       	ldi	r24, 0x01	; 1
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <Enable_External_INT2>:
/*****************************************************************************************************/

STD_Return Enable_External_INT2(Peripheral_Interrupt_State_t State)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	00 d0       	rcall	.+0      	; 0x2184 <Enable_External_INT2+0x6>
    2184:	00 d0       	rcall	.+0      	; 0x2186 <Enable_External_INT2+0x8>
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	3c 83       	std	Y+4, r19	; 0x04
    2194:	2b 83       	std	Y+3, r18	; 0x03
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	9c 81       	ldd	r25, Y+4	; 0x04
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	31 f0       	breq	.+12     	; 0x21aa <Enable_External_INT2+0x2c>
    219e:	2b 81       	ldd	r18, Y+3	; 0x03
    21a0:	3c 81       	ldd	r19, Y+4	; 0x04
    21a2:	21 30       	cpi	r18, 0x01	; 1
    21a4:	31 05       	cpc	r19, r1
    21a6:	49 f0       	breq	.+18     	; 0x21ba <Enable_External_INT2+0x3c>
    21a8:	10 c0       	rjmp	.+32     	; 0x21ca <Enable_External_INT2+0x4c>
		{
			case Enable_PIE_Interrupt:
				SET_BIT(GICR,INT2);
    21aa:	ab e5       	ldi	r26, 0x5B	; 91
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	eb e5       	ldi	r30, 0x5B	; 91
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	80 62       	ori	r24, 0x20	; 32
    21b6:	8c 93       	st	X, r24
    21b8:	0a c0       	rjmp	.+20     	; 0x21ce <Enable_External_INT2+0x50>
				break;
				case Disable_PIE_Interrupt:
					CLEAR_BIT(GICR,INT1);
    21ba:	ab e5       	ldi	r26, 0x5B	; 91
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	eb e5       	ldi	r30, 0x5B	; 91
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8f 77       	andi	r24, 0x7F	; 127
    21c6:	8c 93       	st	X, r24
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <Enable_External_INT2+0x50>
				break;
				default:
					return E_OK;
    21ca:	1a 82       	std	Y+2, r1	; 0x02
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <Enable_External_INT2+0x54>
		 	}
	return E_NOK;
    21ce:	31 e0       	ldi	r19, 0x01	; 1
    21d0:	3a 83       	std	Y+2, r19	; 0x02
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <External_Int2_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int2_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <External_Int2_EdgeSelection+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <External_Int2_EdgeSelection+0x8>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	3c 83       	std	Y+4, r19	; 0x04
    21f8:	2b 83       	std	Y+3, r18	; 0x03
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	79 f0       	breq	.+30     	; 0x2220 <External_Int2_EdgeSelection+0x3e>
    2202:	2b 81       	ldd	r18, Y+3	; 0x03
    2204:	3c 81       	ldd	r19, Y+4	; 0x04
    2206:	21 30       	cpi	r18, 0x01	; 1
    2208:	31 05       	cpc	r19, r1
    220a:	a1 f4       	brne	.+40     	; 0x2234 <External_Int2_EdgeSelection+0x52>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCSR,ISC2);
    220c:	a4 e5       	ldi	r26, 0x54	; 84
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e4 e5       	ldi	r30, 0x54	; 84
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	80 64       	ori	r24, 0x40	; 64
    2218:	8c 93       	st	X, r24
								return E_NOK;
    221a:	31 e0       	ldi	r19, 0x01	; 1
    221c:	3a 83       	std	Y+2, r19	; 0x02
    221e:	0b c0       	rjmp	.+22     	; 0x2236 <External_Int2_EdgeSelection+0x54>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCSR,ISC2);
    2220:	a4 e5       	ldi	r26, 0x54	; 84
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e4 e5       	ldi	r30, 0x54	; 84
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	8f 7b       	andi	r24, 0xBF	; 191
    222c:	8c 93       	st	X, r24
								return E_NOK;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	8a 83       	std	Y+2, r24	; 0x02
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <External_Int2_EdgeSelection+0x54>
								break;
						default:
							return E_OK;
    2234:	1a 82       	std	Y+2, r1	; 0x02
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
					}

		return E_NOK;
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <CallBack_Int2>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int2(void (*Func_Ptr)(void))
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	00 d0       	rcall	.+0      	; 0x224c <CallBack_Int2+0x6>
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
	External_Function2=Func_Ptr;
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	90 93 9d 01 	sts	0x019D, r25
    225c:	80 93 9c 01 	sts	0x019C, r24
	return E_NOK;
    2260:	81 e0       	ldi	r24, 0x01	; 1
}
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <DIO_init>:
 * 
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 **/
void DIO_init(void)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    // initializing all pins are input
    DDRA=0;
    2274:	ea e3       	ldi	r30, 0x3A	; 58
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	10 82       	st	Z, r1
    DDRB=0;
    227a:	e7 e3       	ldi	r30, 0x37	; 55
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	10 82       	st	Z, r1
    DDRC=0;
    2280:	e4 e3       	ldi	r30, 0x34	; 52
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	10 82       	st	Z, r1
    DDRD=0;
    2286:	e1 e3       	ldi	r30, 0x31	; 49
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	10 82       	st	Z, r1

    PORTA=0;
    228c:	eb e3       	ldi	r30, 0x3B	; 59
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	10 82       	st	Z, r1
    PORTB=0;
    2292:	e8 e3       	ldi	r30, 0x38	; 56
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	10 82       	st	Z, r1
    PORTC=0;
    2298:	e5 e3       	ldi	r30, 0x35	; 53
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	10 82       	st	Z, r1
    PORTD=0;
    229e:	e2 e3       	ldi	r30, 0x32	; 50
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	10 82       	st	Z, r1
    //enable the internal pull up resistor
    CLEAR_BIT(SFIOR,PUD);
    22a4:	a0 e5       	ldi	r26, 0x50	; 80
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e0 e5       	ldi	r30, 0x50	; 80
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8b 7f       	andi	r24, 0xFB	; 251
    22b0:	8c 93       	st	X, r24
}
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <DIO_SetPinDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinDirection(DIO_Ports_t PORT, u8 PIN, DIO_Direction_t Direction)
	{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	2e 97       	sbiw	r28, 0x0e	; 14
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	6a 83       	std	Y+2, r22	; 0x02
    22d0:	4b 83       	std	Y+3, r20	; 0x03
		// check for safety
		if(PIN>MAX_PinNum)
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	88 30       	cpi	r24, 0x08	; 8
    22d6:	10 f0       	brcs	.+4      	; 0x22dc <DIO_SetPinDirection+0x24>
			{
				return E_OK;
    22d8:	1e 86       	std	Y+14, r1	; 0x0e
    22da:	0e c1       	rjmp	.+540    	; 0x24f8 <DIO_SetPinDirection+0x240>
			}
		else
			{
				switch(PORT)
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	3d 87       	std	Y+13, r19	; 0x0d
    22e4:	2c 87       	std	Y+12, r18	; 0x0c
    22e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    22e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	91 05       	cpc	r25, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <DIO_SetPinDirection+0x3a>
    22f0:	51 c0       	rjmp	.+162    	; 0x2394 <DIO_SetPinDirection+0xdc>
    22f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    22f4:	3d 85       	ldd	r19, Y+13	; 0x0d
    22f6:	22 30       	cpi	r18, 0x02	; 2
    22f8:	31 05       	cpc	r19, r1
    22fa:	2c f4       	brge	.+10     	; 0x2306 <DIO_SetPinDirection+0x4e>
    22fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    22fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	71 f0       	breq	.+28     	; 0x2320 <DIO_SetPinDirection+0x68>
    2304:	f5 c0       	rjmp	.+490    	; 0x24f0 <DIO_SetPinDirection+0x238>
    2306:	2c 85       	ldd	r18, Y+12	; 0x0c
    2308:	3d 85       	ldd	r19, Y+13	; 0x0d
    230a:	22 30       	cpi	r18, 0x02	; 2
    230c:	31 05       	cpc	r19, r1
    230e:	09 f4       	brne	.+2      	; 0x2312 <DIO_SetPinDirection+0x5a>
    2310:	7b c0       	rjmp	.+246    	; 0x2408 <DIO_SetPinDirection+0x150>
    2312:	8c 85       	ldd	r24, Y+12	; 0x0c
    2314:	9d 85       	ldd	r25, Y+13	; 0x0d
    2316:	83 30       	cpi	r24, 0x03	; 3
    2318:	91 05       	cpc	r25, r1
    231a:	09 f4       	brne	.+2      	; 0x231e <DIO_SetPinDirection+0x66>
    231c:	af c0       	rjmp	.+350    	; 0x247c <DIO_SetPinDirection+0x1c4>
    231e:	e8 c0       	rjmp	.+464    	; 0x24f0 <DIO_SetPinDirection+0x238>
					{
						case DIO_PORTA:
							switch (Direction)
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	28 2f       	mov	r18, r24
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	3b 87       	std	Y+11, r19	; 0x0b
    2328:	2a 87       	std	Y+10, r18	; 0x0a
    232a:	8a 85       	ldd	r24, Y+10	; 0x0a
    232c:	9b 85       	ldd	r25, Y+11	; 0x0b
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	31 f0       	breq	.+12     	; 0x233e <DIO_SetPinDirection+0x86>
    2332:	2a 85       	ldd	r18, Y+10	; 0x0a
    2334:	3b 85       	ldd	r19, Y+11	; 0x0b
    2336:	21 30       	cpi	r18, 0x01	; 1
    2338:	31 05       	cpc	r19, r1
    233a:	b1 f0       	breq	.+44     	; 0x2368 <DIO_SetPinDirection+0xb0>
    233c:	29 c0       	rjmp	.+82     	; 0x2390 <DIO_SetPinDirection+0xd8>
								{
									case DIO_INPUT:
									CLEAR_BIT(DDRA,PIN);
    233e:	aa e3       	ldi	r26, 0x3A	; 58
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	ea e3       	ldi	r30, 0x3A	; 58
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	48 2f       	mov	r20, r24
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 2e       	mov	r0, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <DIO_SetPinDirection+0xa4>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	0a 94       	dec	r0
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <DIO_SetPinDirection+0xa0>
    2360:	80 95       	com	r24
    2362:	84 23       	and	r24, r20
    2364:	8c 93       	st	X, r24
    2366:	c6 c0       	rjmp	.+396    	; 0x24f4 <DIO_SetPinDirection+0x23c>
									break;
									case DIO_OUTPUT:
									SET_BIT(DDRA,PIN);
    2368:	aa e3       	ldi	r26, 0x3A	; 58
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ea e3       	ldi	r30, 0x3A	; 58
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	48 2f       	mov	r20, r24
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	02 2e       	mov	r0, r18
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <DIO_SetPinDirection+0xce>
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	0a 94       	dec	r0
    2388:	e2 f7       	brpl	.-8      	; 0x2382 <DIO_SetPinDirection+0xca>
    238a:	84 2b       	or	r24, r20
    238c:	8c 93       	st	X, r24
    238e:	b2 c0       	rjmp	.+356    	; 0x24f4 <DIO_SetPinDirection+0x23c>
									break;
									default:
									return E_OK;
    2390:	1e 86       	std	Y+14, r1	; 0x0e
    2392:	b2 c0       	rjmp	.+356    	; 0x24f8 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTB:
							switch (Direction)
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	39 87       	std	Y+9, r19	; 0x09
    239c:	28 87       	std	Y+8, r18	; 0x08
    239e:	88 85       	ldd	r24, Y+8	; 0x08
    23a0:	99 85       	ldd	r25, Y+9	; 0x09
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	31 f0       	breq	.+12     	; 0x23b2 <DIO_SetPinDirection+0xfa>
    23a6:	28 85       	ldd	r18, Y+8	; 0x08
    23a8:	39 85       	ldd	r19, Y+9	; 0x09
    23aa:	21 30       	cpi	r18, 0x01	; 1
    23ac:	31 05       	cpc	r19, r1
    23ae:	b1 f0       	breq	.+44     	; 0x23dc <DIO_SetPinDirection+0x124>
    23b0:	29 c0       	rjmp	.+82     	; 0x2404 <DIO_SetPinDirection+0x14c>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRB,PIN);
    23b2:	a7 e3       	ldi	r26, 0x37	; 55
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e7 e3       	ldi	r30, 0x37	; 55
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	48 2f       	mov	r20, r24
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	02 2e       	mov	r0, r18
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <DIO_SetPinDirection+0x118>
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	0a 94       	dec	r0
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <DIO_SetPinDirection+0x114>
    23d4:	80 95       	com	r24
    23d6:	84 23       	and	r24, r20
    23d8:	8c 93       	st	X, r24
    23da:	8c c0       	rjmp	.+280    	; 0x24f4 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRB,PIN);
    23dc:	a7 e3       	ldi	r26, 0x37	; 55
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e7 e3       	ldi	r30, 0x37	; 55
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <DIO_SetPinDirection+0x142>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <DIO_SetPinDirection+0x13e>
    23fe:	84 2b       	or	r24, r20
    2400:	8c 93       	st	X, r24
    2402:	78 c0       	rjmp	.+240    	; 0x24f4 <DIO_SetPinDirection+0x23c>
										break;
									default:
									return E_OK;
    2404:	1e 86       	std	Y+14, r1	; 0x0e
    2406:	78 c0       	rjmp	.+240    	; 0x24f8 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTC:
							switch (Direction)
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	3f 83       	std	Y+7, r19	; 0x07
    2410:	2e 83       	std	Y+6, r18	; 0x06
    2412:	8e 81       	ldd	r24, Y+6	; 0x06
    2414:	9f 81       	ldd	r25, Y+7	; 0x07
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	31 f0       	breq	.+12     	; 0x2426 <DIO_SetPinDirection+0x16e>
    241a:	2e 81       	ldd	r18, Y+6	; 0x06
    241c:	3f 81       	ldd	r19, Y+7	; 0x07
    241e:	21 30       	cpi	r18, 0x01	; 1
    2420:	31 05       	cpc	r19, r1
    2422:	b1 f0       	breq	.+44     	; 0x2450 <DIO_SetPinDirection+0x198>
    2424:	29 c0       	rjmp	.+82     	; 0x2478 <DIO_SetPinDirection+0x1c0>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRC,PIN);
    2426:	a4 e3       	ldi	r26, 0x34	; 52
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e4 e3       	ldi	r30, 0x34	; 52
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	48 2f       	mov	r20, r24
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 2e       	mov	r0, r18
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <DIO_SetPinDirection+0x18c>
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	0a 94       	dec	r0
    2446:	e2 f7       	brpl	.-8      	; 0x2440 <DIO_SetPinDirection+0x188>
    2448:	80 95       	com	r24
    244a:	84 23       	and	r24, r20
    244c:	8c 93       	st	X, r24
    244e:	52 c0       	rjmp	.+164    	; 0x24f4 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRC,PIN);
    2450:	a4 e3       	ldi	r26, 0x34	; 52
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e4 e3       	ldi	r30, 0x34	; 52
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	48 2f       	mov	r20, r24
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	02 2e       	mov	r0, r18
    2468:	02 c0       	rjmp	.+4      	; 0x246e <DIO_SetPinDirection+0x1b6>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	0a 94       	dec	r0
    2470:	e2 f7       	brpl	.-8      	; 0x246a <DIO_SetPinDirection+0x1b2>
    2472:	84 2b       	or	r24, r20
    2474:	8c 93       	st	X, r24
    2476:	3e c0       	rjmp	.+124    	; 0x24f4 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    2478:	1e 86       	std	Y+14, r1	; 0x0e
    247a:	3e c0       	rjmp	.+124    	; 0x24f8 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTD:
							switch (Direction)
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	3d 83       	std	Y+5, r19	; 0x05
    2484:	2c 83       	std	Y+4, r18	; 0x04
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	9d 81       	ldd	r25, Y+5	; 0x05
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	31 f0       	breq	.+12     	; 0x249a <DIO_SetPinDirection+0x1e2>
    248e:	2c 81       	ldd	r18, Y+4	; 0x04
    2490:	3d 81       	ldd	r19, Y+5	; 0x05
    2492:	21 30       	cpi	r18, 0x01	; 1
    2494:	31 05       	cpc	r19, r1
    2496:	b1 f0       	breq	.+44     	; 0x24c4 <DIO_SetPinDirection+0x20c>
    2498:	29 c0       	rjmp	.+82     	; 0x24ec <DIO_SetPinDirection+0x234>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRD,PIN);
    249a:	a1 e3       	ldi	r26, 0x31	; 49
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e1 e3       	ldi	r30, 0x31	; 49
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	48 2f       	mov	r20, r24
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	02 2e       	mov	r0, r18
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <DIO_SetPinDirection+0x200>
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	0a 94       	dec	r0
    24ba:	e2 f7       	brpl	.-8      	; 0x24b4 <DIO_SetPinDirection+0x1fc>
    24bc:	80 95       	com	r24
    24be:	84 23       	and	r24, r20
    24c0:	8c 93       	st	X, r24
    24c2:	18 c0       	rjmp	.+48     	; 0x24f4 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRD,PIN);
    24c4:	a1 e3       	ldi	r26, 0x31	; 49
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e1 e3       	ldi	r30, 0x31	; 49
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	48 2f       	mov	r20, r24
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 2e       	mov	r0, r18
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <DIO_SetPinDirection+0x22a>
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	0a 94       	dec	r0
    24e4:	e2 f7       	brpl	.-8      	; 0x24de <DIO_SetPinDirection+0x226>
    24e6:	84 2b       	or	r24, r20
    24e8:	8c 93       	st	X, r24
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    24ec:	1e 86       	std	Y+14, r1	; 0x0e
    24ee:	04 c0       	rjmp	.+8      	; 0x24f8 <DIO_SetPinDirection+0x240>
								}
							break;
							default:
								return E_OK;
    24f0:	1e 86       	std	Y+14, r1	; 0x0e
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <DIO_SetPinDirection+0x240>
					}
			}
	return E_NOK;
    24f4:	31 e0       	ldi	r19, 0x01	; 1
    24f6:	3e 87       	std	Y+14, r19	; 0x0e
    24f8:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    24fa:	2e 96       	adiw	r28, 0x0e	; 14
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <DIO_SetPortDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortDirection(DIO_Ports_t PORT,u8 Direction)
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	00 d0       	rcall	.+0      	; 0x2512 <DIO_SetPortDirection+0x6>
    2512:	00 d0       	rcall	.+0      	; 0x2514 <DIO_SetPortDirection+0x8>
    2514:	0f 92       	push	r0
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	3d 83       	std	Y+5, r19	; 0x05
    2526:	2c 83       	std	Y+4, r18	; 0x04
    2528:	8c 81       	ldd	r24, Y+4	; 0x04
    252a:	9d 81       	ldd	r25, Y+5	; 0x05
    252c:	81 30       	cpi	r24, 0x01	; 1
    252e:	91 05       	cpc	r25, r1
    2530:	d1 f0       	breq	.+52     	; 0x2566 <DIO_SetPortDirection+0x5a>
    2532:	2c 81       	ldd	r18, Y+4	; 0x04
    2534:	3d 81       	ldd	r19, Y+5	; 0x05
    2536:	22 30       	cpi	r18, 0x02	; 2
    2538:	31 05       	cpc	r19, r1
    253a:	2c f4       	brge	.+10     	; 0x2546 <DIO_SetPortDirection+0x3a>
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	9d 81       	ldd	r25, Y+5	; 0x05
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	61 f0       	breq	.+24     	; 0x255c <DIO_SetPortDirection+0x50>
    2544:	1f c0       	rjmp	.+62     	; 0x2584 <DIO_SetPortDirection+0x78>
    2546:	2c 81       	ldd	r18, Y+4	; 0x04
    2548:	3d 81       	ldd	r19, Y+5	; 0x05
    254a:	22 30       	cpi	r18, 0x02	; 2
    254c:	31 05       	cpc	r19, r1
    254e:	81 f0       	breq	.+32     	; 0x2570 <DIO_SetPortDirection+0x64>
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	9d 81       	ldd	r25, Y+5	; 0x05
    2554:	83 30       	cpi	r24, 0x03	; 3
    2556:	91 05       	cpc	r25, r1
    2558:	81 f0       	breq	.+32     	; 0x257a <DIO_SetPortDirection+0x6e>
    255a:	14 c0       	rjmp	.+40     	; 0x2584 <DIO_SetPortDirection+0x78>
						{
							case DIO_PORTA:
								DDRA=Direction;
    255c:	ea e3       	ldi	r30, 0x3A	; 58
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	80 83       	st	Z, r24
    2564:	11 c0       	rjmp	.+34     	; 0x2588 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTB:
								DDRB=Direction;
    2566:	e7 e3       	ldi	r30, 0x37	; 55
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	80 83       	st	Z, r24
    256e:	0c c0       	rjmp	.+24     	; 0x2588 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTC:
								DDRC=Direction;
    2570:	e4 e3       	ldi	r30, 0x34	; 52
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	80 83       	st	Z, r24
    2578:	07 c0       	rjmp	.+14     	; 0x2588 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTD:
								DDRD=Direction;
    257a:	e1 e3       	ldi	r30, 0x31	; 49
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	80 83       	st	Z, r24
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <DIO_SetPortDirection+0x7c>
							break;
							default:
							return E_OK;
    2584:	1b 82       	std	Y+3, r1	; 0x03
    2586:	02 c0       	rjmp	.+4      	; 0x258c <DIO_SetPortDirection+0x80>

						}
	return E_NOK;
    2588:	91 e0       	ldi	r25, 0x01	; 1
    258a:	9b 83       	std	Y+3, r25	; 0x03
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <DIO_SetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 							return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t State)
	{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	2e 97       	sbiw	r28, 0x0e	; 14
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	6a 83       	std	Y+2, r22	; 0x02
    25b6:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	88 30       	cpi	r24, 0x08	; 8
    25bc:	10 f0       	brcs	.+4      	; 0x25c2 <DIO_SetPinValue+0x24>
			{
				return E_OK;
    25be:	1e 86       	std	Y+14, r1	; 0x0e
    25c0:	0e c1       	rjmp	.+540    	; 0x27de <DIO_SetPinValue+0x240>
			}
		else
			{
				switch(PORT)
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	3d 87       	std	Y+13, r19	; 0x0d
    25ca:	2c 87       	std	Y+12, r18	; 0x0c
    25cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    25ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    25d0:	81 30       	cpi	r24, 0x01	; 1
    25d2:	91 05       	cpc	r25, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <DIO_SetPinValue+0x3a>
    25d6:	51 c0       	rjmp	.+162    	; 0x267a <DIO_SetPinValue+0xdc>
    25d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    25da:	3d 85       	ldd	r19, Y+13	; 0x0d
    25dc:	22 30       	cpi	r18, 0x02	; 2
    25de:	31 05       	cpc	r19, r1
    25e0:	2c f4       	brge	.+10     	; 0x25ec <DIO_SetPinValue+0x4e>
    25e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    25e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	71 f0       	breq	.+28     	; 0x2606 <DIO_SetPinValue+0x68>
    25ea:	f5 c0       	rjmp	.+490    	; 0x27d6 <DIO_SetPinValue+0x238>
    25ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    25ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    25f0:	22 30       	cpi	r18, 0x02	; 2
    25f2:	31 05       	cpc	r19, r1
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <DIO_SetPinValue+0x5a>
    25f6:	7b c0       	rjmp	.+246    	; 0x26ee <DIO_SetPinValue+0x150>
    25f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    25fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    25fc:	83 30       	cpi	r24, 0x03	; 3
    25fe:	91 05       	cpc	r25, r1
    2600:	09 f4       	brne	.+2      	; 0x2604 <DIO_SetPinValue+0x66>
    2602:	af c0       	rjmp	.+350    	; 0x2762 <DIO_SetPinValue+0x1c4>
    2604:	e8 c0       	rjmp	.+464    	; 0x27d6 <DIO_SetPinValue+0x238>
					{
						case DIO_PORTA:
							switch(State)
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	3b 87       	std	Y+11, r19	; 0x0b
    260e:	2a 87       	std	Y+10, r18	; 0x0a
    2610:	8a 85       	ldd	r24, Y+10	; 0x0a
    2612:	9b 85       	ldd	r25, Y+11	; 0x0b
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	31 f0       	breq	.+12     	; 0x2624 <DIO_SetPinValue+0x86>
    2618:	2a 85       	ldd	r18, Y+10	; 0x0a
    261a:	3b 85       	ldd	r19, Y+11	; 0x0b
    261c:	21 30       	cpi	r18, 0x01	; 1
    261e:	31 05       	cpc	r19, r1
    2620:	b1 f0       	breq	.+44     	; 0x264e <DIO_SetPinValue+0xb0>
    2622:	29 c0       	rjmp	.+82     	; 0x2676 <DIO_SetPinValue+0xd8>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTA,PIN);
    2624:	ab e3       	ldi	r26, 0x3B	; 59
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	eb e3       	ldi	r30, 0x3B	; 59
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	48 2f       	mov	r20, r24
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	02 2e       	mov	r0, r18
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <DIO_SetPinValue+0xa4>
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	0a 94       	dec	r0
    2644:	e2 f7       	brpl	.-8      	; 0x263e <DIO_SetPinValue+0xa0>
    2646:	80 95       	com	r24
    2648:	84 23       	and	r24, r20
    264a:	8c 93       	st	X, r24
    264c:	c6 c0       	rjmp	.+396    	; 0x27da <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTA,PIN);
    264e:	ab e3       	ldi	r26, 0x3B	; 59
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	eb e3       	ldi	r30, 0x3B	; 59
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	48 2f       	mov	r20, r24
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	02 2e       	mov	r0, r18
    2666:	02 c0       	rjmp	.+4      	; 0x266c <DIO_SetPinValue+0xce>
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	0a 94       	dec	r0
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <DIO_SetPinValue+0xca>
    2670:	84 2b       	or	r24, r20
    2672:	8c 93       	st	X, r24
    2674:	b2 c0       	rjmp	.+356    	; 0x27da <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    2676:	1e 86       	std	Y+14, r1	; 0x0e
    2678:	b2 c0       	rjmp	.+356    	; 0x27de <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTB:
							switch(State)
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	39 87       	std	Y+9, r19	; 0x09
    2682:	28 87       	std	Y+8, r18	; 0x08
    2684:	88 85       	ldd	r24, Y+8	; 0x08
    2686:	99 85       	ldd	r25, Y+9	; 0x09
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	31 f0       	breq	.+12     	; 0x2698 <DIO_SetPinValue+0xfa>
    268c:	28 85       	ldd	r18, Y+8	; 0x08
    268e:	39 85       	ldd	r19, Y+9	; 0x09
    2690:	21 30       	cpi	r18, 0x01	; 1
    2692:	31 05       	cpc	r19, r1
    2694:	b1 f0       	breq	.+44     	; 0x26c2 <DIO_SetPinValue+0x124>
    2696:	29 c0       	rjmp	.+82     	; 0x26ea <DIO_SetPinValue+0x14c>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTB,PIN);
    2698:	a8 e3       	ldi	r26, 0x38	; 56
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e8 e3       	ldi	r30, 0x38	; 56
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	48 2f       	mov	r20, r24
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	02 2e       	mov	r0, r18
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <DIO_SetPinValue+0x118>
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	0a 94       	dec	r0
    26b8:	e2 f7       	brpl	.-8      	; 0x26b2 <DIO_SetPinValue+0x114>
    26ba:	80 95       	com	r24
    26bc:	84 23       	and	r24, r20
    26be:	8c 93       	st	X, r24
    26c0:	8c c0       	rjmp	.+280    	; 0x27da <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTB,PIN);
    26c2:	a8 e3       	ldi	r26, 0x38	; 56
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e8 e3       	ldi	r30, 0x38	; 56
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	48 2f       	mov	r20, r24
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	02 2e       	mov	r0, r18
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <DIO_SetPinValue+0x142>
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	0a 94       	dec	r0
    26e2:	e2 f7       	brpl	.-8      	; 0x26dc <DIO_SetPinValue+0x13e>
    26e4:	84 2b       	or	r24, r20
    26e6:	8c 93       	st	X, r24
    26e8:	78 c0       	rjmp	.+240    	; 0x27da <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    26ea:	1e 86       	std	Y+14, r1	; 0x0e
    26ec:	78 c0       	rjmp	.+240    	; 0x27de <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTC:
							switch(State)
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	3f 83       	std	Y+7, r19	; 0x07
    26f6:	2e 83       	std	Y+6, r18	; 0x06
    26f8:	8e 81       	ldd	r24, Y+6	; 0x06
    26fa:	9f 81       	ldd	r25, Y+7	; 0x07
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	31 f0       	breq	.+12     	; 0x270c <DIO_SetPinValue+0x16e>
    2700:	2e 81       	ldd	r18, Y+6	; 0x06
    2702:	3f 81       	ldd	r19, Y+7	; 0x07
    2704:	21 30       	cpi	r18, 0x01	; 1
    2706:	31 05       	cpc	r19, r1
    2708:	b1 f0       	breq	.+44     	; 0x2736 <DIO_SetPinValue+0x198>
    270a:	29 c0       	rjmp	.+82     	; 0x275e <DIO_SetPinValue+0x1c0>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTC,PIN);
    270c:	a5 e3       	ldi	r26, 0x35	; 53
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e5 e3       	ldi	r30, 0x35	; 53
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	48 2f       	mov	r20, r24
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	02 2e       	mov	r0, r18
    2724:	02 c0       	rjmp	.+4      	; 0x272a <DIO_SetPinValue+0x18c>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	0a 94       	dec	r0
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <DIO_SetPinValue+0x188>
    272e:	80 95       	com	r24
    2730:	84 23       	and	r24, r20
    2732:	8c 93       	st	X, r24
    2734:	52 c0       	rjmp	.+164    	; 0x27da <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTC,PIN);
    2736:	a5 e3       	ldi	r26, 0x35	; 53
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e5 e3       	ldi	r30, 0x35	; 53
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	48 2f       	mov	r20, r24
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	02 2e       	mov	r0, r18
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <DIO_SetPinValue+0x1b6>
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	0a 94       	dec	r0
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <DIO_SetPinValue+0x1b2>
    2758:	84 2b       	or	r24, r20
    275a:	8c 93       	st	X, r24
    275c:	3e c0       	rjmp	.+124    	; 0x27da <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    275e:	1e 86       	std	Y+14, r1	; 0x0e
    2760:	3e c0       	rjmp	.+124    	; 0x27de <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTD:
							switch(State)
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	3d 83       	std	Y+5, r19	; 0x05
    276a:	2c 83       	std	Y+4, r18	; 0x04
    276c:	8c 81       	ldd	r24, Y+4	; 0x04
    276e:	9d 81       	ldd	r25, Y+5	; 0x05
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	31 f0       	breq	.+12     	; 0x2780 <DIO_SetPinValue+0x1e2>
    2774:	2c 81       	ldd	r18, Y+4	; 0x04
    2776:	3d 81       	ldd	r19, Y+5	; 0x05
    2778:	21 30       	cpi	r18, 0x01	; 1
    277a:	31 05       	cpc	r19, r1
    277c:	b1 f0       	breq	.+44     	; 0x27aa <DIO_SetPinValue+0x20c>
    277e:	29 c0       	rjmp	.+82     	; 0x27d2 <DIO_SetPinValue+0x234>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTD,PIN);
    2780:	a2 e3       	ldi	r26, 0x32	; 50
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e2 e3       	ldi	r30, 0x32	; 50
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	48 2f       	mov	r20, r24
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	02 2e       	mov	r0, r18
    2798:	02 c0       	rjmp	.+4      	; 0x279e <DIO_SetPinValue+0x200>
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	0a 94       	dec	r0
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <DIO_SetPinValue+0x1fc>
    27a2:	80 95       	com	r24
    27a4:	84 23       	and	r24, r20
    27a6:	8c 93       	st	X, r24
    27a8:	18 c0       	rjmp	.+48     	; 0x27da <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTD,PIN);
    27aa:	a2 e3       	ldi	r26, 0x32	; 50
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e2 e3       	ldi	r30, 0x32	; 50
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	48 2f       	mov	r20, r24
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	02 2e       	mov	r0, r18
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <DIO_SetPinValue+0x22a>
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	0a 94       	dec	r0
    27ca:	e2 f7       	brpl	.-8      	; 0x27c4 <DIO_SetPinValue+0x226>
    27cc:	84 2b       	or	r24, r20
    27ce:	8c 93       	st	X, r24
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    27d2:	1e 86       	std	Y+14, r1	; 0x0e
    27d4:	04 c0       	rjmp	.+8      	; 0x27de <DIO_SetPinValue+0x240>
								}
						break;
							default:
							return E_OK;
    27d6:	1e 86       	std	Y+14, r1	; 0x0e
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <DIO_SetPinValue+0x240>
					}
			}
		return E_NOK;
    27da:	31 e0       	ldi	r19, 0x01	; 1
    27dc:	3e 87       	std	Y+14, r19	; 0x0e
    27de:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    27e0:	2e 96       	adiw	r28, 0x0e	; 14
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <DIO_SetPortValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortValue(DIO_Ports_t PORT,u8 value)
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <DIO_SetPortValue+0x6>
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <DIO_SetPortValue+0x8>
    27fa:	0f 92       	push	r0
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	3d 83       	std	Y+5, r19	; 0x05
    280c:	2c 83       	std	Y+4, r18	; 0x04
    280e:	8c 81       	ldd	r24, Y+4	; 0x04
    2810:	9d 81       	ldd	r25, Y+5	; 0x05
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	91 05       	cpc	r25, r1
    2816:	d1 f0       	breq	.+52     	; 0x284c <DIO_SetPortValue+0x5a>
    2818:	2c 81       	ldd	r18, Y+4	; 0x04
    281a:	3d 81       	ldd	r19, Y+5	; 0x05
    281c:	22 30       	cpi	r18, 0x02	; 2
    281e:	31 05       	cpc	r19, r1
    2820:	2c f4       	brge	.+10     	; 0x282c <DIO_SetPortValue+0x3a>
    2822:	8c 81       	ldd	r24, Y+4	; 0x04
    2824:	9d 81       	ldd	r25, Y+5	; 0x05
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	61 f0       	breq	.+24     	; 0x2842 <DIO_SetPortValue+0x50>
    282a:	1f c0       	rjmp	.+62     	; 0x286a <DIO_SetPortValue+0x78>
    282c:	2c 81       	ldd	r18, Y+4	; 0x04
    282e:	3d 81       	ldd	r19, Y+5	; 0x05
    2830:	22 30       	cpi	r18, 0x02	; 2
    2832:	31 05       	cpc	r19, r1
    2834:	81 f0       	breq	.+32     	; 0x2856 <DIO_SetPortValue+0x64>
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	9d 81       	ldd	r25, Y+5	; 0x05
    283a:	83 30       	cpi	r24, 0x03	; 3
    283c:	91 05       	cpc	r25, r1
    283e:	81 f0       	breq	.+32     	; 0x2860 <DIO_SetPortValue+0x6e>
    2840:	14 c0       	rjmp	.+40     	; 0x286a <DIO_SetPortValue+0x78>
						{
							case DIO_PORTA:
								PORTA=value;
    2842:	eb e3       	ldi	r30, 0x3B	; 59
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	80 83       	st	Z, r24
    284a:	11 c0       	rjmp	.+34     	; 0x286e <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTB:
								PORTB=value;
    284c:	e8 e3       	ldi	r30, 0x38	; 56
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	80 83       	st	Z, r24
    2854:	0c c0       	rjmp	.+24     	; 0x286e <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTC:
								PORTC=value;
    2856:	e5 e3       	ldi	r30, 0x35	; 53
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	80 83       	st	Z, r24
    285e:	07 c0       	rjmp	.+14     	; 0x286e <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTD:
								PORTD=value;
    2860:	e2 e3       	ldi	r30, 0x32	; 50
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	80 83       	st	Z, r24
    2868:	02 c0       	rjmp	.+4      	; 0x286e <DIO_SetPortValue+0x7c>

							break;
							default:
							return E_OK;
    286a:	1b 82       	std	Y+3, r1	; 0x03
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <DIO_SetPortValue+0x80>

						}
	return E_NOK;
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	9b 83       	std	Y+3, r25	; 0x03
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <DIO_GetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_GetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t* State)
	{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	27 97       	sbiw	r28, 0x07	; 7
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	6a 83       	std	Y+2, r22	; 0x02
    289c:	5c 83       	std	Y+4, r21	; 0x04
    289e:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	88 30       	cpi	r24, 0x08	; 8
    28a4:	10 f0       	brcs	.+4      	; 0x28aa <DIO_GetPinValue+0x26>
			{
				return E_OK;
    28a6:	1f 82       	std	Y+7, r1	; 0x07
    28a8:	75 c0       	rjmp	.+234    	; 0x2994 <DIO_GetPinValue+0x110>
			}
		else
			{
					switch(PORT)
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	3e 83       	std	Y+6, r19	; 0x06
    28b2:	2d 83       	std	Y+5, r18	; 0x05
    28b4:	4d 81       	ldd	r20, Y+5	; 0x05
    28b6:	5e 81       	ldd	r21, Y+6	; 0x06
    28b8:	41 30       	cpi	r20, 0x01	; 1
    28ba:	51 05       	cpc	r21, r1
    28bc:	59 f1       	breq	.+86     	; 0x2914 <DIO_GetPinValue+0x90>
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	82 30       	cpi	r24, 0x02	; 2
    28c4:	91 05       	cpc	r25, r1
    28c6:	34 f4       	brge	.+12     	; 0x28d4 <DIO_GetPinValue+0x50>
    28c8:	2d 81       	ldd	r18, Y+5	; 0x05
    28ca:	3e 81       	ldd	r19, Y+6	; 0x06
    28cc:	21 15       	cp	r18, r1
    28ce:	31 05       	cpc	r19, r1
    28d0:	69 f0       	breq	.+26     	; 0x28ec <DIO_GetPinValue+0x68>
    28d2:	5c c0       	rjmp	.+184    	; 0x298c <DIO_GetPinValue+0x108>
    28d4:	4d 81       	ldd	r20, Y+5	; 0x05
    28d6:	5e 81       	ldd	r21, Y+6	; 0x06
    28d8:	42 30       	cpi	r20, 0x02	; 2
    28da:	51 05       	cpc	r21, r1
    28dc:	79 f1       	breq	.+94     	; 0x293c <DIO_GetPinValue+0xb8>
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	83 30       	cpi	r24, 0x03	; 3
    28e4:	91 05       	cpc	r25, r1
    28e6:	09 f4       	brne	.+2      	; 0x28ea <DIO_GetPinValue+0x66>
    28e8:	3d c0       	rjmp	.+122    	; 0x2964 <DIO_GetPinValue+0xe0>
    28ea:	50 c0       	rjmp	.+160    	; 0x298c <DIO_GetPinValue+0x108>
						{
							case DIO_PORTA:
								*State=GET_BIT(PINA,PIN);
    28ec:	e9 e3       	ldi	r30, 0x39	; 57
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	88 2f       	mov	r24, r24
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a9 01       	movw	r20, r18
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <DIO_GetPinValue+0x80>
    2900:	55 95       	asr	r21
    2902:	47 95       	ror	r20
    2904:	8a 95       	dec	r24
    2906:	e2 f7       	brpl	.-8      	; 0x2900 <DIO_GetPinValue+0x7c>
    2908:	ca 01       	movw	r24, r20
    290a:	81 70       	andi	r24, 0x01	; 1
    290c:	eb 81       	ldd	r30, Y+3	; 0x03
    290e:	fc 81       	ldd	r31, Y+4	; 0x04
    2910:	80 83       	st	Z, r24
    2912:	3e c0       	rjmp	.+124    	; 0x2990 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTB:
								*State=GET_BIT(PINB,PIN);
    2914:	e6 e3       	ldi	r30, 0x36	; 54
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a9 01       	movw	r20, r18
    2926:	02 c0       	rjmp	.+4      	; 0x292c <DIO_GetPinValue+0xa8>
    2928:	55 95       	asr	r21
    292a:	47 95       	ror	r20
    292c:	8a 95       	dec	r24
    292e:	e2 f7       	brpl	.-8      	; 0x2928 <DIO_GetPinValue+0xa4>
    2930:	ca 01       	movw	r24, r20
    2932:	81 70       	andi	r24, 0x01	; 1
    2934:	eb 81       	ldd	r30, Y+3	; 0x03
    2936:	fc 81       	ldd	r31, Y+4	; 0x04
    2938:	80 83       	st	Z, r24
    293a:	2a c0       	rjmp	.+84     	; 0x2990 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTC:
								*State=GET_BIT(PINC,PIN);
    293c:	e3 e3       	ldi	r30, 0x33	; 51
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	a9 01       	movw	r20, r18
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <DIO_GetPinValue+0xd0>
    2950:	55 95       	asr	r21
    2952:	47 95       	ror	r20
    2954:	8a 95       	dec	r24
    2956:	e2 f7       	brpl	.-8      	; 0x2950 <DIO_GetPinValue+0xcc>
    2958:	ca 01       	movw	r24, r20
    295a:	81 70       	andi	r24, 0x01	; 1
    295c:	eb 81       	ldd	r30, Y+3	; 0x03
    295e:	fc 81       	ldd	r31, Y+4	; 0x04
    2960:	80 83       	st	Z, r24
    2962:	16 c0       	rjmp	.+44     	; 0x2990 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTD:
								*State=GET_BIT(PIND,PIN);
    2964:	e0 e3       	ldi	r30, 0x30	; 48
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	88 2f       	mov	r24, r24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a9 01       	movw	r20, r18
    2976:	02 c0       	rjmp	.+4      	; 0x297c <DIO_GetPinValue+0xf8>
    2978:	55 95       	asr	r21
    297a:	47 95       	ror	r20
    297c:	8a 95       	dec	r24
    297e:	e2 f7       	brpl	.-8      	; 0x2978 <DIO_GetPinValue+0xf4>
    2980:	ca 01       	movw	r24, r20
    2982:	81 70       	andi	r24, 0x01	; 1
    2984:	eb 81       	ldd	r30, Y+3	; 0x03
    2986:	fc 81       	ldd	r31, Y+4	; 0x04
    2988:	80 83       	st	Z, r24
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <DIO_GetPinValue+0x10c>
								break;
							default:
								return E_OK;
    298c:	1f 82       	std	Y+7, r1	; 0x07
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <DIO_GetPinValue+0x110>
						}
			}
		return E_NOK;
    2990:	51 e0       	ldi	r21, 0x01	; 1
    2992:	5f 83       	std	Y+7, r21	; 0x07
    2994:	8f 81       	ldd	r24, Y+7	; 0x07
	}
    2996:	27 96       	adiw	r28, 0x07	; 7
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <DIO_togglePin>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_togglePin(DIO_Ports_t port,u8 pin)
 {
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <DIO_togglePin+0x6>
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <DIO_togglePin+0x8>
    29b0:	0f 92       	push	r0
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PinNum)
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	88 30       	cpi	r24, 0x08	; 8
    29be:	10 f0       	brcs	.+4      	; 0x29c4 <DIO_togglePin+0x1c>
		{
			return E_OK;
    29c0:	1d 82       	std	Y+5, r1	; 0x05
    29c2:	73 c0       	rjmp	.+230    	; 0x2aaa <DIO_togglePin+0x102>
		}
	else
		{
			switch (port)
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	3c 83       	std	Y+4, r19	; 0x04
    29cc:	2b 83       	std	Y+3, r18	; 0x03
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	81 30       	cpi	r24, 0x01	; 1
    29d4:	91 05       	cpc	r25, r1
    29d6:	49 f1       	breq	.+82     	; 0x2a2a <DIO_togglePin+0x82>
    29d8:	2b 81       	ldd	r18, Y+3	; 0x03
    29da:	3c 81       	ldd	r19, Y+4	; 0x04
    29dc:	22 30       	cpi	r18, 0x02	; 2
    29de:	31 05       	cpc	r19, r1
    29e0:	2c f4       	brge	.+10     	; 0x29ec <DIO_togglePin+0x44>
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	61 f0       	breq	.+24     	; 0x2a02 <DIO_togglePin+0x5a>
    29ea:	5b c0       	rjmp	.+182    	; 0x2aa2 <DIO_togglePin+0xfa>
    29ec:	2b 81       	ldd	r18, Y+3	; 0x03
    29ee:	3c 81       	ldd	r19, Y+4	; 0x04
    29f0:	22 30       	cpi	r18, 0x02	; 2
    29f2:	31 05       	cpc	r19, r1
    29f4:	71 f1       	breq	.+92     	; 0x2a52 <DIO_togglePin+0xaa>
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	83 30       	cpi	r24, 0x03	; 3
    29fc:	91 05       	cpc	r25, r1
    29fe:	e9 f1       	breq	.+122    	; 0x2a7a <DIO_togglePin+0xd2>
    2a00:	50 c0       	rjmp	.+160    	; 0x2aa2 <DIO_togglePin+0xfa>
				{
					case DIO_PORTA:
						TOGGLE_BIT(PORTA, pin);
    2a02:	ab e3       	ldi	r26, 0x3B	; 59
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	eb e3       	ldi	r30, 0x3B	; 59
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	48 2f       	mov	r20, r24
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	02 2e       	mov	r0, r18
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <DIO_togglePin+0x78>
    2a1c:	88 0f       	add	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	0a 94       	dec	r0
    2a22:	e2 f7       	brpl	.-8      	; 0x2a1c <DIO_togglePin+0x74>
    2a24:	84 27       	eor	r24, r20
    2a26:	8c 93       	st	X, r24
    2a28:	3e c0       	rjmp	.+124    	; 0x2aa6 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTB:
						TOGGLE_BIT(PORTB, pin);
    2a2a:	a8 e3       	ldi	r26, 0x38	; 56
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e8 e3       	ldi	r30, 0x38	; 56
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	48 2f       	mov	r20, r24
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	02 2e       	mov	r0, r18
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <DIO_togglePin+0xa0>
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	0a 94       	dec	r0
    2a4a:	e2 f7       	brpl	.-8      	; 0x2a44 <DIO_togglePin+0x9c>
    2a4c:	84 27       	eor	r24, r20
    2a4e:	8c 93       	st	X, r24
    2a50:	2a c0       	rjmp	.+84     	; 0x2aa6 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTC:
						TOGGLE_BIT(PORTC, pin);
    2a52:	a5 e3       	ldi	r26, 0x35	; 53
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e5 e3       	ldi	r30, 0x35	; 53
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	48 2f       	mov	r20, r24
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	02 2e       	mov	r0, r18
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <DIO_togglePin+0xc8>
    2a6c:	88 0f       	add	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	0a 94       	dec	r0
    2a72:	e2 f7       	brpl	.-8      	; 0x2a6c <DIO_togglePin+0xc4>
    2a74:	84 27       	eor	r24, r20
    2a76:	8c 93       	st	X, r24
    2a78:	16 c0       	rjmp	.+44     	; 0x2aa6 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTD:
						TOGGLE_BIT(PORTD, pin);
    2a7a:	a2 e3       	ldi	r26, 0x32	; 50
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e2 e3       	ldi	r30, 0x32	; 50
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	48 2f       	mov	r20, r24
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	28 2f       	mov	r18, r24
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	02 2e       	mov	r0, r18
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <DIO_togglePin+0xf0>
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	0a 94       	dec	r0
    2a9a:	e2 f7       	brpl	.-8      	; 0x2a94 <DIO_togglePin+0xec>
    2a9c:	84 27       	eor	r24, r20
    2a9e:	8c 93       	st	X, r24
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <DIO_togglePin+0xfe>
						break;
					default:
						return E_OK;
    2aa2:	1d 82       	std	Y+5, r1	; 0x05
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <DIO_togglePin+0x102>
				}
	}

	return E_NOK;
    2aa6:	91 e0       	ldi	r25, 0x01	; 1
    2aa8:	9d 83       	std	Y+5, r25	; 0x05
    2aaa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <DIO_EnablePullup>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_EnablePullup(DIO_Ports_t PORT, u8 PIN, DIO_PullUpState_t Pullstate)
	{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	2e 97       	sbiw	r28, 0x0e	; 14
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	6a 83       	std	Y+2, r22	; 0x02
    2ad4:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	88 30       	cpi	r24, 0x08	; 8
    2ada:	10 f0       	brcs	.+4      	; 0x2ae0 <DIO_EnablePullup+0x24>
			{
				return E_OK;
    2adc:	1e 86       	std	Y+14, r1	; 0x0e
    2ade:	26 c1       	rjmp	.+588    	; 0x2d2c <DIO_EnablePullup+0x270>
			}
		else
			{
				switch(PORT)
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	3d 87       	std	Y+13, r19	; 0x0d
    2ae8:	2c 87       	std	Y+12, r18	; 0x0c
    2aea:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aec:	9d 85       	ldd	r25, Y+13	; 0x0d
    2aee:	81 30       	cpi	r24, 0x01	; 1
    2af0:	91 05       	cpc	r25, r1
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <DIO_EnablePullup+0x3a>
    2af4:	57 c0       	rjmp	.+174    	; 0x2ba4 <DIO_EnablePullup+0xe8>
    2af6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2af8:	3d 85       	ldd	r19, Y+13	; 0x0d
    2afa:	22 30       	cpi	r18, 0x02	; 2
    2afc:	31 05       	cpc	r19, r1
    2afe:	2c f4       	brge	.+10     	; 0x2b0a <DIO_EnablePullup+0x4e>
    2b00:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b02:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	71 f0       	breq	.+28     	; 0x2b24 <DIO_EnablePullup+0x68>
    2b08:	0d c1       	rjmp	.+538    	; 0x2d24 <DIO_EnablePullup+0x268>
    2b0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b0c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b0e:	22 30       	cpi	r18, 0x02	; 2
    2b10:	31 05       	cpc	r19, r1
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <DIO_EnablePullup+0x5a>
    2b14:	87 c0       	rjmp	.+270    	; 0x2c24 <DIO_EnablePullup+0x168>
    2b16:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b18:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b1a:	83 30       	cpi	r24, 0x03	; 3
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <DIO_EnablePullup+0x66>
    2b20:	c1 c0       	rjmp	.+386    	; 0x2ca4 <DIO_EnablePullup+0x1e8>
    2b22:	00 c1       	rjmp	.+512    	; 0x2d24 <DIO_EnablePullup+0x268>
				{
					case DIO_PORTA:
						switch(Pullstate)
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	3b 87       	std	Y+11, r19	; 0x0b
    2b2c:	2a 87       	std	Y+10, r18	; 0x0a
    2b2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b30:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	31 f0       	breq	.+12     	; 0x2b42 <DIO_EnablePullup+0x86>
    2b36:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b38:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b3a:	21 30       	cpi	r18, 0x01	; 1
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	41 f1       	breq	.+80     	; 0x2b90 <DIO_EnablePullup+0xd4>
    2b40:	2f c0       	rjmp	.+94     	; 0x2ba0 <DIO_EnablePullup+0xe4>
							{
								case ENABLE_PullUp:
									CLEAR_BIT(DDRA,PIN);
    2b42:	aa e3       	ldi	r26, 0x3A	; 58
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	ea e3       	ldi	r30, 0x3A	; 58
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	48 2f       	mov	r20, r24
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <DIO_EnablePullup+0xa2>
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	2a 95       	dec	r18
    2b60:	e2 f7       	brpl	.-8      	; 0x2b5a <DIO_EnablePullup+0x9e>
    2b62:	80 95       	com	r24
    2b64:	84 23       	and	r24, r20
    2b66:	8c 93       	st	X, r24
									SET_BIT(PORTA,PIN);
    2b68:	ab e3       	ldi	r26, 0x3B	; 59
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	eb e3       	ldi	r30, 0x3B	; 59
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	48 2f       	mov	r20, r24
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	02 2e       	mov	r0, r18
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <DIO_EnablePullup+0xca>
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	0a 94       	dec	r0
    2b88:	e2 f7       	brpl	.-8      	; 0x2b82 <DIO_EnablePullup+0xc6>
    2b8a:	84 2b       	or	r24, r20
    2b8c:	8c 93       	st	X, r24
    2b8e:	cc c0       	rjmp	.+408    	; 0x2d28 <DIO_EnablePullup+0x26c>
									break;
								case DISABLE_PullUp:
									SET_BIT(SFIOR,PUD);
    2b90:	a0 e5       	ldi	r26, 0x50	; 80
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e0 e5       	ldi	r30, 0x50	; 80
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	84 60       	ori	r24, 0x04	; 4
    2b9c:	8c 93       	st	X, r24
    2b9e:	c4 c0       	rjmp	.+392    	; 0x2d28 <DIO_EnablePullup+0x26c>
									break;
								default:
									return E_OK;
    2ba0:	1e 86       	std	Y+14, r1	; 0x0e
    2ba2:	c4 c0       	rjmp	.+392    	; 0x2d2c <DIO_EnablePullup+0x270>
							}
						break;
						case DIO_PORTB:
							switch(Pullstate)
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	39 87       	std	Y+9, r19	; 0x09
    2bac:	28 87       	std	Y+8, r18	; 0x08
    2bae:	88 85       	ldd	r24, Y+8	; 0x08
    2bb0:	99 85       	ldd	r25, Y+9	; 0x09
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	31 f0       	breq	.+12     	; 0x2bc2 <DIO_EnablePullup+0x106>
    2bb6:	28 85       	ldd	r18, Y+8	; 0x08
    2bb8:	39 85       	ldd	r19, Y+9	; 0x09
    2bba:	21 30       	cpi	r18, 0x01	; 1
    2bbc:	31 05       	cpc	r19, r1
    2bbe:	41 f1       	breq	.+80     	; 0x2c10 <DIO_EnablePullup+0x154>
    2bc0:	2f c0       	rjmp	.+94     	; 0x2c20 <DIO_EnablePullup+0x164>
								{
									case ENABLE_PullUp:
										CLEAR_BIT(DDRB,PIN);
    2bc2:	a7 e3       	ldi	r26, 0x37	; 55
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e7 e3       	ldi	r30, 0x37	; 55
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	48 2f       	mov	r20, r24
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <DIO_EnablePullup+0x122>
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	2a 95       	dec	r18
    2be0:	e2 f7       	brpl	.-8      	; 0x2bda <DIO_EnablePullup+0x11e>
    2be2:	80 95       	com	r24
    2be4:	84 23       	and	r24, r20
    2be6:	8c 93       	st	X, r24
										SET_BIT(PORTB,PIN);
    2be8:	a8 e3       	ldi	r26, 0x38	; 56
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e8 e3       	ldi	r30, 0x38	; 56
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	48 2f       	mov	r20, r24
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	02 2e       	mov	r0, r18
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <DIO_EnablePullup+0x14a>
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	0a 94       	dec	r0
    2c08:	e2 f7       	brpl	.-8      	; 0x2c02 <DIO_EnablePullup+0x146>
    2c0a:	84 2b       	or	r24, r20
    2c0c:	8c 93       	st	X, r24
    2c0e:	8c c0       	rjmp	.+280    	; 0x2d28 <DIO_EnablePullup+0x26c>
										break;
									case DISABLE_PullUp:
										SET_BIT(SFIOR,PUD);
    2c10:	a0 e5       	ldi	r26, 0x50	; 80
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	e0 e5       	ldi	r30, 0x50	; 80
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	84 60       	ori	r24, 0x04	; 4
    2c1c:	8c 93       	st	X, r24
    2c1e:	84 c0       	rjmp	.+264    	; 0x2d28 <DIO_EnablePullup+0x26c>
										break;
									default:
										return E_OK;
    2c20:	1e 86       	std	Y+14, r1	; 0x0e
    2c22:	84 c0       	rjmp	.+264    	; 0x2d2c <DIO_EnablePullup+0x270>
								}
							break;
							case DIO_PORTC:
								switch(Pullstate)
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	3f 83       	std	Y+7, r19	; 0x07
    2c2c:	2e 83       	std	Y+6, r18	; 0x06
    2c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c30:	9f 81       	ldd	r25, Y+7	; 0x07
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	31 f0       	breq	.+12     	; 0x2c42 <DIO_EnablePullup+0x186>
    2c36:	2e 81       	ldd	r18, Y+6	; 0x06
    2c38:	3f 81       	ldd	r19, Y+7	; 0x07
    2c3a:	21 30       	cpi	r18, 0x01	; 1
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	41 f1       	breq	.+80     	; 0x2c90 <DIO_EnablePullup+0x1d4>
    2c40:	2f c0       	rjmp	.+94     	; 0x2ca0 <DIO_EnablePullup+0x1e4>
									{
										case ENABLE_PullUp:
											CLEAR_BIT(DDRC,PIN);
    2c42:	a4 e3       	ldi	r26, 0x34	; 52
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e4 e3       	ldi	r30, 0x34	; 52
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	48 2f       	mov	r20, r24
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <DIO_EnablePullup+0x1a2>
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	2a 95       	dec	r18
    2c60:	e2 f7       	brpl	.-8      	; 0x2c5a <DIO_EnablePullup+0x19e>
    2c62:	80 95       	com	r24
    2c64:	84 23       	and	r24, r20
    2c66:	8c 93       	st	X, r24
											SET_BIT(PORTC,PIN);
    2c68:	a5 e3       	ldi	r26, 0x35	; 53
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	e5 e3       	ldi	r30, 0x35	; 53
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	48 2f       	mov	r20, r24
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	28 2f       	mov	r18, r24
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	02 2e       	mov	r0, r18
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <DIO_EnablePullup+0x1ca>
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	0a 94       	dec	r0
    2c88:	e2 f7       	brpl	.-8      	; 0x2c82 <DIO_EnablePullup+0x1c6>
    2c8a:	84 2b       	or	r24, r20
    2c8c:	8c 93       	st	X, r24
    2c8e:	4c c0       	rjmp	.+152    	; 0x2d28 <DIO_EnablePullup+0x26c>
											break;
										case DISABLE_PullUp:
											SET_BIT(SFIOR,PUD);
    2c90:	a0 e5       	ldi	r26, 0x50	; 80
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e0 e5       	ldi	r30, 0x50	; 80
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	84 60       	ori	r24, 0x04	; 4
    2c9c:	8c 93       	st	X, r24
    2c9e:	44 c0       	rjmp	.+136    	; 0x2d28 <DIO_EnablePullup+0x26c>
											break;
										default:
											return E_OK;
    2ca0:	1e 86       	std	Y+14, r1	; 0x0e
    2ca2:	44 c0       	rjmp	.+136    	; 0x2d2c <DIO_EnablePullup+0x270>
									}
								break;
								case DIO_PORTD:
									switch(Pullstate)
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	3d 83       	std	Y+5, r19	; 0x05
    2cac:	2c 83       	std	Y+4, r18	; 0x04
    2cae:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	31 f0       	breq	.+12     	; 0x2cc2 <DIO_EnablePullup+0x206>
    2cb6:	2c 81       	ldd	r18, Y+4	; 0x04
    2cb8:	3d 81       	ldd	r19, Y+5	; 0x05
    2cba:	21 30       	cpi	r18, 0x01	; 1
    2cbc:	31 05       	cpc	r19, r1
    2cbe:	41 f1       	breq	.+80     	; 0x2d10 <DIO_EnablePullup+0x254>
    2cc0:	2f c0       	rjmp	.+94     	; 0x2d20 <DIO_EnablePullup+0x264>
										{
											case ENABLE_PullUp:
												CLEAR_BIT(DDRD,PIN);
    2cc2:	a1 e3       	ldi	r26, 0x31	; 49
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e1 e3       	ldi	r30, 0x31	; 49
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	48 2f       	mov	r20, r24
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <DIO_EnablePullup+0x222>
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	2a 95       	dec	r18
    2ce0:	e2 f7       	brpl	.-8      	; 0x2cda <DIO_EnablePullup+0x21e>
    2ce2:	80 95       	com	r24
    2ce4:	84 23       	and	r24, r20
    2ce6:	8c 93       	st	X, r24
												SET_BIT(PORTD,PIN);
    2ce8:	a2 e3       	ldi	r26, 0x32	; 50
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e2 e3       	ldi	r30, 0x32	; 50
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	48 2f       	mov	r20, r24
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	02 2e       	mov	r0, r18
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <DIO_EnablePullup+0x24a>
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	0a 94       	dec	r0
    2d08:	e2 f7       	brpl	.-8      	; 0x2d02 <DIO_EnablePullup+0x246>
    2d0a:	84 2b       	or	r24, r20
    2d0c:	8c 93       	st	X, r24
    2d0e:	0c c0       	rjmp	.+24     	; 0x2d28 <DIO_EnablePullup+0x26c>
												break;
											case DISABLE_PullUp:
												SET_BIT(SFIOR,PUD);
    2d10:	a0 e5       	ldi	r26, 0x50	; 80
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e0 e5       	ldi	r30, 0x50	; 80
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	84 60       	ori	r24, 0x04	; 4
    2d1c:	8c 93       	st	X, r24
    2d1e:	04 c0       	rjmp	.+8      	; 0x2d28 <DIO_EnablePullup+0x26c>
												break;
											default:
												return E_OK;
    2d20:	1e 86       	std	Y+14, r1	; 0x0e
    2d22:	04 c0       	rjmp	.+8      	; 0x2d2c <DIO_EnablePullup+0x270>
										}
									break;
									default:
									return E_OK;
    2d24:	1e 86       	std	Y+14, r1	; 0x0e
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <DIO_EnablePullup+0x270>

				}
			}
		return E_NOK;
    2d28:	31 e0       	ldi	r19, 0x01	; 1
    2d2a:	3e 87       	std	Y+14, r19	; 0x0e
    2d2c:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    2d2e:	2e 96       	adiw	r28, 0x0e	; 14
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	cf 91       	pop	r28
    2d3c:	df 91       	pop	r29
    2d3e:	08 95       	ret

00002d40 <ADC_Init>:
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 */
 /*****************************************************************************************************/
STD_Return ADC_Init(ADC__State_t State)
{
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <ADC_Init+0x6>
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <ADC_Init+0x8>
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	89 83       	std	Y+1, r24	; 0x01
	//Resolution Selection
	#if defined Resolution_8_Bit
	SET_BIT(ADMUX,ADLAR);
	#elif defined Resolution_10_Bit
	CLEAR_BIT(ADMUX,ADLAR);
    2d4e:	a7 e2       	ldi	r26, 0x27	; 39
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e7 e2       	ldi	r30, 0x27	; 39
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	8f 7d       	andi	r24, 0xDF	; 223
    2d5a:	8c 93       	st	X, r24
	//Voltage Reference Selection
	#if defined AREF_Internal_VREF
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
	#elif defined AREF_External_VREF
	SET_BIT(ADMUX,REFS0);
    2d5c:	a7 e2       	ldi	r26, 0x27	; 39
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e7 e2       	ldi	r30, 0x27	; 39
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	80 64       	ori	r24, 0x40	; 64
    2d68:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    2d6a:	a7 e2       	ldi	r26, 0x27	; 39
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e7 e2       	ldi	r30, 0x27	; 39
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	8f 77       	andi	r24, 0x7F	; 127
    2d76:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_64
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_128
		SET_BIT(ADCSRA,ADPS0);
    2d78:	a6 e2       	ldi	r26, 0x26	; 38
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e6 e2       	ldi	r30, 0x26	; 38
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	81 60       	ori	r24, 0x01	; 1
    2d84:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    2d86:	a6 e2       	ldi	r26, 0x26	; 38
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e6 e2       	ldi	r30, 0x26	; 38
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	82 60       	ori	r24, 0x02	; 2
    2d92:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    2d94:	a6 e2       	ldi	r26, 0x26	; 38
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	e6 e2       	ldi	r30, 0x26	; 38
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	84 60       	ori	r24, 0x04	; 4
    2da0:	8c 93       	st	X, r24
	#endif
	switch (State)
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	3c 83       	std	Y+4, r19	; 0x04
    2daa:	2b 83       	std	Y+3, r18	; 0x03
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	31 f0       	breq	.+12     	; 0x2dc0 <ADC_Init+0x80>
    2db4:	2b 81       	ldd	r18, Y+3	; 0x03
    2db6:	3c 81       	ldd	r19, Y+4	; 0x04
    2db8:	21 30       	cpi	r18, 0x01	; 1
    2dba:	31 05       	cpc	r19, r1
    2dbc:	49 f0       	breq	.+18     	; 0x2dd0 <ADC_Init+0x90>
    2dbe:	10 c0       	rjmp	.+32     	; 0x2de0 <ADC_Init+0xa0>
		{
			case ADC_ENABLE:
				SET_BIT(ADCSRA,ADEN);
    2dc0:	a6 e2       	ldi	r26, 0x26	; 38
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	e6 e2       	ldi	r30, 0x26	; 38
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	80 68       	ori	r24, 0x80	; 128
    2dcc:	8c 93       	st	X, r24
    2dce:	0a c0       	rjmp	.+20     	; 0x2de4 <ADC_Init+0xa4>
				break;
			case ADC_DISABLE:
				CLEAR_BIT(ADCSRA,ADEN);
    2dd0:	a6 e2       	ldi	r26, 0x26	; 38
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	e6 e2       	ldi	r30, 0x26	; 38
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	8f 77       	andi	r24, 0x7F	; 127
    2ddc:	8c 93       	st	X, r24
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <ADC_Init+0xa4>
				break;
			default:
				return E_OK;
    2de0:	1a 82       	std	Y+2, r1	; 0x02
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <ADC_Init+0xa8>
		}
		return E_NOK;
    2de4:	31 e0       	ldi	r19, 0x01	; 1
    2de6:	3a 83       	std	Y+2, r19	; 0x02
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <ADC_SetInterrupt_Enable>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 */
STD_Return ADC_SetInterrupt_Enable(ADC_Interrupt_State_t State)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <ADC_SetInterrupt_Enable+0x6>
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <ADC_SetInterrupt_Enable+0x8>
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	3c 83       	std	Y+4, r19	; 0x04
    2e0e:	2b 83       	std	Y+3, r18	; 0x03
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	31 f0       	breq	.+12     	; 0x2e24 <ADC_SetInterrupt_Enable+0x2c>
    2e18:	2b 81       	ldd	r18, Y+3	; 0x03
    2e1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e1c:	21 30       	cpi	r18, 0x01	; 1
    2e1e:	31 05       	cpc	r19, r1
    2e20:	49 f0       	breq	.+18     	; 0x2e34 <ADC_SetInterrupt_Enable+0x3c>
    2e22:	10 c0       	rjmp	.+32     	; 0x2e44 <ADC_SetInterrupt_Enable+0x4c>
	{
		case ADC_Interrupt_ENABLE:
			SET_BIT(ADCSRA,ADIE);
    2e24:	a6 e2       	ldi	r26, 0x26	; 38
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e6 e2       	ldi	r30, 0x26	; 38
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	88 60       	ori	r24, 0x08	; 8
    2e30:	8c 93       	st	X, r24
    2e32:	0a c0       	rjmp	.+20     	; 0x2e48 <ADC_SetInterrupt_Enable+0x50>
			break;
		case ADC_Interrupt_DISABLE:
			CLEAR_BIT(ADCSRA,ADIE);
    2e34:	a6 e2       	ldi	r26, 0x26	; 38
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e6 e2       	ldi	r30, 0x26	; 38
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	87 7f       	andi	r24, 0xF7	; 247
    2e40:	8c 93       	st	X, r24
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <ADC_SetInterrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    2e44:	1a 82       	std	Y+2, r1	; 0x02
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <ADC_SetInterrupt_Enable+0x54>
	}
	return E_NOK;
    2e48:	31 e0       	ldi	r19, 0x01	; 1
    2e4a:	3a 83       	std	Y+2, r19	; 0x02
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <ADC_Start_conversion>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Start_conversion(u8 channel)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <ADC_Start_conversion+0x6>
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	89 83       	std	Y+1, r24	; 0x01
	if (channel>MaxPinNum)
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	88 30       	cpi	r24, 0x08	; 8
    2e6c:	10 f0       	brcs	.+4      	; 0x2e72 <ADC_Start_conversion+0x16>
	{
		return E_OK;
    2e6e:	1a 82       	std	Y+2, r1	; 0x02
    2e70:	25 c0       	rjmp	.+74     	; 0x2ebc <ADC_Start_conversion+0x60>
	}
	else
	{

			//Mask for non used bits of the 8 bits of the Regsiter
			ADMUX &= Unselected_Channel_MASK;
    2e72:	a7 e2       	ldi	r26, 0x27	; 39
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e7 e2       	ldi	r30, 0x27	; 39
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	88 7f       	andi	r24, 0xF8	; 248
    2e7e:	8c 93       	st	X, r24

			//Mask for the usage 3 bits of the 8 bits
			ADMUX |= channel;
    2e80:	a7 e2       	ldi	r26, 0x27	; 39
    2e82:	b0 e0       	ldi	r27, 0x00	; 0
    2e84:	e7 e2       	ldi	r30, 0x27	; 39
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	90 81       	ld	r25, Z
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	89 2b       	or	r24, r25
    2e8e:	8c 93       	st	X, r24

			//Set the AdcStartConversion
			SET_BIT(ADCSRA,ADSC);
    2e90:	a6 e2       	ldi	r26, 0x26	; 38
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	e6 e2       	ldi	r30, 0x26	; 38
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	80 64       	ori	r24, 0x40	; 64
    2e9c:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA,ADSC) == 1);
    2e9e:	e6 e2       	ldi	r30, 0x26	; 38
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	82 95       	swap	r24
    2ea6:	86 95       	lsr	r24
    2ea8:	86 95       	lsr	r24
    2eaa:	83 70       	andi	r24, 0x03	; 3
    2eac:	88 2f       	mov	r24, r24
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	81 70       	andi	r24, 0x01	; 1
    2eb2:	90 70       	andi	r25, 0x00	; 0
    2eb4:	88 23       	and	r24, r24
    2eb6:	99 f7       	brne	.-26     	; 0x2e9e <ADC_Start_conversion+0x42>
		 //Wait conversion to finish
	}
	return E_NOK;
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	8a 83       	std	Y+2, r24	; 0x02
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <ADC_Get_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Get_Value(u16 *AdcResult)
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <ADC_Get_Value+0x6>
    2ece:	00 d0       	rcall	.+0      	; 0x2ed0 <ADC_Get_Value+0x8>
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	9c 83       	std	Y+4, r25	; 0x04
    2ed6:	8b 83       	std	Y+3, r24	; 0x03
		u16 AdcResult_Temp=0;
    2ed8:	1a 82       	std	Y+2, r1	; 0x02
    2eda:	19 82       	std	Y+1, r1	; 0x01
	#if defined Resolution_8_Bit
		*AdcResult=ADCH;
	#elif defined Resolution_10_Bit
		AdcResult_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    2edc:	e4 e2       	ldi	r30, 0x24	; 36
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	28 2f       	mov	r18, r24
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	e5 e2       	ldi	r30, 0x25	; 37
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	88 2f       	mov	r24, r24
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	98 2f       	mov	r25, r24
    2ef2:	88 27       	eor	r24, r24
    2ef4:	82 0f       	add	r24, r18
    2ef6:	93 1f       	adc	r25, r19
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	89 83       	std	Y+1, r24	; 0x01
		*AdcResult = (AdcResult_Temp & Resolution_10Bit_MASK);//Mask higher bits in ADCH and read only the 10 bits for the ADC
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	9a 81       	ldd	r25, Y+2	; 0x02
    2f00:	93 70       	andi	r25, 0x03	; 3
    2f02:	eb 81       	ldd	r30, Y+3	; 0x03
    2f04:	fc 81       	ldd	r31, Y+4	; 0x04
    2f06:	91 83       	std	Z+1, r25	; 0x01
    2f08:	80 83       	st	Z, r24
	#endif
		return E_NOK;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
}
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	0f 90       	pop	r0
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <ADC_Read_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Read_Value(u8 channel,u16 *AdcValue)
{
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <ADC_Read_Value+0x6>
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <ADC_Read_Value+0x8>
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <ADC_Read_Value+0xa>
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	8b 83       	std	Y+3, r24	; 0x03
    2f2a:	7d 83       	std	Y+5, r23	; 0x05
    2f2c:	6c 83       	std	Y+4, r22	; 0x04
	u16 AdcValue_Temp=0;
    2f2e:	1a 82       	std	Y+2, r1	; 0x02
    2f30:	19 82       	std	Y+1, r1	; 0x01
	if (channel>MaxPinNum)
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	88 30       	cpi	r24, 0x08	; 8
    2f36:	c0 f0       	brcs	.+48     	; 0x2f68 <ADC_Read_Value+0x4e>
		{
			return E_OK;
    2f38:	1e 82       	std	Y+6, r1	; 0x06
    2f3a:	3c c0       	rjmp	.+120    	; 0x2fb4 <ADC_Read_Value+0x9a>
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
			{
				//Mask for non used bits of the 8 bits of the Regsiter
				ADMUX &= Unselected_Channel_MASK;
    2f3c:	a7 e2       	ldi	r26, 0x27	; 39
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e7 e2       	ldi	r30, 0x27	; 39
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	88 7f       	andi	r24, 0xF8	; 248
    2f48:	8c 93       	st	X, r24

				//Mask for the usage 3 bits of the 8 bits
				ADMUX |= channel;
    2f4a:	a7 e2       	ldi	r26, 0x27	; 39
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	e7 e2       	ldi	r30, 0x27	; 39
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	90 81       	ld	r25, Z
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	89 2b       	or	r24, r25
    2f58:	8c 93       	st	X, r24

				//Set the AdcStartConversion
				SET_BIT(ADCSRA,ADSC);
    2f5a:	a6 e2       	ldi	r26, 0x26	; 38
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	e6 e2       	ldi	r30, 0x26	; 38
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	80 64       	ori	r24, 0x40	; 64
    2f66:	8c 93       	st	X, r24
		}
		else
		{
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
    2f68:	e6 e2       	ldi	r30, 0x26	; 38
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	82 95       	swap	r24
    2f70:	86 95       	lsr	r24
    2f72:	86 95       	lsr	r24
    2f74:	83 70       	andi	r24, 0x03	; 3
    2f76:	88 2f       	mov	r24, r24
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	81 70       	andi	r24, 0x01	; 1
    2f7c:	90 70       	andi	r25, 0x00	; 0
    2f7e:	88 23       	and	r24, r24
    2f80:	e9 f6       	brne	.-70     	; 0x2f3c <ADC_Read_Value+0x22>
			//return the read value

			#if defined Resolution_8_Bit
				*AdcValue=ADCH;
			#elif defined Resolution_10_Bit
				AdcValue_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    2f82:	e4 e2       	ldi	r30, 0x24	; 36
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	e5 e2       	ldi	r30, 0x25	; 37
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	88 2f       	mov	r24, r24
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	98 2f       	mov	r25, r24
    2f98:	88 27       	eor	r24, r24
    2f9a:	82 0f       	add	r24, r18
    2f9c:	93 1f       	adc	r25, r19
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	89 83       	std	Y+1, r24	; 0x01
				*AdcValue = (AdcValue_Temp & Resolution_10Bit_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa6:	93 70       	andi	r25, 0x03	; 3
    2fa8:	ec 81       	ldd	r30, Y+4	; 0x04
    2faa:	fd 81       	ldd	r31, Y+5	; 0x05
    2fac:	91 83       	std	Z+1, r25	; 0x01
    2fae:	80 83       	st	Z, r24
			#endif
		}
	return E_NOK;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	8e 83       	std	Y+6, r24	; 0x06
    2fb4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2fb6:	26 96       	adiw	r28, 0x06	; 6
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	cf 91       	pop	r28
    2fc4:	df 91       	pop	r29
    2fc6:	08 95       	ret

00002fc8 <ADC_ReadVolt>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_ReadVolt (u8 channel,f32 *AdcVolt)
	{
    2fc8:	df 93       	push	r29
    2fca:	cf 93       	push	r28
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <ADC_ReadVolt+0x6>
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <ADC_ReadVolt+0x8>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <ADC_ReadVolt+0xa>
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	8b 83       	std	Y+3, r24	; 0x03
    2fd8:	7d 83       	std	Y+5, r23	; 0x05
    2fda:	6c 83       	std	Y+4, r22	; 0x04
		u16 AdcValue_Temp=0;
    2fdc:	1a 82       	std	Y+2, r1	; 0x02
    2fde:	19 82       	std	Y+1, r1	; 0x01
		if(channel>MaxPinNum)
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	88 30       	cpi	r24, 0x08	; 8
    2fe4:	10 f0       	brcs	.+4      	; 0x2fea <ADC_ReadVolt+0x22>
			{
				return E_OK;
    2fe6:	1e 82       	std	Y+6, r1	; 0x06
    2fe8:	2e c0       	rjmp	.+92     	; 0x3046 <ADC_ReadVolt+0x7e>
			}
		else
			{
				ADC_Read_Value(channel,&AdcValue_Temp);
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	9e 01       	movw	r18, r28
    2fee:	2f 5f       	subi	r18, 0xFF	; 255
    2ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff2:	b9 01       	movw	r22, r18
    2ff4:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ADC_Read_Value>
				*AdcVolt= (((f32)AdcValue_Temp)*((f32)VREF))/((f32)(ADC_MAX));
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	cc 01       	movw	r24, r24
    2ffe:	a0 e0       	ldi	r26, 0x00	; 0
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	bc 01       	movw	r22, r24
    3010:	cd 01       	movw	r24, r26
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	40 ea       	ldi	r20, 0xA0	; 160
    3018:	50 e4       	ldi	r21, 0x40	; 64
    301a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	bc 01       	movw	r22, r24
    3024:	cd 01       	movw	r24, r26
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e8       	ldi	r20, 0x80	; 128
    302c:	54 e4       	ldi	r21, 0x44	; 68
    302e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	ec 81       	ldd	r30, Y+4	; 0x04
    3038:	fd 81       	ldd	r31, Y+5	; 0x05
    303a:	80 83       	st	Z, r24
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	a2 83       	std	Z+2, r26	; 0x02
    3040:	b3 83       	std	Z+3, r27	; 0x03
			}
		return E_NOK;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	8e 83       	std	Y+6, r24	; 0x06
    3046:	8e 81       	ldd	r24, Y+6	; 0x06
	}
    3048:	26 96       	adiw	r28, 0x06	; 6
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <ADC_CallBack>:
 * 
 * @param func_ptr 		 :		pointer to function that points to the user/ External function
 * @return void			 : 		return nothing
 **/
void ADC_CallBack(void (*func_ptr)(void))
	{
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	00 d0       	rcall	.+0      	; 0x3060 <ADC_CallBack+0x6>
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
    3064:	9a 83       	std	Y+2, r25	; 0x02
    3066:	89 83       	std	Y+1, r24	; 0x01
		User_Function = func_ptr;
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	9a 81       	ldd	r25, Y+2	; 0x02
    306c:	90 93 9f 01 	sts	0x019F, r25
    3070:	80 93 9e 01 	sts	0x019E, r24
	}
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <__vector_16>:
/*********************************ISR ADC Vector******************************************************/
ISR(ADC_Vect)
{
    307e:	1f 92       	push	r1
    3080:	0f 92       	push	r0
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	0f 92       	push	r0
    3086:	11 24       	eor	r1, r1
    3088:	2f 93       	push	r18
    308a:	3f 93       	push	r19
    308c:	4f 93       	push	r20
    308e:	5f 93       	push	r21
    3090:	6f 93       	push	r22
    3092:	7f 93       	push	r23
    3094:	8f 93       	push	r24
    3096:	9f 93       	push	r25
    3098:	af 93       	push	r26
    309a:	bf 93       	push	r27
    309c:	ef 93       	push	r30
    309e:	ff 93       	push	r31
    30a0:	df 93       	push	r29
    30a2:	cf 93       	push	r28
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
	(*User_Function)();
    30a8:	e0 91 9e 01 	lds	r30, 0x019E
    30ac:	f0 91 9f 01 	lds	r31, 0x019F
    30b0:	09 95       	icall
}
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	ff 91       	pop	r31
    30b8:	ef 91       	pop	r30
    30ba:	bf 91       	pop	r27
    30bc:	af 91       	pop	r26
    30be:	9f 91       	pop	r25
    30c0:	8f 91       	pop	r24
    30c2:	7f 91       	pop	r23
    30c4:	6f 91       	pop	r22
    30c6:	5f 91       	pop	r21
    30c8:	4f 91       	pop	r20
    30ca:	3f 91       	pop	r19
    30cc:	2f 91       	pop	r18
    30ce:	0f 90       	pop	r0
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	0f 90       	pop	r0
    30d4:	1f 90       	pop	r1
    30d6:	18 95       	reti

000030d8 <TimingSelection>:
 * @param TYPE 						: takes the sevensegment types CommonAnode/CommonCathode
 * @param Time 						: take which time will activated Sec01/Sec10/Min01/Min10			
 * @return STD_Return 
 */
STD_Return TimingSelection(u8 StopWatch_ControlPort,SevenSegment_Type_t TYPE,SevenSegment_Sel_t Time)
{
    30d8:	df 93       	push	r29
    30da:	cf 93       	push	r28
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	2a 97       	sbiw	r28, 0x0a	; 10
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	f8 94       	cli
    30e6:	de bf       	out	0x3e, r29	; 62
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	cd bf       	out	0x3d, r28	; 61
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	6a 83       	std	Y+2, r22	; 0x02
    30f0:	4b 83       	std	Y+3, r20	; 0x03
	#ifdef StopWatch_ControlPort_A
	switch(TYPE)
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	28 2f       	mov	r18, r24
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	3a 87       	std	Y+10, r19	; 0x0a
    30fa:	29 87       	std	Y+9, r18	; 0x09
    30fc:	89 85       	ldd	r24, Y+9	; 0x09
    30fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	39 f0       	breq	.+14     	; 0x3112 <TimingSelection+0x3a>
    3104:	29 85       	ldd	r18, Y+9	; 0x09
    3106:	3a 85       	ldd	r19, Y+10	; 0x0a
    3108:	21 30       	cpi	r18, 0x01	; 1
    310a:	31 05       	cpc	r19, r1
    310c:	09 f4       	brne	.+2      	; 0x3110 <TimingSelection+0x38>
    310e:	77 c0       	rjmp	.+238    	; 0x31fe <TimingSelection+0x126>
    3110:	ec c0       	rjmp	.+472    	; 0x32ea <TimingSelection+0x212>
	{
		case CommonCathod:
			switch(Time)
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	28 2f       	mov	r18, r24
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	38 87       	std	Y+8, r19	; 0x08
    311a:	2f 83       	std	Y+7, r18	; 0x07
    311c:	8f 81       	ldd	r24, Y+7	; 0x07
    311e:	98 85       	ldd	r25, Y+8	; 0x08
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	91 05       	cpc	r25, r1
    3124:	59 f1       	breq	.+86     	; 0x317c <TimingSelection+0xa4>
    3126:	2f 81       	ldd	r18, Y+7	; 0x07
    3128:	38 85       	ldd	r19, Y+8	; 0x08
    312a:	22 30       	cpi	r18, 0x02	; 2
    312c:	31 05       	cpc	r19, r1
    312e:	2c f4       	brge	.+10     	; 0x313a <TimingSelection+0x62>
    3130:	8f 81       	ldd	r24, Y+7	; 0x07
    3132:	98 85       	ldd	r25, Y+8	; 0x08
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	69 f0       	breq	.+26     	; 0x3152 <TimingSelection+0x7a>
    3138:	60 c0       	rjmp	.+192    	; 0x31fa <TimingSelection+0x122>
    313a:	2f 81       	ldd	r18, Y+7	; 0x07
    313c:	38 85       	ldd	r19, Y+8	; 0x08
    313e:	22 30       	cpi	r18, 0x02	; 2
    3140:	31 05       	cpc	r19, r1
    3142:	89 f1       	breq	.+98     	; 0x31a6 <TimingSelection+0xce>
    3144:	8f 81       	ldd	r24, Y+7	; 0x07
    3146:	98 85       	ldd	r25, Y+8	; 0x08
    3148:	83 30       	cpi	r24, 0x03	; 3
    314a:	91 05       	cpc	r25, r1
    314c:	09 f4       	brne	.+2      	; 0x3150 <TimingSelection+0x78>
    314e:	40 c0       	rjmp	.+128    	; 0x31d0 <TimingSelection+0xf8>
    3150:	54 c0       	rjmp	.+168    	; 0x31fa <TimingSelection+0x122>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	60 e0       	ldi	r22, 0x00	; 0
    3156:	41 e0       	ldi	r20, 0x01	; 1
    3158:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	61 e0       	ldi	r22, 0x01	; 1
    3160:	41 e0       	ldi	r20, 0x01	; 1
    3162:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	60 e0       	ldi	r22, 0x00	; 0
    316a:	41 e0       	ldi	r20, 0x01	; 1
    316c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	61 e0       	ldi	r22, 0x01	; 1
    3174:	41 e0       	ldi	r20, 0x01	; 1
    3176:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    317a:	b9 c0       	rjmp	.+370    	; 0x32ee <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	41 e0       	ldi	r20, 0x01	; 1
    3182:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	61 e0       	ldi	r22, 0x01	; 1
    318a:	41 e0       	ldi	r20, 0x01	; 1
    318c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	60 e0       	ldi	r22, 0x00	; 0
    3194:	40 e0       	ldi	r20, 0x00	; 0
    3196:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	61 e0       	ldi	r22, 0x01	; 1
    319e:	41 e0       	ldi	r20, 0x01	; 1
    31a0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    31a4:	a4 c0       	rjmp	.+328    	; 0x32ee <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	41 e0       	ldi	r20, 0x01	; 1
    31ac:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	61 e0       	ldi	r22, 0x01	; 1
    31b4:	41 e0       	ldi	r20, 0x01	; 1
    31b6:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	60 e0       	ldi	r22, 0x00	; 0
    31be:	41 e0       	ldi	r20, 0x01	; 1
    31c0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	61 e0       	ldi	r22, 0x01	; 1
    31c8:	40 e0       	ldi	r20, 0x00	; 0
    31ca:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    31ce:	8f c0       	rjmp	.+286    	; 0x32ee <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	41 e0       	ldi	r20, 0x01	; 1
    31d6:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	41 e0       	ldi	r20, 0x01	; 1
    31e0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	60 e0       	ldi	r22, 0x00	; 0
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	61 e0       	ldi	r22, 0x01	; 1
    31f2:	40 e0       	ldi	r20, 0x00	; 0
    31f4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    31f8:	7a c0       	rjmp	.+244    	; 0x32ee <TimingSelection+0x216>
						break;
					default: return E_OK;
    31fa:	1e 82       	std	Y+6, r1	; 0x06
    31fc:	7a c0       	rjmp	.+244    	; 0x32f2 <TimingSelection+0x21a>
				}
		break;
		case CommonAnode:
			switch(Time)
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	28 2f       	mov	r18, r24
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	3d 83       	std	Y+5, r19	; 0x05
    3206:	2c 83       	std	Y+4, r18	; 0x04
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
    320a:	9d 81       	ldd	r25, Y+5	; 0x05
    320c:	81 30       	cpi	r24, 0x01	; 1
    320e:	91 05       	cpc	r25, r1
    3210:	59 f1       	breq	.+86     	; 0x3268 <TimingSelection+0x190>
    3212:	2c 81       	ldd	r18, Y+4	; 0x04
    3214:	3d 81       	ldd	r19, Y+5	; 0x05
    3216:	22 30       	cpi	r18, 0x02	; 2
    3218:	31 05       	cpc	r19, r1
    321a:	2c f4       	brge	.+10     	; 0x3226 <TimingSelection+0x14e>
    321c:	8c 81       	ldd	r24, Y+4	; 0x04
    321e:	9d 81       	ldd	r25, Y+5	; 0x05
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	69 f0       	breq	.+26     	; 0x323e <TimingSelection+0x166>
    3224:	60 c0       	rjmp	.+192    	; 0x32e6 <TimingSelection+0x20e>
    3226:	2c 81       	ldd	r18, Y+4	; 0x04
    3228:	3d 81       	ldd	r19, Y+5	; 0x05
    322a:	22 30       	cpi	r18, 0x02	; 2
    322c:	31 05       	cpc	r19, r1
    322e:	89 f1       	breq	.+98     	; 0x3292 <TimingSelection+0x1ba>
    3230:	8c 81       	ldd	r24, Y+4	; 0x04
    3232:	9d 81       	ldd	r25, Y+5	; 0x05
    3234:	83 30       	cpi	r24, 0x03	; 3
    3236:	91 05       	cpc	r25, r1
    3238:	09 f4       	brne	.+2      	; 0x323c <TimingSelection+0x164>
    323a:	40 c0       	rjmp	.+128    	; 0x32bc <TimingSelection+0x1e4>
    323c:	54 c0       	rjmp	.+168    	; 0x32e6 <TimingSelection+0x20e>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	60 e0       	ldi	r22, 0x00	; 0
    3242:	41 e0       	ldi	r20, 0x01	; 1
    3244:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	61 e0       	ldi	r22, 0x01	; 1
    324c:	41 e0       	ldi	r20, 0x01	; 1
    324e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	40 e0       	ldi	r20, 0x00	; 0
    3258:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	61 e0       	ldi	r22, 0x01	; 1
    3260:	40 e0       	ldi	r20, 0x00	; 0
    3262:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3266:	43 c0       	rjmp	.+134    	; 0x32ee <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	41 e0       	ldi	r20, 0x01	; 1
    326e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	61 e0       	ldi	r22, 0x01	; 1
    3276:	41 e0       	ldi	r20, 0x01	; 1
    3278:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	41 e0       	ldi	r20, 0x01	; 1
    3282:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	61 e0       	ldi	r22, 0x01	; 1
    328a:	40 e0       	ldi	r20, 0x00	; 0
    328c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3290:	2e c0       	rjmp	.+92     	; 0x32ee <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	60 e0       	ldi	r22, 0x00	; 0
    3296:	41 e0       	ldi	r20, 0x01	; 1
    3298:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	61 e0       	ldi	r22, 0x01	; 1
    32a0:	41 e0       	ldi	r20, 0x01	; 1
    32a2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	61 e0       	ldi	r22, 0x01	; 1
    32b4:	41 e0       	ldi	r20, 0x01	; 1
    32b6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    32ba:	19 c0       	rjmp	.+50     	; 0x32ee <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	41 e0       	ldi	r20, 0x01	; 1
    32c2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	61 e0       	ldi	r22, 0x01	; 1
    32ca:	41 e0       	ldi	r20, 0x01	; 1
    32cc:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	60 e0       	ldi	r22, 0x00	; 0
    32d4:	41 e0       	ldi	r20, 0x01	; 1
    32d6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	41 e0       	ldi	r20, 0x01	; 1
    32e0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    32e4:	04 c0       	rjmp	.+8      	; 0x32ee <TimingSelection+0x216>
						break;
					default: return E_OK;
    32e6:	1e 82       	std	Y+6, r1	; 0x06
    32e8:	04 c0       	rjmp	.+8      	; 0x32f2 <TimingSelection+0x21a>
				}
		break;
		default:
		return E_OK;
    32ea:	1e 82       	std	Y+6, r1	; 0x06
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <TimingSelection+0x21a>
			break;
			default:
			return E_OK;
		}
#endif
	return E_NOK;
    32ee:	91 e0       	ldi	r25, 0x01	; 1
    32f0:	9e 83       	std	Y+6, r25	; 0x06
    32f2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    32f4:	2a 96       	adiw	r28, 0x0a	; 10
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	cf 91       	pop	r28
    3302:	df 91       	pop	r29
    3304:	08 95       	ret

00003306 <SevenSegment_Display>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return SevenSegment_Display(DIO_Ports_t PORT,SevenSegment_Type_t TYPE,Display_Number_t NUM)
{
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	6e 97       	sbiw	r28, 0x1e	; 30
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	6a 83       	std	Y+2, r22	; 0x02
    331e:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT)
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	28 2f       	mov	r18, r24
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	3e 8f       	std	Y+30, r19	; 0x1e
    3328:	2d 8f       	std	Y+29, r18	; 0x1d
    332a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    332c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	91 05       	cpc	r25, r1
    3332:	09 f4       	brne	.+2      	; 0x3336 <SevenSegment_Display+0x30>
    3334:	4f c2       	rjmp	.+1182   	; 0x37d4 <SevenSegment_Display+0x4ce>
    3336:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3338:	3e 8d       	ldd	r19, Y+30	; 0x1e
    333a:	22 30       	cpi	r18, 0x02	; 2
    333c:	31 05       	cpc	r19, r1
    333e:	34 f4       	brge	.+12     	; 0x334c <SevenSegment_Display+0x46>
    3340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3342:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3344:	00 97       	sbiw	r24, 0x00	; 0
    3346:	81 f0       	breq	.+32     	; 0x3368 <SevenSegment_Display+0x62>
    3348:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <SevenSegment_Display+0x11ca>
    334c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    334e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3350:	22 30       	cpi	r18, 0x02	; 2
    3352:	31 05       	cpc	r19, r1
    3354:	09 f4       	brne	.+2      	; 0x3358 <SevenSegment_Display+0x52>
    3356:	68 c4       	rjmp	.+2256   	; 0x3c28 <SevenSegment_Display+0x922>
    3358:	8d 8d       	ldd	r24, Y+29	; 0x1d
    335a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    335c:	83 30       	cpi	r24, 0x03	; 3
    335e:	91 05       	cpc	r25, r1
    3360:	09 f4       	brne	.+2      	; 0x3364 <SevenSegment_Display+0x5e>
    3362:	8c c6       	rjmp	.+3352   	; 0x407c <SevenSegment_Display+0xd76>
    3364:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <SevenSegment_Display+0x11ca>
	{
		case DIO_PORTA:
		switch(TYPE)
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	28 2f       	mov	r18, r24
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	3c 8f       	std	Y+28, r19	; 0x1c
    3370:	2b 8f       	std	Y+27, r18	; 0x1b
    3372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3376:	00 97       	sbiw	r24, 0x00	; 0
    3378:	39 f0       	breq	.+14     	; 0x3388 <SevenSegment_Display+0x82>
    337a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    337c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    337e:	21 30       	cpi	r18, 0x01	; 1
    3380:	31 05       	cpc	r19, r1
    3382:	09 f4       	brne	.+2      	; 0x3386 <SevenSegment_Display+0x80>
    3384:	18 c1       	rjmp	.+560    	; 0x35b6 <SevenSegment_Display+0x2b0>
    3386:	24 c2       	rjmp	.+1096   	; 0x37d0 <SevenSegment_Display+0x4ca>
			{
				case CommonCathod:
					DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	6f ef       	ldi	r22, 0xFF	; 255
    338c:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_LOW);
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	67 e0       	ldi	r22, 0x07	; 7
    3394:	40 e0       	ldi	r20, 0x00	; 0
    3396:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
					switch(NUM)
    339a:	8b 81       	ldd	r24, Y+3	; 0x03
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	3a 8f       	std	Y+26, r19	; 0x1a
    33a2:	29 8f       	std	Y+25, r18	; 0x19
    33a4:	89 8d       	ldd	r24, Y+25	; 0x19
    33a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33a8:	84 30       	cpi	r24, 0x04	; 4
    33aa:	91 05       	cpc	r25, r1
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <SevenSegment_Display+0xaa>
    33ae:	92 c0       	rjmp	.+292    	; 0x34d4 <SevenSegment_Display+0x1ce>
    33b0:	29 8d       	ldd	r18, Y+25	; 0x19
    33b2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33b4:	25 30       	cpi	r18, 0x05	; 5
    33b6:	31 05       	cpc	r19, r1
    33b8:	ec f4       	brge	.+58     	; 0x33f4 <SevenSegment_Display+0xee>
    33ba:	89 8d       	ldd	r24, Y+25	; 0x19
    33bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33be:	81 30       	cpi	r24, 0x01	; 1
    33c0:	91 05       	cpc	r25, r1
    33c2:	09 f4       	brne	.+2      	; 0x33c6 <SevenSegment_Display+0xc0>
    33c4:	4b c0       	rjmp	.+150    	; 0x345c <SevenSegment_Display+0x156>
    33c6:	29 8d       	ldd	r18, Y+25	; 0x19
    33c8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33ca:	22 30       	cpi	r18, 0x02	; 2
    33cc:	31 05       	cpc	r19, r1
    33ce:	2c f4       	brge	.+10     	; 0x33da <SevenSegment_Display+0xd4>
    33d0:	89 8d       	ldd	r24, Y+25	; 0x19
    33d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	99 f1       	breq	.+102    	; 0x343e <SevenSegment_Display+0x138>
    33d8:	eb c0       	rjmp	.+470    	; 0x35b0 <SevenSegment_Display+0x2aa>
    33da:	29 8d       	ldd	r18, Y+25	; 0x19
    33dc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33de:	22 30       	cpi	r18, 0x02	; 2
    33e0:	31 05       	cpc	r19, r1
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <SevenSegment_Display+0xe0>
    33e4:	4f c0       	rjmp	.+158    	; 0x3484 <SevenSegment_Display+0x17e>
    33e6:	89 8d       	ldd	r24, Y+25	; 0x19
    33e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33ea:	83 30       	cpi	r24, 0x03	; 3
    33ec:	91 05       	cpc	r25, r1
    33ee:	09 f4       	brne	.+2      	; 0x33f2 <SevenSegment_Display+0xec>
    33f0:	5d c0       	rjmp	.+186    	; 0x34ac <SevenSegment_Display+0x1a6>
    33f2:	de c0       	rjmp	.+444    	; 0x35b0 <SevenSegment_Display+0x2aa>
    33f4:	29 8d       	ldd	r18, Y+25	; 0x19
    33f6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33f8:	27 30       	cpi	r18, 0x07	; 7
    33fa:	31 05       	cpc	r19, r1
    33fc:	09 f4       	brne	.+2      	; 0x3400 <SevenSegment_Display+0xfa>
    33fe:	a6 c0       	rjmp	.+332    	; 0x354c <SevenSegment_Display+0x246>
    3400:	89 8d       	ldd	r24, Y+25	; 0x19
    3402:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3404:	88 30       	cpi	r24, 0x08	; 8
    3406:	91 05       	cpc	r25, r1
    3408:	6c f4       	brge	.+26     	; 0x3424 <SevenSegment_Display+0x11e>
    340a:	29 8d       	ldd	r18, Y+25	; 0x19
    340c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    340e:	25 30       	cpi	r18, 0x05	; 5
    3410:	31 05       	cpc	r19, r1
    3412:	09 f4       	brne	.+2      	; 0x3416 <SevenSegment_Display+0x110>
    3414:	78 c0       	rjmp	.+240    	; 0x3506 <SevenSegment_Display+0x200>
    3416:	89 8d       	ldd	r24, Y+25	; 0x19
    3418:	9a 8d       	ldd	r25, Y+26	; 0x1a
    341a:	86 30       	cpi	r24, 0x06	; 6
    341c:	91 05       	cpc	r25, r1
    341e:	09 f4       	brne	.+2      	; 0x3422 <SevenSegment_Display+0x11c>
    3420:	86 c0       	rjmp	.+268    	; 0x352e <SevenSegment_Display+0x228>
    3422:	c6 c0       	rjmp	.+396    	; 0x35b0 <SevenSegment_Display+0x2aa>
    3424:	29 8d       	ldd	r18, Y+25	; 0x19
    3426:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3428:	28 30       	cpi	r18, 0x08	; 8
    342a:	31 05       	cpc	r19, r1
    342c:	09 f4       	brne	.+2      	; 0x3430 <SevenSegment_Display+0x12a>
    342e:	a7 c0       	rjmp	.+334    	; 0x357e <SevenSegment_Display+0x278>
    3430:	89 8d       	ldd	r24, Y+25	; 0x19
    3432:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3434:	89 30       	cpi	r24, 0x09	; 9
    3436:	91 05       	cpc	r25, r1
    3438:	09 f4       	brne	.+2      	; 0x343c <SevenSegment_Display+0x136>
    343a:	ab c0       	rjmp	.+342    	; 0x3592 <SevenSegment_Display+0x28c>
    343c:	b9 c0       	rjmp	.+370    	; 0x35b0 <SevenSegment_Display+0x2aa>
						{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	6f ef       	ldi	r22, 0xFF	; 255
    3442:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	6f ef       	ldi	r22, 0xFF	; 255
    344a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_LOW);
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	66 e0       	ldi	r22, 0x06	; 6
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3458:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	6f ef       	ldi	r22, 0xFF	; 255
    3460:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	61 e0       	ldi	r22, 0x01	; 1
    3470:	41 e0       	ldi	r20, 0x01	; 1
    3472:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	62 e0       	ldi	r22, 0x02	; 2
    347a:	41 e0       	ldi	r20, 0x01	; 1
    347c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3480:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	6f ef       	ldi	r22, 0xFF	; 255
    3488:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	6f ef       	ldi	r22, 0xFF	; 255
    3490:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	62 e0       	ldi	r22, 0x02	; 2
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	65 e0       	ldi	r22, 0x05	; 5
    34a2:	40 e0       	ldi	r20, 0x00	; 0
    34a4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    34a8:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	6f ef       	ldi	r22, 0xFF	; 255
    34b0:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	6f ef       	ldi	r22, 0xFF	; 255
    34b8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	64 e0       	ldi	r22, 0x04	; 4
    34c0:	40 e0       	ldi	r20, 0x00	; 0
    34c2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	65 e0       	ldi	r22, 0x05	; 5
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    34d0:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	6f ef       	ldi	r22, 0xFF	; 255
    34d8:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	6f ef       	ldi	r22, 0xFF	; 255
    34e0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	40 e0       	ldi	r20, 0x00	; 0
    34ea:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_LOW);
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	63 e0       	ldi	r22, 0x03	; 3
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	64 e0       	ldi	r22, 0x04	; 4
    34fc:	40 e0       	ldi	r20, 0x00	; 0
    34fe:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3502:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	6f ef       	ldi	r22, 0xFF	; 255
    350a:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	6f ef       	ldi	r22, 0xFF	; 255
    3512:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	61 e0       	ldi	r22, 0x01	; 1
    351a:	40 e0       	ldi	r20, 0x00	; 0
    351c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	64 e0       	ldi	r22, 0x04	; 4
    3524:	40 e0       	ldi	r20, 0x00	; 0
    3526:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    352a:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	6f ef       	ldi	r22, 0xFF	; 255
    3532:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	6f ef       	ldi	r22, 0xFF	; 255
    353a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	61 e0       	ldi	r22, 0x01	; 1
    3542:	40 e0       	ldi	r20, 0x00	; 0
    3544:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3548:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	6f ef       	ldi	r22, 0xFF	; 255
    3550:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	41 e0       	ldi	r20, 0x01	; 1
    3562:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	61 e0       	ldi	r22, 0x01	; 1
    356a:	41 e0       	ldi	r20, 0x01	; 1
    356c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	62 e0       	ldi	r22, 0x02	; 2
    3574:	41 e0       	ldi	r20, 0x01	; 1
    3576:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    357a:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	6f ef       	ldi	r22, 0xFF	; 255
    3582:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	6f ef       	ldi	r22, 0xFF	; 255
    358a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
    358e:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	6f ef       	ldi	r22, 0xFF	; 255
    3596:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	6f ef       	ldi	r22, 0xFF	; 255
    359e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	64 e0       	ldi	r22, 0x04	; 4
    35a6:	40 e0       	ldi	r20, 0x00	; 0
    35a8:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    35ac:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    35b0:	18 8e       	std	Y+24, r1	; 0x18
    35b2:	0c 94 6c 22 	jmp	0x44d8	; 0x44d8 <SevenSegment_Display+0x11d2>
					}
					break;
			case CommonAnode:
				DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	6f ef       	ldi	r22, 0xFF	; 255
    35ba:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
				DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_HIGH);
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	67 e0       	ldi	r22, 0x07	; 7
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
				switch(NUM)
    35c8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ca:	28 2f       	mov	r18, r24
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	3f 8b       	std	Y+23, r19	; 0x17
    35d0:	2e 8b       	std	Y+22, r18	; 0x16
    35d2:	8e 89       	ldd	r24, Y+22	; 0x16
    35d4:	9f 89       	ldd	r25, Y+23	; 0x17
    35d6:	84 30       	cpi	r24, 0x04	; 4
    35d8:	91 05       	cpc	r25, r1
    35da:	09 f4       	brne	.+2      	; 0x35de <SevenSegment_Display+0x2d8>
    35dc:	8f c0       	rjmp	.+286    	; 0x36fc <SevenSegment_Display+0x3f6>
    35de:	2e 89       	ldd	r18, Y+22	; 0x16
    35e0:	3f 89       	ldd	r19, Y+23	; 0x17
    35e2:	25 30       	cpi	r18, 0x05	; 5
    35e4:	31 05       	cpc	r19, r1
    35e6:	ec f4       	brge	.+58     	; 0x3622 <SevenSegment_Display+0x31c>
    35e8:	8e 89       	ldd	r24, Y+22	; 0x16
    35ea:	9f 89       	ldd	r25, Y+23	; 0x17
    35ec:	81 30       	cpi	r24, 0x01	; 1
    35ee:	91 05       	cpc	r25, r1
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <SevenSegment_Display+0x2ee>
    35f2:	4b c0       	rjmp	.+150    	; 0x368a <SevenSegment_Display+0x384>
    35f4:	2e 89       	ldd	r18, Y+22	; 0x16
    35f6:	3f 89       	ldd	r19, Y+23	; 0x17
    35f8:	22 30       	cpi	r18, 0x02	; 2
    35fa:	31 05       	cpc	r19, r1
    35fc:	2c f4       	brge	.+10     	; 0x3608 <SevenSegment_Display+0x302>
    35fe:	8e 89       	ldd	r24, Y+22	; 0x16
    3600:	9f 89       	ldd	r25, Y+23	; 0x17
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	99 f1       	breq	.+102    	; 0x366c <SevenSegment_Display+0x366>
    3606:	e2 c0       	rjmp	.+452    	; 0x37cc <SevenSegment_Display+0x4c6>
    3608:	2e 89       	ldd	r18, Y+22	; 0x16
    360a:	3f 89       	ldd	r19, Y+23	; 0x17
    360c:	22 30       	cpi	r18, 0x02	; 2
    360e:	31 05       	cpc	r19, r1
    3610:	09 f4       	brne	.+2      	; 0x3614 <SevenSegment_Display+0x30e>
    3612:	4e c0       	rjmp	.+156    	; 0x36b0 <SevenSegment_Display+0x3aa>
    3614:	8e 89       	ldd	r24, Y+22	; 0x16
    3616:	9f 89       	ldd	r25, Y+23	; 0x17
    3618:	83 30       	cpi	r24, 0x03	; 3
    361a:	91 05       	cpc	r25, r1
    361c:	09 f4       	brne	.+2      	; 0x3620 <SevenSegment_Display+0x31a>
    361e:	5b c0       	rjmp	.+182    	; 0x36d6 <SevenSegment_Display+0x3d0>
    3620:	d5 c0       	rjmp	.+426    	; 0x37cc <SevenSegment_Display+0x4c6>
    3622:	2e 89       	ldd	r18, Y+22	; 0x16
    3624:	3f 89       	ldd	r19, Y+23	; 0x17
    3626:	27 30       	cpi	r18, 0x07	; 7
    3628:	31 05       	cpc	r19, r1
    362a:	09 f4       	brne	.+2      	; 0x362e <SevenSegment_Display+0x328>
    362c:	a0 c0       	rjmp	.+320    	; 0x376e <SevenSegment_Display+0x468>
    362e:	8e 89       	ldd	r24, Y+22	; 0x16
    3630:	9f 89       	ldd	r25, Y+23	; 0x17
    3632:	88 30       	cpi	r24, 0x08	; 8
    3634:	91 05       	cpc	r25, r1
    3636:	6c f4       	brge	.+26     	; 0x3652 <SevenSegment_Display+0x34c>
    3638:	2e 89       	ldd	r18, Y+22	; 0x16
    363a:	3f 89       	ldd	r19, Y+23	; 0x17
    363c:	25 30       	cpi	r18, 0x05	; 5
    363e:	31 05       	cpc	r19, r1
    3640:	09 f4       	brne	.+2      	; 0x3644 <SevenSegment_Display+0x33e>
    3642:	74 c0       	rjmp	.+232    	; 0x372c <SevenSegment_Display+0x426>
    3644:	8e 89       	ldd	r24, Y+22	; 0x16
    3646:	9f 89       	ldd	r25, Y+23	; 0x17
    3648:	86 30       	cpi	r24, 0x06	; 6
    364a:	91 05       	cpc	r25, r1
    364c:	09 f4       	brne	.+2      	; 0x3650 <SevenSegment_Display+0x34a>
    364e:	81 c0       	rjmp	.+258    	; 0x3752 <SevenSegment_Display+0x44c>
    3650:	bd c0       	rjmp	.+378    	; 0x37cc <SevenSegment_Display+0x4c6>
    3652:	2e 89       	ldd	r18, Y+22	; 0x16
    3654:	3f 89       	ldd	r19, Y+23	; 0x17
    3656:	28 30       	cpi	r18, 0x08	; 8
    3658:	31 05       	cpc	r19, r1
    365a:	09 f4       	brne	.+2      	; 0x365e <SevenSegment_Display+0x358>
    365c:	a0 c0       	rjmp	.+320    	; 0x379e <SevenSegment_Display+0x498>
    365e:	8e 89       	ldd	r24, Y+22	; 0x16
    3660:	9f 89       	ldd	r25, Y+23	; 0x17
    3662:	89 30       	cpi	r24, 0x09	; 9
    3664:	91 05       	cpc	r25, r1
    3666:	09 f4       	brne	.+2      	; 0x366a <SevenSegment_Display+0x364>
    3668:	a3 c0       	rjmp	.+326    	; 0x37b0 <SevenSegment_Display+0x4aa>
    366a:	b0 c0       	rjmp	.+352    	; 0x37cc <SevenSegment_Display+0x4c6>
					{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	6f ef       	ldi	r22, 0xFF	; 255
    3670:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	60 e0       	ldi	r22, 0x00	; 0
    3678:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_HIGH);
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	66 e0       	ldi	r22, 0x06	; 6
    3680:	41 e0       	ldi	r20, 0x01	; 1
    3682:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3686:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	6f ef       	ldi	r22, 0xFF	; 255
    368e:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	6f ef       	ldi	r22, 0xFF	; 255
    3696:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	61 e0       	ldi	r22, 0x01	; 1
    369e:	40 e0       	ldi	r20, 0x00	; 0
    36a0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	62 e0       	ldi	r22, 0x02	; 2
    36a8:	40 e0       	ldi	r20, 0x00	; 0
    36aa:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    36ae:	12 c7       	rjmp	.+3620   	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	6f ef       	ldi	r22, 0xFF	; 255
    36b4:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	62 e0       	ldi	r22, 0x02	; 2
    36c4:	41 e0       	ldi	r20, 0x01	; 1
    36c6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	65 e0       	ldi	r22, 0x05	; 5
    36ce:	41 e0       	ldi	r20, 0x01	; 1
    36d0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    36d4:	ff c6       	rjmp	.+3582   	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	6f ef       	ldi	r22, 0xFF	; 255
    36da:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	64 e0       	ldi	r22, 0x04	; 4
    36ea:	41 e0       	ldi	r20, 0x01	; 1
    36ec:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	65 e0       	ldi	r22, 0x05	; 5
    36f4:	41 e0       	ldi	r20, 0x01	; 1
    36f6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    36fa:	ec c6       	rjmp	.+3544   	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	6f ef       	ldi	r22, 0xFF	; 255
    3700:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	60 e0       	ldi	r22, 0x00	; 0
    3708:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	41 e0       	ldi	r20, 0x01	; 1
    3712:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_HIGH);
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	63 e0       	ldi	r22, 0x03	; 3
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	64 e0       	ldi	r22, 0x04	; 4
    3724:	41 e0       	ldi	r20, 0x01	; 1
    3726:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    372a:	d4 c6       	rjmp	.+3496   	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	6f ef       	ldi	r22, 0xFF	; 255
    3730:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	61 e0       	ldi	r22, 0x01	; 1
    3740:	41 e0       	ldi	r20, 0x01	; 1
    3742:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	64 e0       	ldi	r22, 0x04	; 4
    374a:	41 e0       	ldi	r20, 0x01	; 1
    374c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3750:	c1 c6       	rjmp	.+3458   	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	6f ef       	ldi	r22, 0xFF	; 255
    3756:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	60 e0       	ldi	r22, 0x00	; 0
    375e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	61 e0       	ldi	r22, 0x01	; 1
    3766:	41 e0       	ldi	r20, 0x01	; 1
    3768:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    376c:	b3 c6       	rjmp	.+3430   	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	6f ef       	ldi	r22, 0xFF	; 255
    3772:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	6f ef       	ldi	r22, 0xFF	; 255
    377a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	61 e0       	ldi	r22, 0x01	; 1
    378c:	40 e0       	ldi	r20, 0x00	; 0
    378e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	62 e0       	ldi	r22, 0x02	; 2
    3796:	40 e0       	ldi	r20, 0x00	; 0
    3798:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    379c:	9b c6       	rjmp	.+3382   	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	6f ef       	ldi	r22, 0xFF	; 255
    37a2:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
    37ae:	92 c6       	rjmp	.+3364   	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	6f ef       	ldi	r22, 0xFF	; 255
    37b4:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	60 e0       	ldi	r22, 0x00	; 0
    37bc:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	64 e0       	ldi	r22, 0x04	; 4
    37c4:	41 e0       	ldi	r20, 0x01	; 1
    37c6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    37ca:	84 c6       	rjmp	.+3336   	; 0x44d4 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    37cc:	18 8e       	std	Y+24, r1	; 0x18
    37ce:	84 c6       	rjmp	.+3336   	; 0x44d8 <SevenSegment_Display+0x11d2>
					}
			break;
			default:
			return E_OK;
    37d0:	18 8e       	std	Y+24, r1	; 0x18
    37d2:	82 c6       	rjmp	.+3332   	; 0x44d8 <SevenSegment_Display+0x11d2>
		}
		break;
		case DIO_PORTB:
			switch(TYPE)
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	28 2f       	mov	r18, r24
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	3d 8b       	std	Y+21, r19	; 0x15
    37dc:	2c 8b       	std	Y+20, r18	; 0x14
    37de:	8c 89       	ldd	r24, Y+20	; 0x14
    37e0:	9d 89       	ldd	r25, Y+21	; 0x15
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	39 f0       	breq	.+14     	; 0x37f4 <SevenSegment_Display+0x4ee>
    37e6:	2c 89       	ldd	r18, Y+20	; 0x14
    37e8:	3d 89       	ldd	r19, Y+21	; 0x15
    37ea:	21 30       	cpi	r18, 0x01	; 1
    37ec:	31 05       	cpc	r19, r1
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <SevenSegment_Display+0x4ec>
    37f0:	0d c1       	rjmp	.+538    	; 0x3a0c <SevenSegment_Display+0x706>
    37f2:	18 c2       	rjmp	.+1072   	; 0x3c24 <SevenSegment_Display+0x91e>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	6f ef       	ldi	r22, 0xFF	; 255
    37f8:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_LOW);
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	67 e0       	ldi	r22, 0x07	; 7
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						switch(NUM)
    3806:	8b 81       	ldd	r24, Y+3	; 0x03
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	3b 8b       	std	Y+19, r19	; 0x13
    380e:	2a 8b       	std	Y+18, r18	; 0x12
    3810:	8a 89       	ldd	r24, Y+18	; 0x12
    3812:	9b 89       	ldd	r25, Y+19	; 0x13
    3814:	84 30       	cpi	r24, 0x04	; 4
    3816:	91 05       	cpc	r25, r1
    3818:	09 f4       	brne	.+2      	; 0x381c <SevenSegment_Display+0x516>
    381a:	8e c0       	rjmp	.+284    	; 0x3938 <SevenSegment_Display+0x632>
    381c:	2a 89       	ldd	r18, Y+18	; 0x12
    381e:	3b 89       	ldd	r19, Y+19	; 0x13
    3820:	25 30       	cpi	r18, 0x05	; 5
    3822:	31 05       	cpc	r19, r1
    3824:	ec f4       	brge	.+58     	; 0x3860 <SevenSegment_Display+0x55a>
    3826:	8a 89       	ldd	r24, Y+18	; 0x12
    3828:	9b 89       	ldd	r25, Y+19	; 0x13
    382a:	81 30       	cpi	r24, 0x01	; 1
    382c:	91 05       	cpc	r25, r1
    382e:	09 f4       	brne	.+2      	; 0x3832 <SevenSegment_Display+0x52c>
    3830:	4a c0       	rjmp	.+148    	; 0x38c6 <SevenSegment_Display+0x5c0>
    3832:	2a 89       	ldd	r18, Y+18	; 0x12
    3834:	3b 89       	ldd	r19, Y+19	; 0x13
    3836:	22 30       	cpi	r18, 0x02	; 2
    3838:	31 05       	cpc	r19, r1
    383a:	2c f4       	brge	.+10     	; 0x3846 <SevenSegment_Display+0x540>
    383c:	8a 89       	ldd	r24, Y+18	; 0x12
    383e:	9b 89       	ldd	r25, Y+19	; 0x13
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	99 f1       	breq	.+102    	; 0x38aa <SevenSegment_Display+0x5a4>
    3844:	e1 c0       	rjmp	.+450    	; 0x3a08 <SevenSegment_Display+0x702>
    3846:	2a 89       	ldd	r18, Y+18	; 0x12
    3848:	3b 89       	ldd	r19, Y+19	; 0x13
    384a:	22 30       	cpi	r18, 0x02	; 2
    384c:	31 05       	cpc	r19, r1
    384e:	09 f4       	brne	.+2      	; 0x3852 <SevenSegment_Display+0x54c>
    3850:	4d c0       	rjmp	.+154    	; 0x38ec <SevenSegment_Display+0x5e6>
    3852:	8a 89       	ldd	r24, Y+18	; 0x12
    3854:	9b 89       	ldd	r25, Y+19	; 0x13
    3856:	83 30       	cpi	r24, 0x03	; 3
    3858:	91 05       	cpc	r25, r1
    385a:	09 f4       	brne	.+2      	; 0x385e <SevenSegment_Display+0x558>
    385c:	5a c0       	rjmp	.+180    	; 0x3912 <SevenSegment_Display+0x60c>
    385e:	d4 c0       	rjmp	.+424    	; 0x3a08 <SevenSegment_Display+0x702>
    3860:	2a 89       	ldd	r18, Y+18	; 0x12
    3862:	3b 89       	ldd	r19, Y+19	; 0x13
    3864:	27 30       	cpi	r18, 0x07	; 7
    3866:	31 05       	cpc	r19, r1
    3868:	09 f4       	brne	.+2      	; 0x386c <SevenSegment_Display+0x566>
    386a:	9f c0       	rjmp	.+318    	; 0x39aa <SevenSegment_Display+0x6a4>
    386c:	8a 89       	ldd	r24, Y+18	; 0x12
    386e:	9b 89       	ldd	r25, Y+19	; 0x13
    3870:	88 30       	cpi	r24, 0x08	; 8
    3872:	91 05       	cpc	r25, r1
    3874:	6c f4       	brge	.+26     	; 0x3890 <SevenSegment_Display+0x58a>
    3876:	2a 89       	ldd	r18, Y+18	; 0x12
    3878:	3b 89       	ldd	r19, Y+19	; 0x13
    387a:	25 30       	cpi	r18, 0x05	; 5
    387c:	31 05       	cpc	r19, r1
    387e:	09 f4       	brne	.+2      	; 0x3882 <SevenSegment_Display+0x57c>
    3880:	73 c0       	rjmp	.+230    	; 0x3968 <SevenSegment_Display+0x662>
    3882:	8a 89       	ldd	r24, Y+18	; 0x12
    3884:	9b 89       	ldd	r25, Y+19	; 0x13
    3886:	86 30       	cpi	r24, 0x06	; 6
    3888:	91 05       	cpc	r25, r1
    388a:	09 f4       	brne	.+2      	; 0x388e <SevenSegment_Display+0x588>
    388c:	80 c0       	rjmp	.+256    	; 0x398e <SevenSegment_Display+0x688>
    388e:	bc c0       	rjmp	.+376    	; 0x3a08 <SevenSegment_Display+0x702>
    3890:	2a 89       	ldd	r18, Y+18	; 0x12
    3892:	3b 89       	ldd	r19, Y+19	; 0x13
    3894:	28 30       	cpi	r18, 0x08	; 8
    3896:	31 05       	cpc	r19, r1
    3898:	09 f4       	brne	.+2      	; 0x389c <SevenSegment_Display+0x596>
    389a:	9f c0       	rjmp	.+318    	; 0x39da <SevenSegment_Display+0x6d4>
    389c:	8a 89       	ldd	r24, Y+18	; 0x12
    389e:	9b 89       	ldd	r25, Y+19	; 0x13
    38a0:	89 30       	cpi	r24, 0x09	; 9
    38a2:	91 05       	cpc	r25, r1
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <SevenSegment_Display+0x5a2>
    38a6:	a2 c0       	rjmp	.+324    	; 0x39ec <SevenSegment_Display+0x6e6>
    38a8:	af c0       	rjmp	.+350    	; 0x3a08 <SevenSegment_Display+0x702>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	6f ef       	ldi	r22, 0xFF	; 255
    38ae:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	6f ef       	ldi	r22, 0xFF	; 255
    38b6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_LOW);
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	66 e0       	ldi	r22, 0x06	; 6
    38be:	40 e0       	ldi	r20, 0x00	; 0
    38c0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    38c4:	07 c6       	rjmp	.+3086   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	6f ef       	ldi	r22, 0xFF	; 255
    38ca:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	60 e0       	ldi	r22, 0x00	; 0
    38d2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	61 e0       	ldi	r22, 0x01	; 1
    38da:	41 e0       	ldi	r20, 0x01	; 1
    38dc:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	62 e0       	ldi	r22, 0x02	; 2
    38e4:	41 e0       	ldi	r20, 0x01	; 1
    38e6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    38ea:	f4 c5       	rjmp	.+3048   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	6f ef       	ldi	r22, 0xFF	; 255
    38f0:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	6f ef       	ldi	r22, 0xFF	; 255
    38f8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	62 e0       	ldi	r22, 0x02	; 2
    3900:	40 e0       	ldi	r20, 0x00	; 0
    3902:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	65 e0       	ldi	r22, 0x05	; 5
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3910:	e1 c5       	rjmp	.+3010   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	6f ef       	ldi	r22, 0xFF	; 255
    3916:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	6f ef       	ldi	r22, 0xFF	; 255
    391e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	64 e0       	ldi	r22, 0x04	; 4
    3926:	40 e0       	ldi	r20, 0x00	; 0
    3928:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	65 e0       	ldi	r22, 0x05	; 5
    3930:	40 e0       	ldi	r20, 0x00	; 0
    3932:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3936:	ce c5       	rjmp	.+2972   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	6f ef       	ldi	r22, 0xFF	; 255
    393c:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	6f ef       	ldi	r22, 0xFF	; 255
    3944:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	60 e0       	ldi	r22, 0x00	; 0
    394c:	40 e0       	ldi	r20, 0x00	; 0
    394e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_LOW);
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	63 e0       	ldi	r22, 0x03	; 3
    3956:	40 e0       	ldi	r20, 0x00	; 0
    3958:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	64 e0       	ldi	r22, 0x04	; 4
    3960:	40 e0       	ldi	r20, 0x00	; 0
    3962:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3966:	b6 c5       	rjmp	.+2924   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	6f ef       	ldi	r22, 0xFF	; 255
    396c:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	6f ef       	ldi	r22, 0xFF	; 255
    3974:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	61 e0       	ldi	r22, 0x01	; 1
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	64 e0       	ldi	r22, 0x04	; 4
    3986:	40 e0       	ldi	r20, 0x00	; 0
    3988:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    398c:	a3 c5       	rjmp	.+2886   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	6f ef       	ldi	r22, 0xFF	; 255
    3992:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	6f ef       	ldi	r22, 0xFF	; 255
    399a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	61 e0       	ldi	r22, 0x01	; 1
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    39a8:	95 c5       	rjmp	.+2858   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	6f ef       	ldi	r22, 0xFF	; 255
    39ae:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	60 e0       	ldi	r22, 0x00	; 0
    39b6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	41 e0       	ldi	r20, 0x01	; 1
    39c0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	61 e0       	ldi	r22, 0x01	; 1
    39c8:	41 e0       	ldi	r20, 0x01	; 1
    39ca:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    39ce:	81 e0       	ldi	r24, 0x01	; 1
    39d0:	62 e0       	ldi	r22, 0x02	; 2
    39d2:	41 e0       	ldi	r20, 0x01	; 1
    39d4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    39d8:	7d c5       	rjmp	.+2810   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	6f ef       	ldi	r22, 0xFF	; 255
    39de:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	6f ef       	ldi	r22, 0xFF	; 255
    39e6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
    39ea:	74 c5       	rjmp	.+2792   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	6f ef       	ldi	r22, 0xFF	; 255
    39f0:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	6f ef       	ldi	r22, 0xFF	; 255
    39f8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	64 e0       	ldi	r22, 0x04	; 4
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3a06:	66 c5       	rjmp	.+2764   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3a08:	18 8e       	std	Y+24, r1	; 0x18
    3a0a:	66 c5       	rjmp	.+2764   	; 0x44d8 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	6f ef       	ldi	r22, 0xFF	; 255
    3a10:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_HIGH);
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	67 e0       	ldi	r22, 0x07	; 7
    3a18:	41 e0       	ldi	r20, 0x01	; 1
    3a1a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
					switch(NUM)
    3a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a20:	28 2f       	mov	r18, r24
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	39 8b       	std	Y+17, r19	; 0x11
    3a26:	28 8b       	std	Y+16, r18	; 0x10
    3a28:	88 89       	ldd	r24, Y+16	; 0x10
    3a2a:	99 89       	ldd	r25, Y+17	; 0x11
    3a2c:	84 30       	cpi	r24, 0x04	; 4
    3a2e:	91 05       	cpc	r25, r1
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <SevenSegment_Display+0x72e>
    3a32:	8e c0       	rjmp	.+284    	; 0x3b50 <SevenSegment_Display+0x84a>
    3a34:	28 89       	ldd	r18, Y+16	; 0x10
    3a36:	39 89       	ldd	r19, Y+17	; 0x11
    3a38:	25 30       	cpi	r18, 0x05	; 5
    3a3a:	31 05       	cpc	r19, r1
    3a3c:	ec f4       	brge	.+58     	; 0x3a78 <SevenSegment_Display+0x772>
    3a3e:	88 89       	ldd	r24, Y+16	; 0x10
    3a40:	99 89       	ldd	r25, Y+17	; 0x11
    3a42:	81 30       	cpi	r24, 0x01	; 1
    3a44:	91 05       	cpc	r25, r1
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <SevenSegment_Display+0x744>
    3a48:	4a c0       	rjmp	.+148    	; 0x3ade <SevenSegment_Display+0x7d8>
    3a4a:	28 89       	ldd	r18, Y+16	; 0x10
    3a4c:	39 89       	ldd	r19, Y+17	; 0x11
    3a4e:	22 30       	cpi	r18, 0x02	; 2
    3a50:	31 05       	cpc	r19, r1
    3a52:	2c f4       	brge	.+10     	; 0x3a5e <SevenSegment_Display+0x758>
    3a54:	88 89       	ldd	r24, Y+16	; 0x10
    3a56:	99 89       	ldd	r25, Y+17	; 0x11
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	99 f1       	breq	.+102    	; 0x3ac2 <SevenSegment_Display+0x7bc>
    3a5c:	e1 c0       	rjmp	.+450    	; 0x3c20 <SevenSegment_Display+0x91a>
    3a5e:	28 89       	ldd	r18, Y+16	; 0x10
    3a60:	39 89       	ldd	r19, Y+17	; 0x11
    3a62:	22 30       	cpi	r18, 0x02	; 2
    3a64:	31 05       	cpc	r19, r1
    3a66:	09 f4       	brne	.+2      	; 0x3a6a <SevenSegment_Display+0x764>
    3a68:	4d c0       	rjmp	.+154    	; 0x3b04 <SevenSegment_Display+0x7fe>
    3a6a:	88 89       	ldd	r24, Y+16	; 0x10
    3a6c:	99 89       	ldd	r25, Y+17	; 0x11
    3a6e:	83 30       	cpi	r24, 0x03	; 3
    3a70:	91 05       	cpc	r25, r1
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <SevenSegment_Display+0x770>
    3a74:	5a c0       	rjmp	.+180    	; 0x3b2a <SevenSegment_Display+0x824>
    3a76:	d4 c0       	rjmp	.+424    	; 0x3c20 <SevenSegment_Display+0x91a>
    3a78:	28 89       	ldd	r18, Y+16	; 0x10
    3a7a:	39 89       	ldd	r19, Y+17	; 0x11
    3a7c:	27 30       	cpi	r18, 0x07	; 7
    3a7e:	31 05       	cpc	r19, r1
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <SevenSegment_Display+0x77e>
    3a82:	9f c0       	rjmp	.+318    	; 0x3bc2 <SevenSegment_Display+0x8bc>
    3a84:	88 89       	ldd	r24, Y+16	; 0x10
    3a86:	99 89       	ldd	r25, Y+17	; 0x11
    3a88:	88 30       	cpi	r24, 0x08	; 8
    3a8a:	91 05       	cpc	r25, r1
    3a8c:	6c f4       	brge	.+26     	; 0x3aa8 <SevenSegment_Display+0x7a2>
    3a8e:	28 89       	ldd	r18, Y+16	; 0x10
    3a90:	39 89       	ldd	r19, Y+17	; 0x11
    3a92:	25 30       	cpi	r18, 0x05	; 5
    3a94:	31 05       	cpc	r19, r1
    3a96:	09 f4       	brne	.+2      	; 0x3a9a <SevenSegment_Display+0x794>
    3a98:	73 c0       	rjmp	.+230    	; 0x3b80 <SevenSegment_Display+0x87a>
    3a9a:	88 89       	ldd	r24, Y+16	; 0x10
    3a9c:	99 89       	ldd	r25, Y+17	; 0x11
    3a9e:	86 30       	cpi	r24, 0x06	; 6
    3aa0:	91 05       	cpc	r25, r1
    3aa2:	09 f4       	brne	.+2      	; 0x3aa6 <SevenSegment_Display+0x7a0>
    3aa4:	80 c0       	rjmp	.+256    	; 0x3ba6 <SevenSegment_Display+0x8a0>
    3aa6:	bc c0       	rjmp	.+376    	; 0x3c20 <SevenSegment_Display+0x91a>
    3aa8:	28 89       	ldd	r18, Y+16	; 0x10
    3aaa:	39 89       	ldd	r19, Y+17	; 0x11
    3aac:	28 30       	cpi	r18, 0x08	; 8
    3aae:	31 05       	cpc	r19, r1
    3ab0:	09 f4       	brne	.+2      	; 0x3ab4 <SevenSegment_Display+0x7ae>
    3ab2:	9f c0       	rjmp	.+318    	; 0x3bf2 <SevenSegment_Display+0x8ec>
    3ab4:	88 89       	ldd	r24, Y+16	; 0x10
    3ab6:	99 89       	ldd	r25, Y+17	; 0x11
    3ab8:	89 30       	cpi	r24, 0x09	; 9
    3aba:	91 05       	cpc	r25, r1
    3abc:	09 f4       	brne	.+2      	; 0x3ac0 <SevenSegment_Display+0x7ba>
    3abe:	a2 c0       	rjmp	.+324    	; 0x3c04 <SevenSegment_Display+0x8fe>
    3ac0:	af c0       	rjmp	.+350    	; 0x3c20 <SevenSegment_Display+0x91a>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	6f ef       	ldi	r22, 0xFF	; 255
    3ac6:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	60 e0       	ldi	r22, 0x00	; 0
    3ace:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_HIGH);
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	66 e0       	ldi	r22, 0x06	; 6
    3ad6:	41 e0       	ldi	r20, 0x01	; 1
    3ad8:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3adc:	fb c4       	rjmp	.+2550   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	6f ef       	ldi	r22, 0xFF	; 255
    3ae2:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	6f ef       	ldi	r22, 0xFF	; 255
    3aea:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	61 e0       	ldi	r22, 0x01	; 1
    3af2:	40 e0       	ldi	r20, 0x00	; 0
    3af4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	62 e0       	ldi	r22, 0x02	; 2
    3afc:	40 e0       	ldi	r20, 0x00	; 0
    3afe:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3b02:	e8 c4       	rjmp	.+2512   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	6f ef       	ldi	r22, 0xFF	; 255
    3b08:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	62 e0       	ldi	r22, 0x02	; 2
    3b18:	41 e0       	ldi	r20, 0x01	; 1
    3b1a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	65 e0       	ldi	r22, 0x05	; 5
    3b22:	41 e0       	ldi	r20, 0x01	; 1
    3b24:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3b28:	d5 c4       	rjmp	.+2474   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	6f ef       	ldi	r22, 0xFF	; 255
    3b2e:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	64 e0       	ldi	r22, 0x04	; 4
    3b3e:	41 e0       	ldi	r20, 0x01	; 1
    3b40:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	65 e0       	ldi	r22, 0x05	; 5
    3b48:	41 e0       	ldi	r20, 0x01	; 1
    3b4a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3b4e:	c2 c4       	rjmp	.+2436   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	6f ef       	ldi	r22, 0xFF	; 255
    3b54:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	60 e0       	ldi	r22, 0x00	; 0
    3b64:	41 e0       	ldi	r20, 0x01	; 1
    3b66:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_HIGH);
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	63 e0       	ldi	r22, 0x03	; 3
    3b6e:	41 e0       	ldi	r20, 0x01	; 1
    3b70:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	64 e0       	ldi	r22, 0x04	; 4
    3b78:	41 e0       	ldi	r20, 0x01	; 1
    3b7a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3b7e:	aa c4       	rjmp	.+2388   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	6f ef       	ldi	r22, 0xFF	; 255
    3b84:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	60 e0       	ldi	r22, 0x00	; 0
    3b8c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	61 e0       	ldi	r22, 0x01	; 1
    3b94:	41 e0       	ldi	r20, 0x01	; 1
    3b96:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	64 e0       	ldi	r22, 0x04	; 4
    3b9e:	41 e0       	ldi	r20, 0x01	; 1
    3ba0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3ba4:	97 c4       	rjmp	.+2350   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	6f ef       	ldi	r22, 0xFF	; 255
    3baa:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	60 e0       	ldi	r22, 0x00	; 0
    3bb2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	61 e0       	ldi	r22, 0x01	; 1
    3bba:	41 e0       	ldi	r20, 0x01	; 1
    3bbc:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3bc0:	89 c4       	rjmp	.+2322   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	6f ef       	ldi	r22, 0xFF	; 255
    3bc6:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	6f ef       	ldi	r22, 0xFF	; 255
    3bce:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	60 e0       	ldi	r22, 0x00	; 0
    3bd6:	40 e0       	ldi	r20, 0x00	; 0
    3bd8:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	61 e0       	ldi	r22, 0x01	; 1
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	62 e0       	ldi	r22, 0x02	; 2
    3bea:	40 e0       	ldi	r20, 0x00	; 0
    3bec:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3bf0:	71 c4       	rjmp	.+2274   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	6f ef       	ldi	r22, 0xFF	; 255
    3bf6:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	60 e0       	ldi	r22, 0x00	; 0
    3bfe:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
    3c02:	68 c4       	rjmp	.+2256   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	6f ef       	ldi	r22, 0xFF	; 255
    3c08:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	64 e0       	ldi	r22, 0x04	; 4
    3c18:	41 e0       	ldi	r20, 0x01	; 1
    3c1a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3c1e:	5a c4       	rjmp	.+2228   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3c20:	18 8e       	std	Y+24, r1	; 0x18
    3c22:	5a c4       	rjmp	.+2228   	; 0x44d8 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    3c24:	18 8e       	std	Y+24, r1	; 0x18
    3c26:	58 c4       	rjmp	.+2224   	; 0x44d8 <SevenSegment_Display+0x11d2>
			}
			break;
		case DIO_PORTC:
			switch(TYPE)
    3c28:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2a:	28 2f       	mov	r18, r24
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	3f 87       	std	Y+15, r19	; 0x0f
    3c30:	2e 87       	std	Y+14, r18	; 0x0e
    3c32:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c34:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	39 f0       	breq	.+14     	; 0x3c48 <SevenSegment_Display+0x942>
    3c3a:	2e 85       	ldd	r18, Y+14	; 0x0e
    3c3c:	3f 85       	ldd	r19, Y+15	; 0x0f
    3c3e:	21 30       	cpi	r18, 0x01	; 1
    3c40:	31 05       	cpc	r19, r1
    3c42:	09 f4       	brne	.+2      	; 0x3c46 <SevenSegment_Display+0x940>
    3c44:	0d c1       	rjmp	.+538    	; 0x3e60 <SevenSegment_Display+0xb5a>
    3c46:	18 c2       	rjmp	.+1072   	; 0x4078 <SevenSegment_Display+0xd72>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3c48:	82 e0       	ldi	r24, 0x02	; 2
    3c4a:	6f ef       	ldi	r22, 0xFF	; 255
    3c4c:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_LOW);
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	67 e0       	ldi	r22, 0x07	; 7
    3c54:	40 e0       	ldi	r20, 0x00	; 0
    3c56:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						switch(NUM)
    3c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5c:	28 2f       	mov	r18, r24
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	3d 87       	std	Y+13, r19	; 0x0d
    3c62:	2c 87       	std	Y+12, r18	; 0x0c
    3c64:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c66:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c68:	84 30       	cpi	r24, 0x04	; 4
    3c6a:	91 05       	cpc	r25, r1
    3c6c:	09 f4       	brne	.+2      	; 0x3c70 <SevenSegment_Display+0x96a>
    3c6e:	8e c0       	rjmp	.+284    	; 0x3d8c <SevenSegment_Display+0xa86>
    3c70:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c72:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c74:	25 30       	cpi	r18, 0x05	; 5
    3c76:	31 05       	cpc	r19, r1
    3c78:	ec f4       	brge	.+58     	; 0x3cb4 <SevenSegment_Display+0x9ae>
    3c7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c7e:	81 30       	cpi	r24, 0x01	; 1
    3c80:	91 05       	cpc	r25, r1
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <SevenSegment_Display+0x980>
    3c84:	4a c0       	rjmp	.+148    	; 0x3d1a <SevenSegment_Display+0xa14>
    3c86:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c88:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c8a:	22 30       	cpi	r18, 0x02	; 2
    3c8c:	31 05       	cpc	r19, r1
    3c8e:	2c f4       	brge	.+10     	; 0x3c9a <SevenSegment_Display+0x994>
    3c90:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c92:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c94:	00 97       	sbiw	r24, 0x00	; 0
    3c96:	99 f1       	breq	.+102    	; 0x3cfe <SevenSegment_Display+0x9f8>
    3c98:	e1 c0       	rjmp	.+450    	; 0x3e5c <SevenSegment_Display+0xb56>
    3c9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c9c:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c9e:	22 30       	cpi	r18, 0x02	; 2
    3ca0:	31 05       	cpc	r19, r1
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <SevenSegment_Display+0x9a0>
    3ca4:	4d c0       	rjmp	.+154    	; 0x3d40 <SevenSegment_Display+0xa3a>
    3ca6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ca8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3caa:	83 30       	cpi	r24, 0x03	; 3
    3cac:	91 05       	cpc	r25, r1
    3cae:	09 f4       	brne	.+2      	; 0x3cb2 <SevenSegment_Display+0x9ac>
    3cb0:	5a c0       	rjmp	.+180    	; 0x3d66 <SevenSegment_Display+0xa60>
    3cb2:	d4 c0       	rjmp	.+424    	; 0x3e5c <SevenSegment_Display+0xb56>
    3cb4:	2c 85       	ldd	r18, Y+12	; 0x0c
    3cb6:	3d 85       	ldd	r19, Y+13	; 0x0d
    3cb8:	27 30       	cpi	r18, 0x07	; 7
    3cba:	31 05       	cpc	r19, r1
    3cbc:	09 f4       	brne	.+2      	; 0x3cc0 <SevenSegment_Display+0x9ba>
    3cbe:	9f c0       	rjmp	.+318    	; 0x3dfe <SevenSegment_Display+0xaf8>
    3cc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cc4:	88 30       	cpi	r24, 0x08	; 8
    3cc6:	91 05       	cpc	r25, r1
    3cc8:	6c f4       	brge	.+26     	; 0x3ce4 <SevenSegment_Display+0x9de>
    3cca:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ccc:	3d 85       	ldd	r19, Y+13	; 0x0d
    3cce:	25 30       	cpi	r18, 0x05	; 5
    3cd0:	31 05       	cpc	r19, r1
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <SevenSegment_Display+0x9d0>
    3cd4:	73 c0       	rjmp	.+230    	; 0x3dbc <SevenSegment_Display+0xab6>
    3cd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cda:	86 30       	cpi	r24, 0x06	; 6
    3cdc:	91 05       	cpc	r25, r1
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <SevenSegment_Display+0x9dc>
    3ce0:	80 c0       	rjmp	.+256    	; 0x3de2 <SevenSegment_Display+0xadc>
    3ce2:	bc c0       	rjmp	.+376    	; 0x3e5c <SevenSegment_Display+0xb56>
    3ce4:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ce6:	3d 85       	ldd	r19, Y+13	; 0x0d
    3ce8:	28 30       	cpi	r18, 0x08	; 8
    3cea:	31 05       	cpc	r19, r1
    3cec:	09 f4       	brne	.+2      	; 0x3cf0 <SevenSegment_Display+0x9ea>
    3cee:	9f c0       	rjmp	.+318    	; 0x3e2e <SevenSegment_Display+0xb28>
    3cf0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cf2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cf4:	89 30       	cpi	r24, 0x09	; 9
    3cf6:	91 05       	cpc	r25, r1
    3cf8:	09 f4       	brne	.+2      	; 0x3cfc <SevenSegment_Display+0x9f6>
    3cfa:	a2 c0       	rjmp	.+324    	; 0x3e40 <SevenSegment_Display+0xb3a>
    3cfc:	af c0       	rjmp	.+350    	; 0x3e5c <SevenSegment_Display+0xb56>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3cfe:	82 e0       	ldi	r24, 0x02	; 2
    3d00:	6f ef       	ldi	r22, 0xFF	; 255
    3d02:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3d06:	82 e0       	ldi	r24, 0x02	; 2
    3d08:	6f ef       	ldi	r22, 0xFF	; 255
    3d0a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_LOW);
    3d0e:	82 e0       	ldi	r24, 0x02	; 2
    3d10:	66 e0       	ldi	r22, 0x06	; 6
    3d12:	40 e0       	ldi	r20, 0x00	; 0
    3d14:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3d18:	dd c3       	rjmp	.+1978   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3d1a:	82 e0       	ldi	r24, 0x02	; 2
    3d1c:	6f ef       	ldi	r22, 0xFF	; 255
    3d1e:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3d22:	82 e0       	ldi	r24, 0x02	; 2
    3d24:	60 e0       	ldi	r22, 0x00	; 0
    3d26:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3d2a:	82 e0       	ldi	r24, 0x02	; 2
    3d2c:	61 e0       	ldi	r22, 0x01	; 1
    3d2e:	41 e0       	ldi	r20, 0x01	; 1
    3d30:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3d34:	82 e0       	ldi	r24, 0x02	; 2
    3d36:	62 e0       	ldi	r22, 0x02	; 2
    3d38:	41 e0       	ldi	r20, 0x01	; 1
    3d3a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3d3e:	ca c3       	rjmp	.+1940   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3d40:	82 e0       	ldi	r24, 0x02	; 2
    3d42:	6f ef       	ldi	r22, 0xFF	; 255
    3d44:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3d48:	82 e0       	ldi	r24, 0x02	; 2
    3d4a:	6f ef       	ldi	r22, 0xFF	; 255
    3d4c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3d50:	82 e0       	ldi	r24, 0x02	; 2
    3d52:	62 e0       	ldi	r22, 0x02	; 2
    3d54:	40 e0       	ldi	r20, 0x00	; 0
    3d56:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    3d5a:	82 e0       	ldi	r24, 0x02	; 2
    3d5c:	65 e0       	ldi	r22, 0x05	; 5
    3d5e:	40 e0       	ldi	r20, 0x00	; 0
    3d60:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3d64:	b7 c3       	rjmp	.+1902   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3d66:	82 e0       	ldi	r24, 0x02	; 2
    3d68:	6f ef       	ldi	r22, 0xFF	; 255
    3d6a:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3d6e:	82 e0       	ldi	r24, 0x02	; 2
    3d70:	6f ef       	ldi	r22, 0xFF	; 255
    3d72:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3d76:	82 e0       	ldi	r24, 0x02	; 2
    3d78:	64 e0       	ldi	r22, 0x04	; 4
    3d7a:	40 e0       	ldi	r20, 0x00	; 0
    3d7c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    3d80:	82 e0       	ldi	r24, 0x02	; 2
    3d82:	65 e0       	ldi	r22, 0x05	; 5
    3d84:	40 e0       	ldi	r20, 0x00	; 0
    3d86:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3d8a:	a4 c3       	rjmp	.+1864   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3d8c:	82 e0       	ldi	r24, 0x02	; 2
    3d8e:	6f ef       	ldi	r22, 0xFF	; 255
    3d90:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3d94:	82 e0       	ldi	r24, 0x02	; 2
    3d96:	6f ef       	ldi	r22, 0xFF	; 255
    3d98:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    3d9c:	82 e0       	ldi	r24, 0x02	; 2
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	40 e0       	ldi	r20, 0x00	; 0
    3da2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_LOW);
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	63 e0       	ldi	r22, 0x03	; 3
    3daa:	40 e0       	ldi	r20, 0x00	; 0
    3dac:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3db0:	82 e0       	ldi	r24, 0x02	; 2
    3db2:	64 e0       	ldi	r22, 0x04	; 4
    3db4:	40 e0       	ldi	r20, 0x00	; 0
    3db6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3dba:	8c c3       	rjmp	.+1816   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3dbc:	82 e0       	ldi	r24, 0x02	; 2
    3dbe:	6f ef       	ldi	r22, 0xFF	; 255
    3dc0:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3dc4:	82 e0       	ldi	r24, 0x02	; 2
    3dc6:	6f ef       	ldi	r22, 0xFF	; 255
    3dc8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    3dcc:	82 e0       	ldi	r24, 0x02	; 2
    3dce:	61 e0       	ldi	r22, 0x01	; 1
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3dd6:	82 e0       	ldi	r24, 0x02	; 2
    3dd8:	64 e0       	ldi	r22, 0x04	; 4
    3dda:	40 e0       	ldi	r20, 0x00	; 0
    3ddc:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3de0:	79 c3       	rjmp	.+1778   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3de2:	82 e0       	ldi	r24, 0x02	; 2
    3de4:	6f ef       	ldi	r22, 0xFF	; 255
    3de6:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3dea:	82 e0       	ldi	r24, 0x02	; 2
    3dec:	6f ef       	ldi	r22, 0xFF	; 255
    3dee:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    3df2:	82 e0       	ldi	r24, 0x02	; 2
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	40 e0       	ldi	r20, 0x00	; 0
    3df8:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3dfc:	6b c3       	rjmp	.+1750   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3dfe:	82 e0       	ldi	r24, 0x02	; 2
    3e00:	6f ef       	ldi	r22, 0xFF	; 255
    3e02:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3e06:	82 e0       	ldi	r24, 0x02	; 2
    3e08:	60 e0       	ldi	r22, 0x00	; 0
    3e0a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    3e0e:	82 e0       	ldi	r24, 0x02	; 2
    3e10:	60 e0       	ldi	r22, 0x00	; 0
    3e12:	41 e0       	ldi	r20, 0x01	; 1
    3e14:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3e18:	82 e0       	ldi	r24, 0x02	; 2
    3e1a:	61 e0       	ldi	r22, 0x01	; 1
    3e1c:	41 e0       	ldi	r20, 0x01	; 1
    3e1e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3e22:	82 e0       	ldi	r24, 0x02	; 2
    3e24:	62 e0       	ldi	r22, 0x02	; 2
    3e26:	41 e0       	ldi	r20, 0x01	; 1
    3e28:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3e2c:	53 c3       	rjmp	.+1702   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3e2e:	82 e0       	ldi	r24, 0x02	; 2
    3e30:	6f ef       	ldi	r22, 0xFF	; 255
    3e32:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3e36:	82 e0       	ldi	r24, 0x02	; 2
    3e38:	6f ef       	ldi	r22, 0xFF	; 255
    3e3a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
    3e3e:	4a c3       	rjmp	.+1684   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	6f ef       	ldi	r22, 0xFF	; 255
    3e44:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	6f ef       	ldi	r22, 0xFF	; 255
    3e4c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	64 e0       	ldi	r22, 0x04	; 4
    3e54:	40 e0       	ldi	r20, 0x00	; 0
    3e56:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3e5a:	3c c3       	rjmp	.+1656   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3e5c:	18 8e       	std	Y+24, r1	; 0x18
    3e5e:	3c c3       	rjmp	.+1656   	; 0x44d8 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3e60:	82 e0       	ldi	r24, 0x02	; 2
    3e62:	6f ef       	ldi	r22, 0xFF	; 255
    3e64:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_HIGH);
    3e68:	82 e0       	ldi	r24, 0x02	; 2
    3e6a:	67 e0       	ldi	r22, 0x07	; 7
    3e6c:	41 e0       	ldi	r20, 0x01	; 1
    3e6e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
					switch(NUM)
    3e72:	8b 81       	ldd	r24, Y+3	; 0x03
    3e74:	28 2f       	mov	r18, r24
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	3b 87       	std	Y+11, r19	; 0x0b
    3e7a:	2a 87       	std	Y+10, r18	; 0x0a
    3e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e80:	84 30       	cpi	r24, 0x04	; 4
    3e82:	91 05       	cpc	r25, r1
    3e84:	09 f4       	brne	.+2      	; 0x3e88 <SevenSegment_Display+0xb82>
    3e86:	8e c0       	rjmp	.+284    	; 0x3fa4 <SevenSegment_Display+0xc9e>
    3e88:	2a 85       	ldd	r18, Y+10	; 0x0a
    3e8a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3e8c:	25 30       	cpi	r18, 0x05	; 5
    3e8e:	31 05       	cpc	r19, r1
    3e90:	ec f4       	brge	.+58     	; 0x3ecc <SevenSegment_Display+0xbc6>
    3e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e94:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e96:	81 30       	cpi	r24, 0x01	; 1
    3e98:	91 05       	cpc	r25, r1
    3e9a:	09 f4       	brne	.+2      	; 0x3e9e <SevenSegment_Display+0xb98>
    3e9c:	4a c0       	rjmp	.+148    	; 0x3f32 <SevenSegment_Display+0xc2c>
    3e9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ea0:	3b 85       	ldd	r19, Y+11	; 0x0b
    3ea2:	22 30       	cpi	r18, 0x02	; 2
    3ea4:	31 05       	cpc	r19, r1
    3ea6:	2c f4       	brge	.+10     	; 0x3eb2 <SevenSegment_Display+0xbac>
    3ea8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3eaa:	9b 85       	ldd	r25, Y+11	; 0x0b
    3eac:	00 97       	sbiw	r24, 0x00	; 0
    3eae:	99 f1       	breq	.+102    	; 0x3f16 <SevenSegment_Display+0xc10>
    3eb0:	e1 c0       	rjmp	.+450    	; 0x4074 <SevenSegment_Display+0xd6e>
    3eb2:	2a 85       	ldd	r18, Y+10	; 0x0a
    3eb4:	3b 85       	ldd	r19, Y+11	; 0x0b
    3eb6:	22 30       	cpi	r18, 0x02	; 2
    3eb8:	31 05       	cpc	r19, r1
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <SevenSegment_Display+0xbb8>
    3ebc:	4d c0       	rjmp	.+154    	; 0x3f58 <SevenSegment_Display+0xc52>
    3ebe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ec0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ec2:	83 30       	cpi	r24, 0x03	; 3
    3ec4:	91 05       	cpc	r25, r1
    3ec6:	09 f4       	brne	.+2      	; 0x3eca <SevenSegment_Display+0xbc4>
    3ec8:	5a c0       	rjmp	.+180    	; 0x3f7e <SevenSegment_Display+0xc78>
    3eca:	d4 c0       	rjmp	.+424    	; 0x4074 <SevenSegment_Display+0xd6e>
    3ecc:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ece:	3b 85       	ldd	r19, Y+11	; 0x0b
    3ed0:	27 30       	cpi	r18, 0x07	; 7
    3ed2:	31 05       	cpc	r19, r1
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <SevenSegment_Display+0xbd2>
    3ed6:	9f c0       	rjmp	.+318    	; 0x4016 <SevenSegment_Display+0xd10>
    3ed8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3eda:	9b 85       	ldd	r25, Y+11	; 0x0b
    3edc:	88 30       	cpi	r24, 0x08	; 8
    3ede:	91 05       	cpc	r25, r1
    3ee0:	6c f4       	brge	.+26     	; 0x3efc <SevenSegment_Display+0xbf6>
    3ee2:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ee4:	3b 85       	ldd	r19, Y+11	; 0x0b
    3ee6:	25 30       	cpi	r18, 0x05	; 5
    3ee8:	31 05       	cpc	r19, r1
    3eea:	09 f4       	brne	.+2      	; 0x3eee <SevenSegment_Display+0xbe8>
    3eec:	73 c0       	rjmp	.+230    	; 0x3fd4 <SevenSegment_Display+0xcce>
    3eee:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ef0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ef2:	86 30       	cpi	r24, 0x06	; 6
    3ef4:	91 05       	cpc	r25, r1
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <SevenSegment_Display+0xbf4>
    3ef8:	80 c0       	rjmp	.+256    	; 0x3ffa <SevenSegment_Display+0xcf4>
    3efa:	bc c0       	rjmp	.+376    	; 0x4074 <SevenSegment_Display+0xd6e>
    3efc:	2a 85       	ldd	r18, Y+10	; 0x0a
    3efe:	3b 85       	ldd	r19, Y+11	; 0x0b
    3f00:	28 30       	cpi	r18, 0x08	; 8
    3f02:	31 05       	cpc	r19, r1
    3f04:	09 f4       	brne	.+2      	; 0x3f08 <SevenSegment_Display+0xc02>
    3f06:	9f c0       	rjmp	.+318    	; 0x4046 <SevenSegment_Display+0xd40>
    3f08:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f0c:	89 30       	cpi	r24, 0x09	; 9
    3f0e:	91 05       	cpc	r25, r1
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <SevenSegment_Display+0xc0e>
    3f12:	a2 c0       	rjmp	.+324    	; 0x4058 <SevenSegment_Display+0xd52>
    3f14:	af c0       	rjmp	.+350    	; 0x4074 <SevenSegment_Display+0xd6e>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f16:	82 e0       	ldi	r24, 0x02	; 2
    3f18:	6f ef       	ldi	r22, 0xFF	; 255
    3f1a:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3f1e:	82 e0       	ldi	r24, 0x02	; 2
    3f20:	60 e0       	ldi	r22, 0x00	; 0
    3f22:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_HIGH);
    3f26:	82 e0       	ldi	r24, 0x02	; 2
    3f28:	66 e0       	ldi	r22, 0x06	; 6
    3f2a:	41 e0       	ldi	r20, 0x01	; 1
    3f2c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3f30:	d1 c2       	rjmp	.+1442   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f32:	82 e0       	ldi	r24, 0x02	; 2
    3f34:	6f ef       	ldi	r22, 0xFF	; 255
    3f36:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3f3a:	82 e0       	ldi	r24, 0x02	; 2
    3f3c:	6f ef       	ldi	r22, 0xFF	; 255
    3f3e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    3f42:	82 e0       	ldi	r24, 0x02	; 2
    3f44:	61 e0       	ldi	r22, 0x01	; 1
    3f46:	40 e0       	ldi	r20, 0x00	; 0
    3f48:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3f4c:	82 e0       	ldi	r24, 0x02	; 2
    3f4e:	62 e0       	ldi	r22, 0x02	; 2
    3f50:	40 e0       	ldi	r20, 0x00	; 0
    3f52:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3f56:	be c2       	rjmp	.+1404   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f58:	82 e0       	ldi	r24, 0x02	; 2
    3f5a:	6f ef       	ldi	r22, 0xFF	; 255
    3f5c:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3f60:	82 e0       	ldi	r24, 0x02	; 2
    3f62:	60 e0       	ldi	r22, 0x00	; 0
    3f64:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3f68:	82 e0       	ldi	r24, 0x02	; 2
    3f6a:	62 e0       	ldi	r22, 0x02	; 2
    3f6c:	41 e0       	ldi	r20, 0x01	; 1
    3f6e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    3f72:	82 e0       	ldi	r24, 0x02	; 2
    3f74:	65 e0       	ldi	r22, 0x05	; 5
    3f76:	41 e0       	ldi	r20, 0x01	; 1
    3f78:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3f7c:	ab c2       	rjmp	.+1366   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f7e:	82 e0       	ldi	r24, 0x02	; 2
    3f80:	6f ef       	ldi	r22, 0xFF	; 255
    3f82:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3f86:	82 e0       	ldi	r24, 0x02	; 2
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3f8e:	82 e0       	ldi	r24, 0x02	; 2
    3f90:	64 e0       	ldi	r22, 0x04	; 4
    3f92:	41 e0       	ldi	r20, 0x01	; 1
    3f94:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    3f98:	82 e0       	ldi	r24, 0x02	; 2
    3f9a:	65 e0       	ldi	r22, 0x05	; 5
    3f9c:	41 e0       	ldi	r20, 0x01	; 1
    3f9e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3fa2:	98 c2       	rjmp	.+1328   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3fa4:	82 e0       	ldi	r24, 0x02	; 2
    3fa6:	6f ef       	ldi	r22, 0xFF	; 255
    3fa8:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3fac:	82 e0       	ldi	r24, 0x02	; 2
    3fae:	60 e0       	ldi	r22, 0x00	; 0
    3fb0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    3fb4:	82 e0       	ldi	r24, 0x02	; 2
    3fb6:	60 e0       	ldi	r22, 0x00	; 0
    3fb8:	41 e0       	ldi	r20, 0x01	; 1
    3fba:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_HIGH);
    3fbe:	82 e0       	ldi	r24, 0x02	; 2
    3fc0:	63 e0       	ldi	r22, 0x03	; 3
    3fc2:	41 e0       	ldi	r20, 0x01	; 1
    3fc4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3fc8:	82 e0       	ldi	r24, 0x02	; 2
    3fca:	64 e0       	ldi	r22, 0x04	; 4
    3fcc:	41 e0       	ldi	r20, 0x01	; 1
    3fce:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3fd2:	80 c2       	rjmp	.+1280   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3fd4:	82 e0       	ldi	r24, 0x02	; 2
    3fd6:	6f ef       	ldi	r22, 0xFF	; 255
    3fd8:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3fdc:	82 e0       	ldi	r24, 0x02	; 2
    3fde:	60 e0       	ldi	r22, 0x00	; 0
    3fe0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3fe4:	82 e0       	ldi	r24, 0x02	; 2
    3fe6:	61 e0       	ldi	r22, 0x01	; 1
    3fe8:	41 e0       	ldi	r20, 0x01	; 1
    3fea:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3fee:	82 e0       	ldi	r24, 0x02	; 2
    3ff0:	64 e0       	ldi	r22, 0x04	; 4
    3ff2:	41 e0       	ldi	r20, 0x01	; 1
    3ff4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    3ff8:	6d c2       	rjmp	.+1242   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3ffa:	82 e0       	ldi	r24, 0x02	; 2
    3ffc:	6f ef       	ldi	r22, 0xFF	; 255
    3ffe:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4002:	82 e0       	ldi	r24, 0x02	; 2
    4004:	60 e0       	ldi	r22, 0x00	; 0
    4006:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    400a:	82 e0       	ldi	r24, 0x02	; 2
    400c:	61 e0       	ldi	r22, 0x01	; 1
    400e:	41 e0       	ldi	r20, 0x01	; 1
    4010:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4014:	5f c2       	rjmp	.+1214   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4016:	82 e0       	ldi	r24, 0x02	; 2
    4018:	6f ef       	ldi	r22, 0xFF	; 255
    401a:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    401e:	82 e0       	ldi	r24, 0x02	; 2
    4020:	6f ef       	ldi	r22, 0xFF	; 255
    4022:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    4026:	82 e0       	ldi	r24, 0x02	; 2
    4028:	60 e0       	ldi	r22, 0x00	; 0
    402a:	40 e0       	ldi	r20, 0x00	; 0
    402c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    4030:	82 e0       	ldi	r24, 0x02	; 2
    4032:	61 e0       	ldi	r22, 0x01	; 1
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    403a:	82 e0       	ldi	r24, 0x02	; 2
    403c:	62 e0       	ldi	r22, 0x02	; 2
    403e:	40 e0       	ldi	r20, 0x00	; 0
    4040:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4044:	47 c2       	rjmp	.+1166   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4046:	82 e0       	ldi	r24, 0x02	; 2
    4048:	6f ef       	ldi	r22, 0xFF	; 255
    404a:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    404e:	82 e0       	ldi	r24, 0x02	; 2
    4050:	60 e0       	ldi	r22, 0x00	; 0
    4052:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
    4056:	3e c2       	rjmp	.+1148   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4058:	82 e0       	ldi	r24, 0x02	; 2
    405a:	6f ef       	ldi	r22, 0xFF	; 255
    405c:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4060:	82 e0       	ldi	r24, 0x02	; 2
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    4068:	82 e0       	ldi	r24, 0x02	; 2
    406a:	64 e0       	ldi	r22, 0x04	; 4
    406c:	41 e0       	ldi	r20, 0x01	; 1
    406e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4072:	30 c2       	rjmp	.+1120   	; 0x44d4 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    4074:	18 8e       	std	Y+24, r1	; 0x18
    4076:	30 c2       	rjmp	.+1120   	; 0x44d8 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    4078:	18 8e       	std	Y+24, r1	; 0x18
    407a:	2e c2       	rjmp	.+1116   	; 0x44d8 <SevenSegment_Display+0x11d2>
			}
			break;
			case DIO_PORTD:
				switch(TYPE)
    407c:	8a 81       	ldd	r24, Y+2	; 0x02
    407e:	28 2f       	mov	r18, r24
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	39 87       	std	Y+9, r19	; 0x09
    4084:	28 87       	std	Y+8, r18	; 0x08
    4086:	88 85       	ldd	r24, Y+8	; 0x08
    4088:	99 85       	ldd	r25, Y+9	; 0x09
    408a:	00 97       	sbiw	r24, 0x00	; 0
    408c:	39 f0       	breq	.+14     	; 0x409c <SevenSegment_Display+0xd96>
    408e:	28 85       	ldd	r18, Y+8	; 0x08
    4090:	39 85       	ldd	r19, Y+9	; 0x09
    4092:	21 30       	cpi	r18, 0x01	; 1
    4094:	31 05       	cpc	r19, r1
    4096:	09 f4       	brne	.+2      	; 0x409a <SevenSegment_Display+0xd94>
    4098:	0d c1       	rjmp	.+538    	; 0x42b4 <SevenSegment_Display+0xfae>
    409a:	18 c2       	rjmp	.+1072   	; 0x44cc <SevenSegment_Display+0x11c6>
					{
						case CommonCathod:
							DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    409c:	83 e0       	ldi	r24, 0x03	; 3
    409e:	6f ef       	ldi	r22, 0xFF	; 255
    40a0:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
							DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_LOW);
    40a4:	83 e0       	ldi	r24, 0x03	; 3
    40a6:	67 e0       	ldi	r22, 0x07	; 7
    40a8:	40 e0       	ldi	r20, 0x00	; 0
    40aa:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
							switch(NUM)
    40ae:	8b 81       	ldd	r24, Y+3	; 0x03
    40b0:	28 2f       	mov	r18, r24
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	3f 83       	std	Y+7, r19	; 0x07
    40b6:	2e 83       	std	Y+6, r18	; 0x06
    40b8:	8e 81       	ldd	r24, Y+6	; 0x06
    40ba:	9f 81       	ldd	r25, Y+7	; 0x07
    40bc:	84 30       	cpi	r24, 0x04	; 4
    40be:	91 05       	cpc	r25, r1
    40c0:	09 f4       	brne	.+2      	; 0x40c4 <SevenSegment_Display+0xdbe>
    40c2:	8e c0       	rjmp	.+284    	; 0x41e0 <SevenSegment_Display+0xeda>
    40c4:	2e 81       	ldd	r18, Y+6	; 0x06
    40c6:	3f 81       	ldd	r19, Y+7	; 0x07
    40c8:	25 30       	cpi	r18, 0x05	; 5
    40ca:	31 05       	cpc	r19, r1
    40cc:	ec f4       	brge	.+58     	; 0x4108 <SevenSegment_Display+0xe02>
    40ce:	8e 81       	ldd	r24, Y+6	; 0x06
    40d0:	9f 81       	ldd	r25, Y+7	; 0x07
    40d2:	81 30       	cpi	r24, 0x01	; 1
    40d4:	91 05       	cpc	r25, r1
    40d6:	09 f4       	brne	.+2      	; 0x40da <SevenSegment_Display+0xdd4>
    40d8:	4a c0       	rjmp	.+148    	; 0x416e <SevenSegment_Display+0xe68>
    40da:	2e 81       	ldd	r18, Y+6	; 0x06
    40dc:	3f 81       	ldd	r19, Y+7	; 0x07
    40de:	22 30       	cpi	r18, 0x02	; 2
    40e0:	31 05       	cpc	r19, r1
    40e2:	2c f4       	brge	.+10     	; 0x40ee <SevenSegment_Display+0xde8>
    40e4:	8e 81       	ldd	r24, Y+6	; 0x06
    40e6:	9f 81       	ldd	r25, Y+7	; 0x07
    40e8:	00 97       	sbiw	r24, 0x00	; 0
    40ea:	99 f1       	breq	.+102    	; 0x4152 <SevenSegment_Display+0xe4c>
    40ec:	e1 c0       	rjmp	.+450    	; 0x42b0 <SevenSegment_Display+0xfaa>
    40ee:	2e 81       	ldd	r18, Y+6	; 0x06
    40f0:	3f 81       	ldd	r19, Y+7	; 0x07
    40f2:	22 30       	cpi	r18, 0x02	; 2
    40f4:	31 05       	cpc	r19, r1
    40f6:	09 f4       	brne	.+2      	; 0x40fa <SevenSegment_Display+0xdf4>
    40f8:	4d c0       	rjmp	.+154    	; 0x4194 <SevenSegment_Display+0xe8e>
    40fa:	8e 81       	ldd	r24, Y+6	; 0x06
    40fc:	9f 81       	ldd	r25, Y+7	; 0x07
    40fe:	83 30       	cpi	r24, 0x03	; 3
    4100:	91 05       	cpc	r25, r1
    4102:	09 f4       	brne	.+2      	; 0x4106 <SevenSegment_Display+0xe00>
    4104:	5a c0       	rjmp	.+180    	; 0x41ba <SevenSegment_Display+0xeb4>
    4106:	d4 c0       	rjmp	.+424    	; 0x42b0 <SevenSegment_Display+0xfaa>
    4108:	2e 81       	ldd	r18, Y+6	; 0x06
    410a:	3f 81       	ldd	r19, Y+7	; 0x07
    410c:	27 30       	cpi	r18, 0x07	; 7
    410e:	31 05       	cpc	r19, r1
    4110:	09 f4       	brne	.+2      	; 0x4114 <SevenSegment_Display+0xe0e>
    4112:	9f c0       	rjmp	.+318    	; 0x4252 <SevenSegment_Display+0xf4c>
    4114:	8e 81       	ldd	r24, Y+6	; 0x06
    4116:	9f 81       	ldd	r25, Y+7	; 0x07
    4118:	88 30       	cpi	r24, 0x08	; 8
    411a:	91 05       	cpc	r25, r1
    411c:	6c f4       	brge	.+26     	; 0x4138 <SevenSegment_Display+0xe32>
    411e:	2e 81       	ldd	r18, Y+6	; 0x06
    4120:	3f 81       	ldd	r19, Y+7	; 0x07
    4122:	25 30       	cpi	r18, 0x05	; 5
    4124:	31 05       	cpc	r19, r1
    4126:	09 f4       	brne	.+2      	; 0x412a <SevenSegment_Display+0xe24>
    4128:	73 c0       	rjmp	.+230    	; 0x4210 <SevenSegment_Display+0xf0a>
    412a:	8e 81       	ldd	r24, Y+6	; 0x06
    412c:	9f 81       	ldd	r25, Y+7	; 0x07
    412e:	86 30       	cpi	r24, 0x06	; 6
    4130:	91 05       	cpc	r25, r1
    4132:	09 f4       	brne	.+2      	; 0x4136 <SevenSegment_Display+0xe30>
    4134:	80 c0       	rjmp	.+256    	; 0x4236 <SevenSegment_Display+0xf30>
    4136:	bc c0       	rjmp	.+376    	; 0x42b0 <SevenSegment_Display+0xfaa>
    4138:	2e 81       	ldd	r18, Y+6	; 0x06
    413a:	3f 81       	ldd	r19, Y+7	; 0x07
    413c:	28 30       	cpi	r18, 0x08	; 8
    413e:	31 05       	cpc	r19, r1
    4140:	09 f4       	brne	.+2      	; 0x4144 <SevenSegment_Display+0xe3e>
    4142:	9f c0       	rjmp	.+318    	; 0x4282 <SevenSegment_Display+0xf7c>
    4144:	8e 81       	ldd	r24, Y+6	; 0x06
    4146:	9f 81       	ldd	r25, Y+7	; 0x07
    4148:	89 30       	cpi	r24, 0x09	; 9
    414a:	91 05       	cpc	r25, r1
    414c:	09 f4       	brne	.+2      	; 0x4150 <SevenSegment_Display+0xe4a>
    414e:	a2 c0       	rjmp	.+324    	; 0x4294 <SevenSegment_Display+0xf8e>
    4150:	af c0       	rjmp	.+350    	; 0x42b0 <SevenSegment_Display+0xfaa>
								{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4152:	83 e0       	ldi	r24, 0x03	; 3
    4154:	6f ef       	ldi	r22, 0xFF	; 255
    4156:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    415a:	83 e0       	ldi	r24, 0x03	; 3
    415c:	6f ef       	ldi	r22, 0xFF	; 255
    415e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_LOW);
    4162:	83 e0       	ldi	r24, 0x03	; 3
    4164:	66 e0       	ldi	r22, 0x06	; 6
    4166:	40 e0       	ldi	r20, 0x00	; 0
    4168:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    416c:	b3 c1       	rjmp	.+870    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    416e:	83 e0       	ldi	r24, 0x03	; 3
    4170:	6f ef       	ldi	r22, 0xFF	; 255
    4172:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4176:	83 e0       	ldi	r24, 0x03	; 3
    4178:	60 e0       	ldi	r22, 0x00	; 0
    417a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    417e:	83 e0       	ldi	r24, 0x03	; 3
    4180:	61 e0       	ldi	r22, 0x01	; 1
    4182:	41 e0       	ldi	r20, 0x01	; 1
    4184:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    4188:	83 e0       	ldi	r24, 0x03	; 3
    418a:	62 e0       	ldi	r22, 0x02	; 2
    418c:	41 e0       	ldi	r20, 0x01	; 1
    418e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4192:	a0 c1       	rjmp	.+832    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4194:	83 e0       	ldi	r24, 0x03	; 3
    4196:	6f ef       	ldi	r22, 0xFF	; 255
    4198:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    419c:	83 e0       	ldi	r24, 0x03	; 3
    419e:	6f ef       	ldi	r22, 0xFF	; 255
    41a0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    41a4:	83 e0       	ldi	r24, 0x03	; 3
    41a6:	62 e0       	ldi	r22, 0x02	; 2
    41a8:	40 e0       	ldi	r20, 0x00	; 0
    41aa:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    41ae:	83 e0       	ldi	r24, 0x03	; 3
    41b0:	65 e0       	ldi	r22, 0x05	; 5
    41b2:	40 e0       	ldi	r20, 0x00	; 0
    41b4:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    41b8:	8d c1       	rjmp	.+794    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    41ba:	83 e0       	ldi	r24, 0x03	; 3
    41bc:	6f ef       	ldi	r22, 0xFF	; 255
    41be:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    41c2:	83 e0       	ldi	r24, 0x03	; 3
    41c4:	6f ef       	ldi	r22, 0xFF	; 255
    41c6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    41ca:	83 e0       	ldi	r24, 0x03	; 3
    41cc:	64 e0       	ldi	r22, 0x04	; 4
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    41d4:	83 e0       	ldi	r24, 0x03	; 3
    41d6:	65 e0       	ldi	r22, 0x05	; 5
    41d8:	40 e0       	ldi	r20, 0x00	; 0
    41da:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    41de:	7a c1       	rjmp	.+756    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    41e0:	83 e0       	ldi	r24, 0x03	; 3
    41e2:	6f ef       	ldi	r22, 0xFF	; 255
    41e4:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    41e8:	83 e0       	ldi	r24, 0x03	; 3
    41ea:	6f ef       	ldi	r22, 0xFF	; 255
    41ec:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    41f0:	83 e0       	ldi	r24, 0x03	; 3
    41f2:	60 e0       	ldi	r22, 0x00	; 0
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_LOW);
    41fa:	83 e0       	ldi	r24, 0x03	; 3
    41fc:	63 e0       	ldi	r22, 0x03	; 3
    41fe:	40 e0       	ldi	r20, 0x00	; 0
    4200:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    4204:	83 e0       	ldi	r24, 0x03	; 3
    4206:	64 e0       	ldi	r22, 0x04	; 4
    4208:	40 e0       	ldi	r20, 0x00	; 0
    420a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    420e:	62 c1       	rjmp	.+708    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4210:	83 e0       	ldi	r24, 0x03	; 3
    4212:	6f ef       	ldi	r22, 0xFF	; 255
    4214:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4218:	83 e0       	ldi	r24, 0x03	; 3
    421a:	6f ef       	ldi	r22, 0xFF	; 255
    421c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    4220:	83 e0       	ldi	r24, 0x03	; 3
    4222:	61 e0       	ldi	r22, 0x01	; 1
    4224:	40 e0       	ldi	r20, 0x00	; 0
    4226:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    422a:	83 e0       	ldi	r24, 0x03	; 3
    422c:	64 e0       	ldi	r22, 0x04	; 4
    422e:	40 e0       	ldi	r20, 0x00	; 0
    4230:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4234:	4f c1       	rjmp	.+670    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4236:	83 e0       	ldi	r24, 0x03	; 3
    4238:	6f ef       	ldi	r22, 0xFF	; 255
    423a:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    423e:	83 e0       	ldi	r24, 0x03	; 3
    4240:	6f ef       	ldi	r22, 0xFF	; 255
    4242:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    4246:	83 e0       	ldi	r24, 0x03	; 3
    4248:	61 e0       	ldi	r22, 0x01	; 1
    424a:	40 e0       	ldi	r20, 0x00	; 0
    424c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4250:	41 c1       	rjmp	.+642    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4252:	83 e0       	ldi	r24, 0x03	; 3
    4254:	6f ef       	ldi	r22, 0xFF	; 255
    4256:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    425a:	83 e0       	ldi	r24, 0x03	; 3
    425c:	60 e0       	ldi	r22, 0x00	; 0
    425e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    4262:	83 e0       	ldi	r24, 0x03	; 3
    4264:	60 e0       	ldi	r22, 0x00	; 0
    4266:	41 e0       	ldi	r20, 0x01	; 1
    4268:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    426c:	83 e0       	ldi	r24, 0x03	; 3
    426e:	61 e0       	ldi	r22, 0x01	; 1
    4270:	41 e0       	ldi	r20, 0x01	; 1
    4272:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    4276:	83 e0       	ldi	r24, 0x03	; 3
    4278:	62 e0       	ldi	r22, 0x02	; 2
    427a:	41 e0       	ldi	r20, 0x01	; 1
    427c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4280:	29 c1       	rjmp	.+594    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4282:	83 e0       	ldi	r24, 0x03	; 3
    4284:	6f ef       	ldi	r22, 0xFF	; 255
    4286:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    428a:	83 e0       	ldi	r24, 0x03	; 3
    428c:	6f ef       	ldi	r22, 0xFF	; 255
    428e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
    4292:	20 c1       	rjmp	.+576    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4294:	83 e0       	ldi	r24, 0x03	; 3
    4296:	6f ef       	ldi	r22, 0xFF	; 255
    4298:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    429c:	83 e0       	ldi	r24, 0x03	; 3
    429e:	6f ef       	ldi	r22, 0xFF	; 255
    42a0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    42a4:	83 e0       	ldi	r24, 0x03	; 3
    42a6:	64 e0       	ldi	r22, 0x04	; 4
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    42ae:	12 c1       	rjmp	.+548    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    42b0:	18 8e       	std	Y+24, r1	; 0x18
    42b2:	12 c1       	rjmp	.+548    	; 0x44d8 <SevenSegment_Display+0x11d2>
							}
							break;
					case CommonAnode:
						DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    42b4:	83 e0       	ldi	r24, 0x03	; 3
    42b6:	6f ef       	ldi	r22, 0xFF	; 255
    42b8:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_HIGH);
    42bc:	83 e0       	ldi	r24, 0x03	; 3
    42be:	67 e0       	ldi	r22, 0x07	; 7
    42c0:	41 e0       	ldi	r20, 0x01	; 1
    42c2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
						switch(NUM)
    42c6:	8b 81       	ldd	r24, Y+3	; 0x03
    42c8:	28 2f       	mov	r18, r24
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	3d 83       	std	Y+5, r19	; 0x05
    42ce:	2c 83       	std	Y+4, r18	; 0x04
    42d0:	8c 81       	ldd	r24, Y+4	; 0x04
    42d2:	9d 81       	ldd	r25, Y+5	; 0x05
    42d4:	84 30       	cpi	r24, 0x04	; 4
    42d6:	91 05       	cpc	r25, r1
    42d8:	09 f4       	brne	.+2      	; 0x42dc <SevenSegment_Display+0xfd6>
    42da:	8e c0       	rjmp	.+284    	; 0x43f8 <SevenSegment_Display+0x10f2>
    42dc:	2c 81       	ldd	r18, Y+4	; 0x04
    42de:	3d 81       	ldd	r19, Y+5	; 0x05
    42e0:	25 30       	cpi	r18, 0x05	; 5
    42e2:	31 05       	cpc	r19, r1
    42e4:	ec f4       	brge	.+58     	; 0x4320 <SevenSegment_Display+0x101a>
    42e6:	8c 81       	ldd	r24, Y+4	; 0x04
    42e8:	9d 81       	ldd	r25, Y+5	; 0x05
    42ea:	81 30       	cpi	r24, 0x01	; 1
    42ec:	91 05       	cpc	r25, r1
    42ee:	09 f4       	brne	.+2      	; 0x42f2 <SevenSegment_Display+0xfec>
    42f0:	4a c0       	rjmp	.+148    	; 0x4386 <SevenSegment_Display+0x1080>
    42f2:	2c 81       	ldd	r18, Y+4	; 0x04
    42f4:	3d 81       	ldd	r19, Y+5	; 0x05
    42f6:	22 30       	cpi	r18, 0x02	; 2
    42f8:	31 05       	cpc	r19, r1
    42fa:	2c f4       	brge	.+10     	; 0x4306 <SevenSegment_Display+0x1000>
    42fc:	8c 81       	ldd	r24, Y+4	; 0x04
    42fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4300:	00 97       	sbiw	r24, 0x00	; 0
    4302:	99 f1       	breq	.+102    	; 0x436a <SevenSegment_Display+0x1064>
    4304:	e1 c0       	rjmp	.+450    	; 0x44c8 <SevenSegment_Display+0x11c2>
    4306:	2c 81       	ldd	r18, Y+4	; 0x04
    4308:	3d 81       	ldd	r19, Y+5	; 0x05
    430a:	22 30       	cpi	r18, 0x02	; 2
    430c:	31 05       	cpc	r19, r1
    430e:	09 f4       	brne	.+2      	; 0x4312 <SevenSegment_Display+0x100c>
    4310:	4d c0       	rjmp	.+154    	; 0x43ac <SevenSegment_Display+0x10a6>
    4312:	8c 81       	ldd	r24, Y+4	; 0x04
    4314:	9d 81       	ldd	r25, Y+5	; 0x05
    4316:	83 30       	cpi	r24, 0x03	; 3
    4318:	91 05       	cpc	r25, r1
    431a:	09 f4       	brne	.+2      	; 0x431e <SevenSegment_Display+0x1018>
    431c:	5a c0       	rjmp	.+180    	; 0x43d2 <SevenSegment_Display+0x10cc>
    431e:	d4 c0       	rjmp	.+424    	; 0x44c8 <SevenSegment_Display+0x11c2>
    4320:	2c 81       	ldd	r18, Y+4	; 0x04
    4322:	3d 81       	ldd	r19, Y+5	; 0x05
    4324:	27 30       	cpi	r18, 0x07	; 7
    4326:	31 05       	cpc	r19, r1
    4328:	09 f4       	brne	.+2      	; 0x432c <SevenSegment_Display+0x1026>
    432a:	9f c0       	rjmp	.+318    	; 0x446a <SevenSegment_Display+0x1164>
    432c:	8c 81       	ldd	r24, Y+4	; 0x04
    432e:	9d 81       	ldd	r25, Y+5	; 0x05
    4330:	88 30       	cpi	r24, 0x08	; 8
    4332:	91 05       	cpc	r25, r1
    4334:	6c f4       	brge	.+26     	; 0x4350 <SevenSegment_Display+0x104a>
    4336:	2c 81       	ldd	r18, Y+4	; 0x04
    4338:	3d 81       	ldd	r19, Y+5	; 0x05
    433a:	25 30       	cpi	r18, 0x05	; 5
    433c:	31 05       	cpc	r19, r1
    433e:	09 f4       	brne	.+2      	; 0x4342 <SevenSegment_Display+0x103c>
    4340:	73 c0       	rjmp	.+230    	; 0x4428 <SevenSegment_Display+0x1122>
    4342:	8c 81       	ldd	r24, Y+4	; 0x04
    4344:	9d 81       	ldd	r25, Y+5	; 0x05
    4346:	86 30       	cpi	r24, 0x06	; 6
    4348:	91 05       	cpc	r25, r1
    434a:	09 f4       	brne	.+2      	; 0x434e <SevenSegment_Display+0x1048>
    434c:	80 c0       	rjmp	.+256    	; 0x444e <SevenSegment_Display+0x1148>
    434e:	bc c0       	rjmp	.+376    	; 0x44c8 <SevenSegment_Display+0x11c2>
    4350:	2c 81       	ldd	r18, Y+4	; 0x04
    4352:	3d 81       	ldd	r19, Y+5	; 0x05
    4354:	28 30       	cpi	r18, 0x08	; 8
    4356:	31 05       	cpc	r19, r1
    4358:	09 f4       	brne	.+2      	; 0x435c <SevenSegment_Display+0x1056>
    435a:	9f c0       	rjmp	.+318    	; 0x449a <SevenSegment_Display+0x1194>
    435c:	8c 81       	ldd	r24, Y+4	; 0x04
    435e:	9d 81       	ldd	r25, Y+5	; 0x05
    4360:	89 30       	cpi	r24, 0x09	; 9
    4362:	91 05       	cpc	r25, r1
    4364:	09 f4       	brne	.+2      	; 0x4368 <SevenSegment_Display+0x1062>
    4366:	a2 c0       	rjmp	.+324    	; 0x44ac <SevenSegment_Display+0x11a6>
    4368:	af c0       	rjmp	.+350    	; 0x44c8 <SevenSegment_Display+0x11c2>
							{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    436a:	83 e0       	ldi	r24, 0x03	; 3
    436c:	6f ef       	ldi	r22, 0xFF	; 255
    436e:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4372:	83 e0       	ldi	r24, 0x03	; 3
    4374:	60 e0       	ldi	r22, 0x00	; 0
    4376:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_HIGH);
    437a:	83 e0       	ldi	r24, 0x03	; 3
    437c:	66 e0       	ldi	r22, 0x06	; 6
    437e:	41 e0       	ldi	r20, 0x01	; 1
    4380:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4384:	a7 c0       	rjmp	.+334    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4386:	83 e0       	ldi	r24, 0x03	; 3
    4388:	6f ef       	ldi	r22, 0xFF	; 255
    438a:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    438e:	83 e0       	ldi	r24, 0x03	; 3
    4390:	6f ef       	ldi	r22, 0xFF	; 255
    4392:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    4396:	83 e0       	ldi	r24, 0x03	; 3
    4398:	61 e0       	ldi	r22, 0x01	; 1
    439a:	40 e0       	ldi	r20, 0x00	; 0
    439c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    43a0:	83 e0       	ldi	r24, 0x03	; 3
    43a2:	62 e0       	ldi	r22, 0x02	; 2
    43a4:	40 e0       	ldi	r20, 0x00	; 0
    43a6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    43aa:	94 c0       	rjmp	.+296    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    43ac:	83 e0       	ldi	r24, 0x03	; 3
    43ae:	6f ef       	ldi	r22, 0xFF	; 255
    43b0:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    43b4:	83 e0       	ldi	r24, 0x03	; 3
    43b6:	60 e0       	ldi	r22, 0x00	; 0
    43b8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    43bc:	83 e0       	ldi	r24, 0x03	; 3
    43be:	62 e0       	ldi	r22, 0x02	; 2
    43c0:	41 e0       	ldi	r20, 0x01	; 1
    43c2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    43c6:	83 e0       	ldi	r24, 0x03	; 3
    43c8:	65 e0       	ldi	r22, 0x05	; 5
    43ca:	41 e0       	ldi	r20, 0x01	; 1
    43cc:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    43d0:	81 c0       	rjmp	.+258    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    43d2:	83 e0       	ldi	r24, 0x03	; 3
    43d4:	6f ef       	ldi	r22, 0xFF	; 255
    43d6:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    43da:	83 e0       	ldi	r24, 0x03	; 3
    43dc:	60 e0       	ldi	r22, 0x00	; 0
    43de:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    43e2:	83 e0       	ldi	r24, 0x03	; 3
    43e4:	64 e0       	ldi	r22, 0x04	; 4
    43e6:	41 e0       	ldi	r20, 0x01	; 1
    43e8:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    43ec:	83 e0       	ldi	r24, 0x03	; 3
    43ee:	65 e0       	ldi	r22, 0x05	; 5
    43f0:	41 e0       	ldi	r20, 0x01	; 1
    43f2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    43f6:	6e c0       	rjmp	.+220    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    43f8:	83 e0       	ldi	r24, 0x03	; 3
    43fa:	6f ef       	ldi	r22, 0xFF	; 255
    43fc:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4400:	83 e0       	ldi	r24, 0x03	; 3
    4402:	60 e0       	ldi	r22, 0x00	; 0
    4404:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    4408:	83 e0       	ldi	r24, 0x03	; 3
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	41 e0       	ldi	r20, 0x01	; 1
    440e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_HIGH);
    4412:	83 e0       	ldi	r24, 0x03	; 3
    4414:	63 e0       	ldi	r22, 0x03	; 3
    4416:	41 e0       	ldi	r20, 0x01	; 1
    4418:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    441c:	83 e0       	ldi	r24, 0x03	; 3
    441e:	64 e0       	ldi	r22, 0x04	; 4
    4420:	41 e0       	ldi	r20, 0x01	; 1
    4422:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4426:	56 c0       	rjmp	.+172    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4428:	83 e0       	ldi	r24, 0x03	; 3
    442a:	6f ef       	ldi	r22, 0xFF	; 255
    442c:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4430:	83 e0       	ldi	r24, 0x03	; 3
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    4438:	83 e0       	ldi	r24, 0x03	; 3
    443a:	61 e0       	ldi	r22, 0x01	; 1
    443c:	41 e0       	ldi	r20, 0x01	; 1
    443e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    4442:	83 e0       	ldi	r24, 0x03	; 3
    4444:	64 e0       	ldi	r22, 0x04	; 4
    4446:	41 e0       	ldi	r20, 0x01	; 1
    4448:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    444c:	43 c0       	rjmp	.+134    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    444e:	83 e0       	ldi	r24, 0x03	; 3
    4450:	6f ef       	ldi	r22, 0xFF	; 255
    4452:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4456:	83 e0       	ldi	r24, 0x03	; 3
    4458:	60 e0       	ldi	r22, 0x00	; 0
    445a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    445e:	83 e0       	ldi	r24, 0x03	; 3
    4460:	61 e0       	ldi	r22, 0x01	; 1
    4462:	41 e0       	ldi	r20, 0x01	; 1
    4464:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4468:	35 c0       	rjmp	.+106    	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    446a:	83 e0       	ldi	r24, 0x03	; 3
    446c:	6f ef       	ldi	r22, 0xFF	; 255
    446e:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4472:	83 e0       	ldi	r24, 0x03	; 3
    4474:	6f ef       	ldi	r22, 0xFF	; 255
    4476:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    447a:	83 e0       	ldi	r24, 0x03	; 3
    447c:	60 e0       	ldi	r22, 0x00	; 0
    447e:	40 e0       	ldi	r20, 0x00	; 0
    4480:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    4484:	83 e0       	ldi	r24, 0x03	; 3
    4486:	61 e0       	ldi	r22, 0x01	; 1
    4488:	40 e0       	ldi	r20, 0x00	; 0
    448a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    448e:	83 e0       	ldi	r24, 0x03	; 3
    4490:	62 e0       	ldi	r22, 0x02	; 2
    4492:	40 e0       	ldi	r20, 0x00	; 0
    4494:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    4498:	1d c0       	rjmp	.+58     	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    449a:	83 e0       	ldi	r24, 0x03	; 3
    449c:	6f ef       	ldi	r22, 0xFF	; 255
    449e:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    44a2:	83 e0       	ldi	r24, 0x03	; 3
    44a4:	60 e0       	ldi	r22, 0x00	; 0
    44a6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
    44aa:	14 c0       	rjmp	.+40     	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    44ac:	83 e0       	ldi	r24, 0x03	; 3
    44ae:	6f ef       	ldi	r22, 0xFF	; 255
    44b0:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    44b4:	83 e0       	ldi	r24, 0x03	; 3
    44b6:	60 e0       	ldi	r22, 0x00	; 0
    44b8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    44bc:	83 e0       	ldi	r24, 0x03	; 3
    44be:	64 e0       	ldi	r22, 0x04	; 4
    44c0:	41 e0       	ldi	r20, 0x01	; 1
    44c2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    44c6:	06 c0       	rjmp	.+12     	; 0x44d4 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    44c8:	18 8e       	std	Y+24, r1	; 0x18
    44ca:	06 c0       	rjmp	.+12     	; 0x44d8 <SevenSegment_Display+0x11d2>
							}
					break;
					default:
					return E_OK;
    44cc:	18 8e       	std	Y+24, r1	; 0x18
    44ce:	04 c0       	rjmp	.+8      	; 0x44d8 <SevenSegment_Display+0x11d2>
				}
				break;
	default:
	return E_OK;
    44d0:	18 8e       	std	Y+24, r1	; 0x18
    44d2:	02 c0       	rjmp	.+4      	; 0x44d8 <SevenSegment_Display+0x11d2>
}
	return E_NOK;
    44d4:	91 e0       	ldi	r25, 0x01	; 1
    44d6:	98 8f       	std	Y+24, r25	; 0x18
    44d8:	88 8d       	ldd	r24, Y+24	; 0x18
}
    44da:	6e 96       	adiw	r28, 0x1e	; 30
    44dc:	0f b6       	in	r0, 0x3f	; 63
    44de:	f8 94       	cli
    44e0:	de bf       	out	0x3e, r29	; 62
    44e2:	0f be       	out	0x3f, r0	; 63
    44e4:	cd bf       	out	0x3d, r28	; 61
    44e6:	cf 91       	pop	r28
    44e8:	df 91       	pop	r29
    44ea:	08 95       	ret

000044ec <CLCD_init>:
#include "LCD_Config.h"
#include <stdio.h>
#include <util/delay.h>
#include <stdlib.h>
void CLCD_init(void)
{
    44ec:	df 93       	push	r29
    44ee:	cf 93       	push	r28
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
    44f4:	2e 97       	sbiw	r28, 0x0e	; 14
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	cd bf       	out	0x3d, r28	; 61
	//Initialize LCD pins direction
	DIO_SetPortDirection(CLCD_DataPort,DIO_OUTPUT);
    4500:	82 e0       	ldi	r24, 0x02	; 2
    4502:	61 e0       	ldi	r22, 0x01	; 1
    4504:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RS_PIN,DIO_OUTPUT);
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	60 e0       	ldi	r22, 0x00	; 0
    450c:	41 e0       	ldi	r20, 0x01	; 1
    450e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RW_PIN,DIO_OUTPUT);
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	61 e0       	ldi	r22, 0x01	; 1
    4516:	41 e0       	ldi	r20, 0x01	; 1
    4518:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_E_PIN,DIO_OUTPUT);
    451c:	81 e0       	ldi	r24, 0x01	; 1
    451e:	62 e0       	ldi	r22, 0x02	; 2
    4520:	41 e0       	ldi	r20, 0x01	; 1
    4522:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	a0 e2       	ldi	r26, 0x20	; 32
    452c:	b2 e4       	ldi	r27, 0x42	; 66
    452e:	8b 87       	std	Y+11, r24	; 0x0b
    4530:	9c 87       	std	Y+12, r25	; 0x0c
    4532:	ad 87       	std	Y+13, r26	; 0x0d
    4534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4536:	6b 85       	ldd	r22, Y+11	; 0x0b
    4538:	7c 85       	ldd	r23, Y+12	; 0x0c
    453a:	8d 85       	ldd	r24, Y+13	; 0x0d
    453c:	9e 85       	ldd	r25, Y+14	; 0x0e
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	4a ef       	ldi	r20, 0xFA	; 250
    4544:	54 e4       	ldi	r21, 0x44	; 68
    4546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454a:	dc 01       	movw	r26, r24
    454c:	cb 01       	movw	r24, r22
    454e:	8f 83       	std	Y+7, r24	; 0x07
    4550:	98 87       	std	Y+8, r25	; 0x08
    4552:	a9 87       	std	Y+9, r26	; 0x09
    4554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4556:	6f 81       	ldd	r22, Y+7	; 0x07
    4558:	78 85       	ldd	r23, Y+8	; 0x08
    455a:	89 85       	ldd	r24, Y+9	; 0x09
    455c:	9a 85       	ldd	r25, Y+10	; 0x0a
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	40 e8       	ldi	r20, 0x80	; 128
    4564:	5f e3       	ldi	r21, 0x3F	; 63
    4566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    456a:	88 23       	and	r24, r24
    456c:	2c f4       	brge	.+10     	; 0x4578 <CLCD_init+0x8c>
		__ticks = 1;
    456e:	81 e0       	ldi	r24, 0x01	; 1
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	9e 83       	std	Y+6, r25	; 0x06
    4574:	8d 83       	std	Y+5, r24	; 0x05
    4576:	3f c0       	rjmp	.+126    	; 0x45f6 <CLCD_init+0x10a>
	else if (__tmp > 65535)
    4578:	6f 81       	ldd	r22, Y+7	; 0x07
    457a:	78 85       	ldd	r23, Y+8	; 0x08
    457c:	89 85       	ldd	r24, Y+9	; 0x09
    457e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	3f ef       	ldi	r19, 0xFF	; 255
    4584:	4f e7       	ldi	r20, 0x7F	; 127
    4586:	57 e4       	ldi	r21, 0x47	; 71
    4588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    458c:	18 16       	cp	r1, r24
    458e:	4c f5       	brge	.+82     	; 0x45e2 <CLCD_init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4590:	6b 85       	ldd	r22, Y+11	; 0x0b
    4592:	7c 85       	ldd	r23, Y+12	; 0x0c
    4594:	8d 85       	ldd	r24, Y+13	; 0x0d
    4596:	9e 85       	ldd	r25, Y+14	; 0x0e
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	40 e2       	ldi	r20, 0x20	; 32
    459e:	51 e4       	ldi	r21, 0x41	; 65
    45a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a4:	dc 01       	movw	r26, r24
    45a6:	cb 01       	movw	r24, r22
    45a8:	bc 01       	movw	r22, r24
    45aa:	cd 01       	movw	r24, r26
    45ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	9e 83       	std	Y+6, r25	; 0x06
    45b6:	8d 83       	std	Y+5, r24	; 0x05
    45b8:	0f c0       	rjmp	.+30     	; 0x45d8 <CLCD_init+0xec>
    45ba:	88 ec       	ldi	r24, 0xC8	; 200
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	9c 83       	std	Y+4, r25	; 0x04
    45c0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45c2:	8b 81       	ldd	r24, Y+3	; 0x03
    45c4:	9c 81       	ldd	r25, Y+4	; 0x04
    45c6:	01 97       	sbiw	r24, 0x01	; 1
    45c8:	f1 f7       	brne	.-4      	; 0x45c6 <CLCD_init+0xda>
    45ca:	9c 83       	std	Y+4, r25	; 0x04
    45cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ce:	8d 81       	ldd	r24, Y+5	; 0x05
    45d0:	9e 81       	ldd	r25, Y+6	; 0x06
    45d2:	01 97       	sbiw	r24, 0x01	; 1
    45d4:	9e 83       	std	Y+6, r25	; 0x06
    45d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45d8:	8d 81       	ldd	r24, Y+5	; 0x05
    45da:	9e 81       	ldd	r25, Y+6	; 0x06
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	69 f7       	brne	.-38     	; 0x45ba <CLCD_init+0xce>
    45e0:	14 c0       	rjmp	.+40     	; 0x460a <CLCD_init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e2:	6f 81       	ldd	r22, Y+7	; 0x07
    45e4:	78 85       	ldd	r23, Y+8	; 0x08
    45e6:	89 85       	ldd	r24, Y+9	; 0x09
    45e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	9e 83       	std	Y+6, r25	; 0x06
    45f4:	8d 83       	std	Y+5, r24	; 0x05
    45f6:	8d 81       	ldd	r24, Y+5	; 0x05
    45f8:	9e 81       	ldd	r25, Y+6	; 0x06
    45fa:	9a 83       	std	Y+2, r25	; 0x02
    45fc:	89 83       	std	Y+1, r24	; 0x01
    45fe:	89 81       	ldd	r24, Y+1	; 0x01
    4600:	9a 81       	ldd	r25, Y+2	; 0x02
    4602:	01 97       	sbiw	r24, 0x01	; 1
    4604:	f1 f7       	brne	.-4      	; 0x4602 <CLCD_init+0x116>
    4606:	9a 83       	std	Y+2, r25	; 0x02
    4608:	89 83       	std	Y+1, r24	; 0x01
	#ifdef CLCD_OneLine_5x8Size
	CLCD_SendCommand(CLCD_OneLine_5x8Size);
	#elif CLCD_OneLine_5x11Size
	CLCD_SendCommand(CLCD_OneLine_5x11Size );
	#elif  CLCD_TwoLines_5x8Size
	CLCD_SendCommand(CLCD_TwoLines_5x8Size);
    460a:	88 e3       	ldi	r24, 0x38	; 56
    460c:	0e 94 17 23 	call	0x462e	; 0x462e <CLCD_SendCommand>
	#elif CLCD_TwoLines_5x11Size
	CLCD_SendCommand(CLCD_TwoLines_5x11Size);
	#endif

	CLCD_SendCommand(CLCD_DISP_ON_CURSOR_BLINK);
    4610:	8f e0       	ldi	r24, 0x0F	; 15
    4612:	0e 94 17 23 	call	0x462e	; 0x462e <CLCD_SendCommand>

	CLCD_SendCommand(CLCD_CLEAR);
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	0e 94 17 23 	call	0x462e	; 0x462e <CLCD_SendCommand>
}
    461c:	2e 96       	adiw	r28, 0x0e	; 14
    461e:	0f b6       	in	r0, 0x3f	; 63
    4620:	f8 94       	cli
    4622:	de bf       	out	0x3e, r29	; 62
    4624:	0f be       	out	0x3f, r0	; 63
    4626:	cd bf       	out	0x3d, r28	; 61
    4628:	cf 91       	pop	r28
    462a:	df 91       	pop	r29
    462c:	08 95       	ret

0000462e <CLCD_SendCommand>:

void CLCD_SendCommand(u8 Command)
{
    462e:	df 93       	push	r29
    4630:	cf 93       	push	r28
    4632:	cd b7       	in	r28, 0x3d	; 61
    4634:	de b7       	in	r29, 0x3e	; 62
    4636:	2f 97       	sbiw	r28, 0x0f	; 15
    4638:	0f b6       	in	r0, 0x3f	; 63
    463a:	f8 94       	cli
    463c:	de bf       	out	0x3e, r29	; 62
    463e:	0f be       	out	0x3f, r0	; 63
    4640:	cd bf       	out	0x3d, r28	; 61
    4642:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	60 e0       	ldi	r22, 0x00	; 0
    4648:	40 e0       	ldi	r20, 0x00	; 0
    464a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
	//SET ReadWrite pin low to write
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    464e:	81 e0       	ldi	r24, 0x01	; 1
    4650:	61 e0       	ldi	r22, 0x01	; 1
    4652:	40 e0       	ldi	r20, 0x00	; 0
    4654:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
	//SET Data/Command Port value is the command
	DIO_SetPortValue(CLCD_DataPort,Command);
    4658:	82 e0       	ldi	r24, 0x02	; 2
    465a:	6f 85       	ldd	r22, Y+15	; 0x0f
    465c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	62 e0       	ldi	r22, 0x02	; 2
    4664:	41 e0       	ldi	r20, 0x01	; 1
    4666:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	a0 e0       	ldi	r26, 0x00	; 0
    4670:	b0 e4       	ldi	r27, 0x40	; 64
    4672:	8b 87       	std	Y+11, r24	; 0x0b
    4674:	9c 87       	std	Y+12, r25	; 0x0c
    4676:	ad 87       	std	Y+13, r26	; 0x0d
    4678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    467a:	6b 85       	ldd	r22, Y+11	; 0x0b
    467c:	7c 85       	ldd	r23, Y+12	; 0x0c
    467e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4680:	9e 85       	ldd	r25, Y+14	; 0x0e
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	4a ef       	ldi	r20, 0xFA	; 250
    4688:	54 e4       	ldi	r21, 0x44	; 68
    468a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	8f 83       	std	Y+7, r24	; 0x07
    4694:	98 87       	std	Y+8, r25	; 0x08
    4696:	a9 87       	std	Y+9, r26	; 0x09
    4698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    469a:	6f 81       	ldd	r22, Y+7	; 0x07
    469c:	78 85       	ldd	r23, Y+8	; 0x08
    469e:	89 85       	ldd	r24, Y+9	; 0x09
    46a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	40 e8       	ldi	r20, 0x80	; 128
    46a8:	5f e3       	ldi	r21, 0x3F	; 63
    46aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46ae:	88 23       	and	r24, r24
    46b0:	2c f4       	brge	.+10     	; 0x46bc <CLCD_SendCommand+0x8e>
		__ticks = 1;
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	9e 83       	std	Y+6, r25	; 0x06
    46b8:	8d 83       	std	Y+5, r24	; 0x05
    46ba:	3f c0       	rjmp	.+126    	; 0x473a <CLCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    46bc:	6f 81       	ldd	r22, Y+7	; 0x07
    46be:	78 85       	ldd	r23, Y+8	; 0x08
    46c0:	89 85       	ldd	r24, Y+9	; 0x09
    46c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	3f ef       	ldi	r19, 0xFF	; 255
    46c8:	4f e7       	ldi	r20, 0x7F	; 127
    46ca:	57 e4       	ldi	r21, 0x47	; 71
    46cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46d0:	18 16       	cp	r1, r24
    46d2:	4c f5       	brge	.+82     	; 0x4726 <CLCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    46d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    46d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    46da:	9e 85       	ldd	r25, Y+14	; 0x0e
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	40 e2       	ldi	r20, 0x20	; 32
    46e2:	51 e4       	ldi	r21, 0x41	; 65
    46e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e8:	dc 01       	movw	r26, r24
    46ea:	cb 01       	movw	r24, r22
    46ec:	bc 01       	movw	r22, r24
    46ee:	cd 01       	movw	r24, r26
    46f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f4:	dc 01       	movw	r26, r24
    46f6:	cb 01       	movw	r24, r22
    46f8:	9e 83       	std	Y+6, r25	; 0x06
    46fa:	8d 83       	std	Y+5, r24	; 0x05
    46fc:	0f c0       	rjmp	.+30     	; 0x471c <CLCD_SendCommand+0xee>
    46fe:	88 ec       	ldi	r24, 0xC8	; 200
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	9c 83       	std	Y+4, r25	; 0x04
    4704:	8b 83       	std	Y+3, r24	; 0x03
    4706:	8b 81       	ldd	r24, Y+3	; 0x03
    4708:	9c 81       	ldd	r25, Y+4	; 0x04
    470a:	01 97       	sbiw	r24, 0x01	; 1
    470c:	f1 f7       	brne	.-4      	; 0x470a <CLCD_SendCommand+0xdc>
    470e:	9c 83       	std	Y+4, r25	; 0x04
    4710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4712:	8d 81       	ldd	r24, Y+5	; 0x05
    4714:	9e 81       	ldd	r25, Y+6	; 0x06
    4716:	01 97       	sbiw	r24, 0x01	; 1
    4718:	9e 83       	std	Y+6, r25	; 0x06
    471a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    471c:	8d 81       	ldd	r24, Y+5	; 0x05
    471e:	9e 81       	ldd	r25, Y+6	; 0x06
    4720:	00 97       	sbiw	r24, 0x00	; 0
    4722:	69 f7       	brne	.-38     	; 0x46fe <CLCD_SendCommand+0xd0>
    4724:	14 c0       	rjmp	.+40     	; 0x474e <CLCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4726:	6f 81       	ldd	r22, Y+7	; 0x07
    4728:	78 85       	ldd	r23, Y+8	; 0x08
    472a:	89 85       	ldd	r24, Y+9	; 0x09
    472c:	9a 85       	ldd	r25, Y+10	; 0x0a
    472e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	9e 83       	std	Y+6, r25	; 0x06
    4738:	8d 83       	std	Y+5, r24	; 0x05
    473a:	8d 81       	ldd	r24, Y+5	; 0x05
    473c:	9e 81       	ldd	r25, Y+6	; 0x06
    473e:	9a 83       	std	Y+2, r25	; 0x02
    4740:	89 83       	std	Y+1, r24	; 0x01
    4742:	89 81       	ldd	r24, Y+1	; 0x01
    4744:	9a 81       	ldd	r25, Y+2	; 0x02
    4746:	01 97       	sbiw	r24, 0x01	; 1
    4748:	f1 f7       	brne	.-4      	; 0x4746 <CLCD_SendCommand+0x118>
    474a:	9a 83       	std	Y+2, r25	; 0x02
    474c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	62 e0       	ldi	r22, 0x02	; 2
    4752:	40 e0       	ldi	r20, 0x00	; 0
    4754:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
}
    4758:	2f 96       	adiw	r28, 0x0f	; 15
    475a:	0f b6       	in	r0, 0x3f	; 63
    475c:	f8 94       	cli
    475e:	de bf       	out	0x3e, r29	; 62
    4760:	0f be       	out	0x3f, r0	; 63
    4762:	cd bf       	out	0x3d, r28	; 61
    4764:	cf 91       	pop	r28
    4766:	df 91       	pop	r29
    4768:	08 95       	ret

0000476a <CLCD_SendData>:

void CLCD_SendData(u8 Data)
{
    476a:	df 93       	push	r29
    476c:	cf 93       	push	r28
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
    4772:	2f 97       	sbiw	r28, 0x0f	; 15
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	f8 94       	cli
    4778:	de bf       	out	0x3e, r29	; 62
    477a:	0f be       	out	0x3f, r0	; 63
    477c:	cd bf       	out	0x3d, r28	; 61
    477e:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    4780:	81 e0       	ldi	r24, 0x01	; 1
    4782:	60 e0       	ldi	r22, 0x00	; 0
    4784:	41 e0       	ldi	r20, 0x01	; 1
    4786:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
	//SET ReadWrite pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	61 e0       	ldi	r22, 0x01	; 1
    478e:	40 e0       	ldi	r20, 0x00	; 0
    4790:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
	//SET Data/Command Port value is the Data
	DIO_SetPortValue(CLCD_DataPort,Data);
    4794:	82 e0       	ldi	r24, 0x02	; 2
    4796:	6f 85       	ldd	r22, Y+15	; 0x0f
    4798:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	62 e0       	ldi	r22, 0x02	; 2
    47a0:	41 e0       	ldi	r20, 0x01	; 1
    47a2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
    47a6:	80 e0       	ldi	r24, 0x00	; 0
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	a0 e0       	ldi	r26, 0x00	; 0
    47ac:	b0 e4       	ldi	r27, 0x40	; 64
    47ae:	8b 87       	std	Y+11, r24	; 0x0b
    47b0:	9c 87       	std	Y+12, r25	; 0x0c
    47b2:	ad 87       	std	Y+13, r26	; 0x0d
    47b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    47b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    47ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    47bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	4a ef       	ldi	r20, 0xFA	; 250
    47c4:	54 e4       	ldi	r21, 0x44	; 68
    47c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ca:	dc 01       	movw	r26, r24
    47cc:	cb 01       	movw	r24, r22
    47ce:	8f 83       	std	Y+7, r24	; 0x07
    47d0:	98 87       	std	Y+8, r25	; 0x08
    47d2:	a9 87       	std	Y+9, r26	; 0x09
    47d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47d6:	6f 81       	ldd	r22, Y+7	; 0x07
    47d8:	78 85       	ldd	r23, Y+8	; 0x08
    47da:	89 85       	ldd	r24, Y+9	; 0x09
    47dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	40 e8       	ldi	r20, 0x80	; 128
    47e4:	5f e3       	ldi	r21, 0x3F	; 63
    47e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ea:	88 23       	and	r24, r24
    47ec:	2c f4       	brge	.+10     	; 0x47f8 <CLCD_SendData+0x8e>
		__ticks = 1;
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	9e 83       	std	Y+6, r25	; 0x06
    47f4:	8d 83       	std	Y+5, r24	; 0x05
    47f6:	3f c0       	rjmp	.+126    	; 0x4876 <CLCD_SendData+0x10c>
	else if (__tmp > 65535)
    47f8:	6f 81       	ldd	r22, Y+7	; 0x07
    47fa:	78 85       	ldd	r23, Y+8	; 0x08
    47fc:	89 85       	ldd	r24, Y+9	; 0x09
    47fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	3f ef       	ldi	r19, 0xFF	; 255
    4804:	4f e7       	ldi	r20, 0x7F	; 127
    4806:	57 e4       	ldi	r21, 0x47	; 71
    4808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    480c:	18 16       	cp	r1, r24
    480e:	4c f5       	brge	.+82     	; 0x4862 <CLCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4810:	6b 85       	ldd	r22, Y+11	; 0x0b
    4812:	7c 85       	ldd	r23, Y+12	; 0x0c
    4814:	8d 85       	ldd	r24, Y+13	; 0x0d
    4816:	9e 85       	ldd	r25, Y+14	; 0x0e
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	40 e2       	ldi	r20, 0x20	; 32
    481e:	51 e4       	ldi	r21, 0x41	; 65
    4820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4824:	dc 01       	movw	r26, r24
    4826:	cb 01       	movw	r24, r22
    4828:	bc 01       	movw	r22, r24
    482a:	cd 01       	movw	r24, r26
    482c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4830:	dc 01       	movw	r26, r24
    4832:	cb 01       	movw	r24, r22
    4834:	9e 83       	std	Y+6, r25	; 0x06
    4836:	8d 83       	std	Y+5, r24	; 0x05
    4838:	0f c0       	rjmp	.+30     	; 0x4858 <CLCD_SendData+0xee>
    483a:	88 ec       	ldi	r24, 0xC8	; 200
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	9c 83       	std	Y+4, r25	; 0x04
    4840:	8b 83       	std	Y+3, r24	; 0x03
    4842:	8b 81       	ldd	r24, Y+3	; 0x03
    4844:	9c 81       	ldd	r25, Y+4	; 0x04
    4846:	01 97       	sbiw	r24, 0x01	; 1
    4848:	f1 f7       	brne	.-4      	; 0x4846 <CLCD_SendData+0xdc>
    484a:	9c 83       	std	Y+4, r25	; 0x04
    484c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    484e:	8d 81       	ldd	r24, Y+5	; 0x05
    4850:	9e 81       	ldd	r25, Y+6	; 0x06
    4852:	01 97       	sbiw	r24, 0x01	; 1
    4854:	9e 83       	std	Y+6, r25	; 0x06
    4856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4858:	8d 81       	ldd	r24, Y+5	; 0x05
    485a:	9e 81       	ldd	r25, Y+6	; 0x06
    485c:	00 97       	sbiw	r24, 0x00	; 0
    485e:	69 f7       	brne	.-38     	; 0x483a <CLCD_SendData+0xd0>
    4860:	14 c0       	rjmp	.+40     	; 0x488a <CLCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4862:	6f 81       	ldd	r22, Y+7	; 0x07
    4864:	78 85       	ldd	r23, Y+8	; 0x08
    4866:	89 85       	ldd	r24, Y+9	; 0x09
    4868:	9a 85       	ldd	r25, Y+10	; 0x0a
    486a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	9e 83       	std	Y+6, r25	; 0x06
    4874:	8d 83       	std	Y+5, r24	; 0x05
    4876:	8d 81       	ldd	r24, Y+5	; 0x05
    4878:	9e 81       	ldd	r25, Y+6	; 0x06
    487a:	9a 83       	std	Y+2, r25	; 0x02
    487c:	89 83       	std	Y+1, r24	; 0x01
    487e:	89 81       	ldd	r24, Y+1	; 0x01
    4880:	9a 81       	ldd	r25, Y+2	; 0x02
    4882:	01 97       	sbiw	r24, 0x01	; 1
    4884:	f1 f7       	brne	.-4      	; 0x4882 <CLCD_SendData+0x118>
    4886:	9a 83       	std	Y+2, r25	; 0x02
    4888:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	62 e0       	ldi	r22, 0x02	; 2
    488e:	40 e0       	ldi	r20, 0x00	; 0
    4890:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>
}
    4894:	2f 96       	adiw	r28, 0x0f	; 15
    4896:	0f b6       	in	r0, 0x3f	; 63
    4898:	f8 94       	cli
    489a:	de bf       	out	0x3e, r29	; 62
    489c:	0f be       	out	0x3f, r0	; 63
    489e:	cd bf       	out	0x3d, r28	; 61
    48a0:	cf 91       	pop	r28
    48a2:	df 91       	pop	r29
    48a4:	08 95       	ret

000048a6 <CLCD_SendWord>:

void CLCD_SendWord(u8 *Word_PTR)
{
    48a6:	df 93       	push	r29
    48a8:	cf 93       	push	r28
    48aa:	00 d0       	rcall	.+0      	; 0x48ac <CLCD_SendWord+0x6>
    48ac:	cd b7       	in	r28, 0x3d	; 61
    48ae:	de b7       	in	r29, 0x3e	; 62
    48b0:	9a 83       	std	Y+2, r25	; 0x02
    48b2:	89 83       	std	Y+1, r24	; 0x01
    48b4:	0b c0       	rjmp	.+22     	; 0x48cc <CLCD_SendWord+0x26>
	while(*Word_PTR) 		//Word = String = array of charaters
	{
		CLCD_SendData(*Word_PTR++);
    48b6:	e9 81       	ldd	r30, Y+1	; 0x01
    48b8:	fa 81       	ldd	r31, Y+2	; 0x02
    48ba:	20 81       	ld	r18, Z
    48bc:	89 81       	ldd	r24, Y+1	; 0x01
    48be:	9a 81       	ldd	r25, Y+2	; 0x02
    48c0:	01 96       	adiw	r24, 0x01	; 1
    48c2:	9a 83       	std	Y+2, r25	; 0x02
    48c4:	89 83       	std	Y+1, r24	; 0x01
    48c6:	82 2f       	mov	r24, r18
    48c8:	0e 94 b5 23 	call	0x476a	; 0x476a <CLCD_SendData>
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
}

void CLCD_SendWord(u8 *Word_PTR)
{
	while(*Word_PTR) 		//Word = String = array of charaters
    48cc:	e9 81       	ldd	r30, Y+1	; 0x01
    48ce:	fa 81       	ldd	r31, Y+2	; 0x02
    48d0:	80 81       	ld	r24, Z
    48d2:	88 23       	and	r24, r24
    48d4:	81 f7       	brne	.-32     	; 0x48b6 <CLCD_SendWord+0x10>
	{
		CLCD_SendData(*Word_PTR++);
	}
}
    48d6:	0f 90       	pop	r0
    48d8:	0f 90       	pop	r0
    48da:	cf 91       	pop	r28
    48dc:	df 91       	pop	r29
    48de:	08 95       	ret

000048e0 <CLCD_GoToXY>:

//to move from position to another in CLCD
STD_Return CLCD_GoToXY(u8 X_Position,u8 Y_Position)
{
    48e0:	df 93       	push	r29
    48e2:	cf 93       	push	r28
    48e4:	00 d0       	rcall	.+0      	; 0x48e6 <CLCD_GoToXY+0x6>
    48e6:	00 d0       	rcall	.+0      	; 0x48e8 <CLCD_GoToXY+0x8>
    48e8:	cd b7       	in	r28, 0x3d	; 61
    48ea:	de b7       	in	r29, 0x3e	; 62
    48ec:	8a 83       	std	Y+2, r24	; 0x02
    48ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_address;
	if(X_Position == 0)
    48f0:	8a 81       	ldd	r24, Y+2	; 0x02
    48f2:	88 23       	and	r24, r24
    48f4:	49 f4       	brne	.+18     	; 0x4908 <CLCD_GoToXY+0x28>
		{
			DDRAM_address = Y_Position;
    48f6:	8b 81       	ldd	r24, Y+3	; 0x03
    48f8:	89 83       	std	Y+1, r24	; 0x01
			CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    48fa:	89 81       	ldd	r24, Y+1	; 0x01
    48fc:	80 58       	subi	r24, 0x80	; 128
    48fe:	0e 94 17 23 	call	0x462e	; 0x462e <CLCD_SendCommand>
			return E_NOK;
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	8c 83       	std	Y+4, r24	; 0x04
    4906:	0e c0       	rjmp	.+28     	; 0x4924 <CLCD_GoToXY+0x44>
		}
	else if (X_Position == 1)
    4908:	8a 81       	ldd	r24, Y+2	; 0x02
    490a:	81 30       	cpi	r24, 0x01	; 1
    490c:	51 f4       	brne	.+20     	; 0x4922 <CLCD_GoToXY+0x42>
		{
		DDRAM_address = Y_Position + FirstLoc_SecondLine;
    490e:	8b 81       	ldd	r24, Y+3	; 0x03
    4910:	80 5c       	subi	r24, 0xC0	; 192
    4912:	89 83       	std	Y+1, r24	; 0x01
		CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    4914:	89 81       	ldd	r24, Y+1	; 0x01
    4916:	80 58       	subi	r24, 0x80	; 128
    4918:	0e 94 17 23 	call	0x462e	; 0x462e <CLCD_SendCommand>
		return E_NOK;
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	8c 83       	std	Y+4, r24	; 0x04
    4920:	01 c0       	rjmp	.+2      	; 0x4924 <CLCD_GoToXY+0x44>
		}
	else
	{
		return E_OK;
    4922:	1c 82       	std	Y+4, r1	; 0x04
    4924:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	cf 91       	pop	r28
    4930:	df 91       	pop	r29
    4932:	08 95       	ret

00004934 <CLCD_SendSpecialChar>:
//to write special function by CGRAM
void CLCD_SendSpecialChar(u8 *Pattern,u8 BlockNumber,u8 X_Position,u8 Y_Position)
{
    4934:	df 93       	push	r29
    4936:	cf 93       	push	r28
    4938:	cd b7       	in	r28, 0x3d	; 61
    493a:	de b7       	in	r29, 0x3e	; 62
    493c:	27 97       	sbiw	r28, 0x07	; 7
    493e:	0f b6       	in	r0, 0x3f	; 63
    4940:	f8 94       	cli
    4942:	de bf       	out	0x3e, r29	; 62
    4944:	0f be       	out	0x3f, r0	; 63
    4946:	cd bf       	out	0x3d, r28	; 61
    4948:	9c 83       	std	Y+4, r25	; 0x04
    494a:	8b 83       	std	Y+3, r24	; 0x03
    494c:	6d 83       	std	Y+5, r22	; 0x05
    494e:	4e 83       	std	Y+6, r20	; 0x06
    4950:	2f 83       	std	Y+7, r18	; 0x07
	u8 CGRAM_address=0;
    4952:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter;
	CGRAM_address = BlockNumber*8;
    4954:	8d 81       	ldd	r24, Y+5	; 0x05
    4956:	88 2f       	mov	r24, r24
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	88 0f       	add	r24, r24
    495c:	99 1f       	adc	r25, r25
    495e:	88 0f       	add	r24, r24
    4960:	99 1f       	adc	r25, r25
    4962:	88 0f       	add	r24, r24
    4964:	99 1f       	adc	r25, r25
    4966:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_SendCommand(CGRAM_address+Set_Bit6);
    4968:	8a 81       	ldd	r24, Y+2	; 0x02
    496a:	80 5c       	subi	r24, 0xC0	; 192
    496c:	0e 94 17 23 	call	0x462e	; 0x462e <CLCD_SendCommand>

	for(counter=0;counter<8;counter++)
    4970:	19 82       	std	Y+1, r1	; 0x01
    4972:	0e c0       	rjmp	.+28     	; 0x4990 <CLCD_SendSpecialChar+0x5c>
		{
			CLCD_SendData(Pattern[counter]);
    4974:	89 81       	ldd	r24, Y+1	; 0x01
    4976:	28 2f       	mov	r18, r24
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	8b 81       	ldd	r24, Y+3	; 0x03
    497c:	9c 81       	ldd	r25, Y+4	; 0x04
    497e:	fc 01       	movw	r30, r24
    4980:	e2 0f       	add	r30, r18
    4982:	f3 1f       	adc	r31, r19
    4984:	80 81       	ld	r24, Z
    4986:	0e 94 b5 23 	call	0x476a	; 0x476a <CLCD_SendData>
	u8 CGRAM_address=0;
	u8 counter;
	CGRAM_address = BlockNumber*8;
	CLCD_SendCommand(CGRAM_address+Set_Bit6);

	for(counter=0;counter<8;counter++)
    498a:	89 81       	ldd	r24, Y+1	; 0x01
    498c:	8f 5f       	subi	r24, 0xFF	; 255
    498e:	89 83       	std	Y+1, r24	; 0x01
    4990:	89 81       	ldd	r24, Y+1	; 0x01
    4992:	88 30       	cpi	r24, 0x08	; 8
    4994:	78 f3       	brcs	.-34     	; 0x4974 <CLCD_SendSpecialChar+0x40>
		{
			CLCD_SendData(Pattern[counter]);
		}
	CLCD_GoToXY(X_Position,Y_Position);
    4996:	8e 81       	ldd	r24, Y+6	; 0x06
    4998:	6f 81       	ldd	r22, Y+7	; 0x07
    499a:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_GoToXY>
	CLCD_SendData(BlockNumber);
    499e:	8d 81       	ldd	r24, Y+5	; 0x05
    49a0:	0e 94 b5 23 	call	0x476a	; 0x476a <CLCD_SendData>
}
    49a4:	27 96       	adiw	r28, 0x07	; 7
    49a6:	0f b6       	in	r0, 0x3f	; 63
    49a8:	f8 94       	cli
    49aa:	de bf       	out	0x3e, r29	; 62
    49ac:	0f be       	out	0x3f, r0	; 63
    49ae:	cd bf       	out	0x3d, r28	; 61
    49b0:	cf 91       	pop	r28
    49b2:	df 91       	pop	r29
    49b4:	08 95       	ret

000049b6 <CLCD_Display_Decimal_Number>:

void CLCD_Display_Decimal_Number(s32 num)
{
    49b6:	df 93       	push	r29
    49b8:	cf 93       	push	r28
    49ba:	cd b7       	in	r28, 0x3d	; 61
    49bc:	de b7       	in	r29, 0x3e	; 62
    49be:	61 97       	sbiw	r28, 0x11	; 17
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	f8 94       	cli
    49c4:	de bf       	out	0x3e, r29	; 62
    49c6:	0f be       	out	0x3f, r0	; 63
    49c8:	cd bf       	out	0x3d, r28	; 61
    49ca:	6e 87       	std	Y+14, r22	; 0x0e
    49cc:	7f 87       	std	Y+15, r23	; 0x0f
    49ce:	88 8b       	std	Y+16, r24	; 0x10
    49d0:	99 8b       	std	Y+17, r25	; 0x11
	u8 i = 0, j, digit, str[10];
    49d2:	1b 82       	std	Y+3, r1	; 0x03

	/* if number 0 */
	if (0 == num)
    49d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    49d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    49d8:	a8 89       	ldd	r26, Y+16	; 0x10
    49da:	b9 89       	ldd	r27, Y+17	; 0x11
    49dc:	00 97       	sbiw	r24, 0x00	; 0
    49de:	a1 05       	cpc	r26, r1
    49e0:	b1 05       	cpc	r27, r1
    49e2:	19 f4       	brne	.+6      	; 0x49ea <CLCD_Display_Decimal_Number+0x34>
	{
		CLCD_SendData('0');
    49e4:	80 e3       	ldi	r24, 0x30	; 48
    49e6:	0e 94 b5 23 	call	0x476a	; 0x476a <CLCD_SendData>
	}

	/* if the number is negative */
	if (num < 0)
    49ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    49ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    49ee:	a8 89       	ldd	r26, Y+16	; 0x10
    49f0:	b9 89       	ldd	r27, Y+17	; 0x11
    49f2:	bb 23       	and	r27, r27
    49f4:	0c f0       	brlt	.+2      	; 0x49f8 <CLCD_Display_Decimal_Number+0x42>
    49f6:	42 c0       	rjmp	.+132    	; 0x4a7c <CLCD_Display_Decimal_Number+0xc6>
	{
		CLCD_SendData('-');
    49f8:	8d e2       	ldi	r24, 0x2D	; 45
    49fa:	0e 94 b5 23 	call	0x476a	; 0x476a <CLCD_SendData>

		/* convert to positive form */
		num = num * -1;
    49fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a00:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a02:	a8 89       	ldd	r26, Y+16	; 0x10
    4a04:	b9 89       	ldd	r27, Y+17	; 0x11
    4a06:	b0 95       	com	r27
    4a08:	a0 95       	com	r26
    4a0a:	90 95       	com	r25
    4a0c:	81 95       	neg	r24
    4a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a10:	af 4f       	sbci	r26, 0xFF	; 255
    4a12:	bf 4f       	sbci	r27, 0xFF	; 255
    4a14:	8e 87       	std	Y+14, r24	; 0x0e
    4a16:	9f 87       	std	Y+15, r25	; 0x0f
    4a18:	a8 8b       	std	Y+16, r26	; 0x10
    4a1a:	b9 8b       	std	Y+17, r27	; 0x11
    4a1c:	2f c0       	rjmp	.+94     	; 0x4a7c <CLCD_Display_Decimal_Number+0xc6>
	}

	/* loop on digits of the number */
	while (num > 0)
	{
		digit = (num % 10) + '0';
    4a1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a20:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a22:	a8 89       	ldd	r26, Y+16	; 0x10
    4a24:	b9 89       	ldd	r27, Y+17	; 0x11
    4a26:	2a e0       	ldi	r18, 0x0A	; 10
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	40 e0       	ldi	r20, 0x00	; 0
    4a2c:	50 e0       	ldi	r21, 0x00	; 0
    4a2e:	bc 01       	movw	r22, r24
    4a30:	cd 01       	movw	r24, r26
    4a32:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <__divmodsi4>
    4a36:	dc 01       	movw	r26, r24
    4a38:	cb 01       	movw	r24, r22
    4a3a:	80 5d       	subi	r24, 0xD0	; 208
    4a3c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = digit;
    4a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a40:	28 2f       	mov	r18, r24
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	ce 01       	movw	r24, r28
    4a46:	04 96       	adiw	r24, 0x04	; 4
    4a48:	fc 01       	movw	r30, r24
    4a4a:	e2 0f       	add	r30, r18
    4a4c:	f3 1f       	adc	r31, r19
    4a4e:	89 81       	ldd	r24, Y+1	; 0x01
    4a50:	80 83       	st	Z, r24
		num /= 10;
    4a52:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a54:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a56:	a8 89       	ldd	r26, Y+16	; 0x10
    4a58:	b9 89       	ldd	r27, Y+17	; 0x11
    4a5a:	2a e0       	ldi	r18, 0x0A	; 10
    4a5c:	30 e0       	ldi	r19, 0x00	; 0
    4a5e:	40 e0       	ldi	r20, 0x00	; 0
    4a60:	50 e0       	ldi	r21, 0x00	; 0
    4a62:	bc 01       	movw	r22, r24
    4a64:	cd 01       	movw	r24, r26
    4a66:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <__divmodsi4>
    4a6a:	da 01       	movw	r26, r20
    4a6c:	c9 01       	movw	r24, r18
    4a6e:	8e 87       	std	Y+14, r24	; 0x0e
    4a70:	9f 87       	std	Y+15, r25	; 0x0f
    4a72:	a8 8b       	std	Y+16, r26	; 0x10
    4a74:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    4a76:	8b 81       	ldd	r24, Y+3	; 0x03
    4a78:	8f 5f       	subi	r24, 0xFF	; 255
    4a7a:	8b 83       	std	Y+3, r24	; 0x03
		/* convert to positive form */
		num = num * -1;
	}

	/* loop on digits of the number */
	while (num > 0)
    4a7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a80:	a8 89       	ldd	r26, Y+16	; 0x10
    4a82:	b9 89       	ldd	r27, Y+17	; 0x11
    4a84:	18 16       	cp	r1, r24
    4a86:	19 06       	cpc	r1, r25
    4a88:	1a 06       	cpc	r1, r26
    4a8a:	1b 06       	cpc	r1, r27
    4a8c:	44 f2       	brlt	.-112    	; 0x4a1e <CLCD_Display_Decimal_Number+0x68>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    4a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a90:	8a 83       	std	Y+2, r24	; 0x02
    4a92:	11 c0       	rjmp	.+34     	; 0x4ab6 <CLCD_Display_Decimal_Number+0x100>
	{
		CLCD_SendData(str[j - 1]);
    4a94:	8a 81       	ldd	r24, Y+2	; 0x02
    4a96:	88 2f       	mov	r24, r24
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	9c 01       	movw	r18, r24
    4a9c:	21 50       	subi	r18, 0x01	; 1
    4a9e:	30 40       	sbci	r19, 0x00	; 0
    4aa0:	ce 01       	movw	r24, r28
    4aa2:	04 96       	adiw	r24, 0x04	; 4
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	e2 0f       	add	r30, r18
    4aa8:	f3 1f       	adc	r31, r19
    4aaa:	80 81       	ld	r24, Z
    4aac:	0e 94 b5 23 	call	0x476a	; 0x476a <CLCD_SendData>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    4ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab2:	81 50       	subi	r24, 0x01	; 1
    4ab4:	8a 83       	std	Y+2, r24	; 0x02
    4ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab8:	88 23       	and	r24, r24
    4aba:	61 f7       	brne	.-40     	; 0x4a94 <CLCD_Display_Decimal_Number+0xde>
	{
		CLCD_SendData(str[j - 1]);
	}
}
    4abc:	61 96       	adiw	r28, 0x11	; 17
    4abe:	0f b6       	in	r0, 0x3f	; 63
    4ac0:	f8 94       	cli
    4ac2:	de bf       	out	0x3e, r29	; 62
    4ac4:	0f be       	out	0x3f, r0	; 63
    4ac6:	cd bf       	out	0x3d, r28	; 61
    4ac8:	cf 91       	pop	r28
    4aca:	df 91       	pop	r29
    4acc:	08 95       	ret

00004ace <CLCD_Display_RealNumber>:
void CLCD_Display_RealNumber(f32 num)
{
    4ace:	df 93       	push	r29
    4ad0:	cf 93       	push	r28
    4ad2:	cd b7       	in	r28, 0x3d	; 61
    4ad4:	de b7       	in	r29, 0x3e	; 62
    4ad6:	29 97       	sbiw	r28, 0x09	; 9
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	f8 94       	cli
    4adc:	de bf       	out	0x3e, r29	; 62
    4ade:	0f be       	out	0x3f, r0	; 63
    4ae0:	cd bf       	out	0x3d, r28	; 61
    4ae2:	6e 83       	std	Y+6, r22	; 0x06
    4ae4:	7f 83       	std	Y+7, r23	; 0x07
    4ae6:	88 87       	std	Y+8, r24	; 0x08
    4ae8:	99 87       	std	Y+9, r25	; 0x09
	//Left number to the decimal point
	s32 left = (s32)num;
    4aea:	6e 81       	ldd	r22, Y+6	; 0x06
    4aec:	7f 81       	ldd	r23, Y+7	; 0x07
    4aee:	88 85       	ldd	r24, Y+8	; 0x08
    4af0:	99 85       	ldd	r25, Y+9	; 0x09
    4af2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4af6:	dc 01       	movw	r26, r24
    4af8:	cb 01       	movw	r24, r22
    4afa:	8a 83       	std	Y+2, r24	; 0x02
    4afc:	9b 83       	std	Y+3, r25	; 0x03
    4afe:	ac 83       	std	Y+4, r26	; 0x04
    4b00:	bd 83       	std	Y+5, r27	; 0x05
	//calculation to the Right number to the decimal point
	u8 right = (f32)(num - left) * 100;
    4b02:	6a 81       	ldd	r22, Y+2	; 0x02
    4b04:	7b 81       	ldd	r23, Y+3	; 0x03
    4b06:	8c 81       	ldd	r24, Y+4	; 0x04
    4b08:	9d 81       	ldd	r25, Y+5	; 0x05
    4b0a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4b0e:	9b 01       	movw	r18, r22
    4b10:	ac 01       	movw	r20, r24
    4b12:	6e 81       	ldd	r22, Y+6	; 0x06
    4b14:	7f 81       	ldd	r23, Y+7	; 0x07
    4b16:	88 85       	ldd	r24, Y+8	; 0x08
    4b18:	99 85       	ldd	r25, Y+9	; 0x09
    4b1a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	bc 01       	movw	r22, r24
    4b24:	cd 01       	movw	r24, r26
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	48 ec       	ldi	r20, 0xC8	; 200
    4b2c:	52 e4       	ldi	r21, 0x42	; 66
    4b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b32:	dc 01       	movw	r26, r24
    4b34:	cb 01       	movw	r24, r22
    4b36:	bc 01       	movw	r22, r24
    4b38:	cd 01       	movw	r24, r26
    4b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	89 83       	std	Y+1, r24	; 0x01
	//Display Left number to the decimal point
	CLCD_Display_Decimal_Number(left);
    4b44:	8a 81       	ldd	r24, Y+2	; 0x02
    4b46:	9b 81       	ldd	r25, Y+3	; 0x03
    4b48:	ac 81       	ldd	r26, Y+4	; 0x04
    4b4a:	bd 81       	ldd	r27, Y+5	; 0x05
    4b4c:	bc 01       	movw	r22, r24
    4b4e:	cd 01       	movw	r24, r26
    4b50:	0e 94 db 24 	call	0x49b6	; 0x49b6 <CLCD_Display_Decimal_Number>
	//Display the decimal point
	CLCD_SendData('.');
    4b54:	8e e2       	ldi	r24, 0x2E	; 46
    4b56:	0e 94 b5 23 	call	0x476a	; 0x476a <CLCD_SendData>
	//Display the Right number to the decimal point
	CLCD_Display_Decimal_Number(right);
    4b5a:	89 81       	ldd	r24, Y+1	; 0x01
    4b5c:	88 2f       	mov	r24, r24
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	a0 e0       	ldi	r26, 0x00	; 0
    4b62:	b0 e0       	ldi	r27, 0x00	; 0
    4b64:	bc 01       	movw	r22, r24
    4b66:	cd 01       	movw	r24, r26
    4b68:	0e 94 db 24 	call	0x49b6	; 0x49b6 <CLCD_Display_Decimal_Number>
}
    4b6c:	29 96       	adiw	r28, 0x09	; 9
    4b6e:	0f b6       	in	r0, 0x3f	; 63
    4b70:	f8 94       	cli
    4b72:	de bf       	out	0x3e, r29	; 62
    4b74:	0f be       	out	0x3f, r0	; 63
    4b76:	cd bf       	out	0x3d, r28	; 61
    4b78:	cf 91       	pop	r28
    4b7a:	df 91       	pop	r29
    4b7c:	08 95       	ret

00004b7e <KeyPad_Pressed_Key>:
 * Description          : function to define which switch is pressed in the keypad
 * 
 * @return u8           : return the value of the pressed switch 
 */
u8 KeyPad_Pressed_Key(void)
{
    4b7e:	df 93       	push	r29
    4b80:	cf 93       	push	r28
    4b82:	00 d0       	rcall	.+0      	; 0x4b84 <KeyPad_Pressed_Key+0x6>
    4b84:	00 d0       	rcall	.+0      	; 0x4b86 <KeyPad_Pressed_Key+0x8>
    4b86:	0f 92       	push	r0
    4b88:	cd b7       	in	r28, 0x3d	; 61
    4b8a:	de b7       	in	r29, 0x3e	; 62
	u8 ColumnIndex,RowIndex,PinState,PressedKey;

	PressedKey=Key_Not_Pressed;
    4b8c:	8f ef       	ldi	r24, 0xFF	; 255
    4b8e:	89 83       	std	Y+1, r24	; 0x01

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    4b90:	1b 82       	std	Y+3, r1	; 0x03
    4b92:	7a c0       	rjmp	.+244    	; 0x4c88 <KeyPad_Pressed_Key+0x10a>
	{
		//Set column of Keypad Output
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	6f ef       	ldi	r22, 0xFF	; 255
    4b98:	0e 94 86 12 	call	0x250c	; 0x250c <DIO_SetPortDirection>
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);
    4b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9e:	88 2f       	mov	r24, r24
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	e8 59       	subi	r30, 0x98	; 152
    4ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba8:	90 81       	ld	r25, Z
    4baa:	81 e0       	ldi	r24, 0x01	; 1
    4bac:	69 2f       	mov	r22, r25
    4bae:	40 e0       	ldi	r20, 0x00	; 0
    4bb0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    4bb4:	1a 82       	std	Y+2, r1	; 0x02
    4bb6:	55 c0       	rjmp	.+170    	; 0x4c62 <KeyPad_Pressed_Key+0xe4>
		{
			//Set Row input and activate pull-up
			DIO_SetPinDirection(KeyPad_Port,KeyPad_Row_Arr[RowIndex],DIO_INPUT);
    4bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bba:	88 2f       	mov	r24, r24
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	fc 01       	movw	r30, r24
    4bc0:	e4 59       	subi	r30, 0x94	; 148
    4bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    4bc4:	90 81       	ld	r25, Z
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	69 2f       	mov	r22, r25
    4bca:	40 e0       	ldi	r20, 0x00	; 0
    4bcc:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_SetPinDirection>
			DIO_EnablePullup(KeyPad_Port,KeyPad_Row_Arr[RowIndex],ENABLE_PullUp);
    4bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd2:	88 2f       	mov	r24, r24
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	fc 01       	movw	r30, r24
    4bd8:	e4 59       	subi	r30, 0x94	; 148
    4bda:	fe 4f       	sbci	r31, 0xFE	; 254
    4bdc:	90 81       	ld	r25, Z
    4bde:	81 e0       	ldi	r24, 0x01	; 1
    4be0:	69 2f       	mov	r22, r25
    4be2:	40 e0       	ldi	r20, 0x00	; 0
    4be4:	0e 94 5e 15 	call	0x2abc	; 0x2abc <DIO_EnablePullup>

			//Read the current row
			DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    4be8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bea:	88 2f       	mov	r24, r24
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	fc 01       	movw	r30, r24
    4bf0:	e4 59       	subi	r30, 0x94	; 148
    4bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    4bf4:	90 81       	ld	r25, Z
    4bf6:	9e 01       	movw	r18, r28
    4bf8:	2c 5f       	subi	r18, 0xFC	; 252
    4bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    4bfc:	81 e0       	ldi	r24, 0x01	; 1
    4bfe:	69 2f       	mov	r22, r25
    4c00:	a9 01       	movw	r20, r18
    4c02:	0e 94 42 14 	call	0x2884	; 0x2884 <DIO_GetPinValue>

			//Check if switch is pressed
			if(PinState==DIO_LOW)
    4c06:	8c 81       	ldd	r24, Y+4	; 0x04
    4c08:	88 23       	and	r24, r24
    4c0a:	41 f5       	brne	.+80     	; 0x4c5c <KeyPad_Pressed_Key+0xde>
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];
    4c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c0e:	48 2f       	mov	r20, r24
    4c10:	50 e0       	ldi	r21, 0x00	; 0
    4c12:	8b 81       	ldd	r24, Y+3	; 0x03
    4c14:	28 2f       	mov	r18, r24
    4c16:	30 e0       	ldi	r19, 0x00	; 0
    4c18:	ca 01       	movw	r24, r20
    4c1a:	88 0f       	add	r24, r24
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	88 0f       	add	r24, r24
    4c20:	99 1f       	adc	r25, r25
    4c22:	82 0f       	add	r24, r18
    4c24:	93 1f       	adc	r25, r19
    4c26:	fc 01       	movw	r30, r24
    4c28:	e0 59       	subi	r30, 0x90	; 144
    4c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c2c:	80 81       	ld	r24, Z
    4c2e:	89 83       	std	Y+1, r24	; 0x01
    4c30:	0f c0       	rjmp	.+30     	; 0x4c50 <KeyPad_Pressed_Key+0xd2>

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    4c32:	8a 81       	ldd	r24, Y+2	; 0x02
    4c34:	88 2f       	mov	r24, r24
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	fc 01       	movw	r30, r24
    4c3a:	e4 59       	subi	r30, 0x94	; 148
    4c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c3e:	90 81       	ld	r25, Z
    4c40:	9e 01       	movw	r18, r28
    4c42:	2c 5f       	subi	r18, 0xFC	; 252
    4c44:	3f 4f       	sbci	r19, 0xFF	; 255
    4c46:	81 e0       	ldi	r24, 0x01	; 1
    4c48:	69 2f       	mov	r22, r25
    4c4a:	a9 01       	movw	r20, r18
    4c4c:	0e 94 42 14 	call	0x2884	; 0x2884 <DIO_GetPinValue>
			if(PinState==DIO_LOW)
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
    4c50:	8c 81       	ldd	r24, Y+4	; 0x04
    4c52:	88 23       	and	r24, r24
    4c54:	71 f3       	breq	.-36     	; 0x4c32 <KeyPad_Pressed_Key+0xb4>
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
				}
				return PressedKey;
    4c56:	89 81       	ldd	r24, Y+1	; 0x01
    4c58:	8d 83       	std	Y+5, r24	; 0x05
    4c5a:	1c c0       	rjmp	.+56     	; 0x4c94 <KeyPad_Pressed_Key+0x116>
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    4c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c5e:	8f 5f       	subi	r24, 0xFF	; 255
    4c60:	8a 83       	std	Y+2, r24	; 0x02
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	84 30       	cpi	r24, 0x04	; 4
    4c66:	08 f4       	brcc	.+2      	; 0x4c6a <KeyPad_Pressed_Key+0xec>
    4c68:	a7 cf       	rjmp	.-178    	; 0x4bb8 <KeyPad_Pressed_Key+0x3a>
				}
				return PressedKey;
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
    4c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c6c:	88 2f       	mov	r24, r24
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	fc 01       	movw	r30, r24
    4c72:	e8 59       	subi	r30, 0x98	; 152
    4c74:	fe 4f       	sbci	r31, 0xFE	; 254
    4c76:	90 81       	ld	r25, Z
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	69 2f       	mov	r22, r25
    4c7c:	41 e0       	ldi	r20, 0x01	; 1
    4c7e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_SetPinValue>

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    4c82:	8b 81       	ldd	r24, Y+3	; 0x03
    4c84:	8f 5f       	subi	r24, 0xFF	; 255
    4c86:	8b 83       	std	Y+3, r24	; 0x03
    4c88:	8b 81       	ldd	r24, Y+3	; 0x03
    4c8a:	84 30       	cpi	r24, 0x04	; 4
    4c8c:	08 f4       	brcc	.+2      	; 0x4c90 <KeyPad_Pressed_Key+0x112>
    4c8e:	82 cf       	rjmp	.-252    	; 0x4b94 <KeyPad_Pressed_Key+0x16>
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
	}
	return PressedKey;
    4c90:	89 81       	ldd	r24, Y+1	; 0x01
    4c92:	8d 83       	std	Y+5, r24	; 0x05
    4c94:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4c96:	0f 90       	pop	r0
    4c98:	0f 90       	pop	r0
    4c9a:	0f 90       	pop	r0
    4c9c:	0f 90       	pop	r0
    4c9e:	0f 90       	pop	r0
    4ca0:	cf 91       	pop	r28
    4ca2:	df 91       	pop	r29
    4ca4:	08 95       	ret

00004ca6 <main>:
#include "MCAL/DIO/DIO_interface.h"
#include "MCAL/SPI/SPI.h"
#include "avr/delay.h"

void main(void)
{
    4ca6:	df 93       	push	r29
    4ca8:	cf 93       	push	r28
    4caa:	cd b7       	in	r28, 0x3d	; 61
    4cac:	de b7       	in	r29, 0x3e	; 62
    4cae:	2f 97       	sbiw	r28, 0x0f	; 15
    4cb0:	0f b6       	in	r0, 0x3f	; 63
    4cb2:	f8 94       	cli
    4cb4:	de bf       	out	0x3e, r29	; 62
    4cb6:	0f be       	out	0x3f, r0	; 63
    4cb8:	cd bf       	out	0x3d, r28	; 61
	u8 svar;
	SPI_init();
    4cba:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <SPI_init>

	SPI_MasterSlave_Selection(SPI_MASTER);
    4cbe:	81 e0       	ldi	r24, 0x01	; 1
    4cc0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <SPI_MasterSlave_Selection>
	while(1)
	{
		SPI_TranRec_Data(1,&svar);
    4cc4:	9e 01       	movw	r18, r28
    4cc6:	21 5f       	subi	r18, 0xF1	; 241
    4cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cca:	81 e0       	ldi	r24, 0x01	; 1
    4ccc:	b9 01       	movw	r22, r18
    4cce:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <SPI_TranRec_Data>
    4cd2:	80 e0       	ldi	r24, 0x00	; 0
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	a0 e2       	ldi	r26, 0x20	; 32
    4cd8:	b1 e4       	ldi	r27, 0x41	; 65
    4cda:	8b 87       	std	Y+11, r24	; 0x0b
    4cdc:	9c 87       	std	Y+12, r25	; 0x0c
    4cde:	ad 87       	std	Y+13, r26	; 0x0d
    4ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cea:	20 e0       	ldi	r18, 0x00	; 0
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	4a ef       	ldi	r20, 0xFA	; 250
    4cf0:	54 e4       	ldi	r21, 0x44	; 68
    4cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	cb 01       	movw	r24, r22
    4cfa:	8f 83       	std	Y+7, r24	; 0x07
    4cfc:	98 87       	std	Y+8, r25	; 0x08
    4cfe:	a9 87       	std	Y+9, r26	; 0x09
    4d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d02:	6f 81       	ldd	r22, Y+7	; 0x07
    4d04:	78 85       	ldd	r23, Y+8	; 0x08
    4d06:	89 85       	ldd	r24, Y+9	; 0x09
    4d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d0a:	20 e0       	ldi	r18, 0x00	; 0
    4d0c:	30 e0       	ldi	r19, 0x00	; 0
    4d0e:	40 e8       	ldi	r20, 0x80	; 128
    4d10:	5f e3       	ldi	r21, 0x3F	; 63
    4d12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d16:	88 23       	and	r24, r24
    4d18:	2c f4       	brge	.+10     	; 0x4d24 <main+0x7e>
		__ticks = 1;
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	9e 83       	std	Y+6, r25	; 0x06
    4d20:	8d 83       	std	Y+5, r24	; 0x05
    4d22:	3f c0       	rjmp	.+126    	; 0x4da2 <main+0xfc>
	else if (__tmp > 65535)
    4d24:	6f 81       	ldd	r22, Y+7	; 0x07
    4d26:	78 85       	ldd	r23, Y+8	; 0x08
    4d28:	89 85       	ldd	r24, Y+9	; 0x09
    4d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	3f ef       	ldi	r19, 0xFF	; 255
    4d30:	4f e7       	ldi	r20, 0x7F	; 127
    4d32:	57 e4       	ldi	r21, 0x47	; 71
    4d34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d38:	18 16       	cp	r1, r24
    4d3a:	4c f5       	brge	.+82     	; 0x4d8e <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	40 e2       	ldi	r20, 0x20	; 32
    4d4a:	51 e4       	ldi	r21, 0x41	; 65
    4d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d50:	dc 01       	movw	r26, r24
    4d52:	cb 01       	movw	r24, r22
    4d54:	bc 01       	movw	r22, r24
    4d56:	cd 01       	movw	r24, r26
    4d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	9e 83       	std	Y+6, r25	; 0x06
    4d62:	8d 83       	std	Y+5, r24	; 0x05
    4d64:	0f c0       	rjmp	.+30     	; 0x4d84 <main+0xde>
    4d66:	88 ec       	ldi	r24, 0xC8	; 200
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	9c 83       	std	Y+4, r25	; 0x04
    4d6c:	8b 83       	std	Y+3, r24	; 0x03
    4d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d70:	9c 81       	ldd	r25, Y+4	; 0x04
    4d72:	01 97       	sbiw	r24, 0x01	; 1
    4d74:	f1 f7       	brne	.-4      	; 0x4d72 <main+0xcc>
    4d76:	9c 83       	std	Y+4, r25	; 0x04
    4d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d7e:	01 97       	sbiw	r24, 0x01	; 1
    4d80:	9e 83       	std	Y+6, r25	; 0x06
    4d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d84:	8d 81       	ldd	r24, Y+5	; 0x05
    4d86:	9e 81       	ldd	r25, Y+6	; 0x06
    4d88:	00 97       	sbiw	r24, 0x00	; 0
    4d8a:	69 f7       	brne	.-38     	; 0x4d66 <main+0xc0>
    4d8c:	9b cf       	rjmp	.-202    	; 0x4cc4 <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    4d90:	78 85       	ldd	r23, Y+8	; 0x08
    4d92:	89 85       	ldd	r24, Y+9	; 0x09
    4d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d9a:	dc 01       	movw	r26, r24
    4d9c:	cb 01       	movw	r24, r22
    4d9e:	9e 83       	std	Y+6, r25	; 0x06
    4da0:	8d 83       	std	Y+5, r24	; 0x05
    4da2:	8d 81       	ldd	r24, Y+5	; 0x05
    4da4:	9e 81       	ldd	r25, Y+6	; 0x06
    4da6:	9a 83       	std	Y+2, r25	; 0x02
    4da8:	89 83       	std	Y+1, r24	; 0x01
    4daa:	89 81       	ldd	r24, Y+1	; 0x01
    4dac:	9a 81       	ldd	r25, Y+2	; 0x02
    4dae:	01 97       	sbiw	r24, 0x01	; 1
    4db0:	f1 f7       	brne	.-4      	; 0x4dae <main+0x108>
    4db2:	9a 83       	std	Y+2, r25	; 0x02
    4db4:	89 83       	std	Y+1, r24	; 0x01
    4db6:	86 cf       	rjmp	.-244    	; 0x4cc4 <main+0x1e>

00004db8 <__divmodsi4>:
    4db8:	97 fb       	bst	r25, 7
    4dba:	09 2e       	mov	r0, r25
    4dbc:	05 26       	eor	r0, r21
    4dbe:	0e d0       	rcall	.+28     	; 0x4ddc <__divmodsi4_neg1>
    4dc0:	57 fd       	sbrc	r21, 7
    4dc2:	04 d0       	rcall	.+8      	; 0x4dcc <__divmodsi4_neg2>
    4dc4:	14 d0       	rcall	.+40     	; 0x4dee <__udivmodsi4>
    4dc6:	0a d0       	rcall	.+20     	; 0x4ddc <__divmodsi4_neg1>
    4dc8:	00 1c       	adc	r0, r0
    4dca:	38 f4       	brcc	.+14     	; 0x4dda <__divmodsi4_exit>

00004dcc <__divmodsi4_neg2>:
    4dcc:	50 95       	com	r21
    4dce:	40 95       	com	r20
    4dd0:	30 95       	com	r19
    4dd2:	21 95       	neg	r18
    4dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    4dd6:	4f 4f       	sbci	r20, 0xFF	; 255
    4dd8:	5f 4f       	sbci	r21, 0xFF	; 255

00004dda <__divmodsi4_exit>:
    4dda:	08 95       	ret

00004ddc <__divmodsi4_neg1>:
    4ddc:	f6 f7       	brtc	.-4      	; 0x4dda <__divmodsi4_exit>
    4dde:	90 95       	com	r25
    4de0:	80 95       	com	r24
    4de2:	70 95       	com	r23
    4de4:	61 95       	neg	r22
    4de6:	7f 4f       	sbci	r23, 0xFF	; 255
    4de8:	8f 4f       	sbci	r24, 0xFF	; 255
    4dea:	9f 4f       	sbci	r25, 0xFF	; 255
    4dec:	08 95       	ret

00004dee <__udivmodsi4>:
    4dee:	a1 e2       	ldi	r26, 0x21	; 33
    4df0:	1a 2e       	mov	r1, r26
    4df2:	aa 1b       	sub	r26, r26
    4df4:	bb 1b       	sub	r27, r27
    4df6:	fd 01       	movw	r30, r26
    4df8:	0d c0       	rjmp	.+26     	; 0x4e14 <__udivmodsi4_ep>

00004dfa <__udivmodsi4_loop>:
    4dfa:	aa 1f       	adc	r26, r26
    4dfc:	bb 1f       	adc	r27, r27
    4dfe:	ee 1f       	adc	r30, r30
    4e00:	ff 1f       	adc	r31, r31
    4e02:	a2 17       	cp	r26, r18
    4e04:	b3 07       	cpc	r27, r19
    4e06:	e4 07       	cpc	r30, r20
    4e08:	f5 07       	cpc	r31, r21
    4e0a:	20 f0       	brcs	.+8      	; 0x4e14 <__udivmodsi4_ep>
    4e0c:	a2 1b       	sub	r26, r18
    4e0e:	b3 0b       	sbc	r27, r19
    4e10:	e4 0b       	sbc	r30, r20
    4e12:	f5 0b       	sbc	r31, r21

00004e14 <__udivmodsi4_ep>:
    4e14:	66 1f       	adc	r22, r22
    4e16:	77 1f       	adc	r23, r23
    4e18:	88 1f       	adc	r24, r24
    4e1a:	99 1f       	adc	r25, r25
    4e1c:	1a 94       	dec	r1
    4e1e:	69 f7       	brne	.-38     	; 0x4dfa <__udivmodsi4_loop>
    4e20:	60 95       	com	r22
    4e22:	70 95       	com	r23
    4e24:	80 95       	com	r24
    4e26:	90 95       	com	r25
    4e28:	9b 01       	movw	r18, r22
    4e2a:	ac 01       	movw	r20, r24
    4e2c:	bd 01       	movw	r22, r26
    4e2e:	cf 01       	movw	r24, r30
    4e30:	08 95       	ret

00004e32 <__prologue_saves__>:
    4e32:	2f 92       	push	r2
    4e34:	3f 92       	push	r3
    4e36:	4f 92       	push	r4
    4e38:	5f 92       	push	r5
    4e3a:	6f 92       	push	r6
    4e3c:	7f 92       	push	r7
    4e3e:	8f 92       	push	r8
    4e40:	9f 92       	push	r9
    4e42:	af 92       	push	r10
    4e44:	bf 92       	push	r11
    4e46:	cf 92       	push	r12
    4e48:	df 92       	push	r13
    4e4a:	ef 92       	push	r14
    4e4c:	ff 92       	push	r15
    4e4e:	0f 93       	push	r16
    4e50:	1f 93       	push	r17
    4e52:	cf 93       	push	r28
    4e54:	df 93       	push	r29
    4e56:	cd b7       	in	r28, 0x3d	; 61
    4e58:	de b7       	in	r29, 0x3e	; 62
    4e5a:	ca 1b       	sub	r28, r26
    4e5c:	db 0b       	sbc	r29, r27
    4e5e:	0f b6       	in	r0, 0x3f	; 63
    4e60:	f8 94       	cli
    4e62:	de bf       	out	0x3e, r29	; 62
    4e64:	0f be       	out	0x3f, r0	; 63
    4e66:	cd bf       	out	0x3d, r28	; 61
    4e68:	09 94       	ijmp

00004e6a <__epilogue_restores__>:
    4e6a:	2a 88       	ldd	r2, Y+18	; 0x12
    4e6c:	39 88       	ldd	r3, Y+17	; 0x11
    4e6e:	48 88       	ldd	r4, Y+16	; 0x10
    4e70:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e72:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e74:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e76:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e78:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e7c:	b9 84       	ldd	r11, Y+9	; 0x09
    4e7e:	c8 84       	ldd	r12, Y+8	; 0x08
    4e80:	df 80       	ldd	r13, Y+7	; 0x07
    4e82:	ee 80       	ldd	r14, Y+6	; 0x06
    4e84:	fd 80       	ldd	r15, Y+5	; 0x05
    4e86:	0c 81       	ldd	r16, Y+4	; 0x04
    4e88:	1b 81       	ldd	r17, Y+3	; 0x03
    4e8a:	aa 81       	ldd	r26, Y+2	; 0x02
    4e8c:	b9 81       	ldd	r27, Y+1	; 0x01
    4e8e:	ce 0f       	add	r28, r30
    4e90:	d1 1d       	adc	r29, r1
    4e92:	0f b6       	in	r0, 0x3f	; 63
    4e94:	f8 94       	cli
    4e96:	de bf       	out	0x3e, r29	; 62
    4e98:	0f be       	out	0x3f, r0	; 63
    4e9a:	cd bf       	out	0x3d, r28	; 61
    4e9c:	ed 01       	movw	r28, r26
    4e9e:	08 95       	ret

00004ea0 <_exit>:
    4ea0:	f8 94       	cli

00004ea2 <__stop_program>:
    4ea2:	ff cf       	rjmp	.-2      	; 0x4ea2 <__stop_program>
