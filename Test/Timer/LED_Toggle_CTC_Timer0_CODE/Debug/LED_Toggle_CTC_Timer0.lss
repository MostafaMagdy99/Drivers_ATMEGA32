
LED_Toggle_CTC_Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fe4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00003fe4  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800180  00800180  00004198  2**0
                  ALLOC
  3 .stab         000044b8  00000000  00000000  00004198  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002182  00000000  00000000  00008650  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000a992  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000aba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000e686  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f994  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000fb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000fe7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__vector_1>
       8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_2>
       c:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <main>
      8a:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 1f 	jmp	0x3faa	; 0x3faa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 1f 	jmp	0x3faa	; 0x3faa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Timer0_init>:

#include "timer.h"

static void (*CTC_CallBack_Func)(void);
void Timer0_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	#if defined Timer0_CTC_Timer_Mode
			CLEAR_BIT(TCCR0,WGM00);
     ef2:	a3 e5       	ldi	r26, 0x53	; 83
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e3 e5       	ldi	r30, 0x53	; 83
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7b       	andi	r24, 0xBF	; 191
     efe:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
     f00:	a3 e5       	ldi	r26, 0x53	; 83
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e3 e5       	ldi	r30, 0x53	; 83
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);	//Enable Compare Output Interrupt peripheral
     f0e:	a9 e5       	ldi	r26, 0x59	; 89
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e9 e5       	ldi	r30, 0x59	; 89
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_No_Prescaler
				SET_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
		#elif defined Timer0_CLK_8_Prescaler
				CLEAR_BIT(TCCR0,CS00);
     f1c:	a3 e5       	ldi	r26, 0x53	; 83
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e3 e5       	ldi	r30, 0x53	; 83
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8e 7f       	andi	r24, 0xFE	; 254
     f28:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
     f2a:	a3 e5       	ldi	r26, 0x53	; 83
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e3 e5       	ldi	r30, 0x53	; 83
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
     f38:	a3 e5       	ldi	r26, 0x53	; 83
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e3 e5       	ldi	r30, 0x53	; 83
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8b 7f       	andi	r24, 0xFB	; 251
     f44:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_External_RisingEdge_CounterMode //On Pin T0
				SET_BIT(TCCR0,CS00);
				SET_BIT(TCCR0,CS01);
				SET_BIT(TCCR0,CS02);
		#endif
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <Timer0_SetValue>:
void Timer0_SetValue(u8 Value)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
#if defined Timer0_Normal_Timer_Mode
	TCNT0 = Value; //Set Overflow Value
#elif defined Timer0_CTC_Timer_Mode
	OCR0 = Value; //Set Compare Output Value
     f58:	ec e5       	ldi	r30, 0x5C	; 92
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	80 83       	st	Z, r24
#elif defined Timer0_Fast_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
#endif
}
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <Timer0_CallBack>:

void Timer0_CallBack(void (*FUNC_PTR)(void))
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <Timer0_CallBack+0x6>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
#if defined Timer0_CTC_Timer_Mode
	CTC_CallBack_Func = FUNC_PTR;
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	90 93 81 01 	sts	0x0181, r25
     f7e:	80 93 80 01 	sts	0x0180, r24
#endif
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
     f96:	2f 93       	push	r18
     f98:	3f 93       	push	r19
     f9a:	4f 93       	push	r20
     f9c:	5f 93       	push	r21
     f9e:	6f 93       	push	r22
     fa0:	7f 93       	push	r23
     fa2:	8f 93       	push	r24
     fa4:	9f 93       	push	r25
     fa6:	af 93       	push	r26
     fa8:	bf 93       	push	r27
     faa:	ef 93       	push	r30
     fac:	ff 93       	push	r31
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
	CTC_CallBack_Func();
     fb6:	e0 91 80 01 	lds	r30, 0x0180
     fba:	f0 91 81 01 	lds	r31, 0x0181
     fbe:	09 95       	icall
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	0f 90       	pop	r0
     fe2:	1f 90       	pop	r1
     fe4:	18 95       	reti

00000fe6 <__vector_1>:
static void (*External_Function0)(void);
static void (*External_Function1)(void);
static void (*External_Function2)(void);
/****************************************ISR for INT0*************************************************/
ISR(INT0_Vect)
{
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
	(*External_Function0)();
    1010:	e0 91 82 01 	lds	r30, 0x0182
    1014:	f0 91 83 01 	lds	r31, 0x0183
    1018:	09 95       	icall
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <__vector_2>:
/****************************************ISR for INT1*************************************************/
ISR(INT1_Vect)
{
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	2f 93       	push	r18
    104c:	3f 93       	push	r19
    104e:	4f 93       	push	r20
    1050:	5f 93       	push	r21
    1052:	6f 93       	push	r22
    1054:	7f 93       	push	r23
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    105a:	af 93       	push	r26
    105c:	bf 93       	push	r27
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
	(*External_Function1)();
    106a:	e0 91 84 01 	lds	r30, 0x0184
    106e:	f0 91 85 01 	lds	r31, 0x0185
    1072:	09 95       	icall
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <__vector_3>:
/****************************************ISR for INT2*************************************************/
ISR(INT2_Vect)
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	(*External_Function2)();
    10c4:	e0 91 86 01 	lds	r30, 0x0186
    10c8:	f0 91 87 01 	lds	r31, 0x0187
    10cc:	09 95       	icall
}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	0f 90       	pop	r0
    10f0:	1f 90       	pop	r1
    10f2:	18 95       	reti

000010f4 <Enable_Global_Interrupt>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return Enable_Global_Interrupt(Global_Interrupt_State_t state)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <Enable_Global_Interrupt+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <Enable_Global_Interrupt+0x8>
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3c 83       	std	Y+4, r19	; 0x04
    110a:	2b 83       	std	Y+3, r18	; 0x03
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	31 f0       	breq	.+12     	; 0x1120 <Enable_Global_Interrupt+0x2c>
    1114:	2b 81       	ldd	r18, Y+3	; 0x03
    1116:	3c 81       	ldd	r19, Y+4	; 0x04
    1118:	21 30       	cpi	r18, 0x01	; 1
    111a:	31 05       	cpc	r19, r1
    111c:	49 f0       	breq	.+18     	; 0x1130 <Enable_Global_Interrupt+0x3c>
    111e:	10 c0       	rjmp	.+32     	; 0x1140 <Enable_Global_Interrupt+0x4c>
		{
			case Enable_GIE_Interrupt:
				SET_BIT(SREG,GIE);
    1120:	af e5       	ldi	r26, 0x5F	; 95
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ef e5       	ldi	r30, 0x5F	; 95
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 68       	ori	r24, 0x80	; 128
    112c:	8c 93       	st	X, r24
    112e:	0a c0       	rjmp	.+20     	; 0x1144 <Enable_Global_Interrupt+0x50>
				break;
			case Disable_GIE_Interrupt:
				CLEAR_BIT(SREG,GIE);
    1130:	af e5       	ldi	r26, 0x5F	; 95
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ef e5       	ldi	r30, 0x5F	; 95
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8f 77       	andi	r24, 0x7F	; 127
    113c:	8c 93       	st	X, r24
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <Enable_Global_Interrupt+0x50>
				break;
			default:
				return E_OK;
    1140:	1a 82       	std	Y+2, r1	; 0x02
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <Enable_Global_Interrupt+0x54>
		}
	return E_NOK;
    1144:	31 e0       	ldi	r19, 0x01	; 1
    1146:	3a 83       	std	Y+2, r19	; 0x02
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <Enable_External_INT0>:
/*****************************************************************************************************/
STD_Return Enable_External_INT0(Peripheral_Interrupt_State_t State)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <Enable_External_INT0+0x6>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <Enable_External_INT0+0x8>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3c 83       	std	Y+4, r19	; 0x04
    116e:	2b 83       	std	Y+3, r18	; 0x03
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	31 f0       	breq	.+12     	; 0x1184 <Enable_External_INT0+0x2c>
    1178:	2b 81       	ldd	r18, Y+3	; 0x03
    117a:	3c 81       	ldd	r19, Y+4	; 0x04
    117c:	21 30       	cpi	r18, 0x01	; 1
    117e:	31 05       	cpc	r19, r1
    1180:	49 f0       	breq	.+18     	; 0x1194 <Enable_External_INT0+0x3c>
    1182:	10 c0       	rjmp	.+32     	; 0x11a4 <Enable_External_INT0+0x4c>
	{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT0);
    1184:	ab e5       	ldi	r26, 0x5B	; 91
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	eb e5       	ldi	r30, 0x5B	; 91
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	80 64       	ori	r24, 0x40	; 64
    1190:	8c 93       	st	X, r24
    1192:	0a c0       	rjmp	.+20     	; 0x11a8 <Enable_External_INT0+0x50>

	break;
	case Disable_PIE_Interrupt:
		CLEAR_BIT(GICR,INT0);
    1194:	ab e5       	ldi	r26, 0x5B	; 91
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	eb e5       	ldi	r30, 0x5B	; 91
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7b       	andi	r24, 0xBF	; 191
    11a0:	8c 93       	st	X, r24
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <Enable_External_INT0+0x50>
	break;
	default:
		return E_OK;
    11a4:	1a 82       	std	Y+2, r1	; 0x02
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <Enable_External_INT0+0x54>
	}
	return E_NOK;
    11a8:	31 e0       	ldi	r19, 0x01	; 1
    11aa:	3a 83       	std	Y+2, r19	; 0x02
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <External_Int0_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int0_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <External_Int0_EdgeSelection+0x6>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <External_Int0_EdgeSelection+0x8>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01
			switch(SenseLevel)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3c 83       	std	Y+4, r19	; 0x04
    11d2:	2b 83       	std	Y+3, r18	; 0x03
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	a1 f0       	breq	.+40     	; 0x1204 <External_Int0_EdgeSelection+0x48>
    11dc:	2b 81       	ldd	r18, Y+3	; 0x03
    11de:	3c 81       	ldd	r19, Y+4	; 0x04
    11e0:	21 30       	cpi	r18, 0x01	; 1
    11e2:	31 05       	cpc	r19, r1
    11e4:	f1 f4       	brne	.+60     	; 0x1222 <External_Int0_EdgeSelection+0x66>
				{
					case Rising_Edge_Sense:
							SET_BIT(MCUCR,ISC00);
    11e6:	a5 e5       	ldi	r26, 0x55	; 85
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e5 e5       	ldi	r30, 0x55	; 85
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	81 60       	ori	r24, 0x01	; 1
    11f2:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    11f4:	a5 e5       	ldi	r26, 0x55	; 85
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e5 e5       	ldi	r30, 0x55	; 85
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	8c 93       	st	X, r24
    1202:	11 c0       	rjmp	.+34     	; 0x1226 <External_Int0_EdgeSelection+0x6a>
							break;
					case Falling_Edge_Sense:
							CLEAR_BIT(MCUCR,ISC00);
    1204:	a5 e5       	ldi	r26, 0x55	; 85
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e5 e5       	ldi	r30, 0x55	; 85
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8e 7f       	andi	r24, 0xFE	; 254
    1210:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    1212:	a5 e5       	ldi	r26, 0x55	; 85
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e5 e5       	ldi	r30, 0x55	; 85
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	82 60       	ori	r24, 0x02	; 2
    121e:	8c 93       	st	X, r24
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <External_Int0_EdgeSelection+0x6a>
							break;
					default:
						return E_OK;
    1222:	1a 82       	std	Y+2, r1	; 0x02
    1224:	02 c0       	rjmp	.+4      	; 0x122a <External_Int0_EdgeSelection+0x6e>
				}
	return E_NOK;
    1226:	31 e0       	ldi	r19, 0x01	; 1
    1228:	3a 83       	std	Y+2, r19	; 0x02
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <CallBack_Int0>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int0(void (*Func_Ptr)(void))
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <CallBack_Int0+0x6>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
	External_Function0=Func_Ptr;
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	90 93 83 01 	sts	0x0183, r25
    1250:	80 93 82 01 	sts	0x0182, r24
	return E_NOK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <Enable_External_INT1>:
/*****************************************************************************************************/
STD_Return Enable_External_INT1(Peripheral_Interrupt_State_t State)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <Enable_External_INT1+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <Enable_External_INT1+0x8>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3c 83       	std	Y+4, r19	; 0x04
    1276:	2b 83       	std	Y+3, r18	; 0x03
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	31 f0       	breq	.+12     	; 0x128c <Enable_External_INT1+0x2c>
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	3c 81       	ldd	r19, Y+4	; 0x04
    1284:	21 30       	cpi	r18, 0x01	; 1
    1286:	31 05       	cpc	r19, r1
    1288:	49 f0       	breq	.+18     	; 0x129c <Enable_External_INT1+0x3c>
    128a:	10 c0       	rjmp	.+32     	; 0x12ac <Enable_External_INT1+0x4c>
		{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT1);
    128c:	ab e5       	ldi	r26, 0x5B	; 91
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	eb e5       	ldi	r30, 0x5B	; 91
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	80 68       	ori	r24, 0x80	; 128
    1298:	8c 93       	st	X, r24
    129a:	0a c0       	rjmp	.+20     	; 0x12b0 <Enable_External_INT1+0x50>
		break;
		case Disable_PIE_Interrupt:
			CLEAR_BIT(GICR,INT1);
    129c:	ab e5       	ldi	r26, 0x5B	; 91
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	eb e5       	ldi	r30, 0x5B	; 91
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 77       	andi	r24, 0x7F	; 127
    12a8:	8c 93       	st	X, r24
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <Enable_External_INT1+0x50>
		break;
		default:
			return E_OK;
    12ac:	1a 82       	std	Y+2, r1	; 0x02
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <Enable_External_INT1+0x54>
		}
	return E_NOK;
    12b0:	31 e0       	ldi	r19, 0x01	; 1
    12b2:	3a 83       	std	Y+2, r19	; 0x02
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <External_Int1_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int1_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <External_Int1_EdgeSelection+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <External_Int1_EdgeSelection+0x8>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3c 83       	std	Y+4, r19	; 0x04
    12da:	2b 83       	std	Y+3, r18	; 0x03
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	b1 f0       	breq	.+44     	; 0x1310 <External_Int1_EdgeSelection+0x4c>
    12e4:	2b 81       	ldd	r18, Y+3	; 0x03
    12e6:	3c 81       	ldd	r19, Y+4	; 0x04
    12e8:	21 30       	cpi	r18, 0x01	; 1
    12ea:	31 05       	cpc	r19, r1
    12ec:	11 f5       	brne	.+68     	; 0x1332 <External_Int1_EdgeSelection+0x6e>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCR,ISC10);
    12ee:	a5 e5       	ldi	r26, 0x55	; 85
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e5 e5       	ldi	r30, 0x55	; 85
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	84 60       	ori	r24, 0x04	; 4
    12fa:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    12fc:	a5 e5       	ldi	r26, 0x55	; 85
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e5 e5       	ldi	r30, 0x55	; 85
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	88 60       	ori	r24, 0x08	; 8
    1308:	8c 93       	st	X, r24
								return E_NOK;
    130a:	31 e0       	ldi	r19, 0x01	; 1
    130c:	3a 83       	std	Y+2, r19	; 0x02
    130e:	12 c0       	rjmp	.+36     	; 0x1334 <External_Int1_EdgeSelection+0x70>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCR,ISC10);
    1310:	a5 e5       	ldi	r26, 0x55	; 85
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e5       	ldi	r30, 0x55	; 85
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8b 7f       	andi	r24, 0xFB	; 251
    131c:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    131e:	a5 e5       	ldi	r26, 0x55	; 85
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e5       	ldi	r30, 0x55	; 85
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	88 60       	ori	r24, 0x08	; 8
    132a:	8c 93       	st	X, r24
								return E_NOK;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	8a 83       	std	Y+2, r24	; 0x02
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <External_Int1_EdgeSelection+0x70>
								break;
						default:
							return E_OK;
    1332:	1a 82       	std	Y+2, r1	; 0x02
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
					}
		return E_NOK;
}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <CallBack_Int1>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int1(void (*Func_Ptr)(void))
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <CallBack_Int1+0x6>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
	External_Function1=Func_Ptr;
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	90 93 85 01 	sts	0x0185, r25
    135a:	80 93 84 01 	sts	0x0184, r24
	return E_NOK;
    135e:	81 e0       	ldi	r24, 0x01	; 1
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <Enable_External_INT2>:
/*****************************************************************************************************/

STD_Return Enable_External_INT2(Peripheral_Interrupt_State_t State)
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	00 d0       	rcall	.+0      	; 0x1370 <Enable_External_INT2+0x6>
    1370:	00 d0       	rcall	.+0      	; 0x1372 <Enable_External_INT2+0x8>
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3c 83       	std	Y+4, r19	; 0x04
    1380:	2b 83       	std	Y+3, r18	; 0x03
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	31 f0       	breq	.+12     	; 0x1396 <Enable_External_INT2+0x2c>
    138a:	2b 81       	ldd	r18, Y+3	; 0x03
    138c:	3c 81       	ldd	r19, Y+4	; 0x04
    138e:	21 30       	cpi	r18, 0x01	; 1
    1390:	31 05       	cpc	r19, r1
    1392:	49 f0       	breq	.+18     	; 0x13a6 <Enable_External_INT2+0x3c>
    1394:	10 c0       	rjmp	.+32     	; 0x13b6 <Enable_External_INT2+0x4c>
		{
			case Enable_PIE_Interrupt:
				SET_BIT(GICR,INT2);
    1396:	ab e5       	ldi	r26, 0x5B	; 91
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	eb e5       	ldi	r30, 0x5B	; 91
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 62       	ori	r24, 0x20	; 32
    13a2:	8c 93       	st	X, r24
    13a4:	0a c0       	rjmp	.+20     	; 0x13ba <Enable_External_INT2+0x50>
				break;
				case Disable_PIE_Interrupt:
					CLEAR_BIT(GICR,INT1);
    13a6:	ab e5       	ldi	r26, 0x5B	; 91
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	eb e5       	ldi	r30, 0x5B	; 91
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8f 77       	andi	r24, 0x7F	; 127
    13b2:	8c 93       	st	X, r24
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <Enable_External_INT2+0x50>
				break;
				default:
					return E_OK;
    13b6:	1a 82       	std	Y+2, r1	; 0x02
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <Enable_External_INT2+0x54>
		 	}
	return E_NOK;
    13ba:	31 e0       	ldi	r19, 0x01	; 1
    13bc:	3a 83       	std	Y+2, r19	; 0x02
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <External_Int2_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int2_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <External_Int2_EdgeSelection+0x6>
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <External_Int2_EdgeSelection+0x8>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3c 83       	std	Y+4, r19	; 0x04
    13e4:	2b 83       	std	Y+3, r18	; 0x03
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	79 f0       	breq	.+30     	; 0x140c <External_Int2_EdgeSelection+0x3e>
    13ee:	2b 81       	ldd	r18, Y+3	; 0x03
    13f0:	3c 81       	ldd	r19, Y+4	; 0x04
    13f2:	21 30       	cpi	r18, 0x01	; 1
    13f4:	31 05       	cpc	r19, r1
    13f6:	a1 f4       	brne	.+40     	; 0x1420 <External_Int2_EdgeSelection+0x52>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCSR,ISC2);
    13f8:	a4 e5       	ldi	r26, 0x54	; 84
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e4 e5       	ldi	r30, 0x54	; 84
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 64       	ori	r24, 0x40	; 64
    1404:	8c 93       	st	X, r24
								return E_NOK;
    1406:	31 e0       	ldi	r19, 0x01	; 1
    1408:	3a 83       	std	Y+2, r19	; 0x02
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <External_Int2_EdgeSelection+0x54>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCSR,ISC2);
    140c:	a4 e5       	ldi	r26, 0x54	; 84
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e4 e5       	ldi	r30, 0x54	; 84
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7b       	andi	r24, 0xBF	; 191
    1418:	8c 93       	st	X, r24
								return E_NOK;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	8a 83       	std	Y+2, r24	; 0x02
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <External_Int2_EdgeSelection+0x54>
								break;
						default:
							return E_OK;
    1420:	1a 82       	std	Y+2, r1	; 0x02
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
					}

		return E_NOK;
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <CallBack_Int2>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int2(void (*Func_Ptr)(void))
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <CallBack_Int2+0x6>
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
	External_Function2=Func_Ptr;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	90 93 87 01 	sts	0x0187, r25
    1448:	80 93 86 01 	sts	0x0186, r24
	return E_NOK;
    144c:	81 e0       	ldi	r24, 0x01	; 1
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <DIO_init>:
 * 
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 **/
void DIO_init(void)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    // initializing all pins are input
    DDRA=0;
    1460:	ea e3       	ldi	r30, 0x3A	; 58
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	10 82       	st	Z, r1
    DDRB=0;
    1466:	e7 e3       	ldi	r30, 0x37	; 55
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	10 82       	st	Z, r1
    DDRC=0;
    146c:	e4 e3       	ldi	r30, 0x34	; 52
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	10 82       	st	Z, r1
    DDRD=0;
    1472:	e1 e3       	ldi	r30, 0x31	; 49
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	10 82       	st	Z, r1

    PORTA=0;
    1478:	eb e3       	ldi	r30, 0x3B	; 59
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	10 82       	st	Z, r1
    PORTB=0;
    147e:	e8 e3       	ldi	r30, 0x38	; 56
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	10 82       	st	Z, r1
    PORTC=0;
    1484:	e5 e3       	ldi	r30, 0x35	; 53
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	10 82       	st	Z, r1
    PORTD=0;
    148a:	e2 e3       	ldi	r30, 0x32	; 50
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	10 82       	st	Z, r1
    //enable the internal pull up resistor
    CLEAR_BIT(SFIOR,PUD);
    1490:	a0 e5       	ldi	r26, 0x50	; 80
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e0 e5       	ldi	r30, 0x50	; 80
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8b 7f       	andi	r24, 0xFB	; 251
    149c:	8c 93       	st	X, r24
}
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <DIO_SetPinDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinDirection(DIO_Ports_t PORT, u8 PIN, DIO_Direction_t Direction)
	{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	2e 97       	sbiw	r28, 0x0e	; 14
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	6a 83       	std	Y+2, r22	; 0x02
    14bc:	4b 83       	std	Y+3, r20	; 0x03
		// check for safety
		if(PIN>MAX_PinNum)
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	88 30       	cpi	r24, 0x08	; 8
    14c2:	10 f0       	brcs	.+4      	; 0x14c8 <DIO_SetPinDirection+0x24>
			{
				return E_OK;
    14c4:	1e 86       	std	Y+14, r1	; 0x0e
    14c6:	0e c1       	rjmp	.+540    	; 0x16e4 <DIO_SetPinDirection+0x240>
			}
		else
			{
				switch(PORT)
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3d 87       	std	Y+13, r19	; 0x0d
    14d0:	2c 87       	std	Y+12, r18	; 0x0c
    14d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <DIO_SetPinDirection+0x3a>
    14dc:	51 c0       	rjmp	.+162    	; 0x1580 <DIO_SetPinDirection+0xdc>
    14de:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e0:	3d 85       	ldd	r19, Y+13	; 0x0d
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <DIO_SetPinDirection+0x4e>
    14e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    14ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	71 f0       	breq	.+28     	; 0x150c <DIO_SetPinDirection+0x68>
    14f0:	f5 c0       	rjmp	.+490    	; 0x16dc <DIO_SetPinDirection+0x238>
    14f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14f4:	3d 85       	ldd	r19, Y+13	; 0x0d
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <DIO_SetPinDirection+0x5a>
    14fc:	7b c0       	rjmp	.+246    	; 0x15f4 <DIO_SetPinDirection+0x150>
    14fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1500:	9d 85       	ldd	r25, Y+13	; 0x0d
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <DIO_SetPinDirection+0x66>
    1508:	af c0       	rjmp	.+350    	; 0x1668 <DIO_SetPinDirection+0x1c4>
    150a:	e8 c0       	rjmp	.+464    	; 0x16dc <DIO_SetPinDirection+0x238>
					{
						case DIO_PORTA:
							switch (Direction)
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3b 87       	std	Y+11, r19	; 0x0b
    1514:	2a 87       	std	Y+10, r18	; 0x0a
    1516:	8a 85       	ldd	r24, Y+10	; 0x0a
    1518:	9b 85       	ldd	r25, Y+11	; 0x0b
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	31 f0       	breq	.+12     	; 0x152a <DIO_SetPinDirection+0x86>
    151e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1520:	3b 85       	ldd	r19, Y+11	; 0x0b
    1522:	21 30       	cpi	r18, 0x01	; 1
    1524:	31 05       	cpc	r19, r1
    1526:	b1 f0       	breq	.+44     	; 0x1554 <DIO_SetPinDirection+0xb0>
    1528:	29 c0       	rjmp	.+82     	; 0x157c <DIO_SetPinDirection+0xd8>
								{
									case DIO_INPUT:
									CLEAR_BIT(DDRA,PIN);
    152a:	aa e3       	ldi	r26, 0x3A	; 58
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ea e3       	ldi	r30, 0x3A	; 58
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_SetPinDirection+0xa4>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_SetPinDirection+0xa0>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	c6 c0       	rjmp	.+396    	; 0x16e0 <DIO_SetPinDirection+0x23c>
									break;
									case DIO_OUTPUT:
									SET_BIT(DDRA,PIN);
    1554:	aa e3       	ldi	r26, 0x3A	; 58
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ea e3       	ldi	r30, 0x3A	; 58
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_SetPinDirection+0xce>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_SetPinDirection+0xca>
    1576:	84 2b       	or	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	b2 c0       	rjmp	.+356    	; 0x16e0 <DIO_SetPinDirection+0x23c>
									break;
									default:
									return E_OK;
    157c:	1e 86       	std	Y+14, r1	; 0x0e
    157e:	b2 c0       	rjmp	.+356    	; 0x16e4 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTB:
							switch (Direction)
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	39 87       	std	Y+9, r19	; 0x09
    1588:	28 87       	std	Y+8, r18	; 0x08
    158a:	88 85       	ldd	r24, Y+8	; 0x08
    158c:	99 85       	ldd	r25, Y+9	; 0x09
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	31 f0       	breq	.+12     	; 0x159e <DIO_SetPinDirection+0xfa>
    1592:	28 85       	ldd	r18, Y+8	; 0x08
    1594:	39 85       	ldd	r19, Y+9	; 0x09
    1596:	21 30       	cpi	r18, 0x01	; 1
    1598:	31 05       	cpc	r19, r1
    159a:	b1 f0       	breq	.+44     	; 0x15c8 <DIO_SetPinDirection+0x124>
    159c:	29 c0       	rjmp	.+82     	; 0x15f0 <DIO_SetPinDirection+0x14c>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRB,PIN);
    159e:	a7 e3       	ldi	r26, 0x37	; 55
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e7 e3       	ldi	r30, 0x37	; 55
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_SetPinDirection+0x118>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <DIO_SetPinDirection+0x114>
    15c0:	80 95       	com	r24
    15c2:	84 23       	and	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	8c c0       	rjmp	.+280    	; 0x16e0 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRB,PIN);
    15c8:	a7 e3       	ldi	r26, 0x37	; 55
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e7 e3       	ldi	r30, 0x37	; 55
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_SetPinDirection+0x142>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_SetPinDirection+0x13e>
    15ea:	84 2b       	or	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	78 c0       	rjmp	.+240    	; 0x16e0 <DIO_SetPinDirection+0x23c>
										break;
									default:
									return E_OK;
    15f0:	1e 86       	std	Y+14, r1	; 0x0e
    15f2:	78 c0       	rjmp	.+240    	; 0x16e4 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTC:
							switch (Direction)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	3f 83       	std	Y+7, r19	; 0x07
    15fc:	2e 83       	std	Y+6, r18	; 0x06
    15fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1600:	9f 81       	ldd	r25, Y+7	; 0x07
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	31 f0       	breq	.+12     	; 0x1612 <DIO_SetPinDirection+0x16e>
    1606:	2e 81       	ldd	r18, Y+6	; 0x06
    1608:	3f 81       	ldd	r19, Y+7	; 0x07
    160a:	21 30       	cpi	r18, 0x01	; 1
    160c:	31 05       	cpc	r19, r1
    160e:	b1 f0       	breq	.+44     	; 0x163c <DIO_SetPinDirection+0x198>
    1610:	29 c0       	rjmp	.+82     	; 0x1664 <DIO_SetPinDirection+0x1c0>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRC,PIN);
    1612:	a4 e3       	ldi	r26, 0x34	; 52
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e4 e3       	ldi	r30, 0x34	; 52
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <DIO_SetPinDirection+0x18c>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <DIO_SetPinDirection+0x188>
    1634:	80 95       	com	r24
    1636:	84 23       	and	r24, r20
    1638:	8c 93       	st	X, r24
    163a:	52 c0       	rjmp	.+164    	; 0x16e0 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRC,PIN);
    163c:	a4 e3       	ldi	r26, 0x34	; 52
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e4 e3       	ldi	r30, 0x34	; 52
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <DIO_SetPinDirection+0x1b6>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <DIO_SetPinDirection+0x1b2>
    165e:	84 2b       	or	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	3e c0       	rjmp	.+124    	; 0x16e0 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    1664:	1e 86       	std	Y+14, r1	; 0x0e
    1666:	3e c0       	rjmp	.+124    	; 0x16e4 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTD:
							switch (Direction)
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 83       	std	Y+5, r19	; 0x05
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	31 f0       	breq	.+12     	; 0x1686 <DIO_SetPinDirection+0x1e2>
    167a:	2c 81       	ldd	r18, Y+4	; 0x04
    167c:	3d 81       	ldd	r19, Y+5	; 0x05
    167e:	21 30       	cpi	r18, 0x01	; 1
    1680:	31 05       	cpc	r19, r1
    1682:	b1 f0       	breq	.+44     	; 0x16b0 <DIO_SetPinDirection+0x20c>
    1684:	29 c0       	rjmp	.+82     	; 0x16d8 <DIO_SetPinDirection+0x234>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRD,PIN);
    1686:	a1 e3       	ldi	r26, 0x31	; 49
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e1 e3       	ldi	r30, 0x31	; 49
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_SetPinDirection+0x200>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_SetPinDirection+0x1fc>
    16a8:	80 95       	com	r24
    16aa:	84 23       	and	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	18 c0       	rjmp	.+48     	; 0x16e0 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRD,PIN);
    16b0:	a1 e3       	ldi	r26, 0x31	; 49
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e1 e3       	ldi	r30, 0x31	; 49
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_SetPinDirection+0x22a>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_SetPinDirection+0x226>
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    16d8:	1e 86       	std	Y+14, r1	; 0x0e
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <DIO_SetPinDirection+0x240>
								}
							break;
							default:
								return E_OK;
    16dc:	1e 86       	std	Y+14, r1	; 0x0e
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_SetPinDirection+0x240>
					}
			}
	return E_NOK;
    16e0:	31 e0       	ldi	r19, 0x01	; 1
    16e2:	3e 87       	std	Y+14, r19	; 0x0e
    16e4:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    16e6:	2e 96       	adiw	r28, 0x0e	; 14
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <DIO_SetPortDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortDirection(DIO_Ports_t PORT,u8 Direction)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <DIO_SetPortDirection+0x6>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <DIO_SetPortDirection+0x8>
    1700:	0f 92       	push	r0
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	3d 83       	std	Y+5, r19	; 0x05
    1712:	2c 83       	std	Y+4, r18	; 0x04
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
    171c:	d1 f0       	breq	.+52     	; 0x1752 <DIO_SetPortDirection+0x5a>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	2c f4       	brge	.+10     	; 0x1732 <DIO_SetPortDirection+0x3a>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	61 f0       	breq	.+24     	; 0x1748 <DIO_SetPortDirection+0x50>
    1730:	1f c0       	rjmp	.+62     	; 0x1770 <DIO_SetPortDirection+0x78>
    1732:	2c 81       	ldd	r18, Y+4	; 0x04
    1734:	3d 81       	ldd	r19, Y+5	; 0x05
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	81 f0       	breq	.+32     	; 0x175c <DIO_SetPortDirection+0x64>
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	91 05       	cpc	r25, r1
    1744:	81 f0       	breq	.+32     	; 0x1766 <DIO_SetPortDirection+0x6e>
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <DIO_SetPortDirection+0x78>
						{
							case DIO_PORTA:
								DDRA=Direction;
    1748:	ea e3       	ldi	r30, 0x3A	; 58
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	80 83       	st	Z, r24
    1750:	11 c0       	rjmp	.+34     	; 0x1774 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTB:
								DDRB=Direction;
    1752:	e7 e3       	ldi	r30, 0x37	; 55
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	80 83       	st	Z, r24
    175a:	0c c0       	rjmp	.+24     	; 0x1774 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTC:
								DDRC=Direction;
    175c:	e4 e3       	ldi	r30, 0x34	; 52
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	80 83       	st	Z, r24
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTD:
								DDRD=Direction;
    1766:	e1 e3       	ldi	r30, 0x31	; 49
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	80 83       	st	Z, r24
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_SetPortDirection+0x7c>
							break;
							default:
							return E_OK;
    1770:	1b 82       	std	Y+3, r1	; 0x03
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_SetPortDirection+0x80>

						}
	return E_NOK;
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	9b 83       	std	Y+3, r25	; 0x03
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <DIO_SetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 							return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t State)
	{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	2e 97       	sbiw	r28, 0x0e	; 14
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	6a 83       	std	Y+2, r22	; 0x02
    17a2:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	88 30       	cpi	r24, 0x08	; 8
    17a8:	10 f0       	brcs	.+4      	; 0x17ae <DIO_SetPinValue+0x24>
			{
				return E_OK;
    17aa:	1e 86       	std	Y+14, r1	; 0x0e
    17ac:	0e c1       	rjmp	.+540    	; 0x19ca <DIO_SetPinValue+0x240>
			}
		else
			{
				switch(PORT)
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	3d 87       	std	Y+13, r19	; 0x0d
    17b6:	2c 87       	std	Y+12, r18	; 0x0c
    17b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <DIO_SetPinValue+0x3a>
    17c2:	51 c0       	rjmp	.+162    	; 0x1866 <DIO_SetPinValue+0xdc>
    17c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    17c6:	3d 85       	ldd	r19, Y+13	; 0x0d
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	31 05       	cpc	r19, r1
    17cc:	2c f4       	brge	.+10     	; 0x17d8 <DIO_SetPinValue+0x4e>
    17ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    17d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	71 f0       	breq	.+28     	; 0x17f2 <DIO_SetPinValue+0x68>
    17d6:	f5 c0       	rjmp	.+490    	; 0x19c2 <DIO_SetPinValue+0x238>
    17d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17da:	3d 85       	ldd	r19, Y+13	; 0x0d
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <DIO_SetPinValue+0x5a>
    17e2:	7b c0       	rjmp	.+246    	; 0x18da <DIO_SetPinValue+0x150>
    17e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <DIO_SetPinValue+0x66>
    17ee:	af c0       	rjmp	.+350    	; 0x194e <DIO_SetPinValue+0x1c4>
    17f0:	e8 c0       	rjmp	.+464    	; 0x19c2 <DIO_SetPinValue+0x238>
					{
						case DIO_PORTA:
							switch(State)
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	3b 87       	std	Y+11, r19	; 0x0b
    17fa:	2a 87       	std	Y+10, r18	; 0x0a
    17fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	31 f0       	breq	.+12     	; 0x1810 <DIO_SetPinValue+0x86>
    1804:	2a 85       	ldd	r18, Y+10	; 0x0a
    1806:	3b 85       	ldd	r19, Y+11	; 0x0b
    1808:	21 30       	cpi	r18, 0x01	; 1
    180a:	31 05       	cpc	r19, r1
    180c:	b1 f0       	breq	.+44     	; 0x183a <DIO_SetPinValue+0xb0>
    180e:	29 c0       	rjmp	.+82     	; 0x1862 <DIO_SetPinValue+0xd8>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTA,PIN);
    1810:	ab e3       	ldi	r26, 0x3B	; 59
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	eb e3       	ldi	r30, 0x3B	; 59
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_SetPinValue+0xa4>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <DIO_SetPinValue+0xa0>
    1832:	80 95       	com	r24
    1834:	84 23       	and	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	c6 c0       	rjmp	.+396    	; 0x19c6 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTA,PIN);
    183a:	ab e3       	ldi	r26, 0x3B	; 59
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	eb e3       	ldi	r30, 0x3B	; 59
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_SetPinValue+0xce>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <DIO_SetPinValue+0xca>
    185c:	84 2b       	or	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	b2 c0       	rjmp	.+356    	; 0x19c6 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1862:	1e 86       	std	Y+14, r1	; 0x0e
    1864:	b2 c0       	rjmp	.+356    	; 0x19ca <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTB:
							switch(State)
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	39 87       	std	Y+9, r19	; 0x09
    186e:	28 87       	std	Y+8, r18	; 0x08
    1870:	88 85       	ldd	r24, Y+8	; 0x08
    1872:	99 85       	ldd	r25, Y+9	; 0x09
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	31 f0       	breq	.+12     	; 0x1884 <DIO_SetPinValue+0xfa>
    1878:	28 85       	ldd	r18, Y+8	; 0x08
    187a:	39 85       	ldd	r19, Y+9	; 0x09
    187c:	21 30       	cpi	r18, 0x01	; 1
    187e:	31 05       	cpc	r19, r1
    1880:	b1 f0       	breq	.+44     	; 0x18ae <DIO_SetPinValue+0x124>
    1882:	29 c0       	rjmp	.+82     	; 0x18d6 <DIO_SetPinValue+0x14c>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTB,PIN);
    1884:	a8 e3       	ldi	r26, 0x38	; 56
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e8 e3       	ldi	r30, 0x38	; 56
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_SetPinValue+0x118>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_SetPinValue+0x114>
    18a6:	80 95       	com	r24
    18a8:	84 23       	and	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	8c c0       	rjmp	.+280    	; 0x19c6 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTB,PIN);
    18ae:	a8 e3       	ldi	r26, 0x38	; 56
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e8 e3       	ldi	r30, 0x38	; 56
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_SetPinValue+0x142>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_SetPinValue+0x13e>
    18d0:	84 2b       	or	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	78 c0       	rjmp	.+240    	; 0x19c6 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    18d6:	1e 86       	std	Y+14, r1	; 0x0e
    18d8:	78 c0       	rjmp	.+240    	; 0x19ca <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTC:
							switch(State)
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3f 83       	std	Y+7, r19	; 0x07
    18e2:	2e 83       	std	Y+6, r18	; 0x06
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	9f 81       	ldd	r25, Y+7	; 0x07
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	31 f0       	breq	.+12     	; 0x18f8 <DIO_SetPinValue+0x16e>
    18ec:	2e 81       	ldd	r18, Y+6	; 0x06
    18ee:	3f 81       	ldd	r19, Y+7	; 0x07
    18f0:	21 30       	cpi	r18, 0x01	; 1
    18f2:	31 05       	cpc	r19, r1
    18f4:	b1 f0       	breq	.+44     	; 0x1922 <DIO_SetPinValue+0x198>
    18f6:	29 c0       	rjmp	.+82     	; 0x194a <DIO_SetPinValue+0x1c0>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTC,PIN);
    18f8:	a5 e3       	ldi	r26, 0x35	; 53
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e5 e3       	ldi	r30, 0x35	; 53
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_SetPinValue+0x18c>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_SetPinValue+0x188>
    191a:	80 95       	com	r24
    191c:	84 23       	and	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	52 c0       	rjmp	.+164    	; 0x19c6 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTC,PIN);
    1922:	a5 e3       	ldi	r26, 0x35	; 53
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e5 e3       	ldi	r30, 0x35	; 53
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_SetPinValue+0x1b6>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <DIO_SetPinValue+0x1b2>
    1944:	84 2b       	or	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	3e c0       	rjmp	.+124    	; 0x19c6 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    194a:	1e 86       	std	Y+14, r1	; 0x0e
    194c:	3e c0       	rjmp	.+124    	; 0x19ca <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTD:
							switch(State)
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	3d 83       	std	Y+5, r19	; 0x05
    1956:	2c 83       	std	Y+4, r18	; 0x04
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	9d 81       	ldd	r25, Y+5	; 0x05
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	31 f0       	breq	.+12     	; 0x196c <DIO_SetPinValue+0x1e2>
    1960:	2c 81       	ldd	r18, Y+4	; 0x04
    1962:	3d 81       	ldd	r19, Y+5	; 0x05
    1964:	21 30       	cpi	r18, 0x01	; 1
    1966:	31 05       	cpc	r19, r1
    1968:	b1 f0       	breq	.+44     	; 0x1996 <DIO_SetPinValue+0x20c>
    196a:	29 c0       	rjmp	.+82     	; 0x19be <DIO_SetPinValue+0x234>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTD,PIN);
    196c:	a2 e3       	ldi	r26, 0x32	; 50
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e2 e3       	ldi	r30, 0x32	; 50
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_SetPinValue+0x200>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_SetPinValue+0x1fc>
    198e:	80 95       	com	r24
    1990:	84 23       	and	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	18 c0       	rjmp	.+48     	; 0x19c6 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTD,PIN);
    1996:	a2 e3       	ldi	r26, 0x32	; 50
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e2 e3       	ldi	r30, 0x32	; 50
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <DIO_SetPinValue+0x22a>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <DIO_SetPinValue+0x226>
    19b8:	84 2b       	or	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    19be:	1e 86       	std	Y+14, r1	; 0x0e
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <DIO_SetPinValue+0x240>
								}
						break;
							default:
							return E_OK;
    19c2:	1e 86       	std	Y+14, r1	; 0x0e
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <DIO_SetPinValue+0x240>
					}
			}
		return E_NOK;
    19c6:	31 e0       	ldi	r19, 0x01	; 1
    19c8:	3e 87       	std	Y+14, r19	; 0x0e
    19ca:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    19cc:	2e 96       	adiw	r28, 0x0e	; 14
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <DIO_SetPortValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortValue(DIO_Ports_t PORT,u8 value)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <DIO_SetPortValue+0x6>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <DIO_SetPortValue+0x8>
    19e6:	0f 92       	push	r0
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	3d 83       	std	Y+5, r19	; 0x05
    19f8:	2c 83       	std	Y+4, r18	; 0x04
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	91 05       	cpc	r25, r1
    1a02:	d1 f0       	breq	.+52     	; 0x1a38 <DIO_SetPortValue+0x5a>
    1a04:	2c 81       	ldd	r18, Y+4	; 0x04
    1a06:	3d 81       	ldd	r19, Y+5	; 0x05
    1a08:	22 30       	cpi	r18, 0x02	; 2
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <DIO_SetPortValue+0x3a>
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	9d 81       	ldd	r25, Y+5	; 0x05
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <DIO_SetPortValue+0x50>
    1a16:	1f c0       	rjmp	.+62     	; 0x1a56 <DIO_SetPortValue+0x78>
    1a18:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	81 f0       	breq	.+32     	; 0x1a42 <DIO_SetPortValue+0x64>
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	9d 81       	ldd	r25, Y+5	; 0x05
    1a26:	83 30       	cpi	r24, 0x03	; 3
    1a28:	91 05       	cpc	r25, r1
    1a2a:	81 f0       	breq	.+32     	; 0x1a4c <DIO_SetPortValue+0x6e>
    1a2c:	14 c0       	rjmp	.+40     	; 0x1a56 <DIO_SetPortValue+0x78>
						{
							case DIO_PORTA:
								PORTA=value;
    1a2e:	eb e3       	ldi	r30, 0x3B	; 59
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	80 83       	st	Z, r24
    1a36:	11 c0       	rjmp	.+34     	; 0x1a5a <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTB:
								PORTB=value;
    1a38:	e8 e3       	ldi	r30, 0x38	; 56
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	80 83       	st	Z, r24
    1a40:	0c c0       	rjmp	.+24     	; 0x1a5a <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTC:
								PORTC=value;
    1a42:	e5 e3       	ldi	r30, 0x35	; 53
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	80 83       	st	Z, r24
    1a4a:	07 c0       	rjmp	.+14     	; 0x1a5a <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTD:
								PORTD=value;
    1a4c:	e2 e3       	ldi	r30, 0x32	; 50
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	80 83       	st	Z, r24
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_SetPortValue+0x7c>

							break;
							default:
							return E_OK;
    1a56:	1b 82       	std	Y+3, r1	; 0x03
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_SetPortValue+0x80>

						}
	return E_NOK;
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	9b 83       	std	Y+3, r25	; 0x03
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <DIO_GetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_GetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t* State)
	{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	27 97       	sbiw	r28, 0x07	; 7
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	6a 83       	std	Y+2, r22	; 0x02
    1a88:	5c 83       	std	Y+4, r21	; 0x04
    1a8a:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	88 30       	cpi	r24, 0x08	; 8
    1a90:	10 f0       	brcs	.+4      	; 0x1a96 <DIO_GetPinValue+0x26>
			{
				return E_OK;
    1a92:	1f 82       	std	Y+7, r1	; 0x07
    1a94:	75 c0       	rjmp	.+234    	; 0x1b80 <DIO_GetPinValue+0x110>
			}
		else
			{
					switch(PORT)
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3e 83       	std	Y+6, r19	; 0x06
    1a9e:	2d 83       	std	Y+5, r18	; 0x05
    1aa0:	4d 81       	ldd	r20, Y+5	; 0x05
    1aa2:	5e 81       	ldd	r21, Y+6	; 0x06
    1aa4:	41 30       	cpi	r20, 0x01	; 1
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	59 f1       	breq	.+86     	; 0x1b00 <DIO_GetPinValue+0x90>
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	34 f4       	brge	.+12     	; 0x1ac0 <DIO_GetPinValue+0x50>
    1ab4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab8:	21 15       	cp	r18, r1
    1aba:	31 05       	cpc	r19, r1
    1abc:	69 f0       	breq	.+26     	; 0x1ad8 <DIO_GetPinValue+0x68>
    1abe:	5c c0       	rjmp	.+184    	; 0x1b78 <DIO_GetPinValue+0x108>
    1ac0:	4d 81       	ldd	r20, Y+5	; 0x05
    1ac2:	5e 81       	ldd	r21, Y+6	; 0x06
    1ac4:	42 30       	cpi	r20, 0x02	; 2
    1ac6:	51 05       	cpc	r21, r1
    1ac8:	79 f1       	breq	.+94     	; 0x1b28 <DIO_GetPinValue+0xb8>
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	83 30       	cpi	r24, 0x03	; 3
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <DIO_GetPinValue+0x66>
    1ad4:	3d c0       	rjmp	.+122    	; 0x1b50 <DIO_GetPinValue+0xe0>
    1ad6:	50 c0       	rjmp	.+160    	; 0x1b78 <DIO_GetPinValue+0x108>
						{
							case DIO_PORTA:
								*State=GET_BIT(PINA,PIN);
    1ad8:	e9 e3       	ldi	r30, 0x39	; 57
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a9 01       	movw	r20, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_GetPinValue+0x80>
    1aec:	55 95       	asr	r21
    1aee:	47 95       	ror	r20
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_GetPinValue+0x7c>
    1af4:	ca 01       	movw	r24, r20
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	eb 81       	ldd	r30, Y+3	; 0x03
    1afa:	fc 81       	ldd	r31, Y+4	; 0x04
    1afc:	80 83       	st	Z, r24
    1afe:	3e c0       	rjmp	.+124    	; 0x1b7c <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTB:
								*State=GET_BIT(PINB,PIN);
    1b00:	e6 e3       	ldi	r30, 0x36	; 54
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a9 01       	movw	r20, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_GetPinValue+0xa8>
    1b14:	55 95       	asr	r21
    1b16:	47 95       	ror	r20
    1b18:	8a 95       	dec	r24
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <DIO_GetPinValue+0xa4>
    1b1c:	ca 01       	movw	r24, r20
    1b1e:	81 70       	andi	r24, 0x01	; 1
    1b20:	eb 81       	ldd	r30, Y+3	; 0x03
    1b22:	fc 81       	ldd	r31, Y+4	; 0x04
    1b24:	80 83       	st	Z, r24
    1b26:	2a c0       	rjmp	.+84     	; 0x1b7c <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTC:
								*State=GET_BIT(PINC,PIN);
    1b28:	e3 e3       	ldi	r30, 0x33	; 51
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a9 01       	movw	r20, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_GetPinValue+0xd0>
    1b3c:	55 95       	asr	r21
    1b3e:	47 95       	ror	r20
    1b40:	8a 95       	dec	r24
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <DIO_GetPinValue+0xcc>
    1b44:	ca 01       	movw	r24, r20
    1b46:	81 70       	andi	r24, 0x01	; 1
    1b48:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4c:	80 83       	st	Z, r24
    1b4e:	16 c0       	rjmp	.+44     	; 0x1b7c <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTD:
								*State=GET_BIT(PIND,PIN);
    1b50:	e0 e3       	ldi	r30, 0x30	; 48
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	88 2f       	mov	r24, r24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a9 01       	movw	r20, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <DIO_GetPinValue+0xf8>
    1b64:	55 95       	asr	r21
    1b66:	47 95       	ror	r20
    1b68:	8a 95       	dec	r24
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <DIO_GetPinValue+0xf4>
    1b6c:	ca 01       	movw	r24, r20
    1b6e:	81 70       	andi	r24, 0x01	; 1
    1b70:	eb 81       	ldd	r30, Y+3	; 0x03
    1b72:	fc 81       	ldd	r31, Y+4	; 0x04
    1b74:	80 83       	st	Z, r24
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <DIO_GetPinValue+0x10c>
								break;
							default:
								return E_OK;
    1b78:	1f 82       	std	Y+7, r1	; 0x07
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_GetPinValue+0x110>
						}
			}
		return E_NOK;
    1b7c:	51 e0       	ldi	r21, 0x01	; 1
    1b7e:	5f 83       	std	Y+7, r21	; 0x07
    1b80:	8f 81       	ldd	r24, Y+7	; 0x07
	}
    1b82:	27 96       	adiw	r28, 0x07	; 7
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <DIO_togglePin>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_togglePin(DIO_Ports_t port,u8 pin)
 {
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <DIO_togglePin+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <DIO_togglePin+0x8>
    1b9c:	0f 92       	push	r0
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PinNum)
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	88 30       	cpi	r24, 0x08	; 8
    1baa:	10 f0       	brcs	.+4      	; 0x1bb0 <DIO_togglePin+0x1c>
		{
			return E_OK;
    1bac:	1d 82       	std	Y+5, r1	; 0x05
    1bae:	73 c0       	rjmp	.+230    	; 0x1c96 <DIO_togglePin+0x102>
		}
	else
		{
			switch (port)
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3c 83       	std	Y+4, r19	; 0x04
    1bb8:	2b 83       	std	Y+3, r18	; 0x03
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	49 f1       	breq	.+82     	; 0x1c16 <DIO_togglePin+0x82>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <DIO_togglePin+0x44>
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <DIO_togglePin+0x5a>
    1bd6:	5b c0       	rjmp	.+182    	; 0x1c8e <DIO_togglePin+0xfa>
    1bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bda:	3c 81       	ldd	r19, Y+4	; 0x04
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	71 f1       	breq	.+92     	; 0x1c3e <DIO_togglePin+0xaa>
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	91 05       	cpc	r25, r1
    1bea:	e9 f1       	breq	.+122    	; 0x1c66 <DIO_togglePin+0xd2>
    1bec:	50 c0       	rjmp	.+160    	; 0x1c8e <DIO_togglePin+0xfa>
				{
					case DIO_PORTA:
						TOGGLE_BIT(PORTA, pin);
    1bee:	ab e3       	ldi	r26, 0x3B	; 59
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	eb e3       	ldi	r30, 0x3B	; 59
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_togglePin+0x78>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_togglePin+0x74>
    1c10:	84 27       	eor	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	3e c0       	rjmp	.+124    	; 0x1c92 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTB:
						TOGGLE_BIT(PORTB, pin);
    1c16:	a8 e3       	ldi	r26, 0x38	; 56
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e8 e3       	ldi	r30, 0x38	; 56
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <DIO_togglePin+0xa0>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <DIO_togglePin+0x9c>
    1c38:	84 27       	eor	r24, r20
    1c3a:	8c 93       	st	X, r24
    1c3c:	2a c0       	rjmp	.+84     	; 0x1c92 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTC:
						TOGGLE_BIT(PORTC, pin);
    1c3e:	a5 e3       	ldi	r26, 0x35	; 53
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e5 e3       	ldi	r30, 0x35	; 53
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_togglePin+0xc8>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_togglePin+0xc4>
    1c60:	84 27       	eor	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	16 c0       	rjmp	.+44     	; 0x1c92 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTD:
						TOGGLE_BIT(PORTD, pin);
    1c66:	a2 e3       	ldi	r26, 0x32	; 50
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e2 e3       	ldi	r30, 0x32	; 50
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <DIO_togglePin+0xf0>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <DIO_togglePin+0xec>
    1c88:	84 27       	eor	r24, r20
    1c8a:	8c 93       	st	X, r24
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_togglePin+0xfe>
						break;
					default:
						return E_OK;
    1c8e:	1d 82       	std	Y+5, r1	; 0x05
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <DIO_togglePin+0x102>
				}
	}

	return E_NOK;
    1c92:	91 e0       	ldi	r25, 0x01	; 1
    1c94:	9d 83       	std	Y+5, r25	; 0x05
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <DIO_EnablePullup>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_EnablePullup(DIO_Ports_t PORT, u8 PIN, DIO_PullUpState_t Pullstate)
	{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	2e 97       	sbiw	r28, 0x0e	; 14
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	6a 83       	std	Y+2, r22	; 0x02
    1cc0:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	88 30       	cpi	r24, 0x08	; 8
    1cc6:	10 f0       	brcs	.+4      	; 0x1ccc <DIO_EnablePullup+0x24>
			{
				return E_OK;
    1cc8:	1e 86       	std	Y+14, r1	; 0x0e
    1cca:	26 c1       	rjmp	.+588    	; 0x1f18 <DIO_EnablePullup+0x270>
			}
		else
			{
				switch(PORT)
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	3d 87       	std	Y+13, r19	; 0x0d
    1cd4:	2c 87       	std	Y+12, r18	; 0x0c
    1cd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	91 05       	cpc	r25, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <DIO_EnablePullup+0x3a>
    1ce0:	57 c0       	rjmp	.+174    	; 0x1d90 <DIO_EnablePullup+0xe8>
    1ce2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ce4:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ce6:	22 30       	cpi	r18, 0x02	; 2
    1ce8:	31 05       	cpc	r19, r1
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <DIO_EnablePullup+0x4e>
    1cec:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cee:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	71 f0       	breq	.+28     	; 0x1d10 <DIO_EnablePullup+0x68>
    1cf4:	0d c1       	rjmp	.+538    	; 0x1f10 <DIO_EnablePullup+0x268>
    1cf6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cf8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cfa:	22 30       	cpi	r18, 0x02	; 2
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <DIO_EnablePullup+0x5a>
    1d00:	87 c0       	rjmp	.+270    	; 0x1e10 <DIO_EnablePullup+0x168>
    1d02:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d04:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d06:	83 30       	cpi	r24, 0x03	; 3
    1d08:	91 05       	cpc	r25, r1
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <DIO_EnablePullup+0x66>
    1d0c:	c1 c0       	rjmp	.+386    	; 0x1e90 <DIO_EnablePullup+0x1e8>
    1d0e:	00 c1       	rjmp	.+512    	; 0x1f10 <DIO_EnablePullup+0x268>
				{
					case DIO_PORTA:
						switch(Pullstate)
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3b 87       	std	Y+11, r19	; 0x0b
    1d18:	2a 87       	std	Y+10, r18	; 0x0a
    1d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	31 f0       	breq	.+12     	; 0x1d2e <DIO_EnablePullup+0x86>
    1d22:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d24:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d26:	21 30       	cpi	r18, 0x01	; 1
    1d28:	31 05       	cpc	r19, r1
    1d2a:	41 f1       	breq	.+80     	; 0x1d7c <DIO_EnablePullup+0xd4>
    1d2c:	2f c0       	rjmp	.+94     	; 0x1d8c <DIO_EnablePullup+0xe4>
							{
								case ENABLE_PullUp:
									CLEAR_BIT(DDRA,PIN);
    1d2e:	aa e3       	ldi	r26, 0x3A	; 58
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ea e3       	ldi	r30, 0x3A	; 58
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <DIO_EnablePullup+0xa2>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	2a 95       	dec	r18
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <DIO_EnablePullup+0x9e>
    1d4e:	80 95       	com	r24
    1d50:	84 23       	and	r24, r20
    1d52:	8c 93       	st	X, r24
									SET_BIT(PORTA,PIN);
    1d54:	ab e3       	ldi	r26, 0x3B	; 59
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e3       	ldi	r30, 0x3B	; 59
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_EnablePullup+0xca>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_EnablePullup+0xc6>
    1d76:	84 2b       	or	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	cc c0       	rjmp	.+408    	; 0x1f14 <DIO_EnablePullup+0x26c>
									break;
								case DISABLE_PullUp:
									SET_BIT(SFIOR,PUD);
    1d7c:	a0 e5       	ldi	r26, 0x50	; 80
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e0 e5       	ldi	r30, 0x50	; 80
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	84 60       	ori	r24, 0x04	; 4
    1d88:	8c 93       	st	X, r24
    1d8a:	c4 c0       	rjmp	.+392    	; 0x1f14 <DIO_EnablePullup+0x26c>
									break;
								default:
									return E_OK;
    1d8c:	1e 86       	std	Y+14, r1	; 0x0e
    1d8e:	c4 c0       	rjmp	.+392    	; 0x1f18 <DIO_EnablePullup+0x270>
							}
						break;
						case DIO_PORTB:
							switch(Pullstate)
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	39 87       	std	Y+9, r19	; 0x09
    1d98:	28 87       	std	Y+8, r18	; 0x08
    1d9a:	88 85       	ldd	r24, Y+8	; 0x08
    1d9c:	99 85       	ldd	r25, Y+9	; 0x09
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	31 f0       	breq	.+12     	; 0x1dae <DIO_EnablePullup+0x106>
    1da2:	28 85       	ldd	r18, Y+8	; 0x08
    1da4:	39 85       	ldd	r19, Y+9	; 0x09
    1da6:	21 30       	cpi	r18, 0x01	; 1
    1da8:	31 05       	cpc	r19, r1
    1daa:	41 f1       	breq	.+80     	; 0x1dfc <DIO_EnablePullup+0x154>
    1dac:	2f c0       	rjmp	.+94     	; 0x1e0c <DIO_EnablePullup+0x164>
								{
									case ENABLE_PullUp:
										CLEAR_BIT(DDRB,PIN);
    1dae:	a7 e3       	ldi	r26, 0x37	; 55
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e7 e3       	ldi	r30, 0x37	; 55
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <DIO_EnablePullup+0x122>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	2a 95       	dec	r18
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <DIO_EnablePullup+0x11e>
    1dce:	80 95       	com	r24
    1dd0:	84 23       	and	r24, r20
    1dd2:	8c 93       	st	X, r24
										SET_BIT(PORTB,PIN);
    1dd4:	a8 e3       	ldi	r26, 0x38	; 56
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e8 e3       	ldi	r30, 0x38	; 56
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_EnablePullup+0x14a>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <DIO_EnablePullup+0x146>
    1df6:	84 2b       	or	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	8c c0       	rjmp	.+280    	; 0x1f14 <DIO_EnablePullup+0x26c>
										break;
									case DISABLE_PullUp:
										SET_BIT(SFIOR,PUD);
    1dfc:	a0 e5       	ldi	r26, 0x50	; 80
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e0 e5       	ldi	r30, 0x50	; 80
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	84 60       	ori	r24, 0x04	; 4
    1e08:	8c 93       	st	X, r24
    1e0a:	84 c0       	rjmp	.+264    	; 0x1f14 <DIO_EnablePullup+0x26c>
										break;
									default:
										return E_OK;
    1e0c:	1e 86       	std	Y+14, r1	; 0x0e
    1e0e:	84 c0       	rjmp	.+264    	; 0x1f18 <DIO_EnablePullup+0x270>
								}
							break;
							case DIO_PORTC:
								switch(Pullstate)
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3f 83       	std	Y+7, r19	; 0x07
    1e18:	2e 83       	std	Y+6, r18	; 0x06
    1e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	31 f0       	breq	.+12     	; 0x1e2e <DIO_EnablePullup+0x186>
    1e22:	2e 81       	ldd	r18, Y+6	; 0x06
    1e24:	3f 81       	ldd	r19, Y+7	; 0x07
    1e26:	21 30       	cpi	r18, 0x01	; 1
    1e28:	31 05       	cpc	r19, r1
    1e2a:	41 f1       	breq	.+80     	; 0x1e7c <DIO_EnablePullup+0x1d4>
    1e2c:	2f c0       	rjmp	.+94     	; 0x1e8c <DIO_EnablePullup+0x1e4>
									{
										case ENABLE_PullUp:
											CLEAR_BIT(DDRC,PIN);
    1e2e:	a4 e3       	ldi	r26, 0x34	; 52
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e4 e3       	ldi	r30, 0x34	; 52
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <DIO_EnablePullup+0x1a2>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	2a 95       	dec	r18
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <DIO_EnablePullup+0x19e>
    1e4e:	80 95       	com	r24
    1e50:	84 23       	and	r24, r20
    1e52:	8c 93       	st	X, r24
											SET_BIT(PORTC,PIN);
    1e54:	a5 e3       	ldi	r26, 0x35	; 53
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e3       	ldi	r30, 0x35	; 53
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_EnablePullup+0x1ca>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_EnablePullup+0x1c6>
    1e76:	84 2b       	or	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	4c c0       	rjmp	.+152    	; 0x1f14 <DIO_EnablePullup+0x26c>
											break;
										case DISABLE_PullUp:
											SET_BIT(SFIOR,PUD);
    1e7c:	a0 e5       	ldi	r26, 0x50	; 80
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e0 e5       	ldi	r30, 0x50	; 80
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	84 60       	ori	r24, 0x04	; 4
    1e88:	8c 93       	st	X, r24
    1e8a:	44 c0       	rjmp	.+136    	; 0x1f14 <DIO_EnablePullup+0x26c>
											break;
										default:
											return E_OK;
    1e8c:	1e 86       	std	Y+14, r1	; 0x0e
    1e8e:	44 c0       	rjmp	.+136    	; 0x1f18 <DIO_EnablePullup+0x270>
									}
								break;
								case DIO_PORTD:
									switch(Pullstate)
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	3d 83       	std	Y+5, r19	; 0x05
    1e98:	2c 83       	std	Y+4, r18	; 0x04
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	31 f0       	breq	.+12     	; 0x1eae <DIO_EnablePullup+0x206>
    1ea2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea6:	21 30       	cpi	r18, 0x01	; 1
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	41 f1       	breq	.+80     	; 0x1efc <DIO_EnablePullup+0x254>
    1eac:	2f c0       	rjmp	.+94     	; 0x1f0c <DIO_EnablePullup+0x264>
										{
											case ENABLE_PullUp:
												CLEAR_BIT(DDRD,PIN);
    1eae:	a1 e3       	ldi	r26, 0x31	; 49
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e1 e3       	ldi	r30, 0x31	; 49
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_EnablePullup+0x222>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	2a 95       	dec	r18
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <DIO_EnablePullup+0x21e>
    1ece:	80 95       	com	r24
    1ed0:	84 23       	and	r24, r20
    1ed2:	8c 93       	st	X, r24
												SET_BIT(PORTD,PIN);
    1ed4:	a2 e3       	ldi	r26, 0x32	; 50
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e2 e3       	ldi	r30, 0x32	; 50
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_EnablePullup+0x24a>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <DIO_EnablePullup+0x246>
    1ef6:	84 2b       	or	r24, r20
    1ef8:	8c 93       	st	X, r24
    1efa:	0c c0       	rjmp	.+24     	; 0x1f14 <DIO_EnablePullup+0x26c>
												break;
											case DISABLE_PullUp:
												SET_BIT(SFIOR,PUD);
    1efc:	a0 e5       	ldi	r26, 0x50	; 80
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e0 e5       	ldi	r30, 0x50	; 80
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	84 60       	ori	r24, 0x04	; 4
    1f08:	8c 93       	st	X, r24
    1f0a:	04 c0       	rjmp	.+8      	; 0x1f14 <DIO_EnablePullup+0x26c>
												break;
											default:
												return E_OK;
    1f0c:	1e 86       	std	Y+14, r1	; 0x0e
    1f0e:	04 c0       	rjmp	.+8      	; 0x1f18 <DIO_EnablePullup+0x270>
										}
									break;
									default:
									return E_OK;
    1f10:	1e 86       	std	Y+14, r1	; 0x0e
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <DIO_EnablePullup+0x270>

				}
			}
		return E_NOK;
    1f14:	31 e0       	ldi	r19, 0x01	; 1
    1f16:	3e 87       	std	Y+14, r19	; 0x0e
    1f18:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    1f1a:	2e 96       	adiw	r28, 0x0e	; 14
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <ADC_Init>:
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 */
 /*****************************************************************************************************/
STD_Return ADC_Init(ADC__State_t State)
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <ADC_Init+0x6>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <ADC_Init+0x8>
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	89 83       	std	Y+1, r24	; 0x01
	//Resolution Selection
	#if defined Resolution_8_Bit
	SET_BIT(ADMUX,ADLAR);
	#elif defined Resolution_10_Bit
	CLEAR_BIT(ADMUX,ADLAR);
    1f3a:	a7 e2       	ldi	r26, 0x27	; 39
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e7 e2       	ldi	r30, 0x27	; 39
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	8f 7d       	andi	r24, 0xDF	; 223
    1f46:	8c 93       	st	X, r24
	//Voltage Reference Selection
	#if defined AREF_Internal_VREF
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
	#elif defined AREF_External_VREF
	SET_BIT(ADMUX,REFS0);
    1f48:	a7 e2       	ldi	r26, 0x27	; 39
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e7 e2       	ldi	r30, 0x27	; 39
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 64       	ori	r24, 0x40	; 64
    1f54:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    1f56:	a7 e2       	ldi	r26, 0x27	; 39
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e7 e2       	ldi	r30, 0x27	; 39
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	8f 77       	andi	r24, 0x7F	; 127
    1f62:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_64
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_128
		SET_BIT(ADCSRA,ADPS0);
    1f64:	a6 e2       	ldi	r26, 0x26	; 38
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e6 e2       	ldi	r30, 0x26	; 38
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	81 60       	ori	r24, 0x01	; 1
    1f70:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1f72:	a6 e2       	ldi	r26, 0x26	; 38
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e6 e2       	ldi	r30, 0x26	; 38
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	82 60       	ori	r24, 0x02	; 2
    1f7e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    1f80:	a6 e2       	ldi	r26, 0x26	; 38
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e6 e2       	ldi	r30, 0x26	; 38
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	84 60       	ori	r24, 0x04	; 4
    1f8c:	8c 93       	st	X, r24
	#endif
	switch (State)
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	3c 83       	std	Y+4, r19	; 0x04
    1f96:	2b 83       	std	Y+3, r18	; 0x03
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	31 f0       	breq	.+12     	; 0x1fac <ADC_Init+0x80>
    1fa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa4:	21 30       	cpi	r18, 0x01	; 1
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	49 f0       	breq	.+18     	; 0x1fbc <ADC_Init+0x90>
    1faa:	10 c0       	rjmp	.+32     	; 0x1fcc <ADC_Init+0xa0>
		{
			case ADC_ENABLE:
				SET_BIT(ADCSRA,ADEN);
    1fac:	a6 e2       	ldi	r26, 0x26	; 38
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e6 e2       	ldi	r30, 0x26	; 38
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 68       	ori	r24, 0x80	; 128
    1fb8:	8c 93       	st	X, r24
    1fba:	0a c0       	rjmp	.+20     	; 0x1fd0 <ADC_Init+0xa4>
				break;
			case ADC_DISABLE:
				CLEAR_BIT(ADCSRA,ADEN);
    1fbc:	a6 e2       	ldi	r26, 0x26	; 38
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e6 e2       	ldi	r30, 0x26	; 38
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 77       	andi	r24, 0x7F	; 127
    1fc8:	8c 93       	st	X, r24
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <ADC_Init+0xa4>
				break;
			default:
				return E_OK;
    1fcc:	1a 82       	std	Y+2, r1	; 0x02
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <ADC_Init+0xa8>
		}
		return E_NOK;
    1fd0:	31 e0       	ldi	r19, 0x01	; 1
    1fd2:	3a 83       	std	Y+2, r19	; 0x02
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <ADC_SetInterrupt_Enable>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 */
STD_Return ADC_SetInterrupt_Enable(ADC_Interrupt_State_t State)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <ADC_SetInterrupt_Enable+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <ADC_SetInterrupt_Enable+0x8>
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	3c 83       	std	Y+4, r19	; 0x04
    1ffa:	2b 83       	std	Y+3, r18	; 0x03
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	31 f0       	breq	.+12     	; 0x2010 <ADC_SetInterrupt_Enable+0x2c>
    2004:	2b 81       	ldd	r18, Y+3	; 0x03
    2006:	3c 81       	ldd	r19, Y+4	; 0x04
    2008:	21 30       	cpi	r18, 0x01	; 1
    200a:	31 05       	cpc	r19, r1
    200c:	49 f0       	breq	.+18     	; 0x2020 <ADC_SetInterrupt_Enable+0x3c>
    200e:	10 c0       	rjmp	.+32     	; 0x2030 <ADC_SetInterrupt_Enable+0x4c>
	{
		case ADC_Interrupt_ENABLE:
			SET_BIT(ADCSRA,ADIE);
    2010:	a6 e2       	ldi	r26, 0x26	; 38
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e6 e2       	ldi	r30, 0x26	; 38
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	88 60       	ori	r24, 0x08	; 8
    201c:	8c 93       	st	X, r24
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <ADC_SetInterrupt_Enable+0x50>
			break;
		case ADC_Interrupt_DISABLE:
			CLEAR_BIT(ADCSRA,ADIE);
    2020:	a6 e2       	ldi	r26, 0x26	; 38
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e6 e2       	ldi	r30, 0x26	; 38
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	87 7f       	andi	r24, 0xF7	; 247
    202c:	8c 93       	st	X, r24
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <ADC_SetInterrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    2030:	1a 82       	std	Y+2, r1	; 0x02
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <ADC_SetInterrupt_Enable+0x54>
	}
	return E_NOK;
    2034:	31 e0       	ldi	r19, 0x01	; 1
    2036:	3a 83       	std	Y+2, r19	; 0x02
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
}
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <ADC_Start_conversion>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Start_conversion(u8 channel)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <ADC_Start_conversion+0x6>
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	89 83       	std	Y+1, r24	; 0x01
	if (channel>MaxPinNum)
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	88 30       	cpi	r24, 0x08	; 8
    2058:	10 f0       	brcs	.+4      	; 0x205e <ADC_Start_conversion+0x16>
	{
		return E_OK;
    205a:	1a 82       	std	Y+2, r1	; 0x02
    205c:	21 c0       	rjmp	.+66     	; 0x20a0 <ADC_Start_conversion+0x58>
	}
	else
	{

			//Mask for non used bits of the 8 bits of the Regsiter
			ADMUX &= Unselected_Channel_MASK;
    205e:	a7 e2       	ldi	r26, 0x27	; 39
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e7 e2       	ldi	r30, 0x27	; 39
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	88 7f       	andi	r24, 0xF8	; 248
    206a:	8c 93       	st	X, r24

			//Mask for the usage 3 bits of the 8 bits
			ADMUX |= channel;
    206c:	a7 e2       	ldi	r26, 0x27	; 39
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e7 e2       	ldi	r30, 0x27	; 39
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	90 81       	ld	r25, Z
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	89 2b       	or	r24, r25
    207a:	8c 93       	st	X, r24

			//Set the AdcStartConversion
			SET_BIT(ADCSRA,ADSC);
    207c:	a6 e2       	ldi	r26, 0x26	; 38
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e6 e2       	ldi	r30, 0x26	; 38
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	80 64       	ori	r24, 0x40	; 64
    2088:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA,ADSC) == 1);
    208a:	e6 e2       	ldi	r30, 0x26	; 38
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	80 74       	andi	r24, 0x40	; 64
    2096:	90 70       	andi	r25, 0x00	; 0
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	b9 f7       	brne	.-18     	; 0x208a <ADC_Start_conversion+0x42>
		 //Wait conversion to finish
	}
	return E_NOK;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	8a 83       	std	Y+2, r24	; 0x02
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <ADC_Get_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Get_Value(u16 *AdcResult)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <ADC_Get_Value+0x6>
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <ADC_Get_Value+0x8>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	8b 83       	std	Y+3, r24	; 0x03
		u16 AdcResult_Temp=0;
    20bc:	1a 82       	std	Y+2, r1	; 0x02
    20be:	19 82       	std	Y+1, r1	; 0x01
	#if defined Resolution_8_Bit
		*AdcResult=ADCH;
	#elif defined Resolution_10_Bit
		AdcResult_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    20c0:	e4 e2       	ldi	r30, 0x24	; 36
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	e5 e2       	ldi	r30, 0x25	; 37
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	98 2f       	mov	r25, r24
    20d6:	88 27       	eor	r24, r24
    20d8:	82 0f       	add	r24, r18
    20da:	93 1f       	adc	r25, r19
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
		*AdcResult = (AdcResult_Temp & Resolution_10Bit_MASK);//Mask higher bits in ADCH and read only the 10 bits for the ADC
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	93 70       	andi	r25, 0x03	; 3
    20e6:	eb 81       	ldd	r30, Y+3	; 0x03
    20e8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
	#endif
		return E_NOK;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
}
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <ADC_Read_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Read_Value(u8 channel,u16 *AdcValue)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <ADC_Read_Value+0x6>
    2104:	00 d0       	rcall	.+0      	; 0x2106 <ADC_Read_Value+0x8>
    2106:	00 d0       	rcall	.+0      	; 0x2108 <ADC_Read_Value+0xa>
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	8b 83       	std	Y+3, r24	; 0x03
    210e:	7d 83       	std	Y+5, r23	; 0x05
    2110:	6c 83       	std	Y+4, r22	; 0x04
	u16 AdcValue_Temp=0;
    2112:	1a 82       	std	Y+2, r1	; 0x02
    2114:	19 82       	std	Y+1, r1	; 0x01
	if (channel>MaxPinNum)
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	88 30       	cpi	r24, 0x08	; 8
    211a:	c0 f0       	brcs	.+48     	; 0x214c <ADC_Read_Value+0x4e>
		{
			return E_OK;
    211c:	1e 82       	std	Y+6, r1	; 0x06
    211e:	38 c0       	rjmp	.+112    	; 0x2190 <ADC_Read_Value+0x92>
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
			{
				//Mask for non used bits of the 8 bits of the Regsiter
				ADMUX &= Unselected_Channel_MASK;
    2120:	a7 e2       	ldi	r26, 0x27	; 39
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e7 e2       	ldi	r30, 0x27	; 39
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	88 7f       	andi	r24, 0xF8	; 248
    212c:	8c 93       	st	X, r24

				//Mask for the usage 3 bits of the 8 bits
				ADMUX |= channel;
    212e:	a7 e2       	ldi	r26, 0x27	; 39
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e7 e2       	ldi	r30, 0x27	; 39
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	90 81       	ld	r25, Z
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	89 2b       	or	r24, r25
    213c:	8c 93       	st	X, r24

				//Set the AdcStartConversion
				SET_BIT(ADCSRA,ADSC);
    213e:	a6 e2       	ldi	r26, 0x26	; 38
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e6 e2       	ldi	r30, 0x26	; 38
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	80 64       	ori	r24, 0x40	; 64
    214a:	8c 93       	st	X, r24
		}
		else
		{
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
    214c:	e6 e2       	ldi	r30, 0x26	; 38
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	80 74       	andi	r24, 0x40	; 64
    2158:	90 70       	andi	r25, 0x00	; 0
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	09 f7       	brne	.-62     	; 0x2120 <ADC_Read_Value+0x22>
			//return the read value

			#if defined Resolution_8_Bit
				*AdcValue=ADCH;
			#elif defined Resolution_10_Bit
				AdcValue_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    215e:	e4 e2       	ldi	r30, 0x24	; 36
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	e5 e2       	ldi	r30, 0x25	; 37
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	98 2f       	mov	r25, r24
    2174:	88 27       	eor	r24, r24
    2176:	82 0f       	add	r24, r18
    2178:	93 1f       	adc	r25, r19
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
				*AdcValue = (AdcValue_Temp & Resolution_10Bit_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	93 70       	andi	r25, 0x03	; 3
    2184:	ec 81       	ldd	r30, Y+4	; 0x04
    2186:	fd 81       	ldd	r31, Y+5	; 0x05
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
			#endif
		}
	return E_NOK;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	8e 83       	std	Y+6, r24	; 0x06
    2190:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2192:	26 96       	adiw	r28, 0x06	; 6
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <ADC_ReadVolt>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_ReadVolt (u8 channel,f32 *AdcVolt)
	{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <ADC_ReadVolt+0x6>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <ADC_ReadVolt+0x8>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <ADC_ReadVolt+0xa>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	8b 83       	std	Y+3, r24	; 0x03
    21b4:	7d 83       	std	Y+5, r23	; 0x05
    21b6:	6c 83       	std	Y+4, r22	; 0x04
		u16 AdcValue_Temp=0;
    21b8:	1a 82       	std	Y+2, r1	; 0x02
    21ba:	19 82       	std	Y+1, r1	; 0x01
		if(channel>MaxPinNum)
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	88 30       	cpi	r24, 0x08	; 8
    21c0:	10 f0       	brcs	.+4      	; 0x21c6 <ADC_ReadVolt+0x22>
			{
				return E_OK;
    21c2:	1e 82       	std	Y+6, r1	; 0x06
    21c4:	2e c0       	rjmp	.+92     	; 0x2222 <ADC_ReadVolt+0x7e>
			}
		else
			{
				ADC_Read_Value(channel,&AdcValue_Temp);
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9e 01       	movw	r18, r28
    21ca:	2f 5f       	subi	r18, 0xFF	; 255
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	b9 01       	movw	r22, r18
    21d0:	0e 94 7f 10 	call	0x20fe	; 0x20fe <ADC_Read_Value>
				*AdcVolt= (((f32)AdcValue_Temp)*((f32)VREF))/((f32)(ADC_MAX));
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	cc 01       	movw	r24, r24
    21da:	a0 e0       	ldi	r26, 0x00	; 0
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 ea       	ldi	r20, 0xA0	; 160
    21f4:	50 e4       	ldi	r21, 0x40	; 64
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e8       	ldi	r20, 0x80	; 128
    2208:	54 e4       	ldi	r21, 0x44	; 68
    220a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	ec 81       	ldd	r30, Y+4	; 0x04
    2214:	fd 81       	ldd	r31, Y+5	; 0x05
    2216:	80 83       	st	Z, r24
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	a2 83       	std	Z+2, r26	; 0x02
    221c:	b3 83       	std	Z+3, r27	; 0x03
			}
		return E_NOK;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	8e 83       	std	Y+6, r24	; 0x06
    2222:	8e 81       	ldd	r24, Y+6	; 0x06
	}
    2224:	26 96       	adiw	r28, 0x06	; 6
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <ADC_CallBack>:
 * 
 * @param func_ptr 		 :		pointer to function that points to the user/ External function
 * @return void			 : 		return nothing
 **/
void ADC_CallBack(void (*func_ptr)(void))
	{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <ADC_CallBack+0x6>
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
		User_Function = func_ptr;
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	90 93 89 01 	sts	0x0189, r25
    224c:	80 93 88 01 	sts	0x0188, r24
	}
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <__vector_16>:
/*********************************ISR ADC Vector******************************************************/
ISR(ADC_Vect)
{
    225a:	1f 92       	push	r1
    225c:	0f 92       	push	r0
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	0f 92       	push	r0
    2262:	11 24       	eor	r1, r1
    2264:	2f 93       	push	r18
    2266:	3f 93       	push	r19
    2268:	4f 93       	push	r20
    226a:	5f 93       	push	r21
    226c:	6f 93       	push	r22
    226e:	7f 93       	push	r23
    2270:	8f 93       	push	r24
    2272:	9f 93       	push	r25
    2274:	af 93       	push	r26
    2276:	bf 93       	push	r27
    2278:	ef 93       	push	r30
    227a:	ff 93       	push	r31
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
	(*User_Function)();
    2284:	e0 91 88 01 	lds	r30, 0x0188
    2288:	f0 91 89 01 	lds	r31, 0x0189
    228c:	09 95       	icall
}
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	ff 91       	pop	r31
    2294:	ef 91       	pop	r30
    2296:	bf 91       	pop	r27
    2298:	af 91       	pop	r26
    229a:	9f 91       	pop	r25
    229c:	8f 91       	pop	r24
    229e:	7f 91       	pop	r23
    22a0:	6f 91       	pop	r22
    22a2:	5f 91       	pop	r21
    22a4:	4f 91       	pop	r20
    22a6:	3f 91       	pop	r19
    22a8:	2f 91       	pop	r18
    22aa:	0f 90       	pop	r0
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	0f 90       	pop	r0
    22b0:	1f 90       	pop	r1
    22b2:	18 95       	reti

000022b4 <TimingSelection>:
 * @param TYPE 						: takes the sevensegment types CommonAnode/CommonCathode
 * @param Time 						: take which time will activated Sec01/Sec10/Min01/Min10			
 * @return STD_Return 
 */
STD_Return TimingSelection(u8 StopWatch_ControlPort,SevenSegment_Type_t TYPE,SevenSegment_Sel_t Time)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	2a 97       	sbiw	r28, 0x0a	; 10
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	6a 83       	std	Y+2, r22	; 0x02
    22cc:	4b 83       	std	Y+3, r20	; 0x03
	#ifdef StopWatch_ControlPort_A
	switch(TYPE)
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	3a 87       	std	Y+10, r19	; 0x0a
    22d6:	29 87       	std	Y+9, r18	; 0x09
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	39 f0       	breq	.+14     	; 0x22ee <TimingSelection+0x3a>
    22e0:	29 85       	ldd	r18, Y+9	; 0x09
    22e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    22e4:	21 30       	cpi	r18, 0x01	; 1
    22e6:	31 05       	cpc	r19, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <TimingSelection+0x38>
    22ea:	77 c0       	rjmp	.+238    	; 0x23da <TimingSelection+0x126>
    22ec:	ec c0       	rjmp	.+472    	; 0x24c6 <TimingSelection+0x212>
	{
		case CommonCathod:
			switch(Time)
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	38 87       	std	Y+8, r19	; 0x08
    22f6:	2f 83       	std	Y+7, r18	; 0x07
    22f8:	8f 81       	ldd	r24, Y+7	; 0x07
    22fa:	98 85       	ldd	r25, Y+8	; 0x08
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	91 05       	cpc	r25, r1
    2300:	59 f1       	breq	.+86     	; 0x2358 <TimingSelection+0xa4>
    2302:	2f 81       	ldd	r18, Y+7	; 0x07
    2304:	38 85       	ldd	r19, Y+8	; 0x08
    2306:	22 30       	cpi	r18, 0x02	; 2
    2308:	31 05       	cpc	r19, r1
    230a:	2c f4       	brge	.+10     	; 0x2316 <TimingSelection+0x62>
    230c:	8f 81       	ldd	r24, Y+7	; 0x07
    230e:	98 85       	ldd	r25, Y+8	; 0x08
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f0       	breq	.+26     	; 0x232e <TimingSelection+0x7a>
    2314:	60 c0       	rjmp	.+192    	; 0x23d6 <TimingSelection+0x122>
    2316:	2f 81       	ldd	r18, Y+7	; 0x07
    2318:	38 85       	ldd	r19, Y+8	; 0x08
    231a:	22 30       	cpi	r18, 0x02	; 2
    231c:	31 05       	cpc	r19, r1
    231e:	89 f1       	breq	.+98     	; 0x2382 <TimingSelection+0xce>
    2320:	8f 81       	ldd	r24, Y+7	; 0x07
    2322:	98 85       	ldd	r25, Y+8	; 0x08
    2324:	83 30       	cpi	r24, 0x03	; 3
    2326:	91 05       	cpc	r25, r1
    2328:	09 f4       	brne	.+2      	; 0x232c <TimingSelection+0x78>
    232a:	40 c0       	rjmp	.+128    	; 0x23ac <TimingSelection+0xf8>
    232c:	54 c0       	rjmp	.+168    	; 0x23d6 <TimingSelection+0x122>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	41 e0       	ldi	r20, 0x01	; 1
    2348:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	61 e0       	ldi	r22, 0x01	; 1
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2356:	b9 c0       	rjmp	.+370    	; 0x24ca <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	61 e0       	ldi	r22, 0x01	; 1
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2380:	a4 c0       	rjmp	.+328    	; 0x24ca <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	61 e0       	ldi	r22, 0x01	; 1
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	60 e0       	ldi	r22, 0x00	; 0
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	61 e0       	ldi	r22, 0x01	; 1
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    23aa:	8f c0       	rjmp	.+286    	; 0x24ca <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	61 e0       	ldi	r22, 0x01	; 1
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	61 e0       	ldi	r22, 0x01	; 1
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    23d4:	7a c0       	rjmp	.+244    	; 0x24ca <TimingSelection+0x216>
						break;
					default: return E_OK;
    23d6:	1e 82       	std	Y+6, r1	; 0x06
    23d8:	7a c0       	rjmp	.+244    	; 0x24ce <TimingSelection+0x21a>
				}
		break;
		case CommonAnode:
			switch(Time)
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	3d 83       	std	Y+5, r19	; 0x05
    23e2:	2c 83       	std	Y+4, r18	; 0x04
    23e4:	8c 81       	ldd	r24, Y+4	; 0x04
    23e6:	9d 81       	ldd	r25, Y+5	; 0x05
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	91 05       	cpc	r25, r1
    23ec:	59 f1       	breq	.+86     	; 0x2444 <TimingSelection+0x190>
    23ee:	2c 81       	ldd	r18, Y+4	; 0x04
    23f0:	3d 81       	ldd	r19, Y+5	; 0x05
    23f2:	22 30       	cpi	r18, 0x02	; 2
    23f4:	31 05       	cpc	r19, r1
    23f6:	2c f4       	brge	.+10     	; 0x2402 <TimingSelection+0x14e>
    23f8:	8c 81       	ldd	r24, Y+4	; 0x04
    23fa:	9d 81       	ldd	r25, Y+5	; 0x05
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f0       	breq	.+26     	; 0x241a <TimingSelection+0x166>
    2400:	60 c0       	rjmp	.+192    	; 0x24c2 <TimingSelection+0x20e>
    2402:	2c 81       	ldd	r18, Y+4	; 0x04
    2404:	3d 81       	ldd	r19, Y+5	; 0x05
    2406:	22 30       	cpi	r18, 0x02	; 2
    2408:	31 05       	cpc	r19, r1
    240a:	89 f1       	breq	.+98     	; 0x246e <TimingSelection+0x1ba>
    240c:	8c 81       	ldd	r24, Y+4	; 0x04
    240e:	9d 81       	ldd	r25, Y+5	; 0x05
    2410:	83 30       	cpi	r24, 0x03	; 3
    2412:	91 05       	cpc	r25, r1
    2414:	09 f4       	brne	.+2      	; 0x2418 <TimingSelection+0x164>
    2416:	40 c0       	rjmp	.+128    	; 0x2498 <TimingSelection+0x1e4>
    2418:	54 c0       	rjmp	.+168    	; 0x24c2 <TimingSelection+0x20e>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	61 e0       	ldi	r22, 0x01	; 1
    2428:	41 e0       	ldi	r20, 0x01	; 1
    242a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	61 e0       	ldi	r22, 0x01	; 1
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2442:	43 c0       	rjmp	.+134    	; 0x24ca <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	61 e0       	ldi	r22, 0x01	; 1
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    246c:	2e c0       	rjmp	.+92     	; 0x24ca <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	61 e0       	ldi	r22, 0x01	; 1
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2496:	19 c0       	rjmp	.+50     	; 0x24ca <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	41 e0       	ldi	r20, 0x01	; 1
    24bc:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <TimingSelection+0x216>
						break;
					default: return E_OK;
    24c2:	1e 82       	std	Y+6, r1	; 0x06
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <TimingSelection+0x21a>
				}
		break;
		default:
		return E_OK;
    24c6:	1e 82       	std	Y+6, r1	; 0x06
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <TimingSelection+0x21a>
			break;
			default:
			return E_OK;
		}
#endif
	return E_NOK;
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8e 81       	ldd	r24, Y+6	; 0x06
}
    24d0:	2a 96       	adiw	r28, 0x0a	; 10
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <SevenSegment_Display>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return SevenSegment_Display(DIO_Ports_t PORT,SevenSegment_Type_t TYPE,Display_Number_t NUM)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	6e 97       	sbiw	r28, 0x1e	; 30
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	6a 83       	std	Y+2, r22	; 0x02
    24fa:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT)
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	3e 8f       	std	Y+30, r19	; 0x1e
    2504:	2d 8f       	std	Y+29, r18	; 0x1d
    2506:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2508:	9e 8d       	ldd	r25, Y+30	; 0x1e
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	91 05       	cpc	r25, r1
    250e:	09 f4       	brne	.+2      	; 0x2512 <SevenSegment_Display+0x30>
    2510:	4f c2       	rjmp	.+1182   	; 0x29b0 <SevenSegment_Display+0x4ce>
    2512:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2514:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2516:	22 30       	cpi	r18, 0x02	; 2
    2518:	31 05       	cpc	r19, r1
    251a:	34 f4       	brge	.+12     	; 0x2528 <SevenSegment_Display+0x46>
    251c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	81 f0       	breq	.+32     	; 0x2544 <SevenSegment_Display+0x62>
    2524:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <SevenSegment_Display+0x11ca>
    2528:	2d 8d       	ldd	r18, Y+29	; 0x1d
    252a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    252c:	22 30       	cpi	r18, 0x02	; 2
    252e:	31 05       	cpc	r19, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <SevenSegment_Display+0x52>
    2532:	68 c4       	rjmp	.+2256   	; 0x2e04 <SevenSegment_Display+0x922>
    2534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2536:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2538:	83 30       	cpi	r24, 0x03	; 3
    253a:	91 05       	cpc	r25, r1
    253c:	09 f4       	brne	.+2      	; 0x2540 <SevenSegment_Display+0x5e>
    253e:	8c c6       	rjmp	.+3352   	; 0x3258 <SevenSegment_Display+0xd76>
    2540:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <SevenSegment_Display+0x11ca>
	{
		case DIO_PORTA:
		switch(TYPE)
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	3c 8f       	std	Y+28, r19	; 0x1c
    254c:	2b 8f       	std	Y+27, r18	; 0x1b
    254e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2550:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	39 f0       	breq	.+14     	; 0x2564 <SevenSegment_Display+0x82>
    2556:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2558:	3c 8d       	ldd	r19, Y+28	; 0x1c
    255a:	21 30       	cpi	r18, 0x01	; 1
    255c:	31 05       	cpc	r19, r1
    255e:	09 f4       	brne	.+2      	; 0x2562 <SevenSegment_Display+0x80>
    2560:	18 c1       	rjmp	.+560    	; 0x2792 <SevenSegment_Display+0x2b0>
    2562:	24 c2       	rjmp	.+1096   	; 0x29ac <SevenSegment_Display+0x4ca>
			{
				case CommonCathod:
					DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	6f ef       	ldi	r22, 0xFF	; 255
    2568:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_LOW);
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	67 e0       	ldi	r22, 0x07	; 7
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
					switch(NUM)
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	3a 8f       	std	Y+26, r19	; 0x1a
    257e:	29 8f       	std	Y+25, r18	; 0x19
    2580:	89 8d       	ldd	r24, Y+25	; 0x19
    2582:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2584:	84 30       	cpi	r24, 0x04	; 4
    2586:	91 05       	cpc	r25, r1
    2588:	09 f4       	brne	.+2      	; 0x258c <SevenSegment_Display+0xaa>
    258a:	92 c0       	rjmp	.+292    	; 0x26b0 <SevenSegment_Display+0x1ce>
    258c:	29 8d       	ldd	r18, Y+25	; 0x19
    258e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2590:	25 30       	cpi	r18, 0x05	; 5
    2592:	31 05       	cpc	r19, r1
    2594:	ec f4       	brge	.+58     	; 0x25d0 <SevenSegment_Display+0xee>
    2596:	89 8d       	ldd	r24, Y+25	; 0x19
    2598:	9a 8d       	ldd	r25, Y+26	; 0x1a
    259a:	81 30       	cpi	r24, 0x01	; 1
    259c:	91 05       	cpc	r25, r1
    259e:	09 f4       	brne	.+2      	; 0x25a2 <SevenSegment_Display+0xc0>
    25a0:	4b c0       	rjmp	.+150    	; 0x2638 <SevenSegment_Display+0x156>
    25a2:	29 8d       	ldd	r18, Y+25	; 0x19
    25a4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    25a6:	22 30       	cpi	r18, 0x02	; 2
    25a8:	31 05       	cpc	r19, r1
    25aa:	2c f4       	brge	.+10     	; 0x25b6 <SevenSegment_Display+0xd4>
    25ac:	89 8d       	ldd	r24, Y+25	; 0x19
    25ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	99 f1       	breq	.+102    	; 0x261a <SevenSegment_Display+0x138>
    25b4:	eb c0       	rjmp	.+470    	; 0x278c <SevenSegment_Display+0x2aa>
    25b6:	29 8d       	ldd	r18, Y+25	; 0x19
    25b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    25ba:	22 30       	cpi	r18, 0x02	; 2
    25bc:	31 05       	cpc	r19, r1
    25be:	09 f4       	brne	.+2      	; 0x25c2 <SevenSegment_Display+0xe0>
    25c0:	4f c0       	rjmp	.+158    	; 0x2660 <SevenSegment_Display+0x17e>
    25c2:	89 8d       	ldd	r24, Y+25	; 0x19
    25c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25c6:	83 30       	cpi	r24, 0x03	; 3
    25c8:	91 05       	cpc	r25, r1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <SevenSegment_Display+0xec>
    25cc:	5d c0       	rjmp	.+186    	; 0x2688 <SevenSegment_Display+0x1a6>
    25ce:	de c0       	rjmp	.+444    	; 0x278c <SevenSegment_Display+0x2aa>
    25d0:	29 8d       	ldd	r18, Y+25	; 0x19
    25d2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    25d4:	27 30       	cpi	r18, 0x07	; 7
    25d6:	31 05       	cpc	r19, r1
    25d8:	09 f4       	brne	.+2      	; 0x25dc <SevenSegment_Display+0xfa>
    25da:	a6 c0       	rjmp	.+332    	; 0x2728 <SevenSegment_Display+0x246>
    25dc:	89 8d       	ldd	r24, Y+25	; 0x19
    25de:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25e0:	88 30       	cpi	r24, 0x08	; 8
    25e2:	91 05       	cpc	r25, r1
    25e4:	6c f4       	brge	.+26     	; 0x2600 <SevenSegment_Display+0x11e>
    25e6:	29 8d       	ldd	r18, Y+25	; 0x19
    25e8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    25ea:	25 30       	cpi	r18, 0x05	; 5
    25ec:	31 05       	cpc	r19, r1
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <SevenSegment_Display+0x110>
    25f0:	78 c0       	rjmp	.+240    	; 0x26e2 <SevenSegment_Display+0x200>
    25f2:	89 8d       	ldd	r24, Y+25	; 0x19
    25f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25f6:	86 30       	cpi	r24, 0x06	; 6
    25f8:	91 05       	cpc	r25, r1
    25fa:	09 f4       	brne	.+2      	; 0x25fe <SevenSegment_Display+0x11c>
    25fc:	86 c0       	rjmp	.+268    	; 0x270a <SevenSegment_Display+0x228>
    25fe:	c6 c0       	rjmp	.+396    	; 0x278c <SevenSegment_Display+0x2aa>
    2600:	29 8d       	ldd	r18, Y+25	; 0x19
    2602:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2604:	28 30       	cpi	r18, 0x08	; 8
    2606:	31 05       	cpc	r19, r1
    2608:	09 f4       	brne	.+2      	; 0x260c <SevenSegment_Display+0x12a>
    260a:	a7 c0       	rjmp	.+334    	; 0x275a <SevenSegment_Display+0x278>
    260c:	89 8d       	ldd	r24, Y+25	; 0x19
    260e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2610:	89 30       	cpi	r24, 0x09	; 9
    2612:	91 05       	cpc	r25, r1
    2614:	09 f4       	brne	.+2      	; 0x2618 <SevenSegment_Display+0x136>
    2616:	ab c0       	rjmp	.+342    	; 0x276e <SevenSegment_Display+0x28c>
    2618:	b9 c0       	rjmp	.+370    	; 0x278c <SevenSegment_Display+0x2aa>
						{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	6f ef       	ldi	r22, 0xFF	; 255
    261e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	6f ef       	ldi	r22, 0xFF	; 255
    2626:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_LOW);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	66 e0       	ldi	r22, 0x06	; 6
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2634:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	6f ef       	ldi	r22, 0xFF	; 255
    263c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	61 e0       	ldi	r22, 0x01	; 1
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	62 e0       	ldi	r22, 0x02	; 2
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    265c:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	6f ef       	ldi	r22, 0xFF	; 255
    2664:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	6f ef       	ldi	r22, 0xFF	; 255
    266c:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	62 e0       	ldi	r22, 0x02	; 2
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	65 e0       	ldi	r22, 0x05	; 5
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2684:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	6f ef       	ldi	r22, 0xFF	; 255
    268c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	6f ef       	ldi	r22, 0xFF	; 255
    2694:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	64 e0       	ldi	r22, 0x04	; 4
    269c:	40 e0       	ldi	r20, 0x00	; 0
    269e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	65 e0       	ldi	r22, 0x05	; 5
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    26ac:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	6f ef       	ldi	r22, 0xFF	; 255
    26b4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	6f ef       	ldi	r22, 0xFF	; 255
    26bc:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_LOW);
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	63 e0       	ldi	r22, 0x03	; 3
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	64 e0       	ldi	r22, 0x04	; 4
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    26de:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	6f ef       	ldi	r22, 0xFF	; 255
    26e6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	6f ef       	ldi	r22, 0xFF	; 255
    26ee:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	61 e0       	ldi	r22, 0x01	; 1
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	64 e0       	ldi	r22, 0x04	; 4
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2706:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	6f ef       	ldi	r22, 0xFF	; 255
    270e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	6f ef       	ldi	r22, 0xFF	; 255
    2716:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	61 e0       	ldi	r22, 0x01	; 1
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2724:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	6f ef       	ldi	r22, 0xFF	; 255
    272c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	61 e0       	ldi	r22, 0x01	; 1
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	62 e0       	ldi	r22, 0x02	; 2
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2756:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	6f ef       	ldi	r22, 0xFF	; 255
    275e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	6f ef       	ldi	r22, 0xFF	; 255
    2766:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
    276a:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	6f ef       	ldi	r22, 0xFF	; 255
    2772:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	6f ef       	ldi	r22, 0xFF	; 255
    277a:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	64 e0       	ldi	r22, 0x04	; 4
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2788:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    278c:	18 8e       	std	Y+24, r1	; 0x18
    278e:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <SevenSegment_Display+0x11d2>
					}
					break;
			case CommonAnode:
				DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	6f ef       	ldi	r22, 0xFF	; 255
    2796:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
				DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_HIGH);
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	67 e0       	ldi	r22, 0x07	; 7
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
				switch(NUM)
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	3f 8b       	std	Y+23, r19	; 0x17
    27ac:	2e 8b       	std	Y+22, r18	; 0x16
    27ae:	8e 89       	ldd	r24, Y+22	; 0x16
    27b0:	9f 89       	ldd	r25, Y+23	; 0x17
    27b2:	84 30       	cpi	r24, 0x04	; 4
    27b4:	91 05       	cpc	r25, r1
    27b6:	09 f4       	brne	.+2      	; 0x27ba <SevenSegment_Display+0x2d8>
    27b8:	8f c0       	rjmp	.+286    	; 0x28d8 <SevenSegment_Display+0x3f6>
    27ba:	2e 89       	ldd	r18, Y+22	; 0x16
    27bc:	3f 89       	ldd	r19, Y+23	; 0x17
    27be:	25 30       	cpi	r18, 0x05	; 5
    27c0:	31 05       	cpc	r19, r1
    27c2:	ec f4       	brge	.+58     	; 0x27fe <SevenSegment_Display+0x31c>
    27c4:	8e 89       	ldd	r24, Y+22	; 0x16
    27c6:	9f 89       	ldd	r25, Y+23	; 0x17
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	91 05       	cpc	r25, r1
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <SevenSegment_Display+0x2ee>
    27ce:	4b c0       	rjmp	.+150    	; 0x2866 <SevenSegment_Display+0x384>
    27d0:	2e 89       	ldd	r18, Y+22	; 0x16
    27d2:	3f 89       	ldd	r19, Y+23	; 0x17
    27d4:	22 30       	cpi	r18, 0x02	; 2
    27d6:	31 05       	cpc	r19, r1
    27d8:	2c f4       	brge	.+10     	; 0x27e4 <SevenSegment_Display+0x302>
    27da:	8e 89       	ldd	r24, Y+22	; 0x16
    27dc:	9f 89       	ldd	r25, Y+23	; 0x17
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	99 f1       	breq	.+102    	; 0x2848 <SevenSegment_Display+0x366>
    27e2:	e2 c0       	rjmp	.+452    	; 0x29a8 <SevenSegment_Display+0x4c6>
    27e4:	2e 89       	ldd	r18, Y+22	; 0x16
    27e6:	3f 89       	ldd	r19, Y+23	; 0x17
    27e8:	22 30       	cpi	r18, 0x02	; 2
    27ea:	31 05       	cpc	r19, r1
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <SevenSegment_Display+0x30e>
    27ee:	4e c0       	rjmp	.+156    	; 0x288c <SevenSegment_Display+0x3aa>
    27f0:	8e 89       	ldd	r24, Y+22	; 0x16
    27f2:	9f 89       	ldd	r25, Y+23	; 0x17
    27f4:	83 30       	cpi	r24, 0x03	; 3
    27f6:	91 05       	cpc	r25, r1
    27f8:	09 f4       	brne	.+2      	; 0x27fc <SevenSegment_Display+0x31a>
    27fa:	5b c0       	rjmp	.+182    	; 0x28b2 <SevenSegment_Display+0x3d0>
    27fc:	d5 c0       	rjmp	.+426    	; 0x29a8 <SevenSegment_Display+0x4c6>
    27fe:	2e 89       	ldd	r18, Y+22	; 0x16
    2800:	3f 89       	ldd	r19, Y+23	; 0x17
    2802:	27 30       	cpi	r18, 0x07	; 7
    2804:	31 05       	cpc	r19, r1
    2806:	09 f4       	brne	.+2      	; 0x280a <SevenSegment_Display+0x328>
    2808:	a0 c0       	rjmp	.+320    	; 0x294a <SevenSegment_Display+0x468>
    280a:	8e 89       	ldd	r24, Y+22	; 0x16
    280c:	9f 89       	ldd	r25, Y+23	; 0x17
    280e:	88 30       	cpi	r24, 0x08	; 8
    2810:	91 05       	cpc	r25, r1
    2812:	6c f4       	brge	.+26     	; 0x282e <SevenSegment_Display+0x34c>
    2814:	2e 89       	ldd	r18, Y+22	; 0x16
    2816:	3f 89       	ldd	r19, Y+23	; 0x17
    2818:	25 30       	cpi	r18, 0x05	; 5
    281a:	31 05       	cpc	r19, r1
    281c:	09 f4       	brne	.+2      	; 0x2820 <SevenSegment_Display+0x33e>
    281e:	74 c0       	rjmp	.+232    	; 0x2908 <SevenSegment_Display+0x426>
    2820:	8e 89       	ldd	r24, Y+22	; 0x16
    2822:	9f 89       	ldd	r25, Y+23	; 0x17
    2824:	86 30       	cpi	r24, 0x06	; 6
    2826:	91 05       	cpc	r25, r1
    2828:	09 f4       	brne	.+2      	; 0x282c <SevenSegment_Display+0x34a>
    282a:	81 c0       	rjmp	.+258    	; 0x292e <SevenSegment_Display+0x44c>
    282c:	bd c0       	rjmp	.+378    	; 0x29a8 <SevenSegment_Display+0x4c6>
    282e:	2e 89       	ldd	r18, Y+22	; 0x16
    2830:	3f 89       	ldd	r19, Y+23	; 0x17
    2832:	28 30       	cpi	r18, 0x08	; 8
    2834:	31 05       	cpc	r19, r1
    2836:	09 f4       	brne	.+2      	; 0x283a <SevenSegment_Display+0x358>
    2838:	a0 c0       	rjmp	.+320    	; 0x297a <SevenSegment_Display+0x498>
    283a:	8e 89       	ldd	r24, Y+22	; 0x16
    283c:	9f 89       	ldd	r25, Y+23	; 0x17
    283e:	89 30       	cpi	r24, 0x09	; 9
    2840:	91 05       	cpc	r25, r1
    2842:	09 f4       	brne	.+2      	; 0x2846 <SevenSegment_Display+0x364>
    2844:	a3 c0       	rjmp	.+326    	; 0x298c <SevenSegment_Display+0x4aa>
    2846:	b0 c0       	rjmp	.+352    	; 0x29a8 <SevenSegment_Display+0x4c6>
					{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	6f ef       	ldi	r22, 0xFF	; 255
    284c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_HIGH);
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	66 e0       	ldi	r22, 0x06	; 6
    285c:	41 e0       	ldi	r20, 0x01	; 1
    285e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2862:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	6f ef       	ldi	r22, 0xFF	; 255
    286a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	6f ef       	ldi	r22, 0xFF	; 255
    2872:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	62 e0       	ldi	r22, 0x02	; 2
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    288a:	12 c7       	rjmp	.+3620   	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	6f ef       	ldi	r22, 0xFF	; 255
    2890:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	60 e0       	ldi	r22, 0x00	; 0
    2898:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	62 e0       	ldi	r22, 0x02	; 2
    28a0:	41 e0       	ldi	r20, 0x01	; 1
    28a2:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	65 e0       	ldi	r22, 0x05	; 5
    28aa:	41 e0       	ldi	r20, 0x01	; 1
    28ac:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    28b0:	ff c6       	rjmp	.+3582   	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	6f ef       	ldi	r22, 0xFF	; 255
    28b6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	64 e0       	ldi	r22, 0x04	; 4
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	65 e0       	ldi	r22, 0x05	; 5
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    28d6:	ec c6       	rjmp	.+3544   	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	6f ef       	ldi	r22, 0xFF	; 255
    28dc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	41 e0       	ldi	r20, 0x01	; 1
    28ee:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_HIGH);
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	63 e0       	ldi	r22, 0x03	; 3
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	64 e0       	ldi	r22, 0x04	; 4
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2906:	d4 c6       	rjmp	.+3496   	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	6f ef       	ldi	r22, 0xFF	; 255
    290c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	61 e0       	ldi	r22, 0x01	; 1
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	64 e0       	ldi	r22, 0x04	; 4
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    292c:	c1 c6       	rjmp	.+3458   	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	6f ef       	ldi	r22, 0xFF	; 255
    2932:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	61 e0       	ldi	r22, 0x01	; 1
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2948:	b3 c6       	rjmp	.+3430   	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	6f ef       	ldi	r22, 0xFF	; 255
    294e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	6f ef       	ldi	r22, 0xFF	; 255
    2956:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	62 e0       	ldi	r22, 0x02	; 2
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2978:	9b c6       	rjmp	.+3382   	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	6f ef       	ldi	r22, 0xFF	; 255
    297e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	60 e0       	ldi	r22, 0x00	; 0
    2986:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
    298a:	92 c6       	rjmp	.+3364   	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	6f ef       	ldi	r22, 0xFF	; 255
    2990:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	64 e0       	ldi	r22, 0x04	; 4
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    29a6:	84 c6       	rjmp	.+3336   	; 0x36b0 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    29a8:	18 8e       	std	Y+24, r1	; 0x18
    29aa:	84 c6       	rjmp	.+3336   	; 0x36b4 <SevenSegment_Display+0x11d2>
					}
			break;
			default:
			return E_OK;
    29ac:	18 8e       	std	Y+24, r1	; 0x18
    29ae:	82 c6       	rjmp	.+3332   	; 0x36b4 <SevenSegment_Display+0x11d2>
		}
		break;
		case DIO_PORTB:
			switch(TYPE)
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	3d 8b       	std	Y+21, r19	; 0x15
    29b8:	2c 8b       	std	Y+20, r18	; 0x14
    29ba:	8c 89       	ldd	r24, Y+20	; 0x14
    29bc:	9d 89       	ldd	r25, Y+21	; 0x15
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	39 f0       	breq	.+14     	; 0x29d0 <SevenSegment_Display+0x4ee>
    29c2:	2c 89       	ldd	r18, Y+20	; 0x14
    29c4:	3d 89       	ldd	r19, Y+21	; 0x15
    29c6:	21 30       	cpi	r18, 0x01	; 1
    29c8:	31 05       	cpc	r19, r1
    29ca:	09 f4       	brne	.+2      	; 0x29ce <SevenSegment_Display+0x4ec>
    29cc:	0d c1       	rjmp	.+538    	; 0x2be8 <SevenSegment_Display+0x706>
    29ce:	18 c2       	rjmp	.+1072   	; 0x2e00 <SevenSegment_Display+0x91e>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	6f ef       	ldi	r22, 0xFF	; 255
    29d4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_LOW);
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	67 e0       	ldi	r22, 0x07	; 7
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						switch(NUM)
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	3b 8b       	std	Y+19, r19	; 0x13
    29ea:	2a 8b       	std	Y+18, r18	; 0x12
    29ec:	8a 89       	ldd	r24, Y+18	; 0x12
    29ee:	9b 89       	ldd	r25, Y+19	; 0x13
    29f0:	84 30       	cpi	r24, 0x04	; 4
    29f2:	91 05       	cpc	r25, r1
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <SevenSegment_Display+0x516>
    29f6:	8e c0       	rjmp	.+284    	; 0x2b14 <SevenSegment_Display+0x632>
    29f8:	2a 89       	ldd	r18, Y+18	; 0x12
    29fa:	3b 89       	ldd	r19, Y+19	; 0x13
    29fc:	25 30       	cpi	r18, 0x05	; 5
    29fe:	31 05       	cpc	r19, r1
    2a00:	ec f4       	brge	.+58     	; 0x2a3c <SevenSegment_Display+0x55a>
    2a02:	8a 89       	ldd	r24, Y+18	; 0x12
    2a04:	9b 89       	ldd	r25, Y+19	; 0x13
    2a06:	81 30       	cpi	r24, 0x01	; 1
    2a08:	91 05       	cpc	r25, r1
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <SevenSegment_Display+0x52c>
    2a0c:	4a c0       	rjmp	.+148    	; 0x2aa2 <SevenSegment_Display+0x5c0>
    2a0e:	2a 89       	ldd	r18, Y+18	; 0x12
    2a10:	3b 89       	ldd	r19, Y+19	; 0x13
    2a12:	22 30       	cpi	r18, 0x02	; 2
    2a14:	31 05       	cpc	r19, r1
    2a16:	2c f4       	brge	.+10     	; 0x2a22 <SevenSegment_Display+0x540>
    2a18:	8a 89       	ldd	r24, Y+18	; 0x12
    2a1a:	9b 89       	ldd	r25, Y+19	; 0x13
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	99 f1       	breq	.+102    	; 0x2a86 <SevenSegment_Display+0x5a4>
    2a20:	e1 c0       	rjmp	.+450    	; 0x2be4 <SevenSegment_Display+0x702>
    2a22:	2a 89       	ldd	r18, Y+18	; 0x12
    2a24:	3b 89       	ldd	r19, Y+19	; 0x13
    2a26:	22 30       	cpi	r18, 0x02	; 2
    2a28:	31 05       	cpc	r19, r1
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <SevenSegment_Display+0x54c>
    2a2c:	4d c0       	rjmp	.+154    	; 0x2ac8 <SevenSegment_Display+0x5e6>
    2a2e:	8a 89       	ldd	r24, Y+18	; 0x12
    2a30:	9b 89       	ldd	r25, Y+19	; 0x13
    2a32:	83 30       	cpi	r24, 0x03	; 3
    2a34:	91 05       	cpc	r25, r1
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <SevenSegment_Display+0x558>
    2a38:	5a c0       	rjmp	.+180    	; 0x2aee <SevenSegment_Display+0x60c>
    2a3a:	d4 c0       	rjmp	.+424    	; 0x2be4 <SevenSegment_Display+0x702>
    2a3c:	2a 89       	ldd	r18, Y+18	; 0x12
    2a3e:	3b 89       	ldd	r19, Y+19	; 0x13
    2a40:	27 30       	cpi	r18, 0x07	; 7
    2a42:	31 05       	cpc	r19, r1
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <SevenSegment_Display+0x566>
    2a46:	9f c0       	rjmp	.+318    	; 0x2b86 <SevenSegment_Display+0x6a4>
    2a48:	8a 89       	ldd	r24, Y+18	; 0x12
    2a4a:	9b 89       	ldd	r25, Y+19	; 0x13
    2a4c:	88 30       	cpi	r24, 0x08	; 8
    2a4e:	91 05       	cpc	r25, r1
    2a50:	6c f4       	brge	.+26     	; 0x2a6c <SevenSegment_Display+0x58a>
    2a52:	2a 89       	ldd	r18, Y+18	; 0x12
    2a54:	3b 89       	ldd	r19, Y+19	; 0x13
    2a56:	25 30       	cpi	r18, 0x05	; 5
    2a58:	31 05       	cpc	r19, r1
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <SevenSegment_Display+0x57c>
    2a5c:	73 c0       	rjmp	.+230    	; 0x2b44 <SevenSegment_Display+0x662>
    2a5e:	8a 89       	ldd	r24, Y+18	; 0x12
    2a60:	9b 89       	ldd	r25, Y+19	; 0x13
    2a62:	86 30       	cpi	r24, 0x06	; 6
    2a64:	91 05       	cpc	r25, r1
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <SevenSegment_Display+0x588>
    2a68:	80 c0       	rjmp	.+256    	; 0x2b6a <SevenSegment_Display+0x688>
    2a6a:	bc c0       	rjmp	.+376    	; 0x2be4 <SevenSegment_Display+0x702>
    2a6c:	2a 89       	ldd	r18, Y+18	; 0x12
    2a6e:	3b 89       	ldd	r19, Y+19	; 0x13
    2a70:	28 30       	cpi	r18, 0x08	; 8
    2a72:	31 05       	cpc	r19, r1
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <SevenSegment_Display+0x596>
    2a76:	9f c0       	rjmp	.+318    	; 0x2bb6 <SevenSegment_Display+0x6d4>
    2a78:	8a 89       	ldd	r24, Y+18	; 0x12
    2a7a:	9b 89       	ldd	r25, Y+19	; 0x13
    2a7c:	89 30       	cpi	r24, 0x09	; 9
    2a7e:	91 05       	cpc	r25, r1
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <SevenSegment_Display+0x5a2>
    2a82:	a2 c0       	rjmp	.+324    	; 0x2bc8 <SevenSegment_Display+0x6e6>
    2a84:	af c0       	rjmp	.+350    	; 0x2be4 <SevenSegment_Display+0x702>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	6f ef       	ldi	r22, 0xFF	; 255
    2a8a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	6f ef       	ldi	r22, 0xFF	; 255
    2a92:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_LOW);
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	66 e0       	ldi	r22, 0x06	; 6
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2aa0:	07 c6       	rjmp	.+3086   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	6f ef       	ldi	r22, 0xFF	; 255
    2aa6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	62 e0       	ldi	r22, 0x02	; 2
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2ac6:	f4 c5       	rjmp	.+3048   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	6f ef       	ldi	r22, 0xFF	; 255
    2acc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	6f ef       	ldi	r22, 0xFF	; 255
    2ad4:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	62 e0       	ldi	r22, 0x02	; 2
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	65 e0       	ldi	r22, 0x05	; 5
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2aec:	e1 c5       	rjmp	.+3010   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	6f ef       	ldi	r22, 0xFF	; 255
    2af2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	6f ef       	ldi	r22, 0xFF	; 255
    2afa:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	64 e0       	ldi	r22, 0x04	; 4
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	65 e0       	ldi	r22, 0x05	; 5
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2b12:	ce c5       	rjmp	.+2972   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	6f ef       	ldi	r22, 0xFF	; 255
    2b18:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	6f ef       	ldi	r22, 0xFF	; 255
    2b20:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	60 e0       	ldi	r22, 0x00	; 0
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_LOW);
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	63 e0       	ldi	r22, 0x03	; 3
    2b32:	40 e0       	ldi	r20, 0x00	; 0
    2b34:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	64 e0       	ldi	r22, 0x04	; 4
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2b42:	b6 c5       	rjmp	.+2924   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	6f ef       	ldi	r22, 0xFF	; 255
    2b48:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	6f ef       	ldi	r22, 0xFF	; 255
    2b50:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	64 e0       	ldi	r22, 0x04	; 4
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2b68:	a3 c5       	rjmp	.+2886   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	6f ef       	ldi	r22, 0xFF	; 255
    2b6e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	6f ef       	ldi	r22, 0xFF	; 255
    2b76:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2b84:	95 c5       	rjmp	.+2858   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	6f ef       	ldi	r22, 0xFF	; 255
    2b8a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	41 e0       	ldi	r20, 0x01	; 1
    2b9c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	61 e0       	ldi	r22, 0x01	; 1
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	62 e0       	ldi	r22, 0x02	; 2
    2bae:	41 e0       	ldi	r20, 0x01	; 1
    2bb0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2bb4:	7d c5       	rjmp	.+2810   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	6f ef       	ldi	r22, 0xFF	; 255
    2bba:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	6f ef       	ldi	r22, 0xFF	; 255
    2bc2:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
    2bc6:	74 c5       	rjmp	.+2792   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	6f ef       	ldi	r22, 0xFF	; 255
    2bcc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	6f ef       	ldi	r22, 0xFF	; 255
    2bd4:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	64 e0       	ldi	r22, 0x04	; 4
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2be2:	66 c5       	rjmp	.+2764   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    2be4:	18 8e       	std	Y+24, r1	; 0x18
    2be6:	66 c5       	rjmp	.+2764   	; 0x36b4 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	6f ef       	ldi	r22, 0xFF	; 255
    2bec:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_HIGH);
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	67 e0       	ldi	r22, 0x07	; 7
    2bf4:	41 e0       	ldi	r20, 0x01	; 1
    2bf6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
					switch(NUM)
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	39 8b       	std	Y+17, r19	; 0x11
    2c02:	28 8b       	std	Y+16, r18	; 0x10
    2c04:	88 89       	ldd	r24, Y+16	; 0x10
    2c06:	99 89       	ldd	r25, Y+17	; 0x11
    2c08:	84 30       	cpi	r24, 0x04	; 4
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <SevenSegment_Display+0x72e>
    2c0e:	8e c0       	rjmp	.+284    	; 0x2d2c <SevenSegment_Display+0x84a>
    2c10:	28 89       	ldd	r18, Y+16	; 0x10
    2c12:	39 89       	ldd	r19, Y+17	; 0x11
    2c14:	25 30       	cpi	r18, 0x05	; 5
    2c16:	31 05       	cpc	r19, r1
    2c18:	ec f4       	brge	.+58     	; 0x2c54 <SevenSegment_Display+0x772>
    2c1a:	88 89       	ldd	r24, Y+16	; 0x10
    2c1c:	99 89       	ldd	r25, Y+17	; 0x11
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	91 05       	cpc	r25, r1
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <SevenSegment_Display+0x744>
    2c24:	4a c0       	rjmp	.+148    	; 0x2cba <SevenSegment_Display+0x7d8>
    2c26:	28 89       	ldd	r18, Y+16	; 0x10
    2c28:	39 89       	ldd	r19, Y+17	; 0x11
    2c2a:	22 30       	cpi	r18, 0x02	; 2
    2c2c:	31 05       	cpc	r19, r1
    2c2e:	2c f4       	brge	.+10     	; 0x2c3a <SevenSegment_Display+0x758>
    2c30:	88 89       	ldd	r24, Y+16	; 0x10
    2c32:	99 89       	ldd	r25, Y+17	; 0x11
    2c34:	00 97       	sbiw	r24, 0x00	; 0
    2c36:	99 f1       	breq	.+102    	; 0x2c9e <SevenSegment_Display+0x7bc>
    2c38:	e1 c0       	rjmp	.+450    	; 0x2dfc <SevenSegment_Display+0x91a>
    2c3a:	28 89       	ldd	r18, Y+16	; 0x10
    2c3c:	39 89       	ldd	r19, Y+17	; 0x11
    2c3e:	22 30       	cpi	r18, 0x02	; 2
    2c40:	31 05       	cpc	r19, r1
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <SevenSegment_Display+0x764>
    2c44:	4d c0       	rjmp	.+154    	; 0x2ce0 <SevenSegment_Display+0x7fe>
    2c46:	88 89       	ldd	r24, Y+16	; 0x10
    2c48:	99 89       	ldd	r25, Y+17	; 0x11
    2c4a:	83 30       	cpi	r24, 0x03	; 3
    2c4c:	91 05       	cpc	r25, r1
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <SevenSegment_Display+0x770>
    2c50:	5a c0       	rjmp	.+180    	; 0x2d06 <SevenSegment_Display+0x824>
    2c52:	d4 c0       	rjmp	.+424    	; 0x2dfc <SevenSegment_Display+0x91a>
    2c54:	28 89       	ldd	r18, Y+16	; 0x10
    2c56:	39 89       	ldd	r19, Y+17	; 0x11
    2c58:	27 30       	cpi	r18, 0x07	; 7
    2c5a:	31 05       	cpc	r19, r1
    2c5c:	09 f4       	brne	.+2      	; 0x2c60 <SevenSegment_Display+0x77e>
    2c5e:	9f c0       	rjmp	.+318    	; 0x2d9e <SevenSegment_Display+0x8bc>
    2c60:	88 89       	ldd	r24, Y+16	; 0x10
    2c62:	99 89       	ldd	r25, Y+17	; 0x11
    2c64:	88 30       	cpi	r24, 0x08	; 8
    2c66:	91 05       	cpc	r25, r1
    2c68:	6c f4       	brge	.+26     	; 0x2c84 <SevenSegment_Display+0x7a2>
    2c6a:	28 89       	ldd	r18, Y+16	; 0x10
    2c6c:	39 89       	ldd	r19, Y+17	; 0x11
    2c6e:	25 30       	cpi	r18, 0x05	; 5
    2c70:	31 05       	cpc	r19, r1
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <SevenSegment_Display+0x794>
    2c74:	73 c0       	rjmp	.+230    	; 0x2d5c <SevenSegment_Display+0x87a>
    2c76:	88 89       	ldd	r24, Y+16	; 0x10
    2c78:	99 89       	ldd	r25, Y+17	; 0x11
    2c7a:	86 30       	cpi	r24, 0x06	; 6
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <SevenSegment_Display+0x7a0>
    2c80:	80 c0       	rjmp	.+256    	; 0x2d82 <SevenSegment_Display+0x8a0>
    2c82:	bc c0       	rjmp	.+376    	; 0x2dfc <SevenSegment_Display+0x91a>
    2c84:	28 89       	ldd	r18, Y+16	; 0x10
    2c86:	39 89       	ldd	r19, Y+17	; 0x11
    2c88:	28 30       	cpi	r18, 0x08	; 8
    2c8a:	31 05       	cpc	r19, r1
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <SevenSegment_Display+0x7ae>
    2c8e:	9f c0       	rjmp	.+318    	; 0x2dce <SevenSegment_Display+0x8ec>
    2c90:	88 89       	ldd	r24, Y+16	; 0x10
    2c92:	99 89       	ldd	r25, Y+17	; 0x11
    2c94:	89 30       	cpi	r24, 0x09	; 9
    2c96:	91 05       	cpc	r25, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <SevenSegment_Display+0x7ba>
    2c9a:	a2 c0       	rjmp	.+324    	; 0x2de0 <SevenSegment_Display+0x8fe>
    2c9c:	af c0       	rjmp	.+350    	; 0x2dfc <SevenSegment_Display+0x91a>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	6f ef       	ldi	r22, 0xFF	; 255
    2ca2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_HIGH);
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	66 e0       	ldi	r22, 0x06	; 6
    2cb2:	41 e0       	ldi	r20, 0x01	; 1
    2cb4:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2cb8:	fb c4       	rjmp	.+2550   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	6f ef       	ldi	r22, 0xFF	; 255
    2cbe:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	6f ef       	ldi	r22, 0xFF	; 255
    2cc6:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	61 e0       	ldi	r22, 0x01	; 1
    2cce:	40 e0       	ldi	r20, 0x00	; 0
    2cd0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	62 e0       	ldi	r22, 0x02	; 2
    2cd8:	40 e0       	ldi	r20, 0x00	; 0
    2cda:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2cde:	e8 c4       	rjmp	.+2512   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	6f ef       	ldi	r22, 0xFF	; 255
    2ce4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	62 e0       	ldi	r22, 0x02	; 2
    2cf4:	41 e0       	ldi	r20, 0x01	; 1
    2cf6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	65 e0       	ldi	r22, 0x05	; 5
    2cfe:	41 e0       	ldi	r20, 0x01	; 1
    2d00:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2d04:	d5 c4       	rjmp	.+2474   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	6f ef       	ldi	r22, 0xFF	; 255
    2d0a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	60 e0       	ldi	r22, 0x00	; 0
    2d12:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	64 e0       	ldi	r22, 0x04	; 4
    2d1a:	41 e0       	ldi	r20, 0x01	; 1
    2d1c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	65 e0       	ldi	r22, 0x05	; 5
    2d24:	41 e0       	ldi	r20, 0x01	; 1
    2d26:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2d2a:	c2 c4       	rjmp	.+2436   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	6f ef       	ldi	r22, 0xFF	; 255
    2d30:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_HIGH);
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	63 e0       	ldi	r22, 0x03	; 3
    2d4a:	41 e0       	ldi	r20, 0x01	; 1
    2d4c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	64 e0       	ldi	r22, 0x04	; 4
    2d54:	41 e0       	ldi	r20, 0x01	; 1
    2d56:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2d5a:	aa c4       	rjmp	.+2388   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	6f ef       	ldi	r22, 0xFF	; 255
    2d60:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	60 e0       	ldi	r22, 0x00	; 0
    2d68:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	61 e0       	ldi	r22, 0x01	; 1
    2d70:	41 e0       	ldi	r20, 0x01	; 1
    2d72:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	64 e0       	ldi	r22, 0x04	; 4
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2d80:	97 c4       	rjmp	.+2350   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	6f ef       	ldi	r22, 0xFF	; 255
    2d86:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	61 e0       	ldi	r22, 0x01	; 1
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2d9c:	89 c4       	rjmp	.+2322   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	6f ef       	ldi	r22, 0xFF	; 255
    2da2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	6f ef       	ldi	r22, 0xFF	; 255
    2daa:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	61 e0       	ldi	r22, 0x01	; 1
    2dbc:	40 e0       	ldi	r20, 0x00	; 0
    2dbe:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	62 e0       	ldi	r22, 0x02	; 2
    2dc6:	40 e0       	ldi	r20, 0x00	; 0
    2dc8:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2dcc:	71 c4       	rjmp	.+2274   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	6f ef       	ldi	r22, 0xFF	; 255
    2dd2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
    2dde:	68 c4       	rjmp	.+2256   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	6f ef       	ldi	r22, 0xFF	; 255
    2de4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	64 e0       	ldi	r22, 0x04	; 4
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2dfa:	5a c4       	rjmp	.+2228   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    2dfc:	18 8e       	std	Y+24, r1	; 0x18
    2dfe:	5a c4       	rjmp	.+2228   	; 0x36b4 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    2e00:	18 8e       	std	Y+24, r1	; 0x18
    2e02:	58 c4       	rjmp	.+2224   	; 0x36b4 <SevenSegment_Display+0x11d2>
			}
			break;
		case DIO_PORTC:
			switch(TYPE)
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	28 2f       	mov	r18, r24
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	3f 87       	std	Y+15, r19	; 0x0f
    2e0c:	2e 87       	std	Y+14, r18	; 0x0e
    2e0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e10:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	39 f0       	breq	.+14     	; 0x2e24 <SevenSegment_Display+0x942>
    2e16:	2e 85       	ldd	r18, Y+14	; 0x0e
    2e18:	3f 85       	ldd	r19, Y+15	; 0x0f
    2e1a:	21 30       	cpi	r18, 0x01	; 1
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <SevenSegment_Display+0x940>
    2e20:	0d c1       	rjmp	.+538    	; 0x303c <SevenSegment_Display+0xb5a>
    2e22:	18 c2       	rjmp	.+1072   	; 0x3254 <SevenSegment_Display+0xd72>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2e24:	82 e0       	ldi	r24, 0x02	; 2
    2e26:	6f ef       	ldi	r22, 0xFF	; 255
    2e28:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_LOW);
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	67 e0       	ldi	r22, 0x07	; 7
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						switch(NUM)
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	3d 87       	std	Y+13, r19	; 0x0d
    2e3e:	2c 87       	std	Y+12, r18	; 0x0c
    2e40:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e42:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e44:	84 30       	cpi	r24, 0x04	; 4
    2e46:	91 05       	cpc	r25, r1
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <SevenSegment_Display+0x96a>
    2e4a:	8e c0       	rjmp	.+284    	; 0x2f68 <SevenSegment_Display+0xa86>
    2e4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e4e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e50:	25 30       	cpi	r18, 0x05	; 5
    2e52:	31 05       	cpc	r19, r1
    2e54:	ec f4       	brge	.+58     	; 0x2e90 <SevenSegment_Display+0x9ae>
    2e56:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e58:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e5a:	81 30       	cpi	r24, 0x01	; 1
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <SevenSegment_Display+0x980>
    2e60:	4a c0       	rjmp	.+148    	; 0x2ef6 <SevenSegment_Display+0xa14>
    2e62:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e64:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e66:	22 30       	cpi	r18, 0x02	; 2
    2e68:	31 05       	cpc	r19, r1
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <SevenSegment_Display+0x994>
    2e6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	99 f1       	breq	.+102    	; 0x2eda <SevenSegment_Display+0x9f8>
    2e74:	e1 c0       	rjmp	.+450    	; 0x3038 <SevenSegment_Display+0xb56>
    2e76:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e78:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e7a:	22 30       	cpi	r18, 0x02	; 2
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <SevenSegment_Display+0x9a0>
    2e80:	4d c0       	rjmp	.+154    	; 0x2f1c <SevenSegment_Display+0xa3a>
    2e82:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e84:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e86:	83 30       	cpi	r24, 0x03	; 3
    2e88:	91 05       	cpc	r25, r1
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <SevenSegment_Display+0x9ac>
    2e8c:	5a c0       	rjmp	.+180    	; 0x2f42 <SevenSegment_Display+0xa60>
    2e8e:	d4 c0       	rjmp	.+424    	; 0x3038 <SevenSegment_Display+0xb56>
    2e90:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e92:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e94:	27 30       	cpi	r18, 0x07	; 7
    2e96:	31 05       	cpc	r19, r1
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <SevenSegment_Display+0x9ba>
    2e9a:	9f c0       	rjmp	.+318    	; 0x2fda <SevenSegment_Display+0xaf8>
    2e9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e9e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ea0:	88 30       	cpi	r24, 0x08	; 8
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	6c f4       	brge	.+26     	; 0x2ec0 <SevenSegment_Display+0x9de>
    2ea6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ea8:	3d 85       	ldd	r19, Y+13	; 0x0d
    2eaa:	25 30       	cpi	r18, 0x05	; 5
    2eac:	31 05       	cpc	r19, r1
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <SevenSegment_Display+0x9d0>
    2eb0:	73 c0       	rjmp	.+230    	; 0x2f98 <SevenSegment_Display+0xab6>
    2eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2eb6:	86 30       	cpi	r24, 0x06	; 6
    2eb8:	91 05       	cpc	r25, r1
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <SevenSegment_Display+0x9dc>
    2ebc:	80 c0       	rjmp	.+256    	; 0x2fbe <SevenSegment_Display+0xadc>
    2ebe:	bc c0       	rjmp	.+376    	; 0x3038 <SevenSegment_Display+0xb56>
    2ec0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ec2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ec4:	28 30       	cpi	r18, 0x08	; 8
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <SevenSegment_Display+0x9ea>
    2eca:	9f c0       	rjmp	.+318    	; 0x300a <SevenSegment_Display+0xb28>
    2ecc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ece:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ed0:	89 30       	cpi	r24, 0x09	; 9
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <SevenSegment_Display+0x9f6>
    2ed6:	a2 c0       	rjmp	.+324    	; 0x301c <SevenSegment_Display+0xb3a>
    2ed8:	af c0       	rjmp	.+350    	; 0x3038 <SevenSegment_Display+0xb56>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	6f ef       	ldi	r22, 0xFF	; 255
    2ede:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2ee2:	82 e0       	ldi	r24, 0x02	; 2
    2ee4:	6f ef       	ldi	r22, 0xFF	; 255
    2ee6:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_LOW);
    2eea:	82 e0       	ldi	r24, 0x02	; 2
    2eec:	66 e0       	ldi	r22, 0x06	; 6
    2eee:	40 e0       	ldi	r20, 0x00	; 0
    2ef0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2ef4:	dd c3       	rjmp	.+1978   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2ef6:	82 e0       	ldi	r24, 0x02	; 2
    2ef8:	6f ef       	ldi	r22, 0xFF	; 255
    2efa:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	61 e0       	ldi	r22, 0x01	; 1
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	62 e0       	ldi	r22, 0x02	; 2
    2f14:	41 e0       	ldi	r20, 0x01	; 1
    2f16:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2f1a:	ca c3       	rjmp	.+1940   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2f1c:	82 e0       	ldi	r24, 0x02	; 2
    2f1e:	6f ef       	ldi	r22, 0xFF	; 255
    2f20:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	6f ef       	ldi	r22, 0xFF	; 255
    2f28:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    2f2c:	82 e0       	ldi	r24, 0x02	; 2
    2f2e:	62 e0       	ldi	r22, 0x02	; 2
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    2f36:	82 e0       	ldi	r24, 0x02	; 2
    2f38:	65 e0       	ldi	r22, 0x05	; 5
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2f40:	b7 c3       	rjmp	.+1902   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2f42:	82 e0       	ldi	r24, 0x02	; 2
    2f44:	6f ef       	ldi	r22, 0xFF	; 255
    2f46:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	6f ef       	ldi	r22, 0xFF	; 255
    2f4e:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	64 e0       	ldi	r22, 0x04	; 4
    2f56:	40 e0       	ldi	r20, 0x00	; 0
    2f58:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    2f5c:	82 e0       	ldi	r24, 0x02	; 2
    2f5e:	65 e0       	ldi	r22, 0x05	; 5
    2f60:	40 e0       	ldi	r20, 0x00	; 0
    2f62:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2f66:	a4 c3       	rjmp	.+1864   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2f68:	82 e0       	ldi	r24, 0x02	; 2
    2f6a:	6f ef       	ldi	r22, 0xFF	; 255
    2f6c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	6f ef       	ldi	r22, 0xFF	; 255
    2f74:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    2f78:	82 e0       	ldi	r24, 0x02	; 2
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	40 e0       	ldi	r20, 0x00	; 0
    2f7e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_LOW);
    2f82:	82 e0       	ldi	r24, 0x02	; 2
    2f84:	63 e0       	ldi	r22, 0x03	; 3
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    2f8c:	82 e0       	ldi	r24, 0x02	; 2
    2f8e:	64 e0       	ldi	r22, 0x04	; 4
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2f96:	8c c3       	rjmp	.+1816   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2f98:	82 e0       	ldi	r24, 0x02	; 2
    2f9a:	6f ef       	ldi	r22, 0xFF	; 255
    2f9c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2fa0:	82 e0       	ldi	r24, 0x02	; 2
    2fa2:	6f ef       	ldi	r22, 0xFF	; 255
    2fa4:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    2fa8:	82 e0       	ldi	r24, 0x02	; 2
    2faa:	61 e0       	ldi	r22, 0x01	; 1
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	64 e0       	ldi	r22, 0x04	; 4
    2fb6:	40 e0       	ldi	r20, 0x00	; 0
    2fb8:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2fbc:	79 c3       	rjmp	.+1778   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2fbe:	82 e0       	ldi	r24, 0x02	; 2
    2fc0:	6f ef       	ldi	r22, 0xFF	; 255
    2fc2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	6f ef       	ldi	r22, 0xFF	; 255
    2fca:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    2fce:	82 e0       	ldi	r24, 0x02	; 2
    2fd0:	61 e0       	ldi	r22, 0x01	; 1
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    2fd8:	6b c3       	rjmp	.+1750   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2fda:	82 e0       	ldi	r24, 0x02	; 2
    2fdc:	6f ef       	ldi	r22, 0xFF	; 255
    2fde:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    2fea:	82 e0       	ldi	r24, 0x02	; 2
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	41 e0       	ldi	r20, 0x01	; 1
    2ff0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    2ff4:	82 e0       	ldi	r24, 0x02	; 2
    2ff6:	61 e0       	ldi	r22, 0x01	; 1
    2ff8:	41 e0       	ldi	r20, 0x01	; 1
    2ffa:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    2ffe:	82 e0       	ldi	r24, 0x02	; 2
    3000:	62 e0       	ldi	r22, 0x02	; 2
    3002:	41 e0       	ldi	r20, 0x01	; 1
    3004:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3008:	53 c3       	rjmp	.+1702   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	6f ef       	ldi	r22, 0xFF	; 255
    300e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	6f ef       	ldi	r22, 0xFF	; 255
    3016:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
    301a:	4a c3       	rjmp	.+1684   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    301c:	82 e0       	ldi	r24, 0x02	; 2
    301e:	6f ef       	ldi	r22, 0xFF	; 255
    3020:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3024:	82 e0       	ldi	r24, 0x02	; 2
    3026:	6f ef       	ldi	r22, 0xFF	; 255
    3028:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    302c:	82 e0       	ldi	r24, 0x02	; 2
    302e:	64 e0       	ldi	r22, 0x04	; 4
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3036:	3c c3       	rjmp	.+1656   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3038:	18 8e       	std	Y+24, r1	; 0x18
    303a:	3c c3       	rjmp	.+1656   	; 0x36b4 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    303c:	82 e0       	ldi	r24, 0x02	; 2
    303e:	6f ef       	ldi	r22, 0xFF	; 255
    3040:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_HIGH);
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	67 e0       	ldi	r22, 0x07	; 7
    3048:	41 e0       	ldi	r20, 0x01	; 1
    304a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
					switch(NUM)
    304e:	8b 81       	ldd	r24, Y+3	; 0x03
    3050:	28 2f       	mov	r18, r24
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	3b 87       	std	Y+11, r19	; 0x0b
    3056:	2a 87       	std	Y+10, r18	; 0x0a
    3058:	8a 85       	ldd	r24, Y+10	; 0x0a
    305a:	9b 85       	ldd	r25, Y+11	; 0x0b
    305c:	84 30       	cpi	r24, 0x04	; 4
    305e:	91 05       	cpc	r25, r1
    3060:	09 f4       	brne	.+2      	; 0x3064 <SevenSegment_Display+0xb82>
    3062:	8e c0       	rjmp	.+284    	; 0x3180 <SevenSegment_Display+0xc9e>
    3064:	2a 85       	ldd	r18, Y+10	; 0x0a
    3066:	3b 85       	ldd	r19, Y+11	; 0x0b
    3068:	25 30       	cpi	r18, 0x05	; 5
    306a:	31 05       	cpc	r19, r1
    306c:	ec f4       	brge	.+58     	; 0x30a8 <SevenSegment_Display+0xbc6>
    306e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3070:	9b 85       	ldd	r25, Y+11	; 0x0b
    3072:	81 30       	cpi	r24, 0x01	; 1
    3074:	91 05       	cpc	r25, r1
    3076:	09 f4       	brne	.+2      	; 0x307a <SevenSegment_Display+0xb98>
    3078:	4a c0       	rjmp	.+148    	; 0x310e <SevenSegment_Display+0xc2c>
    307a:	2a 85       	ldd	r18, Y+10	; 0x0a
    307c:	3b 85       	ldd	r19, Y+11	; 0x0b
    307e:	22 30       	cpi	r18, 0x02	; 2
    3080:	31 05       	cpc	r19, r1
    3082:	2c f4       	brge	.+10     	; 0x308e <SevenSegment_Display+0xbac>
    3084:	8a 85       	ldd	r24, Y+10	; 0x0a
    3086:	9b 85       	ldd	r25, Y+11	; 0x0b
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	99 f1       	breq	.+102    	; 0x30f2 <SevenSegment_Display+0xc10>
    308c:	e1 c0       	rjmp	.+450    	; 0x3250 <SevenSegment_Display+0xd6e>
    308e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3090:	3b 85       	ldd	r19, Y+11	; 0x0b
    3092:	22 30       	cpi	r18, 0x02	; 2
    3094:	31 05       	cpc	r19, r1
    3096:	09 f4       	brne	.+2      	; 0x309a <SevenSegment_Display+0xbb8>
    3098:	4d c0       	rjmp	.+154    	; 0x3134 <SevenSegment_Display+0xc52>
    309a:	8a 85       	ldd	r24, Y+10	; 0x0a
    309c:	9b 85       	ldd	r25, Y+11	; 0x0b
    309e:	83 30       	cpi	r24, 0x03	; 3
    30a0:	91 05       	cpc	r25, r1
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <SevenSegment_Display+0xbc4>
    30a4:	5a c0       	rjmp	.+180    	; 0x315a <SevenSegment_Display+0xc78>
    30a6:	d4 c0       	rjmp	.+424    	; 0x3250 <SevenSegment_Display+0xd6e>
    30a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    30aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    30ac:	27 30       	cpi	r18, 0x07	; 7
    30ae:	31 05       	cpc	r19, r1
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <SevenSegment_Display+0xbd2>
    30b2:	9f c0       	rjmp	.+318    	; 0x31f2 <SevenSegment_Display+0xd10>
    30b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    30b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    30b8:	88 30       	cpi	r24, 0x08	; 8
    30ba:	91 05       	cpc	r25, r1
    30bc:	6c f4       	brge	.+26     	; 0x30d8 <SevenSegment_Display+0xbf6>
    30be:	2a 85       	ldd	r18, Y+10	; 0x0a
    30c0:	3b 85       	ldd	r19, Y+11	; 0x0b
    30c2:	25 30       	cpi	r18, 0x05	; 5
    30c4:	31 05       	cpc	r19, r1
    30c6:	09 f4       	brne	.+2      	; 0x30ca <SevenSegment_Display+0xbe8>
    30c8:	73 c0       	rjmp	.+230    	; 0x31b0 <SevenSegment_Display+0xcce>
    30ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    30cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ce:	86 30       	cpi	r24, 0x06	; 6
    30d0:	91 05       	cpc	r25, r1
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <SevenSegment_Display+0xbf4>
    30d4:	80 c0       	rjmp	.+256    	; 0x31d6 <SevenSegment_Display+0xcf4>
    30d6:	bc c0       	rjmp	.+376    	; 0x3250 <SevenSegment_Display+0xd6e>
    30d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    30da:	3b 85       	ldd	r19, Y+11	; 0x0b
    30dc:	28 30       	cpi	r18, 0x08	; 8
    30de:	31 05       	cpc	r19, r1
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <SevenSegment_Display+0xc02>
    30e2:	9f c0       	rjmp	.+318    	; 0x3222 <SevenSegment_Display+0xd40>
    30e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    30e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    30e8:	89 30       	cpi	r24, 0x09	; 9
    30ea:	91 05       	cpc	r25, r1
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <SevenSegment_Display+0xc0e>
    30ee:	a2 c0       	rjmp	.+324    	; 0x3234 <SevenSegment_Display+0xd52>
    30f0:	af c0       	rjmp	.+350    	; 0x3250 <SevenSegment_Display+0xd6e>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    30f2:	82 e0       	ldi	r24, 0x02	; 2
    30f4:	6f ef       	ldi	r22, 0xFF	; 255
    30f6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    30fa:	82 e0       	ldi	r24, 0x02	; 2
    30fc:	60 e0       	ldi	r22, 0x00	; 0
    30fe:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_HIGH);
    3102:	82 e0       	ldi	r24, 0x02	; 2
    3104:	66 e0       	ldi	r22, 0x06	; 6
    3106:	41 e0       	ldi	r20, 0x01	; 1
    3108:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    310c:	d1 c2       	rjmp	.+1442   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    310e:	82 e0       	ldi	r24, 0x02	; 2
    3110:	6f ef       	ldi	r22, 0xFF	; 255
    3112:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3116:	82 e0       	ldi	r24, 0x02	; 2
    3118:	6f ef       	ldi	r22, 0xFF	; 255
    311a:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	61 e0       	ldi	r22, 0x01	; 1
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	62 e0       	ldi	r22, 0x02	; 2
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3132:	be c2       	rjmp	.+1404   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	6f ef       	ldi	r22, 0xFF	; 255
    3138:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	60 e0       	ldi	r22, 0x00	; 0
    3140:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3144:	82 e0       	ldi	r24, 0x02	; 2
    3146:	62 e0       	ldi	r22, 0x02	; 2
    3148:	41 e0       	ldi	r20, 0x01	; 1
    314a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    314e:	82 e0       	ldi	r24, 0x02	; 2
    3150:	65 e0       	ldi	r22, 0x05	; 5
    3152:	41 e0       	ldi	r20, 0x01	; 1
    3154:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3158:	ab c2       	rjmp	.+1366   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    315a:	82 e0       	ldi	r24, 0x02	; 2
    315c:	6f ef       	ldi	r22, 0xFF	; 255
    315e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3162:	82 e0       	ldi	r24, 0x02	; 2
    3164:	60 e0       	ldi	r22, 0x00	; 0
    3166:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    316a:	82 e0       	ldi	r24, 0x02	; 2
    316c:	64 e0       	ldi	r22, 0x04	; 4
    316e:	41 e0       	ldi	r20, 0x01	; 1
    3170:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    3174:	82 e0       	ldi	r24, 0x02	; 2
    3176:	65 e0       	ldi	r22, 0x05	; 5
    3178:	41 e0       	ldi	r20, 0x01	; 1
    317a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    317e:	98 c2       	rjmp	.+1328   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	6f ef       	ldi	r22, 0xFF	; 255
    3184:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    3190:	82 e0       	ldi	r24, 0x02	; 2
    3192:	60 e0       	ldi	r22, 0x00	; 0
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_HIGH);
    319a:	82 e0       	ldi	r24, 0x02	; 2
    319c:	63 e0       	ldi	r22, 0x03	; 3
    319e:	41 e0       	ldi	r20, 0x01	; 1
    31a0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    31a4:	82 e0       	ldi	r24, 0x02	; 2
    31a6:	64 e0       	ldi	r22, 0x04	; 4
    31a8:	41 e0       	ldi	r20, 0x01	; 1
    31aa:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    31ae:	80 c2       	rjmp	.+1280   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31b0:	82 e0       	ldi	r24, 0x02	; 2
    31b2:	6f ef       	ldi	r22, 0xFF	; 255
    31b4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	61 e0       	ldi	r22, 0x01	; 1
    31c4:	41 e0       	ldi	r20, 0x01	; 1
    31c6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    31ca:	82 e0       	ldi	r24, 0x02	; 2
    31cc:	64 e0       	ldi	r22, 0x04	; 4
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    31d4:	6d c2       	rjmp	.+1242   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	6f ef       	ldi	r22, 0xFF	; 255
    31da:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    31de:	82 e0       	ldi	r24, 0x02	; 2
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    31e6:	82 e0       	ldi	r24, 0x02	; 2
    31e8:	61 e0       	ldi	r22, 0x01	; 1
    31ea:	41 e0       	ldi	r20, 0x01	; 1
    31ec:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    31f0:	5f c2       	rjmp	.+1214   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31f2:	82 e0       	ldi	r24, 0x02	; 2
    31f4:	6f ef       	ldi	r22, 0xFF	; 255
    31f6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	6f ef       	ldi	r22, 0xFF	; 255
    31fe:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    3202:	82 e0       	ldi	r24, 0x02	; 2
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    320c:	82 e0       	ldi	r24, 0x02	; 2
    320e:	61 e0       	ldi	r22, 0x01	; 1
    3210:	40 e0       	ldi	r20, 0x00	; 0
    3212:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3216:	82 e0       	ldi	r24, 0x02	; 2
    3218:	62 e0       	ldi	r22, 0x02	; 2
    321a:	40 e0       	ldi	r20, 0x00	; 0
    321c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3220:	47 c2       	rjmp	.+1166   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3222:	82 e0       	ldi	r24, 0x02	; 2
    3224:	6f ef       	ldi	r22, 0xFF	; 255
    3226:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    322a:	82 e0       	ldi	r24, 0x02	; 2
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
    3232:	3e c2       	rjmp	.+1148   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	6f ef       	ldi	r22, 0xFF	; 255
    3238:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    323c:	82 e0       	ldi	r24, 0x02	; 2
    323e:	60 e0       	ldi	r22, 0x00	; 0
    3240:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3244:	82 e0       	ldi	r24, 0x02	; 2
    3246:	64 e0       	ldi	r22, 0x04	; 4
    3248:	41 e0       	ldi	r20, 0x01	; 1
    324a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    324e:	30 c2       	rjmp	.+1120   	; 0x36b0 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3250:	18 8e       	std	Y+24, r1	; 0x18
    3252:	30 c2       	rjmp	.+1120   	; 0x36b4 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    3254:	18 8e       	std	Y+24, r1	; 0x18
    3256:	2e c2       	rjmp	.+1116   	; 0x36b4 <SevenSegment_Display+0x11d2>
			}
			break;
			case DIO_PORTD:
				switch(TYPE)
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	39 87       	std	Y+9, r19	; 0x09
    3260:	28 87       	std	Y+8, r18	; 0x08
    3262:	88 85       	ldd	r24, Y+8	; 0x08
    3264:	99 85       	ldd	r25, Y+9	; 0x09
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	39 f0       	breq	.+14     	; 0x3278 <SevenSegment_Display+0xd96>
    326a:	28 85       	ldd	r18, Y+8	; 0x08
    326c:	39 85       	ldd	r19, Y+9	; 0x09
    326e:	21 30       	cpi	r18, 0x01	; 1
    3270:	31 05       	cpc	r19, r1
    3272:	09 f4       	brne	.+2      	; 0x3276 <SevenSegment_Display+0xd94>
    3274:	0d c1       	rjmp	.+538    	; 0x3490 <SevenSegment_Display+0xfae>
    3276:	18 c2       	rjmp	.+1072   	; 0x36a8 <SevenSegment_Display+0x11c6>
					{
						case CommonCathod:
							DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3278:	83 e0       	ldi	r24, 0x03	; 3
    327a:	6f ef       	ldi	r22, 0xFF	; 255
    327c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
							DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_LOW);
    3280:	83 e0       	ldi	r24, 0x03	; 3
    3282:	67 e0       	ldi	r22, 0x07	; 7
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
							switch(NUM)
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	3f 83       	std	Y+7, r19	; 0x07
    3292:	2e 83       	std	Y+6, r18	; 0x06
    3294:	8e 81       	ldd	r24, Y+6	; 0x06
    3296:	9f 81       	ldd	r25, Y+7	; 0x07
    3298:	84 30       	cpi	r24, 0x04	; 4
    329a:	91 05       	cpc	r25, r1
    329c:	09 f4       	brne	.+2      	; 0x32a0 <SevenSegment_Display+0xdbe>
    329e:	8e c0       	rjmp	.+284    	; 0x33bc <SevenSegment_Display+0xeda>
    32a0:	2e 81       	ldd	r18, Y+6	; 0x06
    32a2:	3f 81       	ldd	r19, Y+7	; 0x07
    32a4:	25 30       	cpi	r18, 0x05	; 5
    32a6:	31 05       	cpc	r19, r1
    32a8:	ec f4       	brge	.+58     	; 0x32e4 <SevenSegment_Display+0xe02>
    32aa:	8e 81       	ldd	r24, Y+6	; 0x06
    32ac:	9f 81       	ldd	r25, Y+7	; 0x07
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	91 05       	cpc	r25, r1
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <SevenSegment_Display+0xdd4>
    32b4:	4a c0       	rjmp	.+148    	; 0x334a <SevenSegment_Display+0xe68>
    32b6:	2e 81       	ldd	r18, Y+6	; 0x06
    32b8:	3f 81       	ldd	r19, Y+7	; 0x07
    32ba:	22 30       	cpi	r18, 0x02	; 2
    32bc:	31 05       	cpc	r19, r1
    32be:	2c f4       	brge	.+10     	; 0x32ca <SevenSegment_Display+0xde8>
    32c0:	8e 81       	ldd	r24, Y+6	; 0x06
    32c2:	9f 81       	ldd	r25, Y+7	; 0x07
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	99 f1       	breq	.+102    	; 0x332e <SevenSegment_Display+0xe4c>
    32c8:	e1 c0       	rjmp	.+450    	; 0x348c <SevenSegment_Display+0xfaa>
    32ca:	2e 81       	ldd	r18, Y+6	; 0x06
    32cc:	3f 81       	ldd	r19, Y+7	; 0x07
    32ce:	22 30       	cpi	r18, 0x02	; 2
    32d0:	31 05       	cpc	r19, r1
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <SevenSegment_Display+0xdf4>
    32d4:	4d c0       	rjmp	.+154    	; 0x3370 <SevenSegment_Display+0xe8e>
    32d6:	8e 81       	ldd	r24, Y+6	; 0x06
    32d8:	9f 81       	ldd	r25, Y+7	; 0x07
    32da:	83 30       	cpi	r24, 0x03	; 3
    32dc:	91 05       	cpc	r25, r1
    32de:	09 f4       	brne	.+2      	; 0x32e2 <SevenSegment_Display+0xe00>
    32e0:	5a c0       	rjmp	.+180    	; 0x3396 <SevenSegment_Display+0xeb4>
    32e2:	d4 c0       	rjmp	.+424    	; 0x348c <SevenSegment_Display+0xfaa>
    32e4:	2e 81       	ldd	r18, Y+6	; 0x06
    32e6:	3f 81       	ldd	r19, Y+7	; 0x07
    32e8:	27 30       	cpi	r18, 0x07	; 7
    32ea:	31 05       	cpc	r19, r1
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <SevenSegment_Display+0xe0e>
    32ee:	9f c0       	rjmp	.+318    	; 0x342e <SevenSegment_Display+0xf4c>
    32f0:	8e 81       	ldd	r24, Y+6	; 0x06
    32f2:	9f 81       	ldd	r25, Y+7	; 0x07
    32f4:	88 30       	cpi	r24, 0x08	; 8
    32f6:	91 05       	cpc	r25, r1
    32f8:	6c f4       	brge	.+26     	; 0x3314 <SevenSegment_Display+0xe32>
    32fa:	2e 81       	ldd	r18, Y+6	; 0x06
    32fc:	3f 81       	ldd	r19, Y+7	; 0x07
    32fe:	25 30       	cpi	r18, 0x05	; 5
    3300:	31 05       	cpc	r19, r1
    3302:	09 f4       	brne	.+2      	; 0x3306 <SevenSegment_Display+0xe24>
    3304:	73 c0       	rjmp	.+230    	; 0x33ec <SevenSegment_Display+0xf0a>
    3306:	8e 81       	ldd	r24, Y+6	; 0x06
    3308:	9f 81       	ldd	r25, Y+7	; 0x07
    330a:	86 30       	cpi	r24, 0x06	; 6
    330c:	91 05       	cpc	r25, r1
    330e:	09 f4       	brne	.+2      	; 0x3312 <SevenSegment_Display+0xe30>
    3310:	80 c0       	rjmp	.+256    	; 0x3412 <SevenSegment_Display+0xf30>
    3312:	bc c0       	rjmp	.+376    	; 0x348c <SevenSegment_Display+0xfaa>
    3314:	2e 81       	ldd	r18, Y+6	; 0x06
    3316:	3f 81       	ldd	r19, Y+7	; 0x07
    3318:	28 30       	cpi	r18, 0x08	; 8
    331a:	31 05       	cpc	r19, r1
    331c:	09 f4       	brne	.+2      	; 0x3320 <SevenSegment_Display+0xe3e>
    331e:	9f c0       	rjmp	.+318    	; 0x345e <SevenSegment_Display+0xf7c>
    3320:	8e 81       	ldd	r24, Y+6	; 0x06
    3322:	9f 81       	ldd	r25, Y+7	; 0x07
    3324:	89 30       	cpi	r24, 0x09	; 9
    3326:	91 05       	cpc	r25, r1
    3328:	09 f4       	brne	.+2      	; 0x332c <SevenSegment_Display+0xe4a>
    332a:	a2 c0       	rjmp	.+324    	; 0x3470 <SevenSegment_Display+0xf8e>
    332c:	af c0       	rjmp	.+350    	; 0x348c <SevenSegment_Display+0xfaa>
								{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    332e:	83 e0       	ldi	r24, 0x03	; 3
    3330:	6f ef       	ldi	r22, 0xFF	; 255
    3332:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3336:	83 e0       	ldi	r24, 0x03	; 3
    3338:	6f ef       	ldi	r22, 0xFF	; 255
    333a:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_LOW);
    333e:	83 e0       	ldi	r24, 0x03	; 3
    3340:	66 e0       	ldi	r22, 0x06	; 6
    3342:	40 e0       	ldi	r20, 0x00	; 0
    3344:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3348:	b3 c1       	rjmp	.+870    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    334a:	83 e0       	ldi	r24, 0x03	; 3
    334c:	6f ef       	ldi	r22, 0xFF	; 255
    334e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3352:	83 e0       	ldi	r24, 0x03	; 3
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    335a:	83 e0       	ldi	r24, 0x03	; 3
    335c:	61 e0       	ldi	r22, 0x01	; 1
    335e:	41 e0       	ldi	r20, 0x01	; 1
    3360:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    3364:	83 e0       	ldi	r24, 0x03	; 3
    3366:	62 e0       	ldi	r22, 0x02	; 2
    3368:	41 e0       	ldi	r20, 0x01	; 1
    336a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    336e:	a0 c1       	rjmp	.+832    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3370:	83 e0       	ldi	r24, 0x03	; 3
    3372:	6f ef       	ldi	r22, 0xFF	; 255
    3374:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3378:	83 e0       	ldi	r24, 0x03	; 3
    337a:	6f ef       	ldi	r22, 0xFF	; 255
    337c:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    3380:	83 e0       	ldi	r24, 0x03	; 3
    3382:	62 e0       	ldi	r22, 0x02	; 2
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    338a:	83 e0       	ldi	r24, 0x03	; 3
    338c:	65 e0       	ldi	r22, 0x05	; 5
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3394:	8d c1       	rjmp	.+794    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3396:	83 e0       	ldi	r24, 0x03	; 3
    3398:	6f ef       	ldi	r22, 0xFF	; 255
    339a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    339e:	83 e0       	ldi	r24, 0x03	; 3
    33a0:	6f ef       	ldi	r22, 0xFF	; 255
    33a2:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    33a6:	83 e0       	ldi	r24, 0x03	; 3
    33a8:	64 e0       	ldi	r22, 0x04	; 4
    33aa:	40 e0       	ldi	r20, 0x00	; 0
    33ac:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    33b0:	83 e0       	ldi	r24, 0x03	; 3
    33b2:	65 e0       	ldi	r22, 0x05	; 5
    33b4:	40 e0       	ldi	r20, 0x00	; 0
    33b6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    33ba:	7a c1       	rjmp	.+756    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    33bc:	83 e0       	ldi	r24, 0x03	; 3
    33be:	6f ef       	ldi	r22, 0xFF	; 255
    33c0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    33c4:	83 e0       	ldi	r24, 0x03	; 3
    33c6:	6f ef       	ldi	r22, 0xFF	; 255
    33c8:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    33cc:	83 e0       	ldi	r24, 0x03	; 3
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	40 e0       	ldi	r20, 0x00	; 0
    33d2:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_LOW);
    33d6:	83 e0       	ldi	r24, 0x03	; 3
    33d8:	63 e0       	ldi	r22, 0x03	; 3
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    33e0:	83 e0       	ldi	r24, 0x03	; 3
    33e2:	64 e0       	ldi	r22, 0x04	; 4
    33e4:	40 e0       	ldi	r20, 0x00	; 0
    33e6:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    33ea:	62 c1       	rjmp	.+708    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    33ec:	83 e0       	ldi	r24, 0x03	; 3
    33ee:	6f ef       	ldi	r22, 0xFF	; 255
    33f0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    33f4:	83 e0       	ldi	r24, 0x03	; 3
    33f6:	6f ef       	ldi	r22, 0xFF	; 255
    33f8:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    33fc:	83 e0       	ldi	r24, 0x03	; 3
    33fe:	61 e0       	ldi	r22, 0x01	; 1
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    3406:	83 e0       	ldi	r24, 0x03	; 3
    3408:	64 e0       	ldi	r22, 0x04	; 4
    340a:	40 e0       	ldi	r20, 0x00	; 0
    340c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3410:	4f c1       	rjmp	.+670    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3412:	83 e0       	ldi	r24, 0x03	; 3
    3414:	6f ef       	ldi	r22, 0xFF	; 255
    3416:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    341a:	83 e0       	ldi	r24, 0x03	; 3
    341c:	6f ef       	ldi	r22, 0xFF	; 255
    341e:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    3422:	83 e0       	ldi	r24, 0x03	; 3
    3424:	61 e0       	ldi	r22, 0x01	; 1
    3426:	40 e0       	ldi	r20, 0x00	; 0
    3428:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    342c:	41 c1       	rjmp	.+642    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    342e:	83 e0       	ldi	r24, 0x03	; 3
    3430:	6f ef       	ldi	r22, 0xFF	; 255
    3432:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3436:	83 e0       	ldi	r24, 0x03	; 3
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    343e:	83 e0       	ldi	r24, 0x03	; 3
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	41 e0       	ldi	r20, 0x01	; 1
    3444:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    3448:	83 e0       	ldi	r24, 0x03	; 3
    344a:	61 e0       	ldi	r22, 0x01	; 1
    344c:	41 e0       	ldi	r20, 0x01	; 1
    344e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    3452:	83 e0       	ldi	r24, 0x03	; 3
    3454:	62 e0       	ldi	r22, 0x02	; 2
    3456:	41 e0       	ldi	r20, 0x01	; 1
    3458:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    345c:	29 c1       	rjmp	.+594    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    345e:	83 e0       	ldi	r24, 0x03	; 3
    3460:	6f ef       	ldi	r22, 0xFF	; 255
    3462:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3466:	83 e0       	ldi	r24, 0x03	; 3
    3468:	6f ef       	ldi	r22, 0xFF	; 255
    346a:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
    346e:	20 c1       	rjmp	.+576    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3470:	83 e0       	ldi	r24, 0x03	; 3
    3472:	6f ef       	ldi	r22, 0xFF	; 255
    3474:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3478:	83 e0       	ldi	r24, 0x03	; 3
    347a:	6f ef       	ldi	r22, 0xFF	; 255
    347c:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    3480:	83 e0       	ldi	r24, 0x03	; 3
    3482:	64 e0       	ldi	r22, 0x04	; 4
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    348a:	12 c1       	rjmp	.+548    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    348c:	18 8e       	std	Y+24, r1	; 0x18
    348e:	12 c1       	rjmp	.+548    	; 0x36b4 <SevenSegment_Display+0x11d2>
							}
							break;
					case CommonAnode:
						DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3490:	83 e0       	ldi	r24, 0x03	; 3
    3492:	6f ef       	ldi	r22, 0xFF	; 255
    3494:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_HIGH);
    3498:	83 e0       	ldi	r24, 0x03	; 3
    349a:	67 e0       	ldi	r22, 0x07	; 7
    349c:	41 e0       	ldi	r20, 0x01	; 1
    349e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
						switch(NUM)
    34a2:	8b 81       	ldd	r24, Y+3	; 0x03
    34a4:	28 2f       	mov	r18, r24
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	3d 83       	std	Y+5, r19	; 0x05
    34aa:	2c 83       	std	Y+4, r18	; 0x04
    34ac:	8c 81       	ldd	r24, Y+4	; 0x04
    34ae:	9d 81       	ldd	r25, Y+5	; 0x05
    34b0:	84 30       	cpi	r24, 0x04	; 4
    34b2:	91 05       	cpc	r25, r1
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <SevenSegment_Display+0xfd6>
    34b6:	8e c0       	rjmp	.+284    	; 0x35d4 <SevenSegment_Display+0x10f2>
    34b8:	2c 81       	ldd	r18, Y+4	; 0x04
    34ba:	3d 81       	ldd	r19, Y+5	; 0x05
    34bc:	25 30       	cpi	r18, 0x05	; 5
    34be:	31 05       	cpc	r19, r1
    34c0:	ec f4       	brge	.+58     	; 0x34fc <SevenSegment_Display+0x101a>
    34c2:	8c 81       	ldd	r24, Y+4	; 0x04
    34c4:	9d 81       	ldd	r25, Y+5	; 0x05
    34c6:	81 30       	cpi	r24, 0x01	; 1
    34c8:	91 05       	cpc	r25, r1
    34ca:	09 f4       	brne	.+2      	; 0x34ce <SevenSegment_Display+0xfec>
    34cc:	4a c0       	rjmp	.+148    	; 0x3562 <SevenSegment_Display+0x1080>
    34ce:	2c 81       	ldd	r18, Y+4	; 0x04
    34d0:	3d 81       	ldd	r19, Y+5	; 0x05
    34d2:	22 30       	cpi	r18, 0x02	; 2
    34d4:	31 05       	cpc	r19, r1
    34d6:	2c f4       	brge	.+10     	; 0x34e2 <SevenSegment_Display+0x1000>
    34d8:	8c 81       	ldd	r24, Y+4	; 0x04
    34da:	9d 81       	ldd	r25, Y+5	; 0x05
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	99 f1       	breq	.+102    	; 0x3546 <SevenSegment_Display+0x1064>
    34e0:	e1 c0       	rjmp	.+450    	; 0x36a4 <SevenSegment_Display+0x11c2>
    34e2:	2c 81       	ldd	r18, Y+4	; 0x04
    34e4:	3d 81       	ldd	r19, Y+5	; 0x05
    34e6:	22 30       	cpi	r18, 0x02	; 2
    34e8:	31 05       	cpc	r19, r1
    34ea:	09 f4       	brne	.+2      	; 0x34ee <SevenSegment_Display+0x100c>
    34ec:	4d c0       	rjmp	.+154    	; 0x3588 <SevenSegment_Display+0x10a6>
    34ee:	8c 81       	ldd	r24, Y+4	; 0x04
    34f0:	9d 81       	ldd	r25, Y+5	; 0x05
    34f2:	83 30       	cpi	r24, 0x03	; 3
    34f4:	91 05       	cpc	r25, r1
    34f6:	09 f4       	brne	.+2      	; 0x34fa <SevenSegment_Display+0x1018>
    34f8:	5a c0       	rjmp	.+180    	; 0x35ae <SevenSegment_Display+0x10cc>
    34fa:	d4 c0       	rjmp	.+424    	; 0x36a4 <SevenSegment_Display+0x11c2>
    34fc:	2c 81       	ldd	r18, Y+4	; 0x04
    34fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3500:	27 30       	cpi	r18, 0x07	; 7
    3502:	31 05       	cpc	r19, r1
    3504:	09 f4       	brne	.+2      	; 0x3508 <SevenSegment_Display+0x1026>
    3506:	9f c0       	rjmp	.+318    	; 0x3646 <SevenSegment_Display+0x1164>
    3508:	8c 81       	ldd	r24, Y+4	; 0x04
    350a:	9d 81       	ldd	r25, Y+5	; 0x05
    350c:	88 30       	cpi	r24, 0x08	; 8
    350e:	91 05       	cpc	r25, r1
    3510:	6c f4       	brge	.+26     	; 0x352c <SevenSegment_Display+0x104a>
    3512:	2c 81       	ldd	r18, Y+4	; 0x04
    3514:	3d 81       	ldd	r19, Y+5	; 0x05
    3516:	25 30       	cpi	r18, 0x05	; 5
    3518:	31 05       	cpc	r19, r1
    351a:	09 f4       	brne	.+2      	; 0x351e <SevenSegment_Display+0x103c>
    351c:	73 c0       	rjmp	.+230    	; 0x3604 <SevenSegment_Display+0x1122>
    351e:	8c 81       	ldd	r24, Y+4	; 0x04
    3520:	9d 81       	ldd	r25, Y+5	; 0x05
    3522:	86 30       	cpi	r24, 0x06	; 6
    3524:	91 05       	cpc	r25, r1
    3526:	09 f4       	brne	.+2      	; 0x352a <SevenSegment_Display+0x1048>
    3528:	80 c0       	rjmp	.+256    	; 0x362a <SevenSegment_Display+0x1148>
    352a:	bc c0       	rjmp	.+376    	; 0x36a4 <SevenSegment_Display+0x11c2>
    352c:	2c 81       	ldd	r18, Y+4	; 0x04
    352e:	3d 81       	ldd	r19, Y+5	; 0x05
    3530:	28 30       	cpi	r18, 0x08	; 8
    3532:	31 05       	cpc	r19, r1
    3534:	09 f4       	brne	.+2      	; 0x3538 <SevenSegment_Display+0x1056>
    3536:	9f c0       	rjmp	.+318    	; 0x3676 <SevenSegment_Display+0x1194>
    3538:	8c 81       	ldd	r24, Y+4	; 0x04
    353a:	9d 81       	ldd	r25, Y+5	; 0x05
    353c:	89 30       	cpi	r24, 0x09	; 9
    353e:	91 05       	cpc	r25, r1
    3540:	09 f4       	brne	.+2      	; 0x3544 <SevenSegment_Display+0x1062>
    3542:	a2 c0       	rjmp	.+324    	; 0x3688 <SevenSegment_Display+0x11a6>
    3544:	af c0       	rjmp	.+350    	; 0x36a4 <SevenSegment_Display+0x11c2>
							{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3546:	83 e0       	ldi	r24, 0x03	; 3
    3548:	6f ef       	ldi	r22, 0xFF	; 255
    354a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    354e:	83 e0       	ldi	r24, 0x03	; 3
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_HIGH);
    3556:	83 e0       	ldi	r24, 0x03	; 3
    3558:	66 e0       	ldi	r22, 0x06	; 6
    355a:	41 e0       	ldi	r20, 0x01	; 1
    355c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3560:	a7 c0       	rjmp	.+334    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3562:	83 e0       	ldi	r24, 0x03	; 3
    3564:	6f ef       	ldi	r22, 0xFF	; 255
    3566:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    356a:	83 e0       	ldi	r24, 0x03	; 3
    356c:	6f ef       	ldi	r22, 0xFF	; 255
    356e:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    3572:	83 e0       	ldi	r24, 0x03	; 3
    3574:	61 e0       	ldi	r22, 0x01	; 1
    3576:	40 e0       	ldi	r20, 0x00	; 0
    3578:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	62 e0       	ldi	r22, 0x02	; 2
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3586:	94 c0       	rjmp	.+296    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3588:	83 e0       	ldi	r24, 0x03	; 3
    358a:	6f ef       	ldi	r22, 0xFF	; 255
    358c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3590:	83 e0       	ldi	r24, 0x03	; 3
    3592:	60 e0       	ldi	r22, 0x00	; 0
    3594:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    3598:	83 e0       	ldi	r24, 0x03	; 3
    359a:	62 e0       	ldi	r22, 0x02	; 2
    359c:	41 e0       	ldi	r20, 0x01	; 1
    359e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    35a2:	83 e0       	ldi	r24, 0x03	; 3
    35a4:	65 e0       	ldi	r22, 0x05	; 5
    35a6:	41 e0       	ldi	r20, 0x01	; 1
    35a8:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    35ac:	81 c0       	rjmp	.+258    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    35ae:	83 e0       	ldi	r24, 0x03	; 3
    35b0:	6f ef       	ldi	r22, 0xFF	; 255
    35b2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    35b6:	83 e0       	ldi	r24, 0x03	; 3
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    35be:	83 e0       	ldi	r24, 0x03	; 3
    35c0:	64 e0       	ldi	r22, 0x04	; 4
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    35c8:	83 e0       	ldi	r24, 0x03	; 3
    35ca:	65 e0       	ldi	r22, 0x05	; 5
    35cc:	41 e0       	ldi	r20, 0x01	; 1
    35ce:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    35d2:	6e c0       	rjmp	.+220    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    35d4:	83 e0       	ldi	r24, 0x03	; 3
    35d6:	6f ef       	ldi	r22, 0xFF	; 255
    35d8:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    35dc:	83 e0       	ldi	r24, 0x03	; 3
    35de:	60 e0       	ldi	r22, 0x00	; 0
    35e0:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    35e4:	83 e0       	ldi	r24, 0x03	; 3
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	41 e0       	ldi	r20, 0x01	; 1
    35ea:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_HIGH);
    35ee:	83 e0       	ldi	r24, 0x03	; 3
    35f0:	63 e0       	ldi	r22, 0x03	; 3
    35f2:	41 e0       	ldi	r20, 0x01	; 1
    35f4:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    35f8:	83 e0       	ldi	r24, 0x03	; 3
    35fa:	64 e0       	ldi	r22, 0x04	; 4
    35fc:	41 e0       	ldi	r20, 0x01	; 1
    35fe:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3602:	56 c0       	rjmp	.+172    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3604:	83 e0       	ldi	r24, 0x03	; 3
    3606:	6f ef       	ldi	r22, 0xFF	; 255
    3608:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    360c:	83 e0       	ldi	r24, 0x03	; 3
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    3614:	83 e0       	ldi	r24, 0x03	; 3
    3616:	61 e0       	ldi	r22, 0x01	; 1
    3618:	41 e0       	ldi	r20, 0x01	; 1
    361a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    361e:	83 e0       	ldi	r24, 0x03	; 3
    3620:	64 e0       	ldi	r22, 0x04	; 4
    3622:	41 e0       	ldi	r20, 0x01	; 1
    3624:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3628:	43 c0       	rjmp	.+134    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    362a:	83 e0       	ldi	r24, 0x03	; 3
    362c:	6f ef       	ldi	r22, 0xFF	; 255
    362e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3632:	83 e0       	ldi	r24, 0x03	; 3
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    363a:	83 e0       	ldi	r24, 0x03	; 3
    363c:	61 e0       	ldi	r22, 0x01	; 1
    363e:	41 e0       	ldi	r20, 0x01	; 1
    3640:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3644:	35 c0       	rjmp	.+106    	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3646:	83 e0       	ldi	r24, 0x03	; 3
    3648:	6f ef       	ldi	r22, 0xFF	; 255
    364a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    364e:	83 e0       	ldi	r24, 0x03	; 3
    3650:	6f ef       	ldi	r22, 0xFF	; 255
    3652:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    3656:	83 e0       	ldi	r24, 0x03	; 3
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	40 e0       	ldi	r20, 0x00	; 0
    365c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    3660:	83 e0       	ldi	r24, 0x03	; 3
    3662:	61 e0       	ldi	r22, 0x01	; 1
    3664:	40 e0       	ldi	r20, 0x00	; 0
    3666:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    366a:	83 e0       	ldi	r24, 0x03	; 3
    366c:	62 e0       	ldi	r22, 0x02	; 2
    366e:	40 e0       	ldi	r20, 0x00	; 0
    3670:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3674:	1d c0       	rjmp	.+58     	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3676:	83 e0       	ldi	r24, 0x03	; 3
    3678:	6f ef       	ldi	r22, 0xFF	; 255
    367a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    367e:	83 e0       	ldi	r24, 0x03	; 3
    3680:	60 e0       	ldi	r22, 0x00	; 0
    3682:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
    3686:	14 c0       	rjmp	.+40     	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3688:	83 e0       	ldi	r24, 0x03	; 3
    368a:	6f ef       	ldi	r22, 0xFF	; 255
    368c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3690:	83 e0       	ldi	r24, 0x03	; 3
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    3698:	83 e0       	ldi	r24, 0x03	; 3
    369a:	64 e0       	ldi	r22, 0x04	; 4
    369c:	41 e0       	ldi	r20, 0x01	; 1
    369e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    36a2:	06 c0       	rjmp	.+12     	; 0x36b0 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    36a4:	18 8e       	std	Y+24, r1	; 0x18
    36a6:	06 c0       	rjmp	.+12     	; 0x36b4 <SevenSegment_Display+0x11d2>
							}
					break;
					default:
					return E_OK;
    36a8:	18 8e       	std	Y+24, r1	; 0x18
    36aa:	04 c0       	rjmp	.+8      	; 0x36b4 <SevenSegment_Display+0x11d2>
				}
				break;
	default:
	return E_OK;
    36ac:	18 8e       	std	Y+24, r1	; 0x18
    36ae:	02 c0       	rjmp	.+4      	; 0x36b4 <SevenSegment_Display+0x11d2>
}
	return E_NOK;
    36b0:	91 e0       	ldi	r25, 0x01	; 1
    36b2:	98 8f       	std	Y+24, r25	; 0x18
    36b4:	88 8d       	ldd	r24, Y+24	; 0x18
}
    36b6:	6e 96       	adiw	r28, 0x1e	; 30
    36b8:	0f b6       	in	r0, 0x3f	; 63
    36ba:	f8 94       	cli
    36bc:	de bf       	out	0x3e, r29	; 62
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	cd bf       	out	0x3d, r28	; 61
    36c2:	cf 91       	pop	r28
    36c4:	df 91       	pop	r29
    36c6:	08 95       	ret

000036c8 <CLCD_init>:
#include "LCD_Config.h"
#include <stdio.h>
#include <util/delay.h>
#include <stdlib.h>
void CLCD_init(void)
{
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	2e 97       	sbiw	r28, 0x0e	; 14
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
	//Initialize LCD pins direction
	DIO_SetPortDirection(CLCD_DataPort,DIO_OUTPUT);
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	61 e0       	ldi	r22, 0x01	; 1
    36e0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RS_PIN,DIO_OUTPUT);
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	41 e0       	ldi	r20, 0x01	; 1
    36ea:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RW_PIN,DIO_OUTPUT);
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	61 e0       	ldi	r22, 0x01	; 1
    36f2:	41 e0       	ldi	r20, 0x01	; 1
    36f4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_E_PIN,DIO_OUTPUT);
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	62 e0       	ldi	r22, 0x02	; 2
    36fc:	41 e0       	ldi	r20, 0x01	; 1
    36fe:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	a0 e2       	ldi	r26, 0x20	; 32
    3708:	b2 e4       	ldi	r27, 0x42	; 66
    370a:	8b 87       	std	Y+11, r24	; 0x0b
    370c:	9c 87       	std	Y+12, r25	; 0x0c
    370e:	ad 87       	std	Y+13, r26	; 0x0d
    3710:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3712:	6b 85       	ldd	r22, Y+11	; 0x0b
    3714:	7c 85       	ldd	r23, Y+12	; 0x0c
    3716:	8d 85       	ldd	r24, Y+13	; 0x0d
    3718:	9e 85       	ldd	r25, Y+14	; 0x0e
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	4a ef       	ldi	r20, 0xFA	; 250
    3720:	54 e4       	ldi	r21, 0x44	; 68
    3722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	8f 83       	std	Y+7, r24	; 0x07
    372c:	98 87       	std	Y+8, r25	; 0x08
    372e:	a9 87       	std	Y+9, r26	; 0x09
    3730:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3732:	6f 81       	ldd	r22, Y+7	; 0x07
    3734:	78 85       	ldd	r23, Y+8	; 0x08
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	9a 85       	ldd	r25, Y+10	; 0x0a
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e8       	ldi	r20, 0x80	; 128
    3740:	5f e3       	ldi	r21, 0x3F	; 63
    3742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3746:	88 23       	and	r24, r24
    3748:	2c f4       	brge	.+10     	; 0x3754 <CLCD_init+0x8c>
		__ticks = 1;
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	9e 83       	std	Y+6, r25	; 0x06
    3750:	8d 83       	std	Y+5, r24	; 0x05
    3752:	3f c0       	rjmp	.+126    	; 0x37d2 <CLCD_init+0x10a>
	else if (__tmp > 65535)
    3754:	6f 81       	ldd	r22, Y+7	; 0x07
    3756:	78 85       	ldd	r23, Y+8	; 0x08
    3758:	89 85       	ldd	r24, Y+9	; 0x09
    375a:	9a 85       	ldd	r25, Y+10	; 0x0a
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	3f ef       	ldi	r19, 0xFF	; 255
    3760:	4f e7       	ldi	r20, 0x7F	; 127
    3762:	57 e4       	ldi	r21, 0x47	; 71
    3764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3768:	18 16       	cp	r1, r24
    376a:	4c f5       	brge	.+82     	; 0x37be <CLCD_init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    376c:	6b 85       	ldd	r22, Y+11	; 0x0b
    376e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3770:	8d 85       	ldd	r24, Y+13	; 0x0d
    3772:	9e 85       	ldd	r25, Y+14	; 0x0e
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e2       	ldi	r20, 0x20	; 32
    377a:	51 e4       	ldi	r21, 0x41	; 65
    377c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	bc 01       	movw	r22, r24
    3786:	cd 01       	movw	r24, r26
    3788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	9e 83       	std	Y+6, r25	; 0x06
    3792:	8d 83       	std	Y+5, r24	; 0x05
    3794:	0f c0       	rjmp	.+30     	; 0x37b4 <CLCD_init+0xec>
    3796:	88 ec       	ldi	r24, 0xC8	; 200
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	9c 83       	std	Y+4, r25	; 0x04
    379c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    379e:	8b 81       	ldd	r24, Y+3	; 0x03
    37a0:	9c 81       	ldd	r25, Y+4	; 0x04
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <CLCD_init+0xda>
    37a6:	9c 83       	std	Y+4, r25	; 0x04
    37a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37aa:	8d 81       	ldd	r24, Y+5	; 0x05
    37ac:	9e 81       	ldd	r25, Y+6	; 0x06
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	9e 83       	std	Y+6, r25	; 0x06
    37b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b4:	8d 81       	ldd	r24, Y+5	; 0x05
    37b6:	9e 81       	ldd	r25, Y+6	; 0x06
    37b8:	00 97       	sbiw	r24, 0x00	; 0
    37ba:	69 f7       	brne	.-38     	; 0x3796 <CLCD_init+0xce>
    37bc:	14 c0       	rjmp	.+40     	; 0x37e6 <CLCD_init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37be:	6f 81       	ldd	r22, Y+7	; 0x07
    37c0:	78 85       	ldd	r23, Y+8	; 0x08
    37c2:	89 85       	ldd	r24, Y+9	; 0x09
    37c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	9e 83       	std	Y+6, r25	; 0x06
    37d0:	8d 83       	std	Y+5, r24	; 0x05
    37d2:	8d 81       	ldd	r24, Y+5	; 0x05
    37d4:	9e 81       	ldd	r25, Y+6	; 0x06
    37d6:	9a 83       	std	Y+2, r25	; 0x02
    37d8:	89 83       	std	Y+1, r24	; 0x01
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	9a 81       	ldd	r25, Y+2	; 0x02
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	f1 f7       	brne	.-4      	; 0x37de <CLCD_init+0x116>
    37e2:	9a 83       	std	Y+2, r25	; 0x02
    37e4:	89 83       	std	Y+1, r24	; 0x01
	#ifdef CLCD_OneLine_5x8Size
	CLCD_SendCommand(CLCD_OneLine_5x8Size);
	#elif CLCD_OneLine_5x11Size
	CLCD_SendCommand(CLCD_OneLine_5x11Size );
	#elif  CLCD_TwoLines_5x8Size
	CLCD_SendCommand(CLCD_TwoLines_5x8Size);
    37e6:	88 e3       	ldi	r24, 0x38	; 56
    37e8:	0e 94 05 1c 	call	0x380a	; 0x380a <CLCD_SendCommand>
	#elif CLCD_TwoLines_5x11Size
	CLCD_SendCommand(CLCD_TwoLines_5x11Size);
	#endif

	CLCD_SendCommand(CLCD_DISP_ON_CURSOR_BLINK);
    37ec:	8f e0       	ldi	r24, 0x0F	; 15
    37ee:	0e 94 05 1c 	call	0x380a	; 0x380a <CLCD_SendCommand>

	CLCD_SendCommand(CLCD_CLEAR);
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	0e 94 05 1c 	call	0x380a	; 0x380a <CLCD_SendCommand>
}
    37f8:	2e 96       	adiw	r28, 0x0e	; 14
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <CLCD_SendCommand>:

void CLCD_SendCommand(u8 Command)
{
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	2f 97       	sbiw	r28, 0x0f	; 15
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
	//SET ReadWrite pin low to write
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	61 e0       	ldi	r22, 0x01	; 1
    382e:	40 e0       	ldi	r20, 0x00	; 0
    3830:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
	//SET Data/Command Port value is the command
	DIO_SetPortValue(CLCD_DataPort,Command);
    3834:	82 e0       	ldi	r24, 0x02	; 2
    3836:	6f 85       	ldd	r22, Y+15	; 0x0f
    3838:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	62 e0       	ldi	r22, 0x02	; 2
    3840:	41 e0       	ldi	r20, 0x01	; 1
    3842:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	a0 e0       	ldi	r26, 0x00	; 0
    384c:	b0 e4       	ldi	r27, 0x40	; 64
    384e:	8b 87       	std	Y+11, r24	; 0x0b
    3850:	9c 87       	std	Y+12, r25	; 0x0c
    3852:	ad 87       	std	Y+13, r26	; 0x0d
    3854:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3856:	6b 85       	ldd	r22, Y+11	; 0x0b
    3858:	7c 85       	ldd	r23, Y+12	; 0x0c
    385a:	8d 85       	ldd	r24, Y+13	; 0x0d
    385c:	9e 85       	ldd	r25, Y+14	; 0x0e
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	4a ef       	ldi	r20, 0xFA	; 250
    3864:	54 e4       	ldi	r21, 0x44	; 68
    3866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	8f 83       	std	Y+7, r24	; 0x07
    3870:	98 87       	std	Y+8, r25	; 0x08
    3872:	a9 87       	std	Y+9, r26	; 0x09
    3874:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3876:	6f 81       	ldd	r22, Y+7	; 0x07
    3878:	78 85       	ldd	r23, Y+8	; 0x08
    387a:	89 85       	ldd	r24, Y+9	; 0x09
    387c:	9a 85       	ldd	r25, Y+10	; 0x0a
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e8       	ldi	r20, 0x80	; 128
    3884:	5f e3       	ldi	r21, 0x3F	; 63
    3886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    388a:	88 23       	and	r24, r24
    388c:	2c f4       	brge	.+10     	; 0x3898 <CLCD_SendCommand+0x8e>
		__ticks = 1;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	3f c0       	rjmp	.+126    	; 0x3916 <CLCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    3898:	6f 81       	ldd	r22, Y+7	; 0x07
    389a:	78 85       	ldd	r23, Y+8	; 0x08
    389c:	89 85       	ldd	r24, Y+9	; 0x09
    389e:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	3f ef       	ldi	r19, 0xFF	; 255
    38a4:	4f e7       	ldi	r20, 0x7F	; 127
    38a6:	57 e4       	ldi	r21, 0x47	; 71
    38a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ac:	18 16       	cp	r1, r24
    38ae:	4c f5       	brge	.+82     	; 0x3902 <CLCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	40 e2       	ldi	r20, 0x20	; 32
    38be:	51 e4       	ldi	r21, 0x41	; 65
    38c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	bc 01       	movw	r22, r24
    38ca:	cd 01       	movw	r24, r26
    38cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	9e 83       	std	Y+6, r25	; 0x06
    38d6:	8d 83       	std	Y+5, r24	; 0x05
    38d8:	0f c0       	rjmp	.+30     	; 0x38f8 <CLCD_SendCommand+0xee>
    38da:	88 ec       	ldi	r24, 0xC8	; 200
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	9c 83       	std	Y+4, r25	; 0x04
    38e0:	8b 83       	std	Y+3, r24	; 0x03
    38e2:	8b 81       	ldd	r24, Y+3	; 0x03
    38e4:	9c 81       	ldd	r25, Y+4	; 0x04
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	f1 f7       	brne	.-4      	; 0x38e6 <CLCD_SendCommand+0xdc>
    38ea:	9c 83       	std	Y+4, r25	; 0x04
    38ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ee:	8d 81       	ldd	r24, Y+5	; 0x05
    38f0:	9e 81       	ldd	r25, Y+6	; 0x06
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	9e 83       	std	Y+6, r25	; 0x06
    38f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f8:	8d 81       	ldd	r24, Y+5	; 0x05
    38fa:	9e 81       	ldd	r25, Y+6	; 0x06
    38fc:	00 97       	sbiw	r24, 0x00	; 0
    38fe:	69 f7       	brne	.-38     	; 0x38da <CLCD_SendCommand+0xd0>
    3900:	14 c0       	rjmp	.+40     	; 0x392a <CLCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3902:	6f 81       	ldd	r22, Y+7	; 0x07
    3904:	78 85       	ldd	r23, Y+8	; 0x08
    3906:	89 85       	ldd	r24, Y+9	; 0x09
    3908:	9a 85       	ldd	r25, Y+10	; 0x0a
    390a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	9e 83       	std	Y+6, r25	; 0x06
    3914:	8d 83       	std	Y+5, r24	; 0x05
    3916:	8d 81       	ldd	r24, Y+5	; 0x05
    3918:	9e 81       	ldd	r25, Y+6	; 0x06
    391a:	9a 83       	std	Y+2, r25	; 0x02
    391c:	89 83       	std	Y+1, r24	; 0x01
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	9a 81       	ldd	r25, Y+2	; 0x02
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	f1 f7       	brne	.-4      	; 0x3922 <CLCD_SendCommand+0x118>
    3926:	9a 83       	std	Y+2, r25	; 0x02
    3928:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	62 e0       	ldi	r22, 0x02	; 2
    392e:	40 e0       	ldi	r20, 0x00	; 0
    3930:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
}
    3934:	2f 96       	adiw	r28, 0x0f	; 15
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <CLCD_SendData>:

void CLCD_SendData(u8 Data)
{
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	2f 97       	sbiw	r28, 0x0f	; 15
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
    395a:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	60 e0       	ldi	r22, 0x00	; 0
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
	//SET ReadWrite pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	61 e0       	ldi	r22, 0x01	; 1
    396a:	40 e0       	ldi	r20, 0x00	; 0
    396c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
	//SET Data/Command Port value is the Data
	DIO_SetPortValue(CLCD_DataPort,Data);
    3970:	82 e0       	ldi	r24, 0x02	; 2
    3972:	6f 85       	ldd	r22, Y+15	; 0x0f
    3974:	0e 94 ef 0c 	call	0x19de	; 0x19de <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	62 e0       	ldi	r22, 0x02	; 2
    397c:	41 e0       	ldi	r20, 0x01	; 1
    397e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	a0 e0       	ldi	r26, 0x00	; 0
    3988:	b0 e4       	ldi	r27, 0x40	; 64
    398a:	8b 87       	std	Y+11, r24	; 0x0b
    398c:	9c 87       	std	Y+12, r25	; 0x0c
    398e:	ad 87       	std	Y+13, r26	; 0x0d
    3990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3992:	6b 85       	ldd	r22, Y+11	; 0x0b
    3994:	7c 85       	ldd	r23, Y+12	; 0x0c
    3996:	8d 85       	ldd	r24, Y+13	; 0x0d
    3998:	9e 85       	ldd	r25, Y+14	; 0x0e
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	4a ef       	ldi	r20, 0xFA	; 250
    39a0:	54 e4       	ldi	r21, 0x44	; 68
    39a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	8f 83       	std	Y+7, r24	; 0x07
    39ac:	98 87       	std	Y+8, r25	; 0x08
    39ae:	a9 87       	std	Y+9, r26	; 0x09
    39b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39b2:	6f 81       	ldd	r22, Y+7	; 0x07
    39b4:	78 85       	ldd	r23, Y+8	; 0x08
    39b6:	89 85       	ldd	r24, Y+9	; 0x09
    39b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	40 e8       	ldi	r20, 0x80	; 128
    39c0:	5f e3       	ldi	r21, 0x3F	; 63
    39c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39c6:	88 23       	and	r24, r24
    39c8:	2c f4       	brge	.+10     	; 0x39d4 <CLCD_SendData+0x8e>
		__ticks = 1;
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	9e 83       	std	Y+6, r25	; 0x06
    39d0:	8d 83       	std	Y+5, r24	; 0x05
    39d2:	3f c0       	rjmp	.+126    	; 0x3a52 <CLCD_SendData+0x10c>
	else if (__tmp > 65535)
    39d4:	6f 81       	ldd	r22, Y+7	; 0x07
    39d6:	78 85       	ldd	r23, Y+8	; 0x08
    39d8:	89 85       	ldd	r24, Y+9	; 0x09
    39da:	9a 85       	ldd	r25, Y+10	; 0x0a
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	3f ef       	ldi	r19, 0xFF	; 255
    39e0:	4f e7       	ldi	r20, 0x7F	; 127
    39e2:	57 e4       	ldi	r21, 0x47	; 71
    39e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39e8:	18 16       	cp	r1, r24
    39ea:	4c f5       	brge	.+82     	; 0x3a3e <CLCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e2       	ldi	r20, 0x20	; 32
    39fa:	51 e4       	ldi	r21, 0x41	; 65
    39fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	bc 01       	movw	r22, r24
    3a06:	cd 01       	movw	r24, r26
    3a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	0f c0       	rjmp	.+30     	; 0x3a34 <CLCD_SendData+0xee>
    3a16:	88 ec       	ldi	r24, 0xC8	; 200
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	9c 83       	std	Y+4, r25	; 0x04
    3a1c:	8b 83       	std	Y+3, r24	; 0x03
    3a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a20:	9c 81       	ldd	r25, Y+4	; 0x04
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	f1 f7       	brne	.-4      	; 0x3a22 <CLCD_SendData+0xdc>
    3a26:	9c 83       	std	Y+4, r25	; 0x04
    3a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a2e:	01 97       	sbiw	r24, 0x01	; 1
    3a30:	9e 83       	std	Y+6, r25	; 0x06
    3a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a34:	8d 81       	ldd	r24, Y+5	; 0x05
    3a36:	9e 81       	ldd	r25, Y+6	; 0x06
    3a38:	00 97       	sbiw	r24, 0x00	; 0
    3a3a:	69 f7       	brne	.-38     	; 0x3a16 <CLCD_SendData+0xd0>
    3a3c:	14 c0       	rjmp	.+40     	; 0x3a66 <CLCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a40:	78 85       	ldd	r23, Y+8	; 0x08
    3a42:	89 85       	ldd	r24, Y+9	; 0x09
    3a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	9e 83       	std	Y+6, r25	; 0x06
    3a50:	8d 83       	std	Y+5, r24	; 0x05
    3a52:	8d 81       	ldd	r24, Y+5	; 0x05
    3a54:	9e 81       	ldd	r25, Y+6	; 0x06
    3a56:	9a 83       	std	Y+2, r25	; 0x02
    3a58:	89 83       	std	Y+1, r24	; 0x01
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	f1 f7       	brne	.-4      	; 0x3a5e <CLCD_SendData+0x118>
    3a62:	9a 83       	std	Y+2, r25	; 0x02
    3a64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	62 e0       	ldi	r22, 0x02	; 2
    3a6a:	40 e0       	ldi	r20, 0x00	; 0
    3a6c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
}
    3a70:	2f 96       	adiw	r28, 0x0f	; 15
    3a72:	0f b6       	in	r0, 0x3f	; 63
    3a74:	f8 94       	cli
    3a76:	de bf       	out	0x3e, r29	; 62
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	cd bf       	out	0x3d, r28	; 61
    3a7c:	cf 91       	pop	r28
    3a7e:	df 91       	pop	r29
    3a80:	08 95       	ret

00003a82 <CLCD_SendWord>:

void CLCD_SendWord(u8 *Word_PTR)
{
    3a82:	df 93       	push	r29
    3a84:	cf 93       	push	r28
    3a86:	00 d0       	rcall	.+0      	; 0x3a88 <CLCD_SendWord+0x6>
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
    3a8c:	9a 83       	std	Y+2, r25	; 0x02
    3a8e:	89 83       	std	Y+1, r24	; 0x01
    3a90:	0b c0       	rjmp	.+22     	; 0x3aa8 <CLCD_SendWord+0x26>
	while(*Word_PTR) 		//Word = String = array of charaters
	{
		CLCD_SendData(*Word_PTR++);
    3a92:	e9 81       	ldd	r30, Y+1	; 0x01
    3a94:	fa 81       	ldd	r31, Y+2	; 0x02
    3a96:	20 81       	ld	r18, Z
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a9c:	01 96       	adiw	r24, 0x01	; 1
    3a9e:	9a 83       	std	Y+2, r25	; 0x02
    3aa0:	89 83       	std	Y+1, r24	; 0x01
    3aa2:	82 2f       	mov	r24, r18
    3aa4:	0e 94 a3 1c 	call	0x3946	; 0x3946 <CLCD_SendData>
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
}

void CLCD_SendWord(u8 *Word_PTR)
{
	while(*Word_PTR) 		//Word = String = array of charaters
    3aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    3aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    3aac:	80 81       	ld	r24, Z
    3aae:	88 23       	and	r24, r24
    3ab0:	81 f7       	brne	.-32     	; 0x3a92 <CLCD_SendWord+0x10>
	{
		CLCD_SendData(*Word_PTR++);
	}
}
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	cf 91       	pop	r28
    3ab8:	df 91       	pop	r29
    3aba:	08 95       	ret

00003abc <CLCD_GoToXY>:

//to move from position to another in CLCD
STD_Return CLCD_GoToXY(u8 X_Position,u8 Y_Position)
{
    3abc:	df 93       	push	r29
    3abe:	cf 93       	push	r28
    3ac0:	00 d0       	rcall	.+0      	; 0x3ac2 <CLCD_GoToXY+0x6>
    3ac2:	00 d0       	rcall	.+0      	; 0x3ac4 <CLCD_GoToXY+0x8>
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
    3ac8:	8a 83       	std	Y+2, r24	; 0x02
    3aca:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_address;
	if(X_Position == 0)
    3acc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ace:	88 23       	and	r24, r24
    3ad0:	49 f4       	brne	.+18     	; 0x3ae4 <CLCD_GoToXY+0x28>
		{
			DDRAM_address = Y_Position;
    3ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad4:	89 83       	std	Y+1, r24	; 0x01
			CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
    3ad8:	80 58       	subi	r24, 0x80	; 128
    3ada:	0e 94 05 1c 	call	0x380a	; 0x380a <CLCD_SendCommand>
			return E_NOK;
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	8c 83       	std	Y+4, r24	; 0x04
    3ae2:	0e c0       	rjmp	.+28     	; 0x3b00 <CLCD_GoToXY+0x44>
		}
	else if (X_Position == 1)
    3ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae6:	81 30       	cpi	r24, 0x01	; 1
    3ae8:	51 f4       	brne	.+20     	; 0x3afe <CLCD_GoToXY+0x42>
		{
		DDRAM_address = Y_Position + FirstLoc_SecondLine;
    3aea:	8b 81       	ldd	r24, Y+3	; 0x03
    3aec:	80 5c       	subi	r24, 0xC0	; 192
    3aee:	89 83       	std	Y+1, r24	; 0x01
		CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    3af0:	89 81       	ldd	r24, Y+1	; 0x01
    3af2:	80 58       	subi	r24, 0x80	; 128
    3af4:	0e 94 05 1c 	call	0x380a	; 0x380a <CLCD_SendCommand>
		return E_NOK;
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	8c 83       	std	Y+4, r24	; 0x04
    3afc:	01 c0       	rjmp	.+2      	; 0x3b00 <CLCD_GoToXY+0x44>
		}
	else
	{
		return E_OK;
    3afe:	1c 82       	std	Y+4, r1	; 0x04
    3b00:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    3b02:	0f 90       	pop	r0
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <CLCD_SendSpecialChar>:
//to write special function by CGRAM
void CLCD_SendSpecialChar(u8 *Pattern,u8 BlockNumber,u8 X_Position,u8 Y_Position)
{
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	27 97       	sbiw	r28, 0x07	; 7
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	9c 83       	std	Y+4, r25	; 0x04
    3b26:	8b 83       	std	Y+3, r24	; 0x03
    3b28:	6d 83       	std	Y+5, r22	; 0x05
    3b2a:	4e 83       	std	Y+6, r20	; 0x06
    3b2c:	2f 83       	std	Y+7, r18	; 0x07
	u8 CGRAM_address=0;
    3b2e:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter;
	CGRAM_address = BlockNumber*8;
    3b30:	8d 81       	ldd	r24, Y+5	; 0x05
    3b32:	88 2f       	mov	r24, r24
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	88 0f       	add	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_SendCommand(CGRAM_address+Set_Bit6);
    3b44:	8a 81       	ldd	r24, Y+2	; 0x02
    3b46:	80 5c       	subi	r24, 0xC0	; 192
    3b48:	0e 94 05 1c 	call	0x380a	; 0x380a <CLCD_SendCommand>

	for(counter=0;counter<8;counter++)
    3b4c:	19 82       	std	Y+1, r1	; 0x01
    3b4e:	0e c0       	rjmp	.+28     	; 0x3b6c <CLCD_SendSpecialChar+0x5c>
		{
			CLCD_SendData(Pattern[counter]);
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	28 2f       	mov	r18, r24
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	8b 81       	ldd	r24, Y+3	; 0x03
    3b58:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	e2 0f       	add	r30, r18
    3b5e:	f3 1f       	adc	r31, r19
    3b60:	80 81       	ld	r24, Z
    3b62:	0e 94 a3 1c 	call	0x3946	; 0x3946 <CLCD_SendData>
	u8 CGRAM_address=0;
	u8 counter;
	CGRAM_address = BlockNumber*8;
	CLCD_SendCommand(CGRAM_address+Set_Bit6);

	for(counter=0;counter<8;counter++)
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	8f 5f       	subi	r24, 0xFF	; 255
    3b6a:	89 83       	std	Y+1, r24	; 0x01
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	88 30       	cpi	r24, 0x08	; 8
    3b70:	78 f3       	brcs	.-34     	; 0x3b50 <CLCD_SendSpecialChar+0x40>
		{
			CLCD_SendData(Pattern[counter]);
		}
	CLCD_GoToXY(X_Position,Y_Position);
    3b72:	8e 81       	ldd	r24, Y+6	; 0x06
    3b74:	6f 81       	ldd	r22, Y+7	; 0x07
    3b76:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <CLCD_GoToXY>
	CLCD_SendData(BlockNumber);
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	0e 94 a3 1c 	call	0x3946	; 0x3946 <CLCD_SendData>
}
    3b80:	27 96       	adiw	r28, 0x07	; 7
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	f8 94       	cli
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	cd bf       	out	0x3d, r28	; 61
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <CLCD_Display_Decimal_Number>:

void CLCD_Display_Decimal_Number(s32 num)
{
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	61 97       	sbiw	r28, 0x11	; 17
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	de bf       	out	0x3e, r29	; 62
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	cd bf       	out	0x3d, r28	; 61
    3ba6:	6e 87       	std	Y+14, r22	; 0x0e
    3ba8:	7f 87       	std	Y+15, r23	; 0x0f
    3baa:	88 8b       	std	Y+16, r24	; 0x10
    3bac:	99 8b       	std	Y+17, r25	; 0x11
	u8 i = 0, j, digit, str[10];
    3bae:	1b 82       	std	Y+3, r1	; 0x03

	/* if number 0 */
	if (0 == num)
    3bb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bb4:	a8 89       	ldd	r26, Y+16	; 0x10
    3bb6:	b9 89       	ldd	r27, Y+17	; 0x11
    3bb8:	00 97       	sbiw	r24, 0x00	; 0
    3bba:	a1 05       	cpc	r26, r1
    3bbc:	b1 05       	cpc	r27, r1
    3bbe:	19 f4       	brne	.+6      	; 0x3bc6 <CLCD_Display_Decimal_Number+0x34>
	{
		CLCD_SendData('0');
    3bc0:	80 e3       	ldi	r24, 0x30	; 48
    3bc2:	0e 94 a3 1c 	call	0x3946	; 0x3946 <CLCD_SendData>
	}

	/* if the number is negative */
	if (num < 0)
    3bc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bca:	a8 89       	ldd	r26, Y+16	; 0x10
    3bcc:	b9 89       	ldd	r27, Y+17	; 0x11
    3bce:	bb 23       	and	r27, r27
    3bd0:	0c f0       	brlt	.+2      	; 0x3bd4 <CLCD_Display_Decimal_Number+0x42>
    3bd2:	42 c0       	rjmp	.+132    	; 0x3c58 <CLCD_Display_Decimal_Number+0xc6>
	{
		CLCD_SendData('-');
    3bd4:	8d e2       	ldi	r24, 0x2D	; 45
    3bd6:	0e 94 a3 1c 	call	0x3946	; 0x3946 <CLCD_SendData>

		/* convert to positive form */
		num = num * -1;
    3bda:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bdc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bde:	a8 89       	ldd	r26, Y+16	; 0x10
    3be0:	b9 89       	ldd	r27, Y+17	; 0x11
    3be2:	b0 95       	com	r27
    3be4:	a0 95       	com	r26
    3be6:	90 95       	com	r25
    3be8:	81 95       	neg	r24
    3bea:	9f 4f       	sbci	r25, 0xFF	; 255
    3bec:	af 4f       	sbci	r26, 0xFF	; 255
    3bee:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf0:	8e 87       	std	Y+14, r24	; 0x0e
    3bf2:	9f 87       	std	Y+15, r25	; 0x0f
    3bf4:	a8 8b       	std	Y+16, r26	; 0x10
    3bf6:	b9 8b       	std	Y+17, r27	; 0x11
    3bf8:	2f c0       	rjmp	.+94     	; 0x3c58 <CLCD_Display_Decimal_Number+0xc6>
	}

	/* loop on digits of the number */
	while (num > 0)
	{
		digit = (num % 10) + '0';
    3bfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bfe:	a8 89       	ldd	r26, Y+16	; 0x10
    3c00:	b9 89       	ldd	r27, Y+17	; 0x11
    3c02:	2a e0       	ldi	r18, 0x0A	; 10
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	40 e0       	ldi	r20, 0x00	; 0
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	bc 01       	movw	r22, r24
    3c0c:	cd 01       	movw	r24, r26
    3c0e:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__divmodsi4>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	80 5d       	subi	r24, 0xD0	; 208
    3c18:	89 83       	std	Y+1, r24	; 0x01
		str[i] = digit;
    3c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1c:	28 2f       	mov	r18, r24
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	ce 01       	movw	r24, r28
    3c22:	04 96       	adiw	r24, 0x04	; 4
    3c24:	fc 01       	movw	r30, r24
    3c26:	e2 0f       	add	r30, r18
    3c28:	f3 1f       	adc	r31, r19
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	80 83       	st	Z, r24
		num /= 10;
    3c2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c30:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c32:	a8 89       	ldd	r26, Y+16	; 0x10
    3c34:	b9 89       	ldd	r27, Y+17	; 0x11
    3c36:	2a e0       	ldi	r18, 0x0A	; 10
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	40 e0       	ldi	r20, 0x00	; 0
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	bc 01       	movw	r22, r24
    3c40:	cd 01       	movw	r24, r26
    3c42:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__divmodsi4>
    3c46:	da 01       	movw	r26, r20
    3c48:	c9 01       	movw	r24, r18
    3c4a:	8e 87       	std	Y+14, r24	; 0x0e
    3c4c:	9f 87       	std	Y+15, r25	; 0x0f
    3c4e:	a8 8b       	std	Y+16, r26	; 0x10
    3c50:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    3c52:	8b 81       	ldd	r24, Y+3	; 0x03
    3c54:	8f 5f       	subi	r24, 0xFF	; 255
    3c56:	8b 83       	std	Y+3, r24	; 0x03
		/* convert to positive form */
		num = num * -1;
	}

	/* loop on digits of the number */
	while (num > 0)
    3c58:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c5c:	a8 89       	ldd	r26, Y+16	; 0x10
    3c5e:	b9 89       	ldd	r27, Y+17	; 0x11
    3c60:	18 16       	cp	r1, r24
    3c62:	19 06       	cpc	r1, r25
    3c64:	1a 06       	cpc	r1, r26
    3c66:	1b 06       	cpc	r1, r27
    3c68:	44 f2       	brlt	.-112    	; 0x3bfa <CLCD_Display_Decimal_Number+0x68>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    3c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6c:	8a 83       	std	Y+2, r24	; 0x02
    3c6e:	11 c0       	rjmp	.+34     	; 0x3c92 <CLCD_Display_Decimal_Number+0x100>
	{
		CLCD_SendData(str[j - 1]);
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	88 2f       	mov	r24, r24
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	9c 01       	movw	r18, r24
    3c78:	21 50       	subi	r18, 0x01	; 1
    3c7a:	30 40       	sbci	r19, 0x00	; 0
    3c7c:	ce 01       	movw	r24, r28
    3c7e:	04 96       	adiw	r24, 0x04	; 4
    3c80:	fc 01       	movw	r30, r24
    3c82:	e2 0f       	add	r30, r18
    3c84:	f3 1f       	adc	r31, r19
    3c86:	80 81       	ld	r24, Z
    3c88:	0e 94 a3 1c 	call	0x3946	; 0x3946 <CLCD_SendData>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    3c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8e:	81 50       	subi	r24, 0x01	; 1
    3c90:	8a 83       	std	Y+2, r24	; 0x02
    3c92:	8a 81       	ldd	r24, Y+2	; 0x02
    3c94:	88 23       	and	r24, r24
    3c96:	61 f7       	brne	.-40     	; 0x3c70 <CLCD_Display_Decimal_Number+0xde>
	{
		CLCD_SendData(str[j - 1]);
	}
}
    3c98:	61 96       	adiw	r28, 0x11	; 17
    3c9a:	0f b6       	in	r0, 0x3f	; 63
    3c9c:	f8 94       	cli
    3c9e:	de bf       	out	0x3e, r29	; 62
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	cd bf       	out	0x3d, r28	; 61
    3ca4:	cf 91       	pop	r28
    3ca6:	df 91       	pop	r29
    3ca8:	08 95       	ret

00003caa <CLCD_Display_RealNumber>:
void CLCD_Display_RealNumber(f32 num)
{
    3caa:	df 93       	push	r29
    3cac:	cf 93       	push	r28
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
    3cb2:	29 97       	sbiw	r28, 0x09	; 9
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	f8 94       	cli
    3cb8:	de bf       	out	0x3e, r29	; 62
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	cd bf       	out	0x3d, r28	; 61
    3cbe:	6e 83       	std	Y+6, r22	; 0x06
    3cc0:	7f 83       	std	Y+7, r23	; 0x07
    3cc2:	88 87       	std	Y+8, r24	; 0x08
    3cc4:	99 87       	std	Y+9, r25	; 0x09
	//Left number to the decimal point
	s32 left = (s32)num;
    3cc6:	6e 81       	ldd	r22, Y+6	; 0x06
    3cc8:	7f 81       	ldd	r23, Y+7	; 0x07
    3cca:	88 85       	ldd	r24, Y+8	; 0x08
    3ccc:	99 85       	ldd	r25, Y+9	; 0x09
    3cce:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	8a 83       	std	Y+2, r24	; 0x02
    3cd8:	9b 83       	std	Y+3, r25	; 0x03
    3cda:	ac 83       	std	Y+4, r26	; 0x04
    3cdc:	bd 83       	std	Y+5, r27	; 0x05
	//calculation to the Right number to the decimal point
	u8 right = (f32)(num - left) * 100;
    3cde:	6a 81       	ldd	r22, Y+2	; 0x02
    3ce0:	7b 81       	ldd	r23, Y+3	; 0x03
    3ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ce6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3cea:	9b 01       	movw	r18, r22
    3cec:	ac 01       	movw	r20, r24
    3cee:	6e 81       	ldd	r22, Y+6	; 0x06
    3cf0:	7f 81       	ldd	r23, Y+7	; 0x07
    3cf2:	88 85       	ldd	r24, Y+8	; 0x08
    3cf4:	99 85       	ldd	r25, Y+9	; 0x09
    3cf6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	bc 01       	movw	r22, r24
    3d00:	cd 01       	movw	r24, r26
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	48 ec       	ldi	r20, 0xC8	; 200
    3d08:	52 e4       	ldi	r21, 0x42	; 66
    3d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	bc 01       	movw	r22, r24
    3d14:	cd 01       	movw	r24, r26
    3d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	89 83       	std	Y+1, r24	; 0x01
	//Display Left number to the decimal point
	CLCD_Display_Decimal_Number(left);
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	9b 81       	ldd	r25, Y+3	; 0x03
    3d24:	ac 81       	ldd	r26, Y+4	; 0x04
    3d26:	bd 81       	ldd	r27, Y+5	; 0x05
    3d28:	bc 01       	movw	r22, r24
    3d2a:	cd 01       	movw	r24, r26
    3d2c:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <CLCD_Display_Decimal_Number>
	//Display the decimal point
	CLCD_SendData('.');
    3d30:	8e e2       	ldi	r24, 0x2E	; 46
    3d32:	0e 94 a3 1c 	call	0x3946	; 0x3946 <CLCD_SendData>
	//Display the Right number to the decimal point
	CLCD_Display_Decimal_Number(right);
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	88 2f       	mov	r24, r24
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	a0 e0       	ldi	r26, 0x00	; 0
    3d3e:	b0 e0       	ldi	r27, 0x00	; 0
    3d40:	bc 01       	movw	r22, r24
    3d42:	cd 01       	movw	r24, r26
    3d44:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <CLCD_Display_Decimal_Number>
}
    3d48:	29 96       	adiw	r28, 0x09	; 9
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	de bf       	out	0x3e, r29	; 62
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	cd bf       	out	0x3d, r28	; 61
    3d54:	cf 91       	pop	r28
    3d56:	df 91       	pop	r29
    3d58:	08 95       	ret

00003d5a <KeyPad_Pressed_Key>:
 * Description          : function to define which switch is pressed in the keypad
 * 
 * @return u8           : return the value of the pressed switch 
 */
u8 KeyPad_Pressed_Key(void)
{
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	00 d0       	rcall	.+0      	; 0x3d60 <KeyPad_Pressed_Key+0x6>
    3d60:	00 d0       	rcall	.+0      	; 0x3d62 <KeyPad_Pressed_Key+0x8>
    3d62:	0f 92       	push	r0
    3d64:	cd b7       	in	r28, 0x3d	; 61
    3d66:	de b7       	in	r29, 0x3e	; 62
	u8 ColumnIndex,RowIndex,PinState,PressedKey;

	PressedKey=Key_Not_Pressed;
    3d68:	8f ef       	ldi	r24, 0xFF	; 255
    3d6a:	89 83       	std	Y+1, r24	; 0x01

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    3d6c:	1b 82       	std	Y+3, r1	; 0x03
    3d6e:	7a c0       	rjmp	.+244    	; 0x3e64 <KeyPad_Pressed_Key+0x10a>
	{
		//Set column of Keypad Output
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
    3d70:	81 e0       	ldi	r24, 0x01	; 1
    3d72:	6f ef       	ldi	r22, 0xFF	; 255
    3d74:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_SetPortDirection>
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);
    3d78:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7a:	88 2f       	mov	r24, r24
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	fc 01       	movw	r30, r24
    3d80:	e8 59       	subi	r30, 0x98	; 152
    3d82:	fe 4f       	sbci	r31, 0xFE	; 254
    3d84:	90 81       	ld	r25, Z
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	69 2f       	mov	r22, r25
    3d8a:	40 e0       	ldi	r20, 0x00	; 0
    3d8c:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    3d90:	1a 82       	std	Y+2, r1	; 0x02
    3d92:	55 c0       	rjmp	.+170    	; 0x3e3e <KeyPad_Pressed_Key+0xe4>
		{
			//Set Row input and activate pull-up
			DIO_SetPinDirection(KeyPad_Port,KeyPad_Row_Arr[RowIndex],DIO_INPUT);
    3d94:	8a 81       	ldd	r24, Y+2	; 0x02
    3d96:	88 2f       	mov	r24, r24
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	e4 59       	subi	r30, 0x94	; 148
    3d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3da0:	90 81       	ld	r25, Z
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	69 2f       	mov	r22, r25
    3da6:	40 e0       	ldi	r20, 0x00	; 0
    3da8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
			DIO_EnablePullup(KeyPad_Port,KeyPad_Row_Arr[RowIndex],ENABLE_PullUp);
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	88 2f       	mov	r24, r24
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	fc 01       	movw	r30, r24
    3db4:	e4 59       	subi	r30, 0x94	; 148
    3db6:	fe 4f       	sbci	r31, 0xFE	; 254
    3db8:	90 81       	ld	r25, Z
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	69 2f       	mov	r22, r25
    3dbe:	40 e0       	ldi	r20, 0x00	; 0
    3dc0:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <DIO_EnablePullup>

			//Read the current row
			DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    3dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc6:	88 2f       	mov	r24, r24
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	fc 01       	movw	r30, r24
    3dcc:	e4 59       	subi	r30, 0x94	; 148
    3dce:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd0:	90 81       	ld	r25, Z
    3dd2:	9e 01       	movw	r18, r28
    3dd4:	2c 5f       	subi	r18, 0xFC	; 252
    3dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	69 2f       	mov	r22, r25
    3ddc:	a9 01       	movw	r20, r18
    3dde:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <DIO_GetPinValue>

			//Check if switch is pressed
			if(PinState==DIO_LOW)
    3de2:	8c 81       	ldd	r24, Y+4	; 0x04
    3de4:	88 23       	and	r24, r24
    3de6:	41 f5       	brne	.+80     	; 0x3e38 <KeyPad_Pressed_Key+0xde>
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	48 2f       	mov	r20, r24
    3dec:	50 e0       	ldi	r21, 0x00	; 0
    3dee:	8b 81       	ldd	r24, Y+3	; 0x03
    3df0:	28 2f       	mov	r18, r24
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	ca 01       	movw	r24, r20
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	88 0f       	add	r24, r24
    3dfc:	99 1f       	adc	r25, r25
    3dfe:	82 0f       	add	r24, r18
    3e00:	93 1f       	adc	r25, r19
    3e02:	fc 01       	movw	r30, r24
    3e04:	e0 59       	subi	r30, 0x90	; 144
    3e06:	fe 4f       	sbci	r31, 0xFE	; 254
    3e08:	80 81       	ld	r24, Z
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    3e0c:	0f c0       	rjmp	.+30     	; 0x3e2c <KeyPad_Pressed_Key+0xd2>

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    3e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e10:	88 2f       	mov	r24, r24
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	fc 01       	movw	r30, r24
    3e16:	e4 59       	subi	r30, 0x94	; 148
    3e18:	fe 4f       	sbci	r31, 0xFE	; 254
    3e1a:	90 81       	ld	r25, Z
    3e1c:	9e 01       	movw	r18, r28
    3e1e:	2c 5f       	subi	r18, 0xFC	; 252
    3e20:	3f 4f       	sbci	r19, 0xFF	; 255
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	69 2f       	mov	r22, r25
    3e26:	a9 01       	movw	r20, r18
    3e28:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <DIO_GetPinValue>
			if(PinState==DIO_LOW)
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
    3e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e2e:	88 23       	and	r24, r24
    3e30:	71 f3       	breq	.-36     	; 0x3e0e <KeyPad_Pressed_Key+0xb4>
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
				}
				return PressedKey;
    3e32:	89 81       	ldd	r24, Y+1	; 0x01
    3e34:	8d 83       	std	Y+5, r24	; 0x05
    3e36:	1c c0       	rjmp	.+56     	; 0x3e70 <KeyPad_Pressed_Key+0x116>
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    3e38:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3a:	8f 5f       	subi	r24, 0xFF	; 255
    3e3c:	8a 83       	std	Y+2, r24	; 0x02
    3e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e40:	84 30       	cpi	r24, 0x04	; 4
    3e42:	08 f4       	brcc	.+2      	; 0x3e46 <KeyPad_Pressed_Key+0xec>
    3e44:	a7 cf       	rjmp	.-178    	; 0x3d94 <KeyPad_Pressed_Key+0x3a>
				}
				return PressedKey;
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
    3e46:	8b 81       	ldd	r24, Y+3	; 0x03
    3e48:	88 2f       	mov	r24, r24
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	e8 59       	subi	r30, 0x98	; 152
    3e50:	fe 4f       	sbci	r31, 0xFE	; 254
    3e52:	90 81       	ld	r25, Z
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	69 2f       	mov	r22, r25
    3e58:	41 e0       	ldi	r20, 0x01	; 1
    3e5a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e60:	8f 5f       	subi	r24, 0xFF	; 255
    3e62:	8b 83       	std	Y+3, r24	; 0x03
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
    3e66:	84 30       	cpi	r24, 0x04	; 4
    3e68:	08 f4       	brcc	.+2      	; 0x3e6c <KeyPad_Pressed_Key+0x112>
    3e6a:	82 cf       	rjmp	.-252    	; 0x3d70 <KeyPad_Pressed_Key+0x16>
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
	}
	return PressedKey;
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	8d 83       	std	Y+5, r24	; 0x05
    3e70:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	08 95       	ret

00003e82 <LED_DELAY>:
#include "MCAL/DIO/DIO_interface.h"
#include "MCAL/Timer/timer.h"
#include "MCAL/External_Interrupt/External_Interrupt.h"

void LED_DELAY(void)
	{
    3e82:	df 93       	push	r29
    3e84:	cf 93       	push	r28
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
		static u16 counter=0;
		counter++;
    3e8a:	80 91 8a 01 	lds	r24, 0x018A
    3e8e:	90 91 8b 01 	lds	r25, 0x018B
    3e92:	01 96       	adiw	r24, 0x01	; 1
    3e94:	90 93 8b 01 	sts	0x018B, r25
    3e98:	80 93 8a 01 	sts	0x018A, r24
		if(counter==4000)
    3e9c:	80 91 8a 01 	lds	r24, 0x018A
    3ea0:	90 91 8b 01 	lds	r25, 0x018B
    3ea4:	2f e0       	ldi	r18, 0x0F	; 15
    3ea6:	80 3a       	cpi	r24, 0xA0	; 160
    3ea8:	92 07       	cpc	r25, r18
    3eaa:	41 f4       	brne	.+16     	; 0x3ebc <LED_DELAY+0x3a>
		{
			DIO_togglePin(DIO_PORTB,0);
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	60 e0       	ldi	r22, 0x00	; 0
    3eb0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_togglePin>
			counter=0;
    3eb4:	10 92 8b 01 	sts	0x018B, r1
    3eb8:	10 92 8a 01 	sts	0x018A, r1
		}

	}
    3ebc:	cf 91       	pop	r28
    3ebe:	df 91       	pop	r29
    3ec0:	08 95       	ret

00003ec2 <main>:
void main()
	{
    3ec2:	df 93       	push	r29
    3ec4:	cf 93       	push	r28
    3ec6:	cd b7       	in	r28, 0x3d	; 61
    3ec8:	de b7       	in	r29, 0x3e	; 62
			Timer0_init();
    3eca:	0e 94 75 07 	call	0xeea	; 0xeea <Timer0_init>
			DIO_SetPinDirection(DIO_PORTB,0,DIO_OUTPUT);
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	41 e0       	ldi	r20, 0x01	; 1
    3ed4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPinDirection>
			DIO_SetPinValue(DIO_PORTB,0,DIO_HIGH);
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	41 e0       	ldi	r20, 0x01	; 1
    3ede:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_SetPinValue>
			Timer0_SetValue(250);
    3ee2:	8a ef       	ldi	r24, 0xFA	; 250
    3ee4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Timer0_SetValue>
			Timer0_CallBack(&LED_DELAY);
    3ee8:	81 e4       	ldi	r24, 0x41	; 65
    3eea:	9f e1       	ldi	r25, 0x1F	; 31
    3eec:	0e 94 b4 07 	call	0xf68	; 0xf68 <Timer0_CallBack>
			Enable_Global_Interrupt(Enable_GIE_Interrupt);
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
    3ef2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <Enable_Global_Interrupt>
    3ef6:	ff cf       	rjmp	.-2      	; 0x3ef6 <main+0x34>

00003ef8 <__divmodsi4>:
    3ef8:	97 fb       	bst	r25, 7
    3efa:	09 2e       	mov	r0, r25
    3efc:	05 26       	eor	r0, r21
    3efe:	0e d0       	rcall	.+28     	; 0x3f1c <__divmodsi4_neg1>
    3f00:	57 fd       	sbrc	r21, 7
    3f02:	04 d0       	rcall	.+8      	; 0x3f0c <__divmodsi4_neg2>
    3f04:	14 d0       	rcall	.+40     	; 0x3f2e <__udivmodsi4>
    3f06:	0a d0       	rcall	.+20     	; 0x3f1c <__divmodsi4_neg1>
    3f08:	00 1c       	adc	r0, r0
    3f0a:	38 f4       	brcc	.+14     	; 0x3f1a <__divmodsi4_exit>

00003f0c <__divmodsi4_neg2>:
    3f0c:	50 95       	com	r21
    3f0e:	40 95       	com	r20
    3f10:	30 95       	com	r19
    3f12:	21 95       	neg	r18
    3f14:	3f 4f       	sbci	r19, 0xFF	; 255
    3f16:	4f 4f       	sbci	r20, 0xFF	; 255
    3f18:	5f 4f       	sbci	r21, 0xFF	; 255

00003f1a <__divmodsi4_exit>:
    3f1a:	08 95       	ret

00003f1c <__divmodsi4_neg1>:
    3f1c:	f6 f7       	brtc	.-4      	; 0x3f1a <__divmodsi4_exit>
    3f1e:	90 95       	com	r25
    3f20:	80 95       	com	r24
    3f22:	70 95       	com	r23
    3f24:	61 95       	neg	r22
    3f26:	7f 4f       	sbci	r23, 0xFF	; 255
    3f28:	8f 4f       	sbci	r24, 0xFF	; 255
    3f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f2c:	08 95       	ret

00003f2e <__udivmodsi4>:
    3f2e:	a1 e2       	ldi	r26, 0x21	; 33
    3f30:	1a 2e       	mov	r1, r26
    3f32:	aa 1b       	sub	r26, r26
    3f34:	bb 1b       	sub	r27, r27
    3f36:	fd 01       	movw	r30, r26
    3f38:	0d c0       	rjmp	.+26     	; 0x3f54 <__udivmodsi4_ep>

00003f3a <__udivmodsi4_loop>:
    3f3a:	aa 1f       	adc	r26, r26
    3f3c:	bb 1f       	adc	r27, r27
    3f3e:	ee 1f       	adc	r30, r30
    3f40:	ff 1f       	adc	r31, r31
    3f42:	a2 17       	cp	r26, r18
    3f44:	b3 07       	cpc	r27, r19
    3f46:	e4 07       	cpc	r30, r20
    3f48:	f5 07       	cpc	r31, r21
    3f4a:	20 f0       	brcs	.+8      	; 0x3f54 <__udivmodsi4_ep>
    3f4c:	a2 1b       	sub	r26, r18
    3f4e:	b3 0b       	sbc	r27, r19
    3f50:	e4 0b       	sbc	r30, r20
    3f52:	f5 0b       	sbc	r31, r21

00003f54 <__udivmodsi4_ep>:
    3f54:	66 1f       	adc	r22, r22
    3f56:	77 1f       	adc	r23, r23
    3f58:	88 1f       	adc	r24, r24
    3f5a:	99 1f       	adc	r25, r25
    3f5c:	1a 94       	dec	r1
    3f5e:	69 f7       	brne	.-38     	; 0x3f3a <__udivmodsi4_loop>
    3f60:	60 95       	com	r22
    3f62:	70 95       	com	r23
    3f64:	80 95       	com	r24
    3f66:	90 95       	com	r25
    3f68:	9b 01       	movw	r18, r22
    3f6a:	ac 01       	movw	r20, r24
    3f6c:	bd 01       	movw	r22, r26
    3f6e:	cf 01       	movw	r24, r30
    3f70:	08 95       	ret

00003f72 <__prologue_saves__>:
    3f72:	2f 92       	push	r2
    3f74:	3f 92       	push	r3
    3f76:	4f 92       	push	r4
    3f78:	5f 92       	push	r5
    3f7a:	6f 92       	push	r6
    3f7c:	7f 92       	push	r7
    3f7e:	8f 92       	push	r8
    3f80:	9f 92       	push	r9
    3f82:	af 92       	push	r10
    3f84:	bf 92       	push	r11
    3f86:	cf 92       	push	r12
    3f88:	df 92       	push	r13
    3f8a:	ef 92       	push	r14
    3f8c:	ff 92       	push	r15
    3f8e:	0f 93       	push	r16
    3f90:	1f 93       	push	r17
    3f92:	cf 93       	push	r28
    3f94:	df 93       	push	r29
    3f96:	cd b7       	in	r28, 0x3d	; 61
    3f98:	de b7       	in	r29, 0x3e	; 62
    3f9a:	ca 1b       	sub	r28, r26
    3f9c:	db 0b       	sbc	r29, r27
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	de bf       	out	0x3e, r29	; 62
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	cd bf       	out	0x3d, r28	; 61
    3fa8:	09 94       	ijmp

00003faa <__epilogue_restores__>:
    3faa:	2a 88       	ldd	r2, Y+18	; 0x12
    3fac:	39 88       	ldd	r3, Y+17	; 0x11
    3fae:	48 88       	ldd	r4, Y+16	; 0x10
    3fb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fba:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fbc:	b9 84       	ldd	r11, Y+9	; 0x09
    3fbe:	c8 84       	ldd	r12, Y+8	; 0x08
    3fc0:	df 80       	ldd	r13, Y+7	; 0x07
    3fc2:	ee 80       	ldd	r14, Y+6	; 0x06
    3fc4:	fd 80       	ldd	r15, Y+5	; 0x05
    3fc6:	0c 81       	ldd	r16, Y+4	; 0x04
    3fc8:	1b 81       	ldd	r17, Y+3	; 0x03
    3fca:	aa 81       	ldd	r26, Y+2	; 0x02
    3fcc:	b9 81       	ldd	r27, Y+1	; 0x01
    3fce:	ce 0f       	add	r28, r30
    3fd0:	d1 1d       	adc	r29, r1
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	ed 01       	movw	r28, r26
    3fde:	08 95       	ret

00003fe0 <_exit>:
    3fe0:	f8 94       	cli

00003fe2 <__stop_program>:
    3fe2:	ff cf       	rjmp	.-2      	; 0x3fe2 <__stop_program>
