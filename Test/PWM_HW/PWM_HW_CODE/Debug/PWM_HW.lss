
PWM_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000408c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  0000408c  00004120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800180  00800180  00004240  2**0
                  ALLOC
  3 .stab         0000453c  00000000  00000000  00004240  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000216f  00000000  00000000  0000877c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a8eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000aaab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000acbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000d2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000e79f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000faac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000fc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000ff93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000109ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_1>
       8:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_2>
       c:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <main>
      8a:	0c 94 44 20 	jmp	0x4088	; 0x4088 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 20 	jmp	0x401a	; 0x401a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 20 	jmp	0x401a	; 0x401a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 15 20 	jmp	0x402a	; 0x402a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 31 20 	jmp	0x4062	; 0x4062 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 16 20 	jmp	0x402c	; 0x402c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 15 20 	jmp	0x402a	; 0x402a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 31 20 	jmp	0x4062	; 0x4062 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Timer0_init>:

#include "timer.h"

static void (*CTC_CallBack_Func)(void);
void Timer0_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR0,COM00);
				SET_BIT(TCCR0,COM01);
		#endif

#elif  defined Timer0_Fast_PWM_Mode
		SET_BIT(TCCR0,WGM00);
     ef2:	a3 e5       	ldi	r26, 0x53	; 83
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e3 e5       	ldi	r30, 0x53	; 83
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
     f00:	a3 e5       	ldi	r26, 0x53	; 83
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e3 e5       	ldi	r30, 0x53	; 83
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	8c 93       	st	X, r24
		/*OC0 -> PINB3 in Atmega32*/
		#if defined Normal_PORT_Operation //OC0 Disconnected
				CLEAR_BIT(TCCR0,COM00);
				CLEAR_BIT(TCCR0,COM01);
		#elif defined ClearCompareMatch_SetTop_OCO	//Non_Inverted Mode
				CLEAR_BIT(TCCR0,COM00);
     f0e:	a3 e5       	ldi	r26, 0x53	; 83
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e3 e5       	ldi	r30, 0x53	; 83
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7e       	andi	r24, 0xEF	; 239
     f1a:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
     f1c:	a3 e5       	ldi	r26, 0x53	; 83
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e3 e5       	ldi	r30, 0x53	; 83
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 62       	ori	r24, 0x20	; 32
     f28:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_No_Prescaler
				SET_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
		#elif defined Timer0_CLK_8_Prescaler
				CLEAR_BIT(TCCR0,CS00);
     f2a:	a3 e5       	ldi	r26, 0x53	; 83
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e3 e5       	ldi	r30, 0x53	; 83
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
     f38:	a3 e5       	ldi	r26, 0x53	; 83
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e3 e5       	ldi	r30, 0x53	; 83
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
     f46:	a3 e5       	ldi	r26, 0x53	; 83
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e3 e5       	ldi	r30, 0x53	; 83
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8b 7f       	andi	r24, 0xFB	; 251
     f52:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_External_RisingEdge_CounterMode //On Pin T0
				SET_BIT(TCCR0,CS00);
				SET_BIT(TCCR0,CS01);
				SET_BIT(TCCR0,CS02);
		#endif
}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <Timer0_SetValue>:
void Timer0_SetValue(u8 Value)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
#if defined Timer0_Normal_Timer_Mode
	TCNT0 = Value; //Set Overflow Value
#elif defined Timer0_CTC_Timer_Mode
	OCR0 = Value; //Set Compare Output Value
#elif defined Timer0_Fast_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
     f66:	ec e5       	ldi	r30, 0x5C	; 92
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	80 83       	st	Z, r24
#endif
}
     f6e:	0f 90       	pop	r0
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <Timer0_CallBack>:

void Timer0_CallBack(void (*FUNC_PTR)(void))
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <Timer0_CallBack+0x6>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
#if defined Timer0_CTC_Timer_Mode
	CTC_CallBack_Func = FUNC_PTR;
#endif
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	CTC_CallBack_Func();
     fb8:	e0 91 80 01 	lds	r30, 0x0180
     fbc:	f0 91 81 01 	lds	r31, 0x0181
     fc0:	09 95       	icall
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <__vector_1>:
static void (*External_Function0)(void);
static void (*External_Function1)(void);
static void (*External_Function2)(void);
/****************************************ISR for INT0*************************************************/
ISR(INT0_Vect)
{
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	(*External_Function0)();
    1012:	e0 91 82 01 	lds	r30, 0x0182
    1016:	f0 91 83 01 	lds	r31, 0x0183
    101a:	09 95       	icall
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <__vector_2>:
/****************************************ISR for INT1*************************************************/
ISR(INT1_Vect)
{
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	6f 93       	push	r22
    1056:	7f 93       	push	r23
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	af 93       	push	r26
    105e:	bf 93       	push	r27
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	(*External_Function1)();
    106c:	e0 91 84 01 	lds	r30, 0x0184
    1070:	f0 91 85 01 	lds	r31, 0x0185
    1074:	09 95       	icall
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <__vector_3>:
/****************************************ISR for INT2*************************************************/
ISR(INT2_Vect)
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	(*External_Function2)();
    10c6:	e0 91 86 01 	lds	r30, 0x0186
    10ca:	f0 91 87 01 	lds	r31, 0x0187
    10ce:	09 95       	icall
}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	7f 91       	pop	r23
    10e2:	6f 91       	pop	r22
    10e4:	5f 91       	pop	r21
    10e6:	4f 91       	pop	r20
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	0f 90       	pop	r0
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	0f 90       	pop	r0
    10f2:	1f 90       	pop	r1
    10f4:	18 95       	reti

000010f6 <Enable_Global_Interrupt>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return Enable_Global_Interrupt(Global_Interrupt_State_t state)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <Enable_Global_Interrupt+0x6>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <Enable_Global_Interrupt+0x8>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3c 83       	std	Y+4, r19	; 0x04
    110c:	2b 83       	std	Y+3, r18	; 0x03
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	31 f0       	breq	.+12     	; 0x1122 <Enable_Global_Interrupt+0x2c>
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	21 30       	cpi	r18, 0x01	; 1
    111c:	31 05       	cpc	r19, r1
    111e:	49 f0       	breq	.+18     	; 0x1132 <Enable_Global_Interrupt+0x3c>
    1120:	10 c0       	rjmp	.+32     	; 0x1142 <Enable_Global_Interrupt+0x4c>
		{
			case Enable_GIE_Interrupt:
				SET_BIT(SREG,GIE);
    1122:	af e5       	ldi	r26, 0x5F	; 95
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ef e5       	ldi	r30, 0x5F	; 95
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 68       	ori	r24, 0x80	; 128
    112e:	8c 93       	st	X, r24
    1130:	0a c0       	rjmp	.+20     	; 0x1146 <Enable_Global_Interrupt+0x50>
				break;
			case Disable_GIE_Interrupt:
				CLEAR_BIT(SREG,GIE);
    1132:	af e5       	ldi	r26, 0x5F	; 95
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ef e5       	ldi	r30, 0x5F	; 95
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	8f 77       	andi	r24, 0x7F	; 127
    113e:	8c 93       	st	X, r24
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <Enable_Global_Interrupt+0x50>
				break;
			default:
				return E_OK;
    1142:	1a 82       	std	Y+2, r1	; 0x02
    1144:	02 c0       	rjmp	.+4      	; 0x114a <Enable_Global_Interrupt+0x54>
		}
	return E_NOK;
    1146:	31 e0       	ldi	r19, 0x01	; 1
    1148:	3a 83       	std	Y+2, r19	; 0x02
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <Enable_External_INT0>:
/*****************************************************************************************************/
STD_Return Enable_External_INT0(Peripheral_Interrupt_State_t State)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <Enable_External_INT0+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <Enable_External_INT0+0x8>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3c 83       	std	Y+4, r19	; 0x04
    1170:	2b 83       	std	Y+3, r18	; 0x03
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	31 f0       	breq	.+12     	; 0x1186 <Enable_External_INT0+0x2c>
    117a:	2b 81       	ldd	r18, Y+3	; 0x03
    117c:	3c 81       	ldd	r19, Y+4	; 0x04
    117e:	21 30       	cpi	r18, 0x01	; 1
    1180:	31 05       	cpc	r19, r1
    1182:	49 f0       	breq	.+18     	; 0x1196 <Enable_External_INT0+0x3c>
    1184:	10 c0       	rjmp	.+32     	; 0x11a6 <Enable_External_INT0+0x4c>
	{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT0);
    1186:	ab e5       	ldi	r26, 0x5B	; 91
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e5       	ldi	r30, 0x5B	; 91
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 64       	ori	r24, 0x40	; 64
    1192:	8c 93       	st	X, r24
    1194:	0a c0       	rjmp	.+20     	; 0x11aa <Enable_External_INT0+0x50>

	break;
	case Disable_PIE_Interrupt:
		CLEAR_BIT(GICR,INT0);
    1196:	ab e5       	ldi	r26, 0x5B	; 91
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	eb e5       	ldi	r30, 0x5B	; 91
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8f 7b       	andi	r24, 0xBF	; 191
    11a2:	8c 93       	st	X, r24
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <Enable_External_INT0+0x50>
	break;
	default:
		return E_OK;
    11a6:	1a 82       	std	Y+2, r1	; 0x02
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <Enable_External_INT0+0x54>
	}
	return E_NOK;
    11aa:	31 e0       	ldi	r19, 0x01	; 1
    11ac:	3a 83       	std	Y+2, r19	; 0x02
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <External_Int0_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int0_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <External_Int0_EdgeSelection+0x6>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <External_Int0_EdgeSelection+0x8>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	89 83       	std	Y+1, r24	; 0x01
			switch(SenseLevel)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3c 83       	std	Y+4, r19	; 0x04
    11d4:	2b 83       	std	Y+3, r18	; 0x03
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	a1 f0       	breq	.+40     	; 0x1206 <External_Int0_EdgeSelection+0x48>
    11de:	2b 81       	ldd	r18, Y+3	; 0x03
    11e0:	3c 81       	ldd	r19, Y+4	; 0x04
    11e2:	21 30       	cpi	r18, 0x01	; 1
    11e4:	31 05       	cpc	r19, r1
    11e6:	f1 f4       	brne	.+60     	; 0x1224 <External_Int0_EdgeSelection+0x66>
				{
					case Rising_Edge_Sense:
							SET_BIT(MCUCR,ISC00);
    11e8:	a5 e5       	ldi	r26, 0x55	; 85
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e5 e5       	ldi	r30, 0x55	; 85
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    11f6:	a5 e5       	ldi	r26, 0x55	; 85
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e5       	ldi	r30, 0x55	; 85
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	82 60       	ori	r24, 0x02	; 2
    1202:	8c 93       	st	X, r24
    1204:	11 c0       	rjmp	.+34     	; 0x1228 <External_Int0_EdgeSelection+0x6a>
							break;
					case Falling_Edge_Sense:
							CLEAR_BIT(MCUCR,ISC00);
    1206:	a5 e5       	ldi	r26, 0x55	; 85
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e5       	ldi	r30, 0x55	; 85
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8e 7f       	andi	r24, 0xFE	; 254
    1212:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    1214:	a5 e5       	ldi	r26, 0x55	; 85
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e5 e5       	ldi	r30, 0x55	; 85
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	82 60       	ori	r24, 0x02	; 2
    1220:	8c 93       	st	X, r24
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <External_Int0_EdgeSelection+0x6a>
							break;
					default:
						return E_OK;
    1224:	1a 82       	std	Y+2, r1	; 0x02
    1226:	02 c0       	rjmp	.+4      	; 0x122c <External_Int0_EdgeSelection+0x6e>
				}
	return E_NOK;
    1228:	31 e0       	ldi	r19, 0x01	; 1
    122a:	3a 83       	std	Y+2, r19	; 0x02
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <CallBack_Int0>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int0(void (*Func_Ptr)(void))
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <CallBack_Int0+0x6>
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
	External_Function0=Func_Ptr;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	90 93 83 01 	sts	0x0183, r25
    1252:	80 93 82 01 	sts	0x0182, r24
	return E_NOK;
    1256:	81 e0       	ldi	r24, 0x01	; 1
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <Enable_External_INT1>:
/*****************************************************************************************************/
STD_Return Enable_External_INT1(Peripheral_Interrupt_State_t State)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <Enable_External_INT1+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <Enable_External_INT1+0x8>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3c 83       	std	Y+4, r19	; 0x04
    1278:	2b 83       	std	Y+3, r18	; 0x03
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	31 f0       	breq	.+12     	; 0x128e <Enable_External_INT1+0x2c>
    1282:	2b 81       	ldd	r18, Y+3	; 0x03
    1284:	3c 81       	ldd	r19, Y+4	; 0x04
    1286:	21 30       	cpi	r18, 0x01	; 1
    1288:	31 05       	cpc	r19, r1
    128a:	49 f0       	breq	.+18     	; 0x129e <Enable_External_INT1+0x3c>
    128c:	10 c0       	rjmp	.+32     	; 0x12ae <Enable_External_INT1+0x4c>
		{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT1);
    128e:	ab e5       	ldi	r26, 0x5B	; 91
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	eb e5       	ldi	r30, 0x5B	; 91
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 68       	ori	r24, 0x80	; 128
    129a:	8c 93       	st	X, r24
    129c:	0a c0       	rjmp	.+20     	; 0x12b2 <Enable_External_INT1+0x50>
		break;
		case Disable_PIE_Interrupt:
			CLEAR_BIT(GICR,INT1);
    129e:	ab e5       	ldi	r26, 0x5B	; 91
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	eb e5       	ldi	r30, 0x5B	; 91
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8f 77       	andi	r24, 0x7F	; 127
    12aa:	8c 93       	st	X, r24
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <Enable_External_INT1+0x50>
		break;
		default:
			return E_OK;
    12ae:	1a 82       	std	Y+2, r1	; 0x02
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <Enable_External_INT1+0x54>
		}
	return E_NOK;
    12b2:	31 e0       	ldi	r19, 0x01	; 1
    12b4:	3a 83       	std	Y+2, r19	; 0x02
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <External_Int1_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int1_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <External_Int1_EdgeSelection+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <External_Int1_EdgeSelection+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3c 83       	std	Y+4, r19	; 0x04
    12dc:	2b 83       	std	Y+3, r18	; 0x03
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	b1 f0       	breq	.+44     	; 0x1312 <External_Int1_EdgeSelection+0x4c>
    12e6:	2b 81       	ldd	r18, Y+3	; 0x03
    12e8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ea:	21 30       	cpi	r18, 0x01	; 1
    12ec:	31 05       	cpc	r19, r1
    12ee:	11 f5       	brne	.+68     	; 0x1334 <External_Int1_EdgeSelection+0x6e>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCR,ISC10);
    12f0:	a5 e5       	ldi	r26, 0x55	; 85
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e5       	ldi	r30, 0x55	; 85
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	84 60       	ori	r24, 0x04	; 4
    12fc:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    12fe:	a5 e5       	ldi	r26, 0x55	; 85
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e5       	ldi	r30, 0x55	; 85
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	88 60       	ori	r24, 0x08	; 8
    130a:	8c 93       	st	X, r24
								return E_NOK;
    130c:	31 e0       	ldi	r19, 0x01	; 1
    130e:	3a 83       	std	Y+2, r19	; 0x02
    1310:	12 c0       	rjmp	.+36     	; 0x1336 <External_Int1_EdgeSelection+0x70>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCR,ISC10);
    1312:	a5 e5       	ldi	r26, 0x55	; 85
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e5 e5       	ldi	r30, 0x55	; 85
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8b 7f       	andi	r24, 0xFB	; 251
    131e:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    1320:	a5 e5       	ldi	r26, 0x55	; 85
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e5       	ldi	r30, 0x55	; 85
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 60       	ori	r24, 0x08	; 8
    132c:	8c 93       	st	X, r24
								return E_NOK;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	8a 83       	std	Y+2, r24	; 0x02
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <External_Int1_EdgeSelection+0x70>
								break;
						default:
							return E_OK;
    1334:	1a 82       	std	Y+2, r1	; 0x02
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
					}
		return E_NOK;
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <CallBack_Int1>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int1(void (*Func_Ptr)(void))
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <CallBack_Int1+0x6>
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
	External_Function1=Func_Ptr;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	90 93 85 01 	sts	0x0185, r25
    135c:	80 93 84 01 	sts	0x0184, r24
	return E_NOK;
    1360:	81 e0       	ldi	r24, 0x01	; 1
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <Enable_External_INT2>:
/*****************************************************************************************************/

STD_Return Enable_External_INT2(Peripheral_Interrupt_State_t State)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <Enable_External_INT2+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <Enable_External_INT2+0x8>
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3c 83       	std	Y+4, r19	; 0x04
    1382:	2b 83       	std	Y+3, r18	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	31 f0       	breq	.+12     	; 0x1398 <Enable_External_INT2+0x2c>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	21 30       	cpi	r18, 0x01	; 1
    1392:	31 05       	cpc	r19, r1
    1394:	49 f0       	breq	.+18     	; 0x13a8 <Enable_External_INT2+0x3c>
    1396:	10 c0       	rjmp	.+32     	; 0x13b8 <Enable_External_INT2+0x4c>
		{
			case Enable_PIE_Interrupt:
				SET_BIT(GICR,INT2);
    1398:	ab e5       	ldi	r26, 0x5B	; 91
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	eb e5       	ldi	r30, 0x5B	; 91
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 62       	ori	r24, 0x20	; 32
    13a4:	8c 93       	st	X, r24
    13a6:	0a c0       	rjmp	.+20     	; 0x13bc <Enable_External_INT2+0x50>
				break;
				case Disable_PIE_Interrupt:
					CLEAR_BIT(GICR,INT1);
    13a8:	ab e5       	ldi	r26, 0x5B	; 91
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e5       	ldi	r30, 0x5B	; 91
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8f 77       	andi	r24, 0x7F	; 127
    13b4:	8c 93       	st	X, r24
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <Enable_External_INT2+0x50>
				break;
				default:
					return E_OK;
    13b8:	1a 82       	std	Y+2, r1	; 0x02
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <Enable_External_INT2+0x54>
		 	}
	return E_NOK;
    13bc:	31 e0       	ldi	r19, 0x01	; 1
    13be:	3a 83       	std	Y+2, r19	; 0x02
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <External_Int2_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int2_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <External_Int2_EdgeSelection+0x6>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <External_Int2_EdgeSelection+0x8>
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	3c 83       	std	Y+4, r19	; 0x04
    13e6:	2b 83       	std	Y+3, r18	; 0x03
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	79 f0       	breq	.+30     	; 0x140e <External_Int2_EdgeSelection+0x3e>
    13f0:	2b 81       	ldd	r18, Y+3	; 0x03
    13f2:	3c 81       	ldd	r19, Y+4	; 0x04
    13f4:	21 30       	cpi	r18, 0x01	; 1
    13f6:	31 05       	cpc	r19, r1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <External_Int2_EdgeSelection+0x52>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCSR,ISC2);
    13fa:	a4 e5       	ldi	r26, 0x54	; 84
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e4 e5       	ldi	r30, 0x54	; 84
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 64       	ori	r24, 0x40	; 64
    1406:	8c 93       	st	X, r24
								return E_NOK;
    1408:	31 e0       	ldi	r19, 0x01	; 1
    140a:	3a 83       	std	Y+2, r19	; 0x02
    140c:	0b c0       	rjmp	.+22     	; 0x1424 <External_Int2_EdgeSelection+0x54>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCSR,ISC2);
    140e:	a4 e5       	ldi	r26, 0x54	; 84
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e4 e5       	ldi	r30, 0x54	; 84
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 7b       	andi	r24, 0xBF	; 191
    141a:	8c 93       	st	X, r24
								return E_NOK;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	8a 83       	std	Y+2, r24	; 0x02
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <External_Int2_EdgeSelection+0x54>
								break;
						default:
							return E_OK;
    1422:	1a 82       	std	Y+2, r1	; 0x02
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
					}

		return E_NOK;
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <CallBack_Int2>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int2(void (*Func_Ptr)(void))
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	00 d0       	rcall	.+0      	; 0x143a <CallBack_Int2+0x6>
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	89 83       	std	Y+1, r24	; 0x01
	External_Function2=Func_Ptr;
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	90 93 87 01 	sts	0x0187, r25
    144a:	80 93 86 01 	sts	0x0186, r24
	return E_NOK;
    144e:	81 e0       	ldi	r24, 0x01	; 1
}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <DIO_init>:
 * 
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 **/
void DIO_init(void)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    // initializing all pins are input
    DDRA=0;
    1462:	ea e3       	ldi	r30, 0x3A	; 58
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	10 82       	st	Z, r1
    DDRB=0;
    1468:	e7 e3       	ldi	r30, 0x37	; 55
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	10 82       	st	Z, r1
    DDRC=0;
    146e:	e4 e3       	ldi	r30, 0x34	; 52
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	10 82       	st	Z, r1
    DDRD=0;
    1474:	e1 e3       	ldi	r30, 0x31	; 49
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	10 82       	st	Z, r1

    PORTA=0;
    147a:	eb e3       	ldi	r30, 0x3B	; 59
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	10 82       	st	Z, r1
    PORTB=0;
    1480:	e8 e3       	ldi	r30, 0x38	; 56
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	10 82       	st	Z, r1
    PORTC=0;
    1486:	e5 e3       	ldi	r30, 0x35	; 53
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	10 82       	st	Z, r1
    PORTD=0;
    148c:	e2 e3       	ldi	r30, 0x32	; 50
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	10 82       	st	Z, r1
    //enable the internal pull up resistor
    CLEAR_BIT(SFIOR,PUD);
    1492:	a0 e5       	ldi	r26, 0x50	; 80
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e0 e5       	ldi	r30, 0x50	; 80
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8b 7f       	andi	r24, 0xFB	; 251
    149e:	8c 93       	st	X, r24
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <DIO_SetPinDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinDirection(DIO_Ports_t PORT, u8 PIN, DIO_Direction_t Direction)
	{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	2e 97       	sbiw	r28, 0x0e	; 14
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	6a 83       	std	Y+2, r22	; 0x02
    14be:	4b 83       	std	Y+3, r20	; 0x03
		// check for safety
		if(PIN>MAX_PinNum)
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	10 f0       	brcs	.+4      	; 0x14ca <DIO_SetPinDirection+0x24>
			{
				return E_OK;
    14c6:	1e 86       	std	Y+14, r1	; 0x0e
    14c8:	0e c1       	rjmp	.+540    	; 0x16e6 <DIO_SetPinDirection+0x240>
			}
		else
			{
				switch(PORT)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3d 87       	std	Y+13, r19	; 0x0d
    14d2:	2c 87       	std	Y+12, r18	; 0x0c
    14d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <DIO_SetPinDirection+0x3a>
    14de:	51 c0       	rjmp	.+162    	; 0x1582 <DIO_SetPinDirection+0xdc>
    14e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e2:	3d 85       	ldd	r19, Y+13	; 0x0d
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <DIO_SetPinDirection+0x4e>
    14ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    14ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	71 f0       	breq	.+28     	; 0x150e <DIO_SetPinDirection+0x68>
    14f2:	f5 c0       	rjmp	.+490    	; 0x16de <DIO_SetPinDirection+0x238>
    14f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14f6:	3d 85       	ldd	r19, Y+13	; 0x0d
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <DIO_SetPinDirection+0x5a>
    14fe:	7b c0       	rjmp	.+246    	; 0x15f6 <DIO_SetPinDirection+0x150>
    1500:	8c 85       	ldd	r24, Y+12	; 0x0c
    1502:	9d 85       	ldd	r25, Y+13	; 0x0d
    1504:	83 30       	cpi	r24, 0x03	; 3
    1506:	91 05       	cpc	r25, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <DIO_SetPinDirection+0x66>
    150a:	af c0       	rjmp	.+350    	; 0x166a <DIO_SetPinDirection+0x1c4>
    150c:	e8 c0       	rjmp	.+464    	; 0x16de <DIO_SetPinDirection+0x238>
					{
						case DIO_PORTA:
							switch (Direction)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3b 87       	std	Y+11, r19	; 0x0b
    1516:	2a 87       	std	Y+10, r18	; 0x0a
    1518:	8a 85       	ldd	r24, Y+10	; 0x0a
    151a:	9b 85       	ldd	r25, Y+11	; 0x0b
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	31 f0       	breq	.+12     	; 0x152c <DIO_SetPinDirection+0x86>
    1520:	2a 85       	ldd	r18, Y+10	; 0x0a
    1522:	3b 85       	ldd	r19, Y+11	; 0x0b
    1524:	21 30       	cpi	r18, 0x01	; 1
    1526:	31 05       	cpc	r19, r1
    1528:	b1 f0       	breq	.+44     	; 0x1556 <DIO_SetPinDirection+0xb0>
    152a:	29 c0       	rjmp	.+82     	; 0x157e <DIO_SetPinDirection+0xd8>
								{
									case DIO_INPUT:
									CLEAR_BIT(DDRA,PIN);
    152c:	aa e3       	ldi	r26, 0x3A	; 58
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	ea e3       	ldi	r30, 0x3A	; 58
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_SetPinDirection+0xa4>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_SetPinDirection+0xa0>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	c6 c0       	rjmp	.+396    	; 0x16e2 <DIO_SetPinDirection+0x23c>
									break;
									case DIO_OUTPUT:
									SET_BIT(DDRA,PIN);
    1556:	aa e3       	ldi	r26, 0x3A	; 58
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ea e3       	ldi	r30, 0x3A	; 58
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_SetPinDirection+0xce>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_SetPinDirection+0xca>
    1578:	84 2b       	or	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	b2 c0       	rjmp	.+356    	; 0x16e2 <DIO_SetPinDirection+0x23c>
									break;
									default:
									return E_OK;
    157e:	1e 86       	std	Y+14, r1	; 0x0e
    1580:	b2 c0       	rjmp	.+356    	; 0x16e6 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTB:
							switch (Direction)
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	39 87       	std	Y+9, r19	; 0x09
    158a:	28 87       	std	Y+8, r18	; 0x08
    158c:	88 85       	ldd	r24, Y+8	; 0x08
    158e:	99 85       	ldd	r25, Y+9	; 0x09
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	31 f0       	breq	.+12     	; 0x15a0 <DIO_SetPinDirection+0xfa>
    1594:	28 85       	ldd	r18, Y+8	; 0x08
    1596:	39 85       	ldd	r19, Y+9	; 0x09
    1598:	21 30       	cpi	r18, 0x01	; 1
    159a:	31 05       	cpc	r19, r1
    159c:	b1 f0       	breq	.+44     	; 0x15ca <DIO_SetPinDirection+0x124>
    159e:	29 c0       	rjmp	.+82     	; 0x15f2 <DIO_SetPinDirection+0x14c>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRB,PIN);
    15a0:	a7 e3       	ldi	r26, 0x37	; 55
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e7 e3       	ldi	r30, 0x37	; 55
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_SetPinDirection+0x118>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_SetPinDirection+0x114>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	8c c0       	rjmp	.+280    	; 0x16e2 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRB,PIN);
    15ca:	a7 e3       	ldi	r26, 0x37	; 55
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e7 e3       	ldi	r30, 0x37	; 55
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_SetPinDirection+0x142>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_SetPinDirection+0x13e>
    15ec:	84 2b       	or	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	78 c0       	rjmp	.+240    	; 0x16e2 <DIO_SetPinDirection+0x23c>
										break;
									default:
									return E_OK;
    15f2:	1e 86       	std	Y+14, r1	; 0x0e
    15f4:	78 c0       	rjmp	.+240    	; 0x16e6 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTC:
							switch (Direction)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3f 83       	std	Y+7, r19	; 0x07
    15fe:	2e 83       	std	Y+6, r18	; 0x06
    1600:	8e 81       	ldd	r24, Y+6	; 0x06
    1602:	9f 81       	ldd	r25, Y+7	; 0x07
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	31 f0       	breq	.+12     	; 0x1614 <DIO_SetPinDirection+0x16e>
    1608:	2e 81       	ldd	r18, Y+6	; 0x06
    160a:	3f 81       	ldd	r19, Y+7	; 0x07
    160c:	21 30       	cpi	r18, 0x01	; 1
    160e:	31 05       	cpc	r19, r1
    1610:	b1 f0       	breq	.+44     	; 0x163e <DIO_SetPinDirection+0x198>
    1612:	29 c0       	rjmp	.+82     	; 0x1666 <DIO_SetPinDirection+0x1c0>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRC,PIN);
    1614:	a4 e3       	ldi	r26, 0x34	; 52
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e4 e3       	ldi	r30, 0x34	; 52
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_SetPinDirection+0x18c>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_SetPinDirection+0x188>
    1636:	80 95       	com	r24
    1638:	84 23       	and	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	52 c0       	rjmp	.+164    	; 0x16e2 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRC,PIN);
    163e:	a4 e3       	ldi	r26, 0x34	; 52
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e4 e3       	ldi	r30, 0x34	; 52
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_SetPinDirection+0x1b6>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_SetPinDirection+0x1b2>
    1660:	84 2b       	or	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	3e c0       	rjmp	.+124    	; 0x16e2 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    1666:	1e 86       	std	Y+14, r1	; 0x0e
    1668:	3e c0       	rjmp	.+124    	; 0x16e6 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTD:
							switch (Direction)
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3d 83       	std	Y+5, r19	; 0x05
    1672:	2c 83       	std	Y+4, r18	; 0x04
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	9d 81       	ldd	r25, Y+5	; 0x05
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	31 f0       	breq	.+12     	; 0x1688 <DIO_SetPinDirection+0x1e2>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	21 30       	cpi	r18, 0x01	; 1
    1682:	31 05       	cpc	r19, r1
    1684:	b1 f0       	breq	.+44     	; 0x16b2 <DIO_SetPinDirection+0x20c>
    1686:	29 c0       	rjmp	.+82     	; 0x16da <DIO_SetPinDirection+0x234>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRD,PIN);
    1688:	a1 e3       	ldi	r26, 0x31	; 49
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e1 e3       	ldi	r30, 0x31	; 49
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_SetPinDirection+0x200>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_SetPinDirection+0x1fc>
    16aa:	80 95       	com	r24
    16ac:	84 23       	and	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	18 c0       	rjmp	.+48     	; 0x16e2 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRD,PIN);
    16b2:	a1 e3       	ldi	r26, 0x31	; 49
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e1 e3       	ldi	r30, 0x31	; 49
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_SetPinDirection+0x22a>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_SetPinDirection+0x226>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    16da:	1e 86       	std	Y+14, r1	; 0x0e
    16dc:	04 c0       	rjmp	.+8      	; 0x16e6 <DIO_SetPinDirection+0x240>
								}
							break;
							default:
								return E_OK;
    16de:	1e 86       	std	Y+14, r1	; 0x0e
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_SetPinDirection+0x240>
					}
			}
	return E_NOK;
    16e2:	31 e0       	ldi	r19, 0x01	; 1
    16e4:	3e 87       	std	Y+14, r19	; 0x0e
    16e6:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    16e8:	2e 96       	adiw	r28, 0x0e	; 14
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <DIO_SetPortDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortDirection(DIO_Ports_t PORT,u8 Direction)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <DIO_SetPortDirection+0x6>
    1700:	00 d0       	rcall	.+0      	; 0x1702 <DIO_SetPortDirection+0x8>
    1702:	0f 92       	push	r0
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3d 83       	std	Y+5, r19	; 0x05
    1714:	2c 83       	std	Y+4, r18	; 0x04
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	9d 81       	ldd	r25, Y+5	; 0x05
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	91 05       	cpc	r25, r1
    171e:	d1 f0       	breq	.+52     	; 0x1754 <DIO_SetPortDirection+0x5a>
    1720:	2c 81       	ldd	r18, Y+4	; 0x04
    1722:	3d 81       	ldd	r19, Y+5	; 0x05
    1724:	22 30       	cpi	r18, 0x02	; 2
    1726:	31 05       	cpc	r19, r1
    1728:	2c f4       	brge	.+10     	; 0x1734 <DIO_SetPortDirection+0x3a>
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	61 f0       	breq	.+24     	; 0x174a <DIO_SetPortDirection+0x50>
    1732:	1f c0       	rjmp	.+62     	; 0x1772 <DIO_SetPortDirection+0x78>
    1734:	2c 81       	ldd	r18, Y+4	; 0x04
    1736:	3d 81       	ldd	r19, Y+5	; 0x05
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	81 f0       	breq	.+32     	; 0x175e <DIO_SetPortDirection+0x64>
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	91 05       	cpc	r25, r1
    1746:	81 f0       	breq	.+32     	; 0x1768 <DIO_SetPortDirection+0x6e>
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <DIO_SetPortDirection+0x78>
						{
							case DIO_PORTA:
								DDRA=Direction;
    174a:	ea e3       	ldi	r30, 0x3A	; 58
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	80 83       	st	Z, r24
    1752:	11 c0       	rjmp	.+34     	; 0x1776 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTB:
								DDRB=Direction;
    1754:	e7 e3       	ldi	r30, 0x37	; 55
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	80 83       	st	Z, r24
    175c:	0c c0       	rjmp	.+24     	; 0x1776 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTC:
								DDRC=Direction;
    175e:	e4 e3       	ldi	r30, 0x34	; 52
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	80 83       	st	Z, r24
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTD:
								DDRD=Direction;
    1768:	e1 e3       	ldi	r30, 0x31	; 49
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	80 83       	st	Z, r24
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <DIO_SetPortDirection+0x7c>
							break;
							default:
							return E_OK;
    1772:	1b 82       	std	Y+3, r1	; 0x03
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_SetPortDirection+0x80>

						}
	return E_NOK;
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	9b 83       	std	Y+3, r25	; 0x03
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <DIO_SetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 							return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t State)
	{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	2e 97       	sbiw	r28, 0x0e	; 14
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	6a 83       	std	Y+2, r22	; 0x02
    17a4:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	88 30       	cpi	r24, 0x08	; 8
    17aa:	10 f0       	brcs	.+4      	; 0x17b0 <DIO_SetPinValue+0x24>
			{
				return E_OK;
    17ac:	1e 86       	std	Y+14, r1	; 0x0e
    17ae:	0e c1       	rjmp	.+540    	; 0x19cc <DIO_SetPinValue+0x240>
			}
		else
			{
				switch(PORT)
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	3d 87       	std	Y+13, r19	; 0x0d
    17b8:	2c 87       	std	Y+12, r18	; 0x0c
    17ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    17bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	91 05       	cpc	r25, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <DIO_SetPinValue+0x3a>
    17c4:	51 c0       	rjmp	.+162    	; 0x1868 <DIO_SetPinValue+0xdc>
    17c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    17c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	2c f4       	brge	.+10     	; 0x17da <DIO_SetPinValue+0x4e>
    17d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    17d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	71 f0       	breq	.+28     	; 0x17f4 <DIO_SetPinValue+0x68>
    17d8:	f5 c0       	rjmp	.+490    	; 0x19c4 <DIO_SetPinValue+0x238>
    17da:	2c 85       	ldd	r18, Y+12	; 0x0c
    17dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <DIO_SetPinValue+0x5a>
    17e4:	7b c0       	rjmp	.+246    	; 0x18dc <DIO_SetPinValue+0x150>
    17e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	91 05       	cpc	r25, r1
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <DIO_SetPinValue+0x66>
    17f0:	af c0       	rjmp	.+350    	; 0x1950 <DIO_SetPinValue+0x1c4>
    17f2:	e8 c0       	rjmp	.+464    	; 0x19c4 <DIO_SetPinValue+0x238>
					{
						case DIO_PORTA:
							switch(State)
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	3b 87       	std	Y+11, r19	; 0x0b
    17fc:	2a 87       	std	Y+10, r18	; 0x0a
    17fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1800:	9b 85       	ldd	r25, Y+11	; 0x0b
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	31 f0       	breq	.+12     	; 0x1812 <DIO_SetPinValue+0x86>
    1806:	2a 85       	ldd	r18, Y+10	; 0x0a
    1808:	3b 85       	ldd	r19, Y+11	; 0x0b
    180a:	21 30       	cpi	r18, 0x01	; 1
    180c:	31 05       	cpc	r19, r1
    180e:	b1 f0       	breq	.+44     	; 0x183c <DIO_SetPinValue+0xb0>
    1810:	29 c0       	rjmp	.+82     	; 0x1864 <DIO_SetPinValue+0xd8>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTA,PIN);
    1812:	ab e3       	ldi	r26, 0x3B	; 59
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	eb e3       	ldi	r30, 0x3B	; 59
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_SetPinValue+0xa4>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_SetPinValue+0xa0>
    1834:	80 95       	com	r24
    1836:	84 23       	and	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	c6 c0       	rjmp	.+396    	; 0x19c8 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTA,PIN);
    183c:	ab e3       	ldi	r26, 0x3B	; 59
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	eb e3       	ldi	r30, 0x3B	; 59
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <DIO_SetPinValue+0xce>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <DIO_SetPinValue+0xca>
    185e:	84 2b       	or	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	b2 c0       	rjmp	.+356    	; 0x19c8 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1864:	1e 86       	std	Y+14, r1	; 0x0e
    1866:	b2 c0       	rjmp	.+356    	; 0x19cc <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTB:
							switch(State)
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	39 87       	std	Y+9, r19	; 0x09
    1870:	28 87       	std	Y+8, r18	; 0x08
    1872:	88 85       	ldd	r24, Y+8	; 0x08
    1874:	99 85       	ldd	r25, Y+9	; 0x09
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	31 f0       	breq	.+12     	; 0x1886 <DIO_SetPinValue+0xfa>
    187a:	28 85       	ldd	r18, Y+8	; 0x08
    187c:	39 85       	ldd	r19, Y+9	; 0x09
    187e:	21 30       	cpi	r18, 0x01	; 1
    1880:	31 05       	cpc	r19, r1
    1882:	b1 f0       	breq	.+44     	; 0x18b0 <DIO_SetPinValue+0x124>
    1884:	29 c0       	rjmp	.+82     	; 0x18d8 <DIO_SetPinValue+0x14c>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTB,PIN);
    1886:	a8 e3       	ldi	r26, 0x38	; 56
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e8 e3       	ldi	r30, 0x38	; 56
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_SetPinValue+0x118>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_SetPinValue+0x114>
    18a8:	80 95       	com	r24
    18aa:	84 23       	and	r24, r20
    18ac:	8c 93       	st	X, r24
    18ae:	8c c0       	rjmp	.+280    	; 0x19c8 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTB,PIN);
    18b0:	a8 e3       	ldi	r26, 0x38	; 56
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e8 e3       	ldi	r30, 0x38	; 56
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <DIO_SetPinValue+0x142>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <DIO_SetPinValue+0x13e>
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	78 c0       	rjmp	.+240    	; 0x19c8 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    18d8:	1e 86       	std	Y+14, r1	; 0x0e
    18da:	78 c0       	rjmp	.+240    	; 0x19cc <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTC:
							switch(State)
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	3f 83       	std	Y+7, r19	; 0x07
    18e4:	2e 83       	std	Y+6, r18	; 0x06
    18e6:	8e 81       	ldd	r24, Y+6	; 0x06
    18e8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	31 f0       	breq	.+12     	; 0x18fa <DIO_SetPinValue+0x16e>
    18ee:	2e 81       	ldd	r18, Y+6	; 0x06
    18f0:	3f 81       	ldd	r19, Y+7	; 0x07
    18f2:	21 30       	cpi	r18, 0x01	; 1
    18f4:	31 05       	cpc	r19, r1
    18f6:	b1 f0       	breq	.+44     	; 0x1924 <DIO_SetPinValue+0x198>
    18f8:	29 c0       	rjmp	.+82     	; 0x194c <DIO_SetPinValue+0x1c0>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTC,PIN);
    18fa:	a5 e3       	ldi	r26, 0x35	; 53
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e3       	ldi	r30, 0x35	; 53
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_SetPinValue+0x18c>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_SetPinValue+0x188>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	52 c0       	rjmp	.+164    	; 0x19c8 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTC,PIN);
    1924:	a5 e3       	ldi	r26, 0x35	; 53
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e5 e3       	ldi	r30, 0x35	; 53
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 2e       	mov	r0, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_SetPinValue+0x1b6>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	0a 94       	dec	r0
    1944:	e2 f7       	brpl	.-8      	; 0x193e <DIO_SetPinValue+0x1b2>
    1946:	84 2b       	or	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	3e c0       	rjmp	.+124    	; 0x19c8 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    194c:	1e 86       	std	Y+14, r1	; 0x0e
    194e:	3e c0       	rjmp	.+124    	; 0x19cc <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTD:
							switch(State)
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3d 83       	std	Y+5, r19	; 0x05
    1958:	2c 83       	std	Y+4, r18	; 0x04
    195a:	8c 81       	ldd	r24, Y+4	; 0x04
    195c:	9d 81       	ldd	r25, Y+5	; 0x05
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	31 f0       	breq	.+12     	; 0x196e <DIO_SetPinValue+0x1e2>
    1962:	2c 81       	ldd	r18, Y+4	; 0x04
    1964:	3d 81       	ldd	r19, Y+5	; 0x05
    1966:	21 30       	cpi	r18, 0x01	; 1
    1968:	31 05       	cpc	r19, r1
    196a:	b1 f0       	breq	.+44     	; 0x1998 <DIO_SetPinValue+0x20c>
    196c:	29 c0       	rjmp	.+82     	; 0x19c0 <DIO_SetPinValue+0x234>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTD,PIN);
    196e:	a2 e3       	ldi	r26, 0x32	; 50
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e2 e3       	ldi	r30, 0x32	; 50
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_SetPinValue+0x200>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <DIO_SetPinValue+0x1fc>
    1990:	80 95       	com	r24
    1992:	84 23       	and	r24, r20
    1994:	8c 93       	st	X, r24
    1996:	18 c0       	rjmp	.+48     	; 0x19c8 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTD,PIN);
    1998:	a2 e3       	ldi	r26, 0x32	; 50
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e2 e3       	ldi	r30, 0x32	; 50
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <DIO_SetPinValue+0x22a>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <DIO_SetPinValue+0x226>
    19ba:	84 2b       	or	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	04 c0       	rjmp	.+8      	; 0x19c8 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    19c0:	1e 86       	std	Y+14, r1	; 0x0e
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <DIO_SetPinValue+0x240>
								}
						break;
							default:
							return E_OK;
    19c4:	1e 86       	std	Y+14, r1	; 0x0e
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <DIO_SetPinValue+0x240>
					}
			}
		return E_NOK;
    19c8:	31 e0       	ldi	r19, 0x01	; 1
    19ca:	3e 87       	std	Y+14, r19	; 0x0e
    19cc:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    19ce:	2e 96       	adiw	r28, 0x0e	; 14
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <DIO_SetPortValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortValue(DIO_Ports_t PORT,u8 value)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <DIO_SetPortValue+0x6>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <DIO_SetPortValue+0x8>
    19e8:	0f 92       	push	r0
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	3d 83       	std	Y+5, r19	; 0x05
    19fa:	2c 83       	std	Y+4, r18	; 0x04
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	91 05       	cpc	r25, r1
    1a04:	d1 f0       	breq	.+52     	; 0x1a3a <DIO_SetPortValue+0x5a>
    1a06:	2c 81       	ldd	r18, Y+4	; 0x04
    1a08:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <DIO_SetPortValue+0x3a>
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	9d 81       	ldd	r25, Y+5	; 0x05
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	61 f0       	breq	.+24     	; 0x1a30 <DIO_SetPortValue+0x50>
    1a18:	1f c0       	rjmp	.+62     	; 0x1a58 <DIO_SetPortValue+0x78>
    1a1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1e:	22 30       	cpi	r18, 0x02	; 2
    1a20:	31 05       	cpc	r19, r1
    1a22:	81 f0       	breq	.+32     	; 0x1a44 <DIO_SetPortValue+0x64>
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	81 f0       	breq	.+32     	; 0x1a4e <DIO_SetPortValue+0x6e>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <DIO_SetPortValue+0x78>
						{
							case DIO_PORTA:
								PORTA=value;
    1a30:	eb e3       	ldi	r30, 0x3B	; 59
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	80 83       	st	Z, r24
    1a38:	11 c0       	rjmp	.+34     	; 0x1a5c <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTB:
								PORTB=value;
    1a3a:	e8 e3       	ldi	r30, 0x38	; 56
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTC:
								PORTC=value;
    1a44:	e5 e3       	ldi	r30, 0x35	; 53
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	80 83       	st	Z, r24
    1a4c:	07 c0       	rjmp	.+14     	; 0x1a5c <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTD:
								PORTD=value;
    1a4e:	e2 e3       	ldi	r30, 0x32	; 50
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	80 83       	st	Z, r24
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_SetPortValue+0x7c>

							break;
							default:
							return E_OK;
    1a58:	1b 82       	std	Y+3, r1	; 0x03
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <DIO_SetPortValue+0x80>

						}
	return E_NOK;
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	9b 83       	std	Y+3, r25	; 0x03
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <DIO_GetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_GetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t* State)
	{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	27 97       	sbiw	r28, 0x07	; 7
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	6a 83       	std	Y+2, r22	; 0x02
    1a8a:	5c 83       	std	Y+4, r21	; 0x04
    1a8c:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	88 30       	cpi	r24, 0x08	; 8
    1a92:	10 f0       	brcs	.+4      	; 0x1a98 <DIO_GetPinValue+0x26>
			{
				return E_OK;
    1a94:	1f 82       	std	Y+7, r1	; 0x07
    1a96:	75 c0       	rjmp	.+234    	; 0x1b82 <DIO_GetPinValue+0x110>
			}
		else
			{
					switch(PORT)
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	3e 83       	std	Y+6, r19	; 0x06
    1aa0:	2d 83       	std	Y+5, r18	; 0x05
    1aa2:	4d 81       	ldd	r20, Y+5	; 0x05
    1aa4:	5e 81       	ldd	r21, Y+6	; 0x06
    1aa6:	41 30       	cpi	r20, 0x01	; 1
    1aa8:	51 05       	cpc	r21, r1
    1aaa:	59 f1       	breq	.+86     	; 0x1b02 <DIO_GetPinValue+0x90>
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	34 f4       	brge	.+12     	; 0x1ac2 <DIO_GetPinValue+0x50>
    1ab6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aba:	21 15       	cp	r18, r1
    1abc:	31 05       	cpc	r19, r1
    1abe:	69 f0       	breq	.+26     	; 0x1ada <DIO_GetPinValue+0x68>
    1ac0:	5c c0       	rjmp	.+184    	; 0x1b7a <DIO_GetPinValue+0x108>
    1ac2:	4d 81       	ldd	r20, Y+5	; 0x05
    1ac4:	5e 81       	ldd	r21, Y+6	; 0x06
    1ac6:	42 30       	cpi	r20, 0x02	; 2
    1ac8:	51 05       	cpc	r21, r1
    1aca:	79 f1       	breq	.+94     	; 0x1b2a <DIO_GetPinValue+0xb8>
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	83 30       	cpi	r24, 0x03	; 3
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <DIO_GetPinValue+0x66>
    1ad6:	3d c0       	rjmp	.+122    	; 0x1b52 <DIO_GetPinValue+0xe0>
    1ad8:	50 c0       	rjmp	.+160    	; 0x1b7a <DIO_GetPinValue+0x108>
						{
							case DIO_PORTA:
								*State=GET_BIT(PINA,PIN);
    1ada:	e9 e3       	ldi	r30, 0x39	; 57
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_GetPinValue+0x80>
    1aee:	55 95       	asr	r21
    1af0:	47 95       	ror	r20
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_GetPinValue+0x7c>
    1af6:	ca 01       	movw	r24, r20
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	eb 81       	ldd	r30, Y+3	; 0x03
    1afc:	fc 81       	ldd	r31, Y+4	; 0x04
    1afe:	80 83       	st	Z, r24
    1b00:	3e c0       	rjmp	.+124    	; 0x1b7e <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTB:
								*State=GET_BIT(PINB,PIN);
    1b02:	e6 e3       	ldi	r30, 0x36	; 54
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a9 01       	movw	r20, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_GetPinValue+0xa8>
    1b16:	55 95       	asr	r21
    1b18:	47 95       	ror	r20
    1b1a:	8a 95       	dec	r24
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <DIO_GetPinValue+0xa4>
    1b1e:	ca 01       	movw	r24, r20
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	eb 81       	ldd	r30, Y+3	; 0x03
    1b24:	fc 81       	ldd	r31, Y+4	; 0x04
    1b26:	80 83       	st	Z, r24
    1b28:	2a c0       	rjmp	.+84     	; 0x1b7e <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTC:
								*State=GET_BIT(PINC,PIN);
    1b2a:	e3 e3       	ldi	r30, 0x33	; 51
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	a9 01       	movw	r20, r18
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_GetPinValue+0xd0>
    1b3e:	55 95       	asr	r21
    1b40:	47 95       	ror	r20
    1b42:	8a 95       	dec	r24
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <DIO_GetPinValue+0xcc>
    1b46:	ca 01       	movw	r24, r20
    1b48:	81 70       	andi	r24, 0x01	; 1
    1b4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4e:	80 83       	st	Z, r24
    1b50:	16 c0       	rjmp	.+44     	; 0x1b7e <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTD:
								*State=GET_BIT(PIND,PIN);
    1b52:	e0 e3       	ldi	r30, 0x30	; 48
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	88 2f       	mov	r24, r24
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a9 01       	movw	r20, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <DIO_GetPinValue+0xf8>
    1b66:	55 95       	asr	r21
    1b68:	47 95       	ror	r20
    1b6a:	8a 95       	dec	r24
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <DIO_GetPinValue+0xf4>
    1b6e:	ca 01       	movw	r24, r20
    1b70:	81 70       	andi	r24, 0x01	; 1
    1b72:	eb 81       	ldd	r30, Y+3	; 0x03
    1b74:	fc 81       	ldd	r31, Y+4	; 0x04
    1b76:	80 83       	st	Z, r24
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <DIO_GetPinValue+0x10c>
								break;
							default:
								return E_OK;
    1b7a:	1f 82       	std	Y+7, r1	; 0x07
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_GetPinValue+0x110>
						}
			}
		return E_NOK;
    1b7e:	51 e0       	ldi	r21, 0x01	; 1
    1b80:	5f 83       	std	Y+7, r21	; 0x07
    1b82:	8f 81       	ldd	r24, Y+7	; 0x07
	}
    1b84:	27 96       	adiw	r28, 0x07	; 7
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <DIO_togglePin>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_togglePin(DIO_Ports_t port,u8 pin)
 {
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <DIO_togglePin+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <DIO_togglePin+0x8>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PinNum)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	88 30       	cpi	r24, 0x08	; 8
    1bac:	10 f0       	brcs	.+4      	; 0x1bb2 <DIO_togglePin+0x1c>
		{
			return E_OK;
    1bae:	1d 82       	std	Y+5, r1	; 0x05
    1bb0:	73 c0       	rjmp	.+230    	; 0x1c98 <DIO_togglePin+0x102>
		}
	else
		{
			switch (port)
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	3c 83       	std	Y+4, r19	; 0x04
    1bba:	2b 83       	std	Y+3, r18	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	49 f1       	breq	.+82     	; 0x1c18 <DIO_togglePin+0x82>
    1bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bca:	22 30       	cpi	r18, 0x02	; 2
    1bcc:	31 05       	cpc	r19, r1
    1bce:	2c f4       	brge	.+10     	; 0x1bda <DIO_togglePin+0x44>
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	61 f0       	breq	.+24     	; 0x1bf0 <DIO_togglePin+0x5a>
    1bd8:	5b c0       	rjmp	.+182    	; 0x1c90 <DIO_togglePin+0xfa>
    1bda:	2b 81       	ldd	r18, Y+3	; 0x03
    1bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	71 f1       	breq	.+92     	; 0x1c40 <DIO_togglePin+0xaa>
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	91 05       	cpc	r25, r1
    1bec:	e9 f1       	breq	.+122    	; 0x1c68 <DIO_togglePin+0xd2>
    1bee:	50 c0       	rjmp	.+160    	; 0x1c90 <DIO_togglePin+0xfa>
				{
					case DIO_PORTA:
						TOGGLE_BIT(PORTA, pin);
    1bf0:	ab e3       	ldi	r26, 0x3B	; 59
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	eb e3       	ldi	r30, 0x3B	; 59
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_togglePin+0x78>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_togglePin+0x74>
    1c12:	84 27       	eor	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	3e c0       	rjmp	.+124    	; 0x1c94 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTB:
						TOGGLE_BIT(PORTB, pin);
    1c18:	a8 e3       	ldi	r26, 0x38	; 56
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e8 e3       	ldi	r30, 0x38	; 56
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_togglePin+0xa0>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_togglePin+0x9c>
    1c3a:	84 27       	eor	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	2a c0       	rjmp	.+84     	; 0x1c94 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTC:
						TOGGLE_BIT(PORTC, pin);
    1c40:	a5 e3       	ldi	r26, 0x35	; 53
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e3       	ldi	r30, 0x35	; 53
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_togglePin+0xc8>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <DIO_togglePin+0xc4>
    1c62:	84 27       	eor	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	16 c0       	rjmp	.+44     	; 0x1c94 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTD:
						TOGGLE_BIT(PORTD, pin);
    1c68:	a2 e3       	ldi	r26, 0x32	; 50
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e2 e3       	ldi	r30, 0x32	; 50
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <DIO_togglePin+0xf0>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <DIO_togglePin+0xec>
    1c8a:	84 27       	eor	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <DIO_togglePin+0xfe>
						break;
					default:
						return E_OK;
    1c90:	1d 82       	std	Y+5, r1	; 0x05
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_togglePin+0x102>
				}
	}

	return E_NOK;
    1c94:	91 e0       	ldi	r25, 0x01	; 1
    1c96:	9d 83       	std	Y+5, r25	; 0x05
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <DIO_EnablePullup>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_EnablePullup(DIO_Ports_t PORT, u8 PIN, DIO_PullUpState_t Pullstate)
	{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	2e 97       	sbiw	r28, 0x0e	; 14
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	6a 83       	std	Y+2, r22	; 0x02
    1cc2:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	88 30       	cpi	r24, 0x08	; 8
    1cc8:	10 f0       	brcs	.+4      	; 0x1cce <DIO_EnablePullup+0x24>
			{
				return E_OK;
    1cca:	1e 86       	std	Y+14, r1	; 0x0e
    1ccc:	26 c1       	rjmp	.+588    	; 0x1f1a <DIO_EnablePullup+0x270>
			}
		else
			{
				switch(PORT)
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	3d 87       	std	Y+13, r19	; 0x0d
    1cd6:	2c 87       	std	Y+12, r18	; 0x0c
    1cd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cda:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <DIO_EnablePullup+0x3a>
    1ce2:	57 c0       	rjmp	.+174    	; 0x1d92 <DIO_EnablePullup+0xe8>
    1ce4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ce6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <DIO_EnablePullup+0x4e>
    1cee:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cf0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	71 f0       	breq	.+28     	; 0x1d12 <DIO_EnablePullup+0x68>
    1cf6:	0d c1       	rjmp	.+538    	; 0x1f12 <DIO_EnablePullup+0x268>
    1cf8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cfa:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <DIO_EnablePullup+0x5a>
    1d02:	87 c0       	rjmp	.+270    	; 0x1e12 <DIO_EnablePullup+0x168>
    1d04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d06:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d08:	83 30       	cpi	r24, 0x03	; 3
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <DIO_EnablePullup+0x66>
    1d0e:	c1 c0       	rjmp	.+386    	; 0x1e92 <DIO_EnablePullup+0x1e8>
    1d10:	00 c1       	rjmp	.+512    	; 0x1f12 <DIO_EnablePullup+0x268>
				{
					case DIO_PORTA:
						switch(Pullstate)
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	3b 87       	std	Y+11, r19	; 0x0b
    1d1a:	2a 87       	std	Y+10, r18	; 0x0a
    1d1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	31 f0       	breq	.+12     	; 0x1d30 <DIO_EnablePullup+0x86>
    1d24:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d26:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d28:	21 30       	cpi	r18, 0x01	; 1
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	41 f1       	breq	.+80     	; 0x1d7e <DIO_EnablePullup+0xd4>
    1d2e:	2f c0       	rjmp	.+94     	; 0x1d8e <DIO_EnablePullup+0xe4>
							{
								case ENABLE_PullUp:
									CLEAR_BIT(DDRA,PIN);
    1d30:	aa e3       	ldi	r26, 0x3A	; 58
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	ea e3       	ldi	r30, 0x3A	; 58
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <DIO_EnablePullup+0xa2>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	2a 95       	dec	r18
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <DIO_EnablePullup+0x9e>
    1d50:	80 95       	com	r24
    1d52:	84 23       	and	r24, r20
    1d54:	8c 93       	st	X, r24
									SET_BIT(PORTA,PIN);
    1d56:	ab e3       	ldi	r26, 0x3B	; 59
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	eb e3       	ldi	r30, 0x3B	; 59
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	48 2f       	mov	r20, r24
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <DIO_EnablePullup+0xca>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <DIO_EnablePullup+0xc6>
    1d78:	84 2b       	or	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	cc c0       	rjmp	.+408    	; 0x1f16 <DIO_EnablePullup+0x26c>
									break;
								case DISABLE_PullUp:
									SET_BIT(SFIOR,PUD);
    1d7e:	a0 e5       	ldi	r26, 0x50	; 80
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e0 e5       	ldi	r30, 0x50	; 80
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	84 60       	ori	r24, 0x04	; 4
    1d8a:	8c 93       	st	X, r24
    1d8c:	c4 c0       	rjmp	.+392    	; 0x1f16 <DIO_EnablePullup+0x26c>
									break;
								default:
									return E_OK;
    1d8e:	1e 86       	std	Y+14, r1	; 0x0e
    1d90:	c4 c0       	rjmp	.+392    	; 0x1f1a <DIO_EnablePullup+0x270>
							}
						break;
						case DIO_PORTB:
							switch(Pullstate)
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	39 87       	std	Y+9, r19	; 0x09
    1d9a:	28 87       	std	Y+8, r18	; 0x08
    1d9c:	88 85       	ldd	r24, Y+8	; 0x08
    1d9e:	99 85       	ldd	r25, Y+9	; 0x09
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	31 f0       	breq	.+12     	; 0x1db0 <DIO_EnablePullup+0x106>
    1da4:	28 85       	ldd	r18, Y+8	; 0x08
    1da6:	39 85       	ldd	r19, Y+9	; 0x09
    1da8:	21 30       	cpi	r18, 0x01	; 1
    1daa:	31 05       	cpc	r19, r1
    1dac:	41 f1       	breq	.+80     	; 0x1dfe <DIO_EnablePullup+0x154>
    1dae:	2f c0       	rjmp	.+94     	; 0x1e0e <DIO_EnablePullup+0x164>
								{
									case ENABLE_PullUp:
										CLEAR_BIT(DDRB,PIN);
    1db0:	a7 e3       	ldi	r26, 0x37	; 55
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e7 e3       	ldi	r30, 0x37	; 55
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <DIO_EnablePullup+0x122>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	2a 95       	dec	r18
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <DIO_EnablePullup+0x11e>
    1dd0:	80 95       	com	r24
    1dd2:	84 23       	and	r24, r20
    1dd4:	8c 93       	st	X, r24
										SET_BIT(PORTB,PIN);
    1dd6:	a8 e3       	ldi	r26, 0x38	; 56
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e8 e3       	ldi	r30, 0x38	; 56
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	48 2f       	mov	r20, r24
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 2e       	mov	r0, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <DIO_EnablePullup+0x14a>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <DIO_EnablePullup+0x146>
    1df8:	84 2b       	or	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	8c c0       	rjmp	.+280    	; 0x1f16 <DIO_EnablePullup+0x26c>
										break;
									case DISABLE_PullUp:
										SET_BIT(SFIOR,PUD);
    1dfe:	a0 e5       	ldi	r26, 0x50	; 80
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e0 e5       	ldi	r30, 0x50	; 80
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	84 60       	ori	r24, 0x04	; 4
    1e0a:	8c 93       	st	X, r24
    1e0c:	84 c0       	rjmp	.+264    	; 0x1f16 <DIO_EnablePullup+0x26c>
										break;
									default:
										return E_OK;
    1e0e:	1e 86       	std	Y+14, r1	; 0x0e
    1e10:	84 c0       	rjmp	.+264    	; 0x1f1a <DIO_EnablePullup+0x270>
								}
							break;
							case DIO_PORTC:
								switch(Pullstate)
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3f 83       	std	Y+7, r19	; 0x07
    1e1a:	2e 83       	std	Y+6, r18	; 0x06
    1e1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	31 f0       	breq	.+12     	; 0x1e30 <DIO_EnablePullup+0x186>
    1e24:	2e 81       	ldd	r18, Y+6	; 0x06
    1e26:	3f 81       	ldd	r19, Y+7	; 0x07
    1e28:	21 30       	cpi	r18, 0x01	; 1
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	41 f1       	breq	.+80     	; 0x1e7e <DIO_EnablePullup+0x1d4>
    1e2e:	2f c0       	rjmp	.+94     	; 0x1e8e <DIO_EnablePullup+0x1e4>
									{
										case ENABLE_PullUp:
											CLEAR_BIT(DDRC,PIN);
    1e30:	a4 e3       	ldi	r26, 0x34	; 52
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e4 e3       	ldi	r30, 0x34	; 52
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <DIO_EnablePullup+0x1a2>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	2a 95       	dec	r18
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <DIO_EnablePullup+0x19e>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
											SET_BIT(PORTC,PIN);
    1e56:	a5 e3       	ldi	r26, 0x35	; 53
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e5 e3       	ldi	r30, 0x35	; 53
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 2e       	mov	r0, r18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <DIO_EnablePullup+0x1ca>
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0a 94       	dec	r0
    1e76:	e2 f7       	brpl	.-8      	; 0x1e70 <DIO_EnablePullup+0x1c6>
    1e78:	84 2b       	or	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	4c c0       	rjmp	.+152    	; 0x1f16 <DIO_EnablePullup+0x26c>
											break;
										case DISABLE_PullUp:
											SET_BIT(SFIOR,PUD);
    1e7e:	a0 e5       	ldi	r26, 0x50	; 80
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e0 e5       	ldi	r30, 0x50	; 80
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	84 60       	ori	r24, 0x04	; 4
    1e8a:	8c 93       	st	X, r24
    1e8c:	44 c0       	rjmp	.+136    	; 0x1f16 <DIO_EnablePullup+0x26c>
											break;
										default:
											return E_OK;
    1e8e:	1e 86       	std	Y+14, r1	; 0x0e
    1e90:	44 c0       	rjmp	.+136    	; 0x1f1a <DIO_EnablePullup+0x270>
									}
								break;
								case DIO_PORTD:
									switch(Pullstate)
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	3d 83       	std	Y+5, r19	; 0x05
    1e9a:	2c 83       	std	Y+4, r18	; 0x04
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	31 f0       	breq	.+12     	; 0x1eb0 <DIO_EnablePullup+0x206>
    1ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea8:	21 30       	cpi	r18, 0x01	; 1
    1eaa:	31 05       	cpc	r19, r1
    1eac:	41 f1       	breq	.+80     	; 0x1efe <DIO_EnablePullup+0x254>
    1eae:	2f c0       	rjmp	.+94     	; 0x1f0e <DIO_EnablePullup+0x264>
										{
											case ENABLE_PullUp:
												CLEAR_BIT(DDRD,PIN);
    1eb0:	a1 e3       	ldi	r26, 0x31	; 49
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e1 e3       	ldi	r30, 0x31	; 49
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <DIO_EnablePullup+0x222>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	2a 95       	dec	r18
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <DIO_EnablePullup+0x21e>
    1ed0:	80 95       	com	r24
    1ed2:	84 23       	and	r24, r20
    1ed4:	8c 93       	st	X, r24
												SET_BIT(PORTD,PIN);
    1ed6:	a2 e3       	ldi	r26, 0x32	; 50
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e2 e3       	ldi	r30, 0x32	; 50
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <DIO_EnablePullup+0x24a>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <DIO_EnablePullup+0x246>
    1ef8:	84 2b       	or	r24, r20
    1efa:	8c 93       	st	X, r24
    1efc:	0c c0       	rjmp	.+24     	; 0x1f16 <DIO_EnablePullup+0x26c>
												break;
											case DISABLE_PullUp:
												SET_BIT(SFIOR,PUD);
    1efe:	a0 e5       	ldi	r26, 0x50	; 80
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e0 e5       	ldi	r30, 0x50	; 80
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	84 60       	ori	r24, 0x04	; 4
    1f0a:	8c 93       	st	X, r24
    1f0c:	04 c0       	rjmp	.+8      	; 0x1f16 <DIO_EnablePullup+0x26c>
												break;
											default:
												return E_OK;
    1f0e:	1e 86       	std	Y+14, r1	; 0x0e
    1f10:	04 c0       	rjmp	.+8      	; 0x1f1a <DIO_EnablePullup+0x270>
										}
									break;
									default:
									return E_OK;
    1f12:	1e 86       	std	Y+14, r1	; 0x0e
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <DIO_EnablePullup+0x270>

				}
			}
		return E_NOK;
    1f16:	31 e0       	ldi	r19, 0x01	; 1
    1f18:	3e 87       	std	Y+14, r19	; 0x0e
    1f1a:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    1f1c:	2e 96       	adiw	r28, 0x0e	; 14
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <ADC_Init>:
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 */
 /*****************************************************************************************************/
STD_Return ADC_Init(ADC__State_t State)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <ADC_Init+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <ADC_Init+0x8>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	89 83       	std	Y+1, r24	; 0x01
	//Resolution Selection
	#if defined Resolution_8_Bit
	SET_BIT(ADMUX,ADLAR);
	#elif defined Resolution_10_Bit
	CLEAR_BIT(ADMUX,ADLAR);
    1f3c:	a7 e2       	ldi	r26, 0x27	; 39
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e7 e2       	ldi	r30, 0x27	; 39
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	8f 7d       	andi	r24, 0xDF	; 223
    1f48:	8c 93       	st	X, r24
	//Voltage Reference Selection
	#if defined AREF_Internal_VREF
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
	#elif defined AREF_External_VREF
	SET_BIT(ADMUX,REFS0);
    1f4a:	a7 e2       	ldi	r26, 0x27	; 39
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e7 e2       	ldi	r30, 0x27	; 39
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	80 64       	ori	r24, 0x40	; 64
    1f56:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    1f58:	a7 e2       	ldi	r26, 0x27	; 39
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e7 e2       	ldi	r30, 0x27	; 39
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	8f 77       	andi	r24, 0x7F	; 127
    1f64:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_64
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_128
		SET_BIT(ADCSRA,ADPS0);
    1f66:	a6 e2       	ldi	r26, 0x26	; 38
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e6 e2       	ldi	r30, 0x26	; 38
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	81 60       	ori	r24, 0x01	; 1
    1f72:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1f74:	a6 e2       	ldi	r26, 0x26	; 38
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e6 e2       	ldi	r30, 0x26	; 38
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	82 60       	ori	r24, 0x02	; 2
    1f80:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    1f82:	a6 e2       	ldi	r26, 0x26	; 38
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e6 e2       	ldi	r30, 0x26	; 38
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	84 60       	ori	r24, 0x04	; 4
    1f8e:	8c 93       	st	X, r24
	#endif
	switch (State)
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	3c 83       	std	Y+4, r19	; 0x04
    1f98:	2b 83       	std	Y+3, r18	; 0x03
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	31 f0       	breq	.+12     	; 0x1fae <ADC_Init+0x80>
    1fa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa6:	21 30       	cpi	r18, 0x01	; 1
    1fa8:	31 05       	cpc	r19, r1
    1faa:	49 f0       	breq	.+18     	; 0x1fbe <ADC_Init+0x90>
    1fac:	10 c0       	rjmp	.+32     	; 0x1fce <ADC_Init+0xa0>
		{
			case ADC_ENABLE:
				SET_BIT(ADCSRA,ADEN);
    1fae:	a6 e2       	ldi	r26, 0x26	; 38
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e6 e2       	ldi	r30, 0x26	; 38
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	80 68       	ori	r24, 0x80	; 128
    1fba:	8c 93       	st	X, r24
    1fbc:	0a c0       	rjmp	.+20     	; 0x1fd2 <ADC_Init+0xa4>
				break;
			case ADC_DISABLE:
				CLEAR_BIT(ADCSRA,ADEN);
    1fbe:	a6 e2       	ldi	r26, 0x26	; 38
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e6 e2       	ldi	r30, 0x26	; 38
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8f 77       	andi	r24, 0x7F	; 127
    1fca:	8c 93       	st	X, r24
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <ADC_Init+0xa4>
				break;
			default:
				return E_OK;
    1fce:	1a 82       	std	Y+2, r1	; 0x02
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <ADC_Init+0xa8>
		}
		return E_NOK;
    1fd2:	31 e0       	ldi	r19, 0x01	; 1
    1fd4:	3a 83       	std	Y+2, r19	; 0x02
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <ADC_SetInterrupt_Enable>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 */
STD_Return ADC_SetInterrupt_Enable(ADC_Interrupt_State_t State)
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <ADC_SetInterrupt_Enable+0x6>
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <ADC_SetInterrupt_Enable+0x8>
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	3c 83       	std	Y+4, r19	; 0x04
    1ffc:	2b 83       	std	Y+3, r18	; 0x03
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	31 f0       	breq	.+12     	; 0x2012 <ADC_SetInterrupt_Enable+0x2c>
    2006:	2b 81       	ldd	r18, Y+3	; 0x03
    2008:	3c 81       	ldd	r19, Y+4	; 0x04
    200a:	21 30       	cpi	r18, 0x01	; 1
    200c:	31 05       	cpc	r19, r1
    200e:	49 f0       	breq	.+18     	; 0x2022 <ADC_SetInterrupt_Enable+0x3c>
    2010:	10 c0       	rjmp	.+32     	; 0x2032 <ADC_SetInterrupt_Enable+0x4c>
	{
		case ADC_Interrupt_ENABLE:
			SET_BIT(ADCSRA,ADIE);
    2012:	a6 e2       	ldi	r26, 0x26	; 38
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e6 e2       	ldi	r30, 0x26	; 38
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	88 60       	ori	r24, 0x08	; 8
    201e:	8c 93       	st	X, r24
    2020:	0a c0       	rjmp	.+20     	; 0x2036 <ADC_SetInterrupt_Enable+0x50>
			break;
		case ADC_Interrupt_DISABLE:
			CLEAR_BIT(ADCSRA,ADIE);
    2022:	a6 e2       	ldi	r26, 0x26	; 38
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e6 e2       	ldi	r30, 0x26	; 38
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	87 7f       	andi	r24, 0xF7	; 247
    202e:	8c 93       	st	X, r24
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <ADC_SetInterrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    2032:	1a 82       	std	Y+2, r1	; 0x02
    2034:	02 c0       	rjmp	.+4      	; 0x203a <ADC_SetInterrupt_Enable+0x54>
	}
	return E_NOK;
    2036:	31 e0       	ldi	r19, 0x01	; 1
    2038:	3a 83       	std	Y+2, r19	; 0x02
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <ADC_Start_conversion>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Start_conversion(u8 channel)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <ADC_Start_conversion+0x6>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
	if (channel>MaxPinNum)
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	88 30       	cpi	r24, 0x08	; 8
    205a:	10 f0       	brcs	.+4      	; 0x2060 <ADC_Start_conversion+0x16>
	{
		return E_OK;
    205c:	1a 82       	std	Y+2, r1	; 0x02
    205e:	21 c0       	rjmp	.+66     	; 0x20a2 <ADC_Start_conversion+0x58>
	}
	else
	{

			//Mask for non used bits of the 8 bits of the Regsiter
			ADMUX &= Unselected_Channel_MASK;
    2060:	a7 e2       	ldi	r26, 0x27	; 39
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e7 e2       	ldi	r30, 0x27	; 39
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	88 7f       	andi	r24, 0xF8	; 248
    206c:	8c 93       	st	X, r24

			//Mask for the usage 3 bits of the 8 bits
			ADMUX |= channel;
    206e:	a7 e2       	ldi	r26, 0x27	; 39
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e7 e2       	ldi	r30, 0x27	; 39
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	90 81       	ld	r25, Z
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	89 2b       	or	r24, r25
    207c:	8c 93       	st	X, r24

			//Set the AdcStartConversion
			SET_BIT(ADCSRA,ADSC);
    207e:	a6 e2       	ldi	r26, 0x26	; 38
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e6 e2       	ldi	r30, 0x26	; 38
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	80 64       	ori	r24, 0x40	; 64
    208a:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA,ADSC) == 1);
    208c:	e6 e2       	ldi	r30, 0x26	; 38
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	80 74       	andi	r24, 0x40	; 64
    2098:	90 70       	andi	r25, 0x00	; 0
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	b9 f7       	brne	.-18     	; 0x208c <ADC_Start_conversion+0x42>
		 //Wait conversion to finish
	}
	return E_NOK;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	8a 83       	std	Y+2, r24	; 0x02
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <ADC_Get_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Get_Value(u16 *AdcResult)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <ADC_Get_Value+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <ADC_Get_Value+0x8>
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	9c 83       	std	Y+4, r25	; 0x04
    20bc:	8b 83       	std	Y+3, r24	; 0x03
		u16 AdcResult_Temp=0;
    20be:	1a 82       	std	Y+2, r1	; 0x02
    20c0:	19 82       	std	Y+1, r1	; 0x01
	#if defined Resolution_8_Bit
		*AdcResult=ADCH;
	#elif defined Resolution_10_Bit
		AdcResult_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    20c2:	e4 e2       	ldi	r30, 0x24	; 36
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	e5 e2       	ldi	r30, 0x25	; 37
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	98 2f       	mov	r25, r24
    20d8:	88 27       	eor	r24, r24
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
		*AdcResult = (AdcResult_Temp & Resolution_10Bit_MASK);//Mask higher bits in ADCH and read only the 10 bits for the ADC
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	93 70       	andi	r25, 0x03	; 3
    20e8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ea:	fc 81       	ldd	r31, Y+4	; 0x04
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
	#endif
		return E_NOK;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
}
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <ADC_Read_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Read_Value(u8 channel,u16 *AdcValue)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	00 d0       	rcall	.+0      	; 0x2106 <ADC_Read_Value+0x6>
    2106:	00 d0       	rcall	.+0      	; 0x2108 <ADC_Read_Value+0x8>
    2108:	00 d0       	rcall	.+0      	; 0x210a <ADC_Read_Value+0xa>
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	8b 83       	std	Y+3, r24	; 0x03
    2110:	7d 83       	std	Y+5, r23	; 0x05
    2112:	6c 83       	std	Y+4, r22	; 0x04
	u16 AdcValue_Temp=0;
    2114:	1a 82       	std	Y+2, r1	; 0x02
    2116:	19 82       	std	Y+1, r1	; 0x01
	if (channel>MaxPinNum)
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	88 30       	cpi	r24, 0x08	; 8
    211c:	c0 f0       	brcs	.+48     	; 0x214e <ADC_Read_Value+0x4e>
		{
			return E_OK;
    211e:	1e 82       	std	Y+6, r1	; 0x06
    2120:	38 c0       	rjmp	.+112    	; 0x2192 <ADC_Read_Value+0x92>
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
			{
				//Mask for non used bits of the 8 bits of the Regsiter
				ADMUX &= Unselected_Channel_MASK;
    2122:	a7 e2       	ldi	r26, 0x27	; 39
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e7 e2       	ldi	r30, 0x27	; 39
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	88 7f       	andi	r24, 0xF8	; 248
    212e:	8c 93       	st	X, r24

				//Mask for the usage 3 bits of the 8 bits
				ADMUX |= channel;
    2130:	a7 e2       	ldi	r26, 0x27	; 39
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e7 e2       	ldi	r30, 0x27	; 39
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	90 81       	ld	r25, Z
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	89 2b       	or	r24, r25
    213e:	8c 93       	st	X, r24

				//Set the AdcStartConversion
				SET_BIT(ADCSRA,ADSC);
    2140:	a6 e2       	ldi	r26, 0x26	; 38
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e6 e2       	ldi	r30, 0x26	; 38
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	80 64       	ori	r24, 0x40	; 64
    214c:	8c 93       	st	X, r24
		}
		else
		{
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
    214e:	e6 e2       	ldi	r30, 0x26	; 38
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	80 74       	andi	r24, 0x40	; 64
    215a:	90 70       	andi	r25, 0x00	; 0
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	09 f7       	brne	.-62     	; 0x2122 <ADC_Read_Value+0x22>
			//return the read value

			#if defined Resolution_8_Bit
				*AdcValue=ADCH;
			#elif defined Resolution_10_Bit
				AdcValue_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    2160:	e4 e2       	ldi	r30, 0x24	; 36
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	e5 e2       	ldi	r30, 0x25	; 37
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 2f       	mov	r24, r24
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	98 2f       	mov	r25, r24
    2176:	88 27       	eor	r24, r24
    2178:	82 0f       	add	r24, r18
    217a:	93 1f       	adc	r25, r19
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
				*AdcValue = (AdcValue_Temp & Resolution_10Bit_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	93 70       	andi	r25, 0x03	; 3
    2186:	ec 81       	ldd	r30, Y+4	; 0x04
    2188:	fd 81       	ldd	r31, Y+5	; 0x05
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
			#endif
		}
	return E_NOK;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	8e 83       	std	Y+6, r24	; 0x06
    2192:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2194:	26 96       	adiw	r28, 0x06	; 6
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <ADC_ReadVolt>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_ReadVolt (u8 channel,f32 *AdcVolt)
	{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <ADC_ReadVolt+0x6>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <ADC_ReadVolt+0x8>
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <ADC_ReadVolt+0xa>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	8b 83       	std	Y+3, r24	; 0x03
    21b6:	7d 83       	std	Y+5, r23	; 0x05
    21b8:	6c 83       	std	Y+4, r22	; 0x04
		u16 AdcValue_Temp=0;
    21ba:	1a 82       	std	Y+2, r1	; 0x02
    21bc:	19 82       	std	Y+1, r1	; 0x01
		if(channel>MaxPinNum)
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	88 30       	cpi	r24, 0x08	; 8
    21c2:	10 f0       	brcs	.+4      	; 0x21c8 <ADC_ReadVolt+0x22>
			{
				return E_OK;
    21c4:	1e 82       	std	Y+6, r1	; 0x06
    21c6:	2e c0       	rjmp	.+92     	; 0x2224 <ADC_ReadVolt+0x7e>
			}
		else
			{
				ADC_Read_Value(channel,&AdcValue_Temp);
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9e 01       	movw	r18, r28
    21cc:	2f 5f       	subi	r18, 0xFF	; 255
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	b9 01       	movw	r22, r18
    21d2:	0e 94 80 10 	call	0x2100	; 0x2100 <ADC_Read_Value>
				*AdcVolt= (((f32)AdcValue_Temp)*((f32)VREF))/((f32)(ADC_MAX));
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	cc 01       	movw	r24, r24
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 ea       	ldi	r20, 0xA0	; 160
    21f6:	50 e4       	ldi	r21, 0x40	; 64
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	bc 01       	movw	r22, r24
    2202:	cd 01       	movw	r24, r26
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	54 e4       	ldi	r21, 0x44	; 68
    220c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	ec 81       	ldd	r30, Y+4	; 0x04
    2216:	fd 81       	ldd	r31, Y+5	; 0x05
    2218:	80 83       	st	Z, r24
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	a2 83       	std	Z+2, r26	; 0x02
    221e:	b3 83       	std	Z+3, r27	; 0x03
			}
		return E_NOK;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	8e 83       	std	Y+6, r24	; 0x06
    2224:	8e 81       	ldd	r24, Y+6	; 0x06
	}
    2226:	26 96       	adiw	r28, 0x06	; 6
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <ADC_CallBack>:
 * 
 * @param func_ptr 		 :		pointer to function that points to the user/ External function
 * @return void			 : 		return nothing
 **/
void ADC_CallBack(void (*func_ptr)(void))
	{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <ADC_CallBack+0x6>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01
		User_Function = func_ptr;
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	9a 81       	ldd	r25, Y+2	; 0x02
    224a:	90 93 89 01 	sts	0x0189, r25
    224e:	80 93 88 01 	sts	0x0188, r24
	}
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <__vector_16>:
/*********************************ISR ADC Vector******************************************************/
ISR(ADC_Vect)
{
    225c:	1f 92       	push	r1
    225e:	0f 92       	push	r0
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	0f 92       	push	r0
    2264:	11 24       	eor	r1, r1
    2266:	2f 93       	push	r18
    2268:	3f 93       	push	r19
    226a:	4f 93       	push	r20
    226c:	5f 93       	push	r21
    226e:	6f 93       	push	r22
    2270:	7f 93       	push	r23
    2272:	8f 93       	push	r24
    2274:	9f 93       	push	r25
    2276:	af 93       	push	r26
    2278:	bf 93       	push	r27
    227a:	ef 93       	push	r30
    227c:	ff 93       	push	r31
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
	(*User_Function)();
    2286:	e0 91 88 01 	lds	r30, 0x0188
    228a:	f0 91 89 01 	lds	r31, 0x0189
    228e:	09 95       	icall
}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	ff 91       	pop	r31
    2296:	ef 91       	pop	r30
    2298:	bf 91       	pop	r27
    229a:	af 91       	pop	r26
    229c:	9f 91       	pop	r25
    229e:	8f 91       	pop	r24
    22a0:	7f 91       	pop	r23
    22a2:	6f 91       	pop	r22
    22a4:	5f 91       	pop	r21
    22a6:	4f 91       	pop	r20
    22a8:	3f 91       	pop	r19
    22aa:	2f 91       	pop	r18
    22ac:	0f 90       	pop	r0
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	0f 90       	pop	r0
    22b2:	1f 90       	pop	r1
    22b4:	18 95       	reti

000022b6 <TimingSelection>:
 * @param TYPE 						: takes the sevensegment types CommonAnode/CommonCathode
 * @param Time 						: take which time will activated Sec01/Sec10/Min01/Min10			
 * @return STD_Return 
 */
STD_Return TimingSelection(u8 StopWatch_ControlPort,SevenSegment_Type_t TYPE,SevenSegment_Sel_t Time)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	2a 97       	sbiw	r28, 0x0a	; 10
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	6a 83       	std	Y+2, r22	; 0x02
    22ce:	4b 83       	std	Y+3, r20	; 0x03
	#ifdef StopWatch_ControlPort_A
	switch(TYPE)
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	3a 87       	std	Y+10, r19	; 0x0a
    22d8:	29 87       	std	Y+9, r18	; 0x09
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	39 f0       	breq	.+14     	; 0x22f0 <TimingSelection+0x3a>
    22e2:	29 85       	ldd	r18, Y+9	; 0x09
    22e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    22e6:	21 30       	cpi	r18, 0x01	; 1
    22e8:	31 05       	cpc	r19, r1
    22ea:	09 f4       	brne	.+2      	; 0x22ee <TimingSelection+0x38>
    22ec:	77 c0       	rjmp	.+238    	; 0x23dc <TimingSelection+0x126>
    22ee:	ec c0       	rjmp	.+472    	; 0x24c8 <TimingSelection+0x212>
	{
		case CommonCathod:
			switch(Time)
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	38 87       	std	Y+8, r19	; 0x08
    22f8:	2f 83       	std	Y+7, r18	; 0x07
    22fa:	8f 81       	ldd	r24, Y+7	; 0x07
    22fc:	98 85       	ldd	r25, Y+8	; 0x08
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	91 05       	cpc	r25, r1
    2302:	59 f1       	breq	.+86     	; 0x235a <TimingSelection+0xa4>
    2304:	2f 81       	ldd	r18, Y+7	; 0x07
    2306:	38 85       	ldd	r19, Y+8	; 0x08
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	2c f4       	brge	.+10     	; 0x2318 <TimingSelection+0x62>
    230e:	8f 81       	ldd	r24, Y+7	; 0x07
    2310:	98 85       	ldd	r25, Y+8	; 0x08
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f0       	breq	.+26     	; 0x2330 <TimingSelection+0x7a>
    2316:	60 c0       	rjmp	.+192    	; 0x23d8 <TimingSelection+0x122>
    2318:	2f 81       	ldd	r18, Y+7	; 0x07
    231a:	38 85       	ldd	r19, Y+8	; 0x08
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	89 f1       	breq	.+98     	; 0x2384 <TimingSelection+0xce>
    2322:	8f 81       	ldd	r24, Y+7	; 0x07
    2324:	98 85       	ldd	r25, Y+8	; 0x08
    2326:	83 30       	cpi	r24, 0x03	; 3
    2328:	91 05       	cpc	r25, r1
    232a:	09 f4       	brne	.+2      	; 0x232e <TimingSelection+0x78>
    232c:	40 c0       	rjmp	.+128    	; 0x23ae <TimingSelection+0xf8>
    232e:	54 c0       	rjmp	.+168    	; 0x23d8 <TimingSelection+0x122>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	61 e0       	ldi	r22, 0x01	; 1
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	61 e0       	ldi	r22, 0x01	; 1
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2358:	b9 c0       	rjmp	.+370    	; 0x24cc <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	61 e0       	ldi	r22, 0x01	; 1
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	61 e0       	ldi	r22, 0x01	; 1
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2382:	a4 c0       	rjmp	.+328    	; 0x24cc <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	61 e0       	ldi	r22, 0x01	; 1
    2392:	41 e0       	ldi	r20, 0x01	; 1
    2394:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	61 e0       	ldi	r22, 0x01	; 1
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    23ac:	8f c0       	rjmp	.+286    	; 0x24cc <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    23d6:	7a c0       	rjmp	.+244    	; 0x24cc <TimingSelection+0x216>
						break;
					default: return E_OK;
    23d8:	1e 82       	std	Y+6, r1	; 0x06
    23da:	7a c0       	rjmp	.+244    	; 0x24d0 <TimingSelection+0x21a>
				}
		break;
		case CommonAnode:
			switch(Time)
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	3d 83       	std	Y+5, r19	; 0x05
    23e4:	2c 83       	std	Y+4, r18	; 0x04
    23e6:	8c 81       	ldd	r24, Y+4	; 0x04
    23e8:	9d 81       	ldd	r25, Y+5	; 0x05
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	91 05       	cpc	r25, r1
    23ee:	59 f1       	breq	.+86     	; 0x2446 <TimingSelection+0x190>
    23f0:	2c 81       	ldd	r18, Y+4	; 0x04
    23f2:	3d 81       	ldd	r19, Y+5	; 0x05
    23f4:	22 30       	cpi	r18, 0x02	; 2
    23f6:	31 05       	cpc	r19, r1
    23f8:	2c f4       	brge	.+10     	; 0x2404 <TimingSelection+0x14e>
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	9d 81       	ldd	r25, Y+5	; 0x05
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f0       	breq	.+26     	; 0x241c <TimingSelection+0x166>
    2402:	60 c0       	rjmp	.+192    	; 0x24c4 <TimingSelection+0x20e>
    2404:	2c 81       	ldd	r18, Y+4	; 0x04
    2406:	3d 81       	ldd	r19, Y+5	; 0x05
    2408:	22 30       	cpi	r18, 0x02	; 2
    240a:	31 05       	cpc	r19, r1
    240c:	89 f1       	breq	.+98     	; 0x2470 <TimingSelection+0x1ba>
    240e:	8c 81       	ldd	r24, Y+4	; 0x04
    2410:	9d 81       	ldd	r25, Y+5	; 0x05
    2412:	83 30       	cpi	r24, 0x03	; 3
    2414:	91 05       	cpc	r25, r1
    2416:	09 f4       	brne	.+2      	; 0x241a <TimingSelection+0x164>
    2418:	40 c0       	rjmp	.+128    	; 0x249a <TimingSelection+0x1e4>
    241a:	54 c0       	rjmp	.+168    	; 0x24c4 <TimingSelection+0x20e>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	61 e0       	ldi	r22, 0x01	; 1
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2444:	43 c0       	rjmp	.+134    	; 0x24cc <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	61 e0       	ldi	r22, 0x01	; 1
    2454:	41 e0       	ldi	r20, 0x01	; 1
    2456:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	41 e0       	ldi	r20, 0x01	; 1
    2460:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	61 e0       	ldi	r22, 0x01	; 1
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    246e:	2e c0       	rjmp	.+92     	; 0x24cc <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	61 e0       	ldi	r22, 0x01	; 1
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2498:	19 c0       	rjmp	.+50     	; 0x24cc <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	41 e0       	ldi	r20, 0x01	; 1
    24a0:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	61 e0       	ldi	r22, 0x01	; 1
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    24c2:	04 c0       	rjmp	.+8      	; 0x24cc <TimingSelection+0x216>
						break;
					default: return E_OK;
    24c4:	1e 82       	std	Y+6, r1	; 0x06
    24c6:	04 c0       	rjmp	.+8      	; 0x24d0 <TimingSelection+0x21a>
				}
		break;
		default:
		return E_OK;
    24c8:	1e 82       	std	Y+6, r1	; 0x06
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <TimingSelection+0x21a>
			break;
			default:
			return E_OK;
		}
#endif
	return E_NOK;
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    24d2:	2a 96       	adiw	r28, 0x0a	; 10
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <SevenSegment_Display>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return SevenSegment_Display(DIO_Ports_t PORT,SevenSegment_Type_t TYPE,Display_Number_t NUM)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	6e 97       	sbiw	r28, 0x1e	; 30
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	6a 83       	std	Y+2, r22	; 0x02
    24fc:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT)
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3e 8f       	std	Y+30, r19	; 0x1e
    2506:	2d 8f       	std	Y+29, r18	; 0x1d
    2508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    250a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    250c:	81 30       	cpi	r24, 0x01	; 1
    250e:	91 05       	cpc	r25, r1
    2510:	09 f4       	brne	.+2      	; 0x2514 <SevenSegment_Display+0x30>
    2512:	4f c2       	rjmp	.+1182   	; 0x29b2 <SevenSegment_Display+0x4ce>
    2514:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2516:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2518:	22 30       	cpi	r18, 0x02	; 2
    251a:	31 05       	cpc	r19, r1
    251c:	34 f4       	brge	.+12     	; 0x252a <SevenSegment_Display+0x46>
    251e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2520:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	81 f0       	breq	.+32     	; 0x2546 <SevenSegment_Display+0x62>
    2526:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <SevenSegment_Display+0x11ca>
    252a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    252c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	31 05       	cpc	r19, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <SevenSegment_Display+0x52>
    2534:	68 c4       	rjmp	.+2256   	; 0x2e06 <SevenSegment_Display+0x922>
    2536:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2538:	9e 8d       	ldd	r25, Y+30	; 0x1e
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <SevenSegment_Display+0x5e>
    2540:	8c c6       	rjmp	.+3352   	; 0x325a <SevenSegment_Display+0xd76>
    2542:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <SevenSegment_Display+0x11ca>
	{
		case DIO_PORTA:
		switch(TYPE)
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	3c 8f       	std	Y+28, r19	; 0x1c
    254e:	2b 8f       	std	Y+27, r18	; 0x1b
    2550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	39 f0       	breq	.+14     	; 0x2566 <SevenSegment_Display+0x82>
    2558:	2b 8d       	ldd	r18, Y+27	; 0x1b
    255a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    255c:	21 30       	cpi	r18, 0x01	; 1
    255e:	31 05       	cpc	r19, r1
    2560:	09 f4       	brne	.+2      	; 0x2564 <SevenSegment_Display+0x80>
    2562:	18 c1       	rjmp	.+560    	; 0x2794 <SevenSegment_Display+0x2b0>
    2564:	24 c2       	rjmp	.+1096   	; 0x29ae <SevenSegment_Display+0x4ca>
			{
				case CommonCathod:
					DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	6f ef       	ldi	r22, 0xFF	; 255
    256a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_LOW);
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	67 e0       	ldi	r22, 0x07	; 7
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
					switch(NUM)
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	3a 8f       	std	Y+26, r19	; 0x1a
    2580:	29 8f       	std	Y+25, r18	; 0x19
    2582:	89 8d       	ldd	r24, Y+25	; 0x19
    2584:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2586:	84 30       	cpi	r24, 0x04	; 4
    2588:	91 05       	cpc	r25, r1
    258a:	09 f4       	brne	.+2      	; 0x258e <SevenSegment_Display+0xaa>
    258c:	92 c0       	rjmp	.+292    	; 0x26b2 <SevenSegment_Display+0x1ce>
    258e:	29 8d       	ldd	r18, Y+25	; 0x19
    2590:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2592:	25 30       	cpi	r18, 0x05	; 5
    2594:	31 05       	cpc	r19, r1
    2596:	ec f4       	brge	.+58     	; 0x25d2 <SevenSegment_Display+0xee>
    2598:	89 8d       	ldd	r24, Y+25	; 0x19
    259a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	91 05       	cpc	r25, r1
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <SevenSegment_Display+0xc0>
    25a2:	4b c0       	rjmp	.+150    	; 0x263a <SevenSegment_Display+0x156>
    25a4:	29 8d       	ldd	r18, Y+25	; 0x19
    25a6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    25a8:	22 30       	cpi	r18, 0x02	; 2
    25aa:	31 05       	cpc	r19, r1
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <SevenSegment_Display+0xd4>
    25ae:	89 8d       	ldd	r24, Y+25	; 0x19
    25b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	99 f1       	breq	.+102    	; 0x261c <SevenSegment_Display+0x138>
    25b6:	eb c0       	rjmp	.+470    	; 0x278e <SevenSegment_Display+0x2aa>
    25b8:	29 8d       	ldd	r18, Y+25	; 0x19
    25ba:	3a 8d       	ldd	r19, Y+26	; 0x1a
    25bc:	22 30       	cpi	r18, 0x02	; 2
    25be:	31 05       	cpc	r19, r1
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <SevenSegment_Display+0xe0>
    25c2:	4f c0       	rjmp	.+158    	; 0x2662 <SevenSegment_Display+0x17e>
    25c4:	89 8d       	ldd	r24, Y+25	; 0x19
    25c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25c8:	83 30       	cpi	r24, 0x03	; 3
    25ca:	91 05       	cpc	r25, r1
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <SevenSegment_Display+0xec>
    25ce:	5d c0       	rjmp	.+186    	; 0x268a <SevenSegment_Display+0x1a6>
    25d0:	de c0       	rjmp	.+444    	; 0x278e <SevenSegment_Display+0x2aa>
    25d2:	29 8d       	ldd	r18, Y+25	; 0x19
    25d4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    25d6:	27 30       	cpi	r18, 0x07	; 7
    25d8:	31 05       	cpc	r19, r1
    25da:	09 f4       	brne	.+2      	; 0x25de <SevenSegment_Display+0xfa>
    25dc:	a6 c0       	rjmp	.+332    	; 0x272a <SevenSegment_Display+0x246>
    25de:	89 8d       	ldd	r24, Y+25	; 0x19
    25e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25e2:	88 30       	cpi	r24, 0x08	; 8
    25e4:	91 05       	cpc	r25, r1
    25e6:	6c f4       	brge	.+26     	; 0x2602 <SevenSegment_Display+0x11e>
    25e8:	29 8d       	ldd	r18, Y+25	; 0x19
    25ea:	3a 8d       	ldd	r19, Y+26	; 0x1a
    25ec:	25 30       	cpi	r18, 0x05	; 5
    25ee:	31 05       	cpc	r19, r1
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <SevenSegment_Display+0x110>
    25f2:	78 c0       	rjmp	.+240    	; 0x26e4 <SevenSegment_Display+0x200>
    25f4:	89 8d       	ldd	r24, Y+25	; 0x19
    25f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25f8:	86 30       	cpi	r24, 0x06	; 6
    25fa:	91 05       	cpc	r25, r1
    25fc:	09 f4       	brne	.+2      	; 0x2600 <SevenSegment_Display+0x11c>
    25fe:	86 c0       	rjmp	.+268    	; 0x270c <SevenSegment_Display+0x228>
    2600:	c6 c0       	rjmp	.+396    	; 0x278e <SevenSegment_Display+0x2aa>
    2602:	29 8d       	ldd	r18, Y+25	; 0x19
    2604:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2606:	28 30       	cpi	r18, 0x08	; 8
    2608:	31 05       	cpc	r19, r1
    260a:	09 f4       	brne	.+2      	; 0x260e <SevenSegment_Display+0x12a>
    260c:	a7 c0       	rjmp	.+334    	; 0x275c <SevenSegment_Display+0x278>
    260e:	89 8d       	ldd	r24, Y+25	; 0x19
    2610:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2612:	89 30       	cpi	r24, 0x09	; 9
    2614:	91 05       	cpc	r25, r1
    2616:	09 f4       	brne	.+2      	; 0x261a <SevenSegment_Display+0x136>
    2618:	ab c0       	rjmp	.+342    	; 0x2770 <SevenSegment_Display+0x28c>
    261a:	b9 c0       	rjmp	.+370    	; 0x278e <SevenSegment_Display+0x2aa>
						{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	6f ef       	ldi	r22, 0xFF	; 255
    2620:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	6f ef       	ldi	r22, 0xFF	; 255
    2628:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_LOW);
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	66 e0       	ldi	r22, 0x06	; 6
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2636:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	6f ef       	ldi	r22, 0xFF	; 255
    263e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	41 e0       	ldi	r20, 0x01	; 1
    2650:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	62 e0       	ldi	r22, 0x02	; 2
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    265e:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	6f ef       	ldi	r22, 0xFF	; 255
    2666:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	6f ef       	ldi	r22, 0xFF	; 255
    266e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	62 e0       	ldi	r22, 0x02	; 2
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	65 e0       	ldi	r22, 0x05	; 5
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2686:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	6f ef       	ldi	r22, 0xFF	; 255
    268e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	6f ef       	ldi	r22, 0xFF	; 255
    2696:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	64 e0       	ldi	r22, 0x04	; 4
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	65 e0       	ldi	r22, 0x05	; 5
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    26ae:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	6f ef       	ldi	r22, 0xFF	; 255
    26b6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	6f ef       	ldi	r22, 0xFF	; 255
    26be:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	40 e0       	ldi	r20, 0x00	; 0
    26c8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_LOW);
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	63 e0       	ldi	r22, 0x03	; 3
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	64 e0       	ldi	r22, 0x04	; 4
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    26e0:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	6f ef       	ldi	r22, 0xFF	; 255
    26e8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	6f ef       	ldi	r22, 0xFF	; 255
    26f0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	64 e0       	ldi	r22, 0x04	; 4
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2708:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	6f ef       	ldi	r22, 0xFF	; 255
    2710:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	6f ef       	ldi	r22, 0xFF	; 255
    2718:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2726:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	6f ef       	ldi	r22, 0xFF	; 255
    272e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	61 e0       	ldi	r22, 0x01	; 1
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	62 e0       	ldi	r22, 0x02	; 2
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2758:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	6f ef       	ldi	r22, 0xFF	; 255
    2760:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	6f ef       	ldi	r22, 0xFF	; 255
    2768:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
    276c:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	6f ef       	ldi	r22, 0xFF	; 255
    2774:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	6f ef       	ldi	r22, 0xFF	; 255
    277c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	64 e0       	ldi	r22, 0x04	; 4
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    278a:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    278e:	18 8e       	std	Y+24, r1	; 0x18
    2790:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <SevenSegment_Display+0x11d2>
					}
					break;
			case CommonAnode:
				DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	6f ef       	ldi	r22, 0xFF	; 255
    2798:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
				DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_HIGH);
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	67 e0       	ldi	r22, 0x07	; 7
    27a0:	41 e0       	ldi	r20, 0x01	; 1
    27a2:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
				switch(NUM)
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	3f 8b       	std	Y+23, r19	; 0x17
    27ae:	2e 8b       	std	Y+22, r18	; 0x16
    27b0:	8e 89       	ldd	r24, Y+22	; 0x16
    27b2:	9f 89       	ldd	r25, Y+23	; 0x17
    27b4:	84 30       	cpi	r24, 0x04	; 4
    27b6:	91 05       	cpc	r25, r1
    27b8:	09 f4       	brne	.+2      	; 0x27bc <SevenSegment_Display+0x2d8>
    27ba:	8f c0       	rjmp	.+286    	; 0x28da <SevenSegment_Display+0x3f6>
    27bc:	2e 89       	ldd	r18, Y+22	; 0x16
    27be:	3f 89       	ldd	r19, Y+23	; 0x17
    27c0:	25 30       	cpi	r18, 0x05	; 5
    27c2:	31 05       	cpc	r19, r1
    27c4:	ec f4       	brge	.+58     	; 0x2800 <SevenSegment_Display+0x31c>
    27c6:	8e 89       	ldd	r24, Y+22	; 0x16
    27c8:	9f 89       	ldd	r25, Y+23	; 0x17
    27ca:	81 30       	cpi	r24, 0x01	; 1
    27cc:	91 05       	cpc	r25, r1
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <SevenSegment_Display+0x2ee>
    27d0:	4b c0       	rjmp	.+150    	; 0x2868 <SevenSegment_Display+0x384>
    27d2:	2e 89       	ldd	r18, Y+22	; 0x16
    27d4:	3f 89       	ldd	r19, Y+23	; 0x17
    27d6:	22 30       	cpi	r18, 0x02	; 2
    27d8:	31 05       	cpc	r19, r1
    27da:	2c f4       	brge	.+10     	; 0x27e6 <SevenSegment_Display+0x302>
    27dc:	8e 89       	ldd	r24, Y+22	; 0x16
    27de:	9f 89       	ldd	r25, Y+23	; 0x17
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	99 f1       	breq	.+102    	; 0x284a <SevenSegment_Display+0x366>
    27e4:	e2 c0       	rjmp	.+452    	; 0x29aa <SevenSegment_Display+0x4c6>
    27e6:	2e 89       	ldd	r18, Y+22	; 0x16
    27e8:	3f 89       	ldd	r19, Y+23	; 0x17
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 05       	cpc	r19, r1
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <SevenSegment_Display+0x30e>
    27f0:	4e c0       	rjmp	.+156    	; 0x288e <SevenSegment_Display+0x3aa>
    27f2:	8e 89       	ldd	r24, Y+22	; 0x16
    27f4:	9f 89       	ldd	r25, Y+23	; 0x17
    27f6:	83 30       	cpi	r24, 0x03	; 3
    27f8:	91 05       	cpc	r25, r1
    27fa:	09 f4       	brne	.+2      	; 0x27fe <SevenSegment_Display+0x31a>
    27fc:	5b c0       	rjmp	.+182    	; 0x28b4 <SevenSegment_Display+0x3d0>
    27fe:	d5 c0       	rjmp	.+426    	; 0x29aa <SevenSegment_Display+0x4c6>
    2800:	2e 89       	ldd	r18, Y+22	; 0x16
    2802:	3f 89       	ldd	r19, Y+23	; 0x17
    2804:	27 30       	cpi	r18, 0x07	; 7
    2806:	31 05       	cpc	r19, r1
    2808:	09 f4       	brne	.+2      	; 0x280c <SevenSegment_Display+0x328>
    280a:	a0 c0       	rjmp	.+320    	; 0x294c <SevenSegment_Display+0x468>
    280c:	8e 89       	ldd	r24, Y+22	; 0x16
    280e:	9f 89       	ldd	r25, Y+23	; 0x17
    2810:	88 30       	cpi	r24, 0x08	; 8
    2812:	91 05       	cpc	r25, r1
    2814:	6c f4       	brge	.+26     	; 0x2830 <SevenSegment_Display+0x34c>
    2816:	2e 89       	ldd	r18, Y+22	; 0x16
    2818:	3f 89       	ldd	r19, Y+23	; 0x17
    281a:	25 30       	cpi	r18, 0x05	; 5
    281c:	31 05       	cpc	r19, r1
    281e:	09 f4       	brne	.+2      	; 0x2822 <SevenSegment_Display+0x33e>
    2820:	74 c0       	rjmp	.+232    	; 0x290a <SevenSegment_Display+0x426>
    2822:	8e 89       	ldd	r24, Y+22	; 0x16
    2824:	9f 89       	ldd	r25, Y+23	; 0x17
    2826:	86 30       	cpi	r24, 0x06	; 6
    2828:	91 05       	cpc	r25, r1
    282a:	09 f4       	brne	.+2      	; 0x282e <SevenSegment_Display+0x34a>
    282c:	81 c0       	rjmp	.+258    	; 0x2930 <SevenSegment_Display+0x44c>
    282e:	bd c0       	rjmp	.+378    	; 0x29aa <SevenSegment_Display+0x4c6>
    2830:	2e 89       	ldd	r18, Y+22	; 0x16
    2832:	3f 89       	ldd	r19, Y+23	; 0x17
    2834:	28 30       	cpi	r18, 0x08	; 8
    2836:	31 05       	cpc	r19, r1
    2838:	09 f4       	brne	.+2      	; 0x283c <SevenSegment_Display+0x358>
    283a:	a0 c0       	rjmp	.+320    	; 0x297c <SevenSegment_Display+0x498>
    283c:	8e 89       	ldd	r24, Y+22	; 0x16
    283e:	9f 89       	ldd	r25, Y+23	; 0x17
    2840:	89 30       	cpi	r24, 0x09	; 9
    2842:	91 05       	cpc	r25, r1
    2844:	09 f4       	brne	.+2      	; 0x2848 <SevenSegment_Display+0x364>
    2846:	a3 c0       	rjmp	.+326    	; 0x298e <SevenSegment_Display+0x4aa>
    2848:	b0 c0       	rjmp	.+352    	; 0x29aa <SevenSegment_Display+0x4c6>
					{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	6f ef       	ldi	r22, 0xFF	; 255
    284e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_HIGH);
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	66 e0       	ldi	r22, 0x06	; 6
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2864:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	6f ef       	ldi	r22, 0xFF	; 255
    286c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	6f ef       	ldi	r22, 0xFF	; 255
    2874:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	61 e0       	ldi	r22, 0x01	; 1
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	62 e0       	ldi	r22, 0x02	; 2
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    288c:	12 c7       	rjmp	.+3620   	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	6f ef       	ldi	r22, 0xFF	; 255
    2892:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	65 e0       	ldi	r22, 0x05	; 5
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    28b2:	ff c6       	rjmp	.+3582   	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	6f ef       	ldi	r22, 0xFF	; 255
    28b8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	64 e0       	ldi	r22, 0x04	; 4
    28c8:	41 e0       	ldi	r20, 0x01	; 1
    28ca:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	65 e0       	ldi	r22, 0x05	; 5
    28d2:	41 e0       	ldi	r20, 0x01	; 1
    28d4:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    28d8:	ec c6       	rjmp	.+3544   	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	6f ef       	ldi	r22, 0xFF	; 255
    28de:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	60 e0       	ldi	r22, 0x00	; 0
    28ee:	41 e0       	ldi	r20, 0x01	; 1
    28f0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_HIGH);
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	63 e0       	ldi	r22, 0x03	; 3
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	64 e0       	ldi	r22, 0x04	; 4
    2902:	41 e0       	ldi	r20, 0x01	; 1
    2904:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2908:	d4 c6       	rjmp	.+3496   	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	6f ef       	ldi	r22, 0xFF	; 255
    290e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	61 e0       	ldi	r22, 0x01	; 1
    291e:	41 e0       	ldi	r20, 0x01	; 1
    2920:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	64 e0       	ldi	r22, 0x04	; 4
    2928:	41 e0       	ldi	r20, 0x01	; 1
    292a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    292e:	c1 c6       	rjmp	.+3458   	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	6f ef       	ldi	r22, 0xFF	; 255
    2934:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    294a:	b3 c6       	rjmp	.+3430   	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	6f ef       	ldi	r22, 0xFF	; 255
    2950:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	6f ef       	ldi	r22, 0xFF	; 255
    2958:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	61 e0       	ldi	r22, 0x01	; 1
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	62 e0       	ldi	r22, 0x02	; 2
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    297a:	9b c6       	rjmp	.+3382   	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	6f ef       	ldi	r22, 0xFF	; 255
    2980:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	60 e0       	ldi	r22, 0x00	; 0
    2988:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
    298c:	92 c6       	rjmp	.+3364   	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	6f ef       	ldi	r22, 0xFF	; 255
    2992:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	64 e0       	ldi	r22, 0x04	; 4
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    29a8:	84 c6       	rjmp	.+3336   	; 0x36b2 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    29aa:	18 8e       	std	Y+24, r1	; 0x18
    29ac:	84 c6       	rjmp	.+3336   	; 0x36b6 <SevenSegment_Display+0x11d2>
					}
			break;
			default:
			return E_OK;
    29ae:	18 8e       	std	Y+24, r1	; 0x18
    29b0:	82 c6       	rjmp	.+3332   	; 0x36b6 <SevenSegment_Display+0x11d2>
		}
		break;
		case DIO_PORTB:
			switch(TYPE)
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	28 2f       	mov	r18, r24
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	3d 8b       	std	Y+21, r19	; 0x15
    29ba:	2c 8b       	std	Y+20, r18	; 0x14
    29bc:	8c 89       	ldd	r24, Y+20	; 0x14
    29be:	9d 89       	ldd	r25, Y+21	; 0x15
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	39 f0       	breq	.+14     	; 0x29d2 <SevenSegment_Display+0x4ee>
    29c4:	2c 89       	ldd	r18, Y+20	; 0x14
    29c6:	3d 89       	ldd	r19, Y+21	; 0x15
    29c8:	21 30       	cpi	r18, 0x01	; 1
    29ca:	31 05       	cpc	r19, r1
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <SevenSegment_Display+0x4ec>
    29ce:	0d c1       	rjmp	.+538    	; 0x2bea <SevenSegment_Display+0x706>
    29d0:	18 c2       	rjmp	.+1072   	; 0x2e02 <SevenSegment_Display+0x91e>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	6f ef       	ldi	r22, 0xFF	; 255
    29d6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_LOW);
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	67 e0       	ldi	r22, 0x07	; 7
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						switch(NUM)
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	3b 8b       	std	Y+19, r19	; 0x13
    29ec:	2a 8b       	std	Y+18, r18	; 0x12
    29ee:	8a 89       	ldd	r24, Y+18	; 0x12
    29f0:	9b 89       	ldd	r25, Y+19	; 0x13
    29f2:	84 30       	cpi	r24, 0x04	; 4
    29f4:	91 05       	cpc	r25, r1
    29f6:	09 f4       	brne	.+2      	; 0x29fa <SevenSegment_Display+0x516>
    29f8:	8e c0       	rjmp	.+284    	; 0x2b16 <SevenSegment_Display+0x632>
    29fa:	2a 89       	ldd	r18, Y+18	; 0x12
    29fc:	3b 89       	ldd	r19, Y+19	; 0x13
    29fe:	25 30       	cpi	r18, 0x05	; 5
    2a00:	31 05       	cpc	r19, r1
    2a02:	ec f4       	brge	.+58     	; 0x2a3e <SevenSegment_Display+0x55a>
    2a04:	8a 89       	ldd	r24, Y+18	; 0x12
    2a06:	9b 89       	ldd	r25, Y+19	; 0x13
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <SevenSegment_Display+0x52c>
    2a0e:	4a c0       	rjmp	.+148    	; 0x2aa4 <SevenSegment_Display+0x5c0>
    2a10:	2a 89       	ldd	r18, Y+18	; 0x12
    2a12:	3b 89       	ldd	r19, Y+19	; 0x13
    2a14:	22 30       	cpi	r18, 0x02	; 2
    2a16:	31 05       	cpc	r19, r1
    2a18:	2c f4       	brge	.+10     	; 0x2a24 <SevenSegment_Display+0x540>
    2a1a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a1c:	9b 89       	ldd	r25, Y+19	; 0x13
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	99 f1       	breq	.+102    	; 0x2a88 <SevenSegment_Display+0x5a4>
    2a22:	e1 c0       	rjmp	.+450    	; 0x2be6 <SevenSegment_Display+0x702>
    2a24:	2a 89       	ldd	r18, Y+18	; 0x12
    2a26:	3b 89       	ldd	r19, Y+19	; 0x13
    2a28:	22 30       	cpi	r18, 0x02	; 2
    2a2a:	31 05       	cpc	r19, r1
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <SevenSegment_Display+0x54c>
    2a2e:	4d c0       	rjmp	.+154    	; 0x2aca <SevenSegment_Display+0x5e6>
    2a30:	8a 89       	ldd	r24, Y+18	; 0x12
    2a32:	9b 89       	ldd	r25, Y+19	; 0x13
    2a34:	83 30       	cpi	r24, 0x03	; 3
    2a36:	91 05       	cpc	r25, r1
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <SevenSegment_Display+0x558>
    2a3a:	5a c0       	rjmp	.+180    	; 0x2af0 <SevenSegment_Display+0x60c>
    2a3c:	d4 c0       	rjmp	.+424    	; 0x2be6 <SevenSegment_Display+0x702>
    2a3e:	2a 89       	ldd	r18, Y+18	; 0x12
    2a40:	3b 89       	ldd	r19, Y+19	; 0x13
    2a42:	27 30       	cpi	r18, 0x07	; 7
    2a44:	31 05       	cpc	r19, r1
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <SevenSegment_Display+0x566>
    2a48:	9f c0       	rjmp	.+318    	; 0x2b88 <SevenSegment_Display+0x6a4>
    2a4a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a4c:	9b 89       	ldd	r25, Y+19	; 0x13
    2a4e:	88 30       	cpi	r24, 0x08	; 8
    2a50:	91 05       	cpc	r25, r1
    2a52:	6c f4       	brge	.+26     	; 0x2a6e <SevenSegment_Display+0x58a>
    2a54:	2a 89       	ldd	r18, Y+18	; 0x12
    2a56:	3b 89       	ldd	r19, Y+19	; 0x13
    2a58:	25 30       	cpi	r18, 0x05	; 5
    2a5a:	31 05       	cpc	r19, r1
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <SevenSegment_Display+0x57c>
    2a5e:	73 c0       	rjmp	.+230    	; 0x2b46 <SevenSegment_Display+0x662>
    2a60:	8a 89       	ldd	r24, Y+18	; 0x12
    2a62:	9b 89       	ldd	r25, Y+19	; 0x13
    2a64:	86 30       	cpi	r24, 0x06	; 6
    2a66:	91 05       	cpc	r25, r1
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <SevenSegment_Display+0x588>
    2a6a:	80 c0       	rjmp	.+256    	; 0x2b6c <SevenSegment_Display+0x688>
    2a6c:	bc c0       	rjmp	.+376    	; 0x2be6 <SevenSegment_Display+0x702>
    2a6e:	2a 89       	ldd	r18, Y+18	; 0x12
    2a70:	3b 89       	ldd	r19, Y+19	; 0x13
    2a72:	28 30       	cpi	r18, 0x08	; 8
    2a74:	31 05       	cpc	r19, r1
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <SevenSegment_Display+0x596>
    2a78:	9f c0       	rjmp	.+318    	; 0x2bb8 <SevenSegment_Display+0x6d4>
    2a7a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a7c:	9b 89       	ldd	r25, Y+19	; 0x13
    2a7e:	89 30       	cpi	r24, 0x09	; 9
    2a80:	91 05       	cpc	r25, r1
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <SevenSegment_Display+0x5a2>
    2a84:	a2 c0       	rjmp	.+324    	; 0x2bca <SevenSegment_Display+0x6e6>
    2a86:	af c0       	rjmp	.+350    	; 0x2be6 <SevenSegment_Display+0x702>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	6f ef       	ldi	r22, 0xFF	; 255
    2a8c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	6f ef       	ldi	r22, 0xFF	; 255
    2a94:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_LOW);
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	66 e0       	ldi	r22, 0x06	; 6
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2aa2:	07 c6       	rjmp	.+3086   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	6f ef       	ldi	r22, 0xFF	; 255
    2aa8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	61 e0       	ldi	r22, 0x01	; 1
    2ab8:	41 e0       	ldi	r20, 0x01	; 1
    2aba:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	62 e0       	ldi	r22, 0x02	; 2
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2ac8:	f4 c5       	rjmp	.+3048   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	6f ef       	ldi	r22, 0xFF	; 255
    2ace:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	6f ef       	ldi	r22, 0xFF	; 255
    2ad6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	62 e0       	ldi	r22, 0x02	; 2
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	65 e0       	ldi	r22, 0x05	; 5
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2aee:	e1 c5       	rjmp	.+3010   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	6f ef       	ldi	r22, 0xFF	; 255
    2af4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	6f ef       	ldi	r22, 0xFF	; 255
    2afc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	64 e0       	ldi	r22, 0x04	; 4
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	65 e0       	ldi	r22, 0x05	; 5
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2b14:	ce c5       	rjmp	.+2972   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	6f ef       	ldi	r22, 0xFF	; 255
    2b1a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	6f ef       	ldi	r22, 0xFF	; 255
    2b22:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_LOW);
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	63 e0       	ldi	r22, 0x03	; 3
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	64 e0       	ldi	r22, 0x04	; 4
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2b44:	b6 c5       	rjmp	.+2924   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	6f ef       	ldi	r22, 0xFF	; 255
    2b4a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	6f ef       	ldi	r22, 0xFF	; 255
    2b52:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	61 e0       	ldi	r22, 0x01	; 1
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	64 e0       	ldi	r22, 0x04	; 4
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2b6a:	a3 c5       	rjmp	.+2886   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	6f ef       	ldi	r22, 0xFF	; 255
    2b70:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	6f ef       	ldi	r22, 0xFF	; 255
    2b78:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	40 e0       	ldi	r20, 0x00	; 0
    2b82:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2b86:	95 c5       	rjmp	.+2858   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	6f ef       	ldi	r22, 0xFF	; 255
    2b8c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	60 e0       	ldi	r22, 0x00	; 0
    2b94:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	41 e0       	ldi	r20, 0x01	; 1
    2b9e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	61 e0       	ldi	r22, 0x01	; 1
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	62 e0       	ldi	r22, 0x02	; 2
    2bb0:	41 e0       	ldi	r20, 0x01	; 1
    2bb2:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2bb6:	7d c5       	rjmp	.+2810   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	6f ef       	ldi	r22, 0xFF	; 255
    2bbc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	6f ef       	ldi	r22, 0xFF	; 255
    2bc4:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
    2bc8:	74 c5       	rjmp	.+2792   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	6f ef       	ldi	r22, 0xFF	; 255
    2bce:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	6f ef       	ldi	r22, 0xFF	; 255
    2bd6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	64 e0       	ldi	r22, 0x04	; 4
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2be4:	66 c5       	rjmp	.+2764   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    2be6:	18 8e       	std	Y+24, r1	; 0x18
    2be8:	66 c5       	rjmp	.+2764   	; 0x36b6 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	6f ef       	ldi	r22, 0xFF	; 255
    2bee:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_HIGH);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	67 e0       	ldi	r22, 0x07	; 7
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
					switch(NUM)
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	39 8b       	std	Y+17, r19	; 0x11
    2c04:	28 8b       	std	Y+16, r18	; 0x10
    2c06:	88 89       	ldd	r24, Y+16	; 0x10
    2c08:	99 89       	ldd	r25, Y+17	; 0x11
    2c0a:	84 30       	cpi	r24, 0x04	; 4
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <SevenSegment_Display+0x72e>
    2c10:	8e c0       	rjmp	.+284    	; 0x2d2e <SevenSegment_Display+0x84a>
    2c12:	28 89       	ldd	r18, Y+16	; 0x10
    2c14:	39 89       	ldd	r19, Y+17	; 0x11
    2c16:	25 30       	cpi	r18, 0x05	; 5
    2c18:	31 05       	cpc	r19, r1
    2c1a:	ec f4       	brge	.+58     	; 0x2c56 <SevenSegment_Display+0x772>
    2c1c:	88 89       	ldd	r24, Y+16	; 0x10
    2c1e:	99 89       	ldd	r25, Y+17	; 0x11
    2c20:	81 30       	cpi	r24, 0x01	; 1
    2c22:	91 05       	cpc	r25, r1
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <SevenSegment_Display+0x744>
    2c26:	4a c0       	rjmp	.+148    	; 0x2cbc <SevenSegment_Display+0x7d8>
    2c28:	28 89       	ldd	r18, Y+16	; 0x10
    2c2a:	39 89       	ldd	r19, Y+17	; 0x11
    2c2c:	22 30       	cpi	r18, 0x02	; 2
    2c2e:	31 05       	cpc	r19, r1
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <SevenSegment_Display+0x758>
    2c32:	88 89       	ldd	r24, Y+16	; 0x10
    2c34:	99 89       	ldd	r25, Y+17	; 0x11
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	99 f1       	breq	.+102    	; 0x2ca0 <SevenSegment_Display+0x7bc>
    2c3a:	e1 c0       	rjmp	.+450    	; 0x2dfe <SevenSegment_Display+0x91a>
    2c3c:	28 89       	ldd	r18, Y+16	; 0x10
    2c3e:	39 89       	ldd	r19, Y+17	; 0x11
    2c40:	22 30       	cpi	r18, 0x02	; 2
    2c42:	31 05       	cpc	r19, r1
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <SevenSegment_Display+0x764>
    2c46:	4d c0       	rjmp	.+154    	; 0x2ce2 <SevenSegment_Display+0x7fe>
    2c48:	88 89       	ldd	r24, Y+16	; 0x10
    2c4a:	99 89       	ldd	r25, Y+17	; 0x11
    2c4c:	83 30       	cpi	r24, 0x03	; 3
    2c4e:	91 05       	cpc	r25, r1
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <SevenSegment_Display+0x770>
    2c52:	5a c0       	rjmp	.+180    	; 0x2d08 <SevenSegment_Display+0x824>
    2c54:	d4 c0       	rjmp	.+424    	; 0x2dfe <SevenSegment_Display+0x91a>
    2c56:	28 89       	ldd	r18, Y+16	; 0x10
    2c58:	39 89       	ldd	r19, Y+17	; 0x11
    2c5a:	27 30       	cpi	r18, 0x07	; 7
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <SevenSegment_Display+0x77e>
    2c60:	9f c0       	rjmp	.+318    	; 0x2da0 <SevenSegment_Display+0x8bc>
    2c62:	88 89       	ldd	r24, Y+16	; 0x10
    2c64:	99 89       	ldd	r25, Y+17	; 0x11
    2c66:	88 30       	cpi	r24, 0x08	; 8
    2c68:	91 05       	cpc	r25, r1
    2c6a:	6c f4       	brge	.+26     	; 0x2c86 <SevenSegment_Display+0x7a2>
    2c6c:	28 89       	ldd	r18, Y+16	; 0x10
    2c6e:	39 89       	ldd	r19, Y+17	; 0x11
    2c70:	25 30       	cpi	r18, 0x05	; 5
    2c72:	31 05       	cpc	r19, r1
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <SevenSegment_Display+0x794>
    2c76:	73 c0       	rjmp	.+230    	; 0x2d5e <SevenSegment_Display+0x87a>
    2c78:	88 89       	ldd	r24, Y+16	; 0x10
    2c7a:	99 89       	ldd	r25, Y+17	; 0x11
    2c7c:	86 30       	cpi	r24, 0x06	; 6
    2c7e:	91 05       	cpc	r25, r1
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <SevenSegment_Display+0x7a0>
    2c82:	80 c0       	rjmp	.+256    	; 0x2d84 <SevenSegment_Display+0x8a0>
    2c84:	bc c0       	rjmp	.+376    	; 0x2dfe <SevenSegment_Display+0x91a>
    2c86:	28 89       	ldd	r18, Y+16	; 0x10
    2c88:	39 89       	ldd	r19, Y+17	; 0x11
    2c8a:	28 30       	cpi	r18, 0x08	; 8
    2c8c:	31 05       	cpc	r19, r1
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <SevenSegment_Display+0x7ae>
    2c90:	9f c0       	rjmp	.+318    	; 0x2dd0 <SevenSegment_Display+0x8ec>
    2c92:	88 89       	ldd	r24, Y+16	; 0x10
    2c94:	99 89       	ldd	r25, Y+17	; 0x11
    2c96:	89 30       	cpi	r24, 0x09	; 9
    2c98:	91 05       	cpc	r25, r1
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <SevenSegment_Display+0x7ba>
    2c9c:	a2 c0       	rjmp	.+324    	; 0x2de2 <SevenSegment_Display+0x8fe>
    2c9e:	af c0       	rjmp	.+350    	; 0x2dfe <SevenSegment_Display+0x91a>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	6f ef       	ldi	r22, 0xFF	; 255
    2ca4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_HIGH);
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	66 e0       	ldi	r22, 0x06	; 6
    2cb4:	41 e0       	ldi	r20, 0x01	; 1
    2cb6:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2cba:	fb c4       	rjmp	.+2550   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	6f ef       	ldi	r22, 0xFF	; 255
    2cc0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	6f ef       	ldi	r22, 0xFF	; 255
    2cc8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	61 e0       	ldi	r22, 0x01	; 1
    2cd0:	40 e0       	ldi	r20, 0x00	; 0
    2cd2:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	62 e0       	ldi	r22, 0x02	; 2
    2cda:	40 e0       	ldi	r20, 0x00	; 0
    2cdc:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2ce0:	e8 c4       	rjmp	.+2512   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	6f ef       	ldi	r22, 0xFF	; 255
    2ce6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	62 e0       	ldi	r22, 0x02	; 2
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	65 e0       	ldi	r22, 0x05	; 5
    2d00:	41 e0       	ldi	r20, 0x01	; 1
    2d02:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2d06:	d5 c4       	rjmp	.+2474   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	6f ef       	ldi	r22, 0xFF	; 255
    2d0c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	64 e0       	ldi	r22, 0x04	; 4
    2d1c:	41 e0       	ldi	r20, 0x01	; 1
    2d1e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	65 e0       	ldi	r22, 0x05	; 5
    2d26:	41 e0       	ldi	r20, 0x01	; 1
    2d28:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2d2c:	c2 c4       	rjmp	.+2436   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	6f ef       	ldi	r22, 0xFF	; 255
    2d32:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_HIGH);
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	63 e0       	ldi	r22, 0x03	; 3
    2d4c:	41 e0       	ldi	r20, 0x01	; 1
    2d4e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	64 e0       	ldi	r22, 0x04	; 4
    2d56:	41 e0       	ldi	r20, 0x01	; 1
    2d58:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2d5c:	aa c4       	rjmp	.+2388   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	6f ef       	ldi	r22, 0xFF	; 255
    2d62:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	61 e0       	ldi	r22, 0x01	; 1
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	64 e0       	ldi	r22, 0x04	; 4
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2d82:	97 c4       	rjmp	.+2350   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	6f ef       	ldi	r22, 0xFF	; 255
    2d88:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	60 e0       	ldi	r22, 0x00	; 0
    2d90:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	61 e0       	ldi	r22, 0x01	; 1
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2d9e:	89 c4       	rjmp	.+2322   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	6f ef       	ldi	r22, 0xFF	; 255
    2da4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	6f ef       	ldi	r22, 0xFF	; 255
    2dac:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	60 e0       	ldi	r22, 0x00	; 0
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	61 e0       	ldi	r22, 0x01	; 1
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	62 e0       	ldi	r22, 0x02	; 2
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2dce:	71 c4       	rjmp	.+2274   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	6f ef       	ldi	r22, 0xFF	; 255
    2dd4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
    2de0:	68 c4       	rjmp	.+2256   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	6f ef       	ldi	r22, 0xFF	; 255
    2de6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	60 e0       	ldi	r22, 0x00	; 0
    2dee:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	64 e0       	ldi	r22, 0x04	; 4
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2dfc:	5a c4       	rjmp	.+2228   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    2dfe:	18 8e       	std	Y+24, r1	; 0x18
    2e00:	5a c4       	rjmp	.+2228   	; 0x36b6 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    2e02:	18 8e       	std	Y+24, r1	; 0x18
    2e04:	58 c4       	rjmp	.+2224   	; 0x36b6 <SevenSegment_Display+0x11d2>
			}
			break;
		case DIO_PORTC:
			switch(TYPE)
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	3f 87       	std	Y+15, r19	; 0x0f
    2e0e:	2e 87       	std	Y+14, r18	; 0x0e
    2e10:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e12:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	39 f0       	breq	.+14     	; 0x2e26 <SevenSegment_Display+0x942>
    2e18:	2e 85       	ldd	r18, Y+14	; 0x0e
    2e1a:	3f 85       	ldd	r19, Y+15	; 0x0f
    2e1c:	21 30       	cpi	r18, 0x01	; 1
    2e1e:	31 05       	cpc	r19, r1
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <SevenSegment_Display+0x940>
    2e22:	0d c1       	rjmp	.+538    	; 0x303e <SevenSegment_Display+0xb5a>
    2e24:	18 c2       	rjmp	.+1072   	; 0x3256 <SevenSegment_Display+0xd72>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2e26:	82 e0       	ldi	r24, 0x02	; 2
    2e28:	6f ef       	ldi	r22, 0xFF	; 255
    2e2a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_LOW);
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	67 e0       	ldi	r22, 0x07	; 7
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						switch(NUM)
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	3d 87       	std	Y+13, r19	; 0x0d
    2e40:	2c 87       	std	Y+12, r18	; 0x0c
    2e42:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e44:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e46:	84 30       	cpi	r24, 0x04	; 4
    2e48:	91 05       	cpc	r25, r1
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <SevenSegment_Display+0x96a>
    2e4c:	8e c0       	rjmp	.+284    	; 0x2f6a <SevenSegment_Display+0xa86>
    2e4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e50:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e52:	25 30       	cpi	r18, 0x05	; 5
    2e54:	31 05       	cpc	r19, r1
    2e56:	ec f4       	brge	.+58     	; 0x2e92 <SevenSegment_Display+0x9ae>
    2e58:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	91 05       	cpc	r25, r1
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <SevenSegment_Display+0x980>
    2e62:	4a c0       	rjmp	.+148    	; 0x2ef8 <SevenSegment_Display+0xa14>
    2e64:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e66:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e68:	22 30       	cpi	r18, 0x02	; 2
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	2c f4       	brge	.+10     	; 0x2e78 <SevenSegment_Display+0x994>
    2e6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e70:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	99 f1       	breq	.+102    	; 0x2edc <SevenSegment_Display+0x9f8>
    2e76:	e1 c0       	rjmp	.+450    	; 0x303a <SevenSegment_Display+0xb56>
    2e78:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e7a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e7c:	22 30       	cpi	r18, 0x02	; 2
    2e7e:	31 05       	cpc	r19, r1
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <SevenSegment_Display+0x9a0>
    2e82:	4d c0       	rjmp	.+154    	; 0x2f1e <SevenSegment_Display+0xa3a>
    2e84:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e86:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e88:	83 30       	cpi	r24, 0x03	; 3
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <SevenSegment_Display+0x9ac>
    2e8e:	5a c0       	rjmp	.+180    	; 0x2f44 <SevenSegment_Display+0xa60>
    2e90:	d4 c0       	rjmp	.+424    	; 0x303a <SevenSegment_Display+0xb56>
    2e92:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e94:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e96:	27 30       	cpi	r18, 0x07	; 7
    2e98:	31 05       	cpc	r19, r1
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <SevenSegment_Display+0x9ba>
    2e9c:	9f c0       	rjmp	.+318    	; 0x2fdc <SevenSegment_Display+0xaf8>
    2e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ea0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ea2:	88 30       	cpi	r24, 0x08	; 8
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	6c f4       	brge	.+26     	; 0x2ec2 <SevenSegment_Display+0x9de>
    2ea8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2eaa:	3d 85       	ldd	r19, Y+13	; 0x0d
    2eac:	25 30       	cpi	r18, 0x05	; 5
    2eae:	31 05       	cpc	r19, r1
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <SevenSegment_Display+0x9d0>
    2eb2:	73 c0       	rjmp	.+230    	; 0x2f9a <SevenSegment_Display+0xab6>
    2eb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2eb8:	86 30       	cpi	r24, 0x06	; 6
    2eba:	91 05       	cpc	r25, r1
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <SevenSegment_Display+0x9dc>
    2ebe:	80 c0       	rjmp	.+256    	; 0x2fc0 <SevenSegment_Display+0xadc>
    2ec0:	bc c0       	rjmp	.+376    	; 0x303a <SevenSegment_Display+0xb56>
    2ec2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ec4:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ec6:	28 30       	cpi	r18, 0x08	; 8
    2ec8:	31 05       	cpc	r19, r1
    2eca:	09 f4       	brne	.+2      	; 0x2ece <SevenSegment_Display+0x9ea>
    2ecc:	9f c0       	rjmp	.+318    	; 0x300c <SevenSegment_Display+0xb28>
    2ece:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ed0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ed2:	89 30       	cpi	r24, 0x09	; 9
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	09 f4       	brne	.+2      	; 0x2eda <SevenSegment_Display+0x9f6>
    2ed8:	a2 c0       	rjmp	.+324    	; 0x301e <SevenSegment_Display+0xb3a>
    2eda:	af c0       	rjmp	.+350    	; 0x303a <SevenSegment_Display+0xb56>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	6f ef       	ldi	r22, 0xFF	; 255
    2ee0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	6f ef       	ldi	r22, 0xFF	; 255
    2ee8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_LOW);
    2eec:	82 e0       	ldi	r24, 0x02	; 2
    2eee:	66 e0       	ldi	r22, 0x06	; 6
    2ef0:	40 e0       	ldi	r20, 0x00	; 0
    2ef2:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2ef6:	dd c3       	rjmp	.+1978   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	6f ef       	ldi	r22, 0xFF	; 255
    2efc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    2f00:	82 e0       	ldi	r24, 0x02	; 2
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	61 e0       	ldi	r22, 0x01	; 1
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    2f12:	82 e0       	ldi	r24, 0x02	; 2
    2f14:	62 e0       	ldi	r22, 0x02	; 2
    2f16:	41 e0       	ldi	r20, 0x01	; 1
    2f18:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2f1c:	ca c3       	rjmp	.+1940   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2f1e:	82 e0       	ldi	r24, 0x02	; 2
    2f20:	6f ef       	ldi	r22, 0xFF	; 255
    2f22:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2f26:	82 e0       	ldi	r24, 0x02	; 2
    2f28:	6f ef       	ldi	r22, 0xFF	; 255
    2f2a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	62 e0       	ldi	r22, 0x02	; 2
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    2f38:	82 e0       	ldi	r24, 0x02	; 2
    2f3a:	65 e0       	ldi	r22, 0x05	; 5
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2f42:	b7 c3       	rjmp	.+1902   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2f44:	82 e0       	ldi	r24, 0x02	; 2
    2f46:	6f ef       	ldi	r22, 0xFF	; 255
    2f48:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	6f ef       	ldi	r22, 0xFF	; 255
    2f50:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	64 e0       	ldi	r22, 0x04	; 4
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	65 e0       	ldi	r22, 0x05	; 5
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2f68:	a4 c3       	rjmp	.+1864   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2f6a:	82 e0       	ldi	r24, 0x02	; 2
    2f6c:	6f ef       	ldi	r22, 0xFF	; 255
    2f6e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2f72:	82 e0       	ldi	r24, 0x02	; 2
    2f74:	6f ef       	ldi	r22, 0xFF	; 255
    2f76:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_LOW);
    2f84:	82 e0       	ldi	r24, 0x02	; 2
    2f86:	63 e0       	ldi	r22, 0x03	; 3
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    2f8e:	82 e0       	ldi	r24, 0x02	; 2
    2f90:	64 e0       	ldi	r22, 0x04	; 4
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2f98:	8c c3       	rjmp	.+1816   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	6f ef       	ldi	r22, 0xFF	; 255
    2f9e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	6f ef       	ldi	r22, 0xFF	; 255
    2fa6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    2faa:	82 e0       	ldi	r24, 0x02	; 2
    2fac:	61 e0       	ldi	r22, 0x01	; 1
    2fae:	40 e0       	ldi	r20, 0x00	; 0
    2fb0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    2fb4:	82 e0       	ldi	r24, 0x02	; 2
    2fb6:	64 e0       	ldi	r22, 0x04	; 4
    2fb8:	40 e0       	ldi	r20, 0x00	; 0
    2fba:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2fbe:	79 c3       	rjmp	.+1778   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2fc0:	82 e0       	ldi	r24, 0x02	; 2
    2fc2:	6f ef       	ldi	r22, 0xFF	; 255
    2fc4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    2fc8:	82 e0       	ldi	r24, 0x02	; 2
    2fca:	6f ef       	ldi	r22, 0xFF	; 255
    2fcc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	61 e0       	ldi	r22, 0x01	; 1
    2fd4:	40 e0       	ldi	r20, 0x00	; 0
    2fd6:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    2fda:	6b c3       	rjmp	.+1750   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	6f ef       	ldi	r22, 0xFF	; 255
    2fe0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    2fec:	82 e0       	ldi	r24, 0x02	; 2
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	61 e0       	ldi	r22, 0x01	; 1
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	62 e0       	ldi	r22, 0x02	; 2
    3004:	41 e0       	ldi	r20, 0x01	; 1
    3006:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    300a:	53 c3       	rjmp	.+1702   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    300c:	82 e0       	ldi	r24, 0x02	; 2
    300e:	6f ef       	ldi	r22, 0xFF	; 255
    3010:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3014:	82 e0       	ldi	r24, 0x02	; 2
    3016:	6f ef       	ldi	r22, 0xFF	; 255
    3018:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
    301c:	4a c3       	rjmp	.+1684   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    301e:	82 e0       	ldi	r24, 0x02	; 2
    3020:	6f ef       	ldi	r22, 0xFF	; 255
    3022:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3026:	82 e0       	ldi	r24, 0x02	; 2
    3028:	6f ef       	ldi	r22, 0xFF	; 255
    302a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    302e:	82 e0       	ldi	r24, 0x02	; 2
    3030:	64 e0       	ldi	r22, 0x04	; 4
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3038:	3c c3       	rjmp	.+1656   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    303a:	18 8e       	std	Y+24, r1	; 0x18
    303c:	3c c3       	rjmp	.+1656   	; 0x36b6 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	6f ef       	ldi	r22, 0xFF	; 255
    3042:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_HIGH);
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	67 e0       	ldi	r22, 0x07	; 7
    304a:	41 e0       	ldi	r20, 0x01	; 1
    304c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
					switch(NUM)
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	3b 87       	std	Y+11, r19	; 0x0b
    3058:	2a 87       	std	Y+10, r18	; 0x0a
    305a:	8a 85       	ldd	r24, Y+10	; 0x0a
    305c:	9b 85       	ldd	r25, Y+11	; 0x0b
    305e:	84 30       	cpi	r24, 0x04	; 4
    3060:	91 05       	cpc	r25, r1
    3062:	09 f4       	brne	.+2      	; 0x3066 <SevenSegment_Display+0xb82>
    3064:	8e c0       	rjmp	.+284    	; 0x3182 <SevenSegment_Display+0xc9e>
    3066:	2a 85       	ldd	r18, Y+10	; 0x0a
    3068:	3b 85       	ldd	r19, Y+11	; 0x0b
    306a:	25 30       	cpi	r18, 0x05	; 5
    306c:	31 05       	cpc	r19, r1
    306e:	ec f4       	brge	.+58     	; 0x30aa <SevenSegment_Display+0xbc6>
    3070:	8a 85       	ldd	r24, Y+10	; 0x0a
    3072:	9b 85       	ldd	r25, Y+11	; 0x0b
    3074:	81 30       	cpi	r24, 0x01	; 1
    3076:	91 05       	cpc	r25, r1
    3078:	09 f4       	brne	.+2      	; 0x307c <SevenSegment_Display+0xb98>
    307a:	4a c0       	rjmp	.+148    	; 0x3110 <SevenSegment_Display+0xc2c>
    307c:	2a 85       	ldd	r18, Y+10	; 0x0a
    307e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3080:	22 30       	cpi	r18, 0x02	; 2
    3082:	31 05       	cpc	r19, r1
    3084:	2c f4       	brge	.+10     	; 0x3090 <SevenSegment_Display+0xbac>
    3086:	8a 85       	ldd	r24, Y+10	; 0x0a
    3088:	9b 85       	ldd	r25, Y+11	; 0x0b
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	99 f1       	breq	.+102    	; 0x30f4 <SevenSegment_Display+0xc10>
    308e:	e1 c0       	rjmp	.+450    	; 0x3252 <SevenSegment_Display+0xd6e>
    3090:	2a 85       	ldd	r18, Y+10	; 0x0a
    3092:	3b 85       	ldd	r19, Y+11	; 0x0b
    3094:	22 30       	cpi	r18, 0x02	; 2
    3096:	31 05       	cpc	r19, r1
    3098:	09 f4       	brne	.+2      	; 0x309c <SevenSegment_Display+0xbb8>
    309a:	4d c0       	rjmp	.+154    	; 0x3136 <SevenSegment_Display+0xc52>
    309c:	8a 85       	ldd	r24, Y+10	; 0x0a
    309e:	9b 85       	ldd	r25, Y+11	; 0x0b
    30a0:	83 30       	cpi	r24, 0x03	; 3
    30a2:	91 05       	cpc	r25, r1
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <SevenSegment_Display+0xbc4>
    30a6:	5a c0       	rjmp	.+180    	; 0x315c <SevenSegment_Display+0xc78>
    30a8:	d4 c0       	rjmp	.+424    	; 0x3252 <SevenSegment_Display+0xd6e>
    30aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    30ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    30ae:	27 30       	cpi	r18, 0x07	; 7
    30b0:	31 05       	cpc	r19, r1
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <SevenSegment_Display+0xbd2>
    30b4:	9f c0       	rjmp	.+318    	; 0x31f4 <SevenSegment_Display+0xd10>
    30b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ba:	88 30       	cpi	r24, 0x08	; 8
    30bc:	91 05       	cpc	r25, r1
    30be:	6c f4       	brge	.+26     	; 0x30da <SevenSegment_Display+0xbf6>
    30c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    30c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    30c4:	25 30       	cpi	r18, 0x05	; 5
    30c6:	31 05       	cpc	r19, r1
    30c8:	09 f4       	brne	.+2      	; 0x30cc <SevenSegment_Display+0xbe8>
    30ca:	73 c0       	rjmp	.+230    	; 0x31b2 <SevenSegment_Display+0xcce>
    30cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    30d0:	86 30       	cpi	r24, 0x06	; 6
    30d2:	91 05       	cpc	r25, r1
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <SevenSegment_Display+0xbf4>
    30d6:	80 c0       	rjmp	.+256    	; 0x31d8 <SevenSegment_Display+0xcf4>
    30d8:	bc c0       	rjmp	.+376    	; 0x3252 <SevenSegment_Display+0xd6e>
    30da:	2a 85       	ldd	r18, Y+10	; 0x0a
    30dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    30de:	28 30       	cpi	r18, 0x08	; 8
    30e0:	31 05       	cpc	r19, r1
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <SevenSegment_Display+0xc02>
    30e4:	9f c0       	rjmp	.+318    	; 0x3224 <SevenSegment_Display+0xd40>
    30e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ea:	89 30       	cpi	r24, 0x09	; 9
    30ec:	91 05       	cpc	r25, r1
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <SevenSegment_Display+0xc0e>
    30f0:	a2 c0       	rjmp	.+324    	; 0x3236 <SevenSegment_Display+0xd52>
    30f2:	af c0       	rjmp	.+350    	; 0x3252 <SevenSegment_Display+0xd6e>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    30f4:	82 e0       	ldi	r24, 0x02	; 2
    30f6:	6f ef       	ldi	r22, 0xFF	; 255
    30f8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    30fc:	82 e0       	ldi	r24, 0x02	; 2
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_HIGH);
    3104:	82 e0       	ldi	r24, 0x02	; 2
    3106:	66 e0       	ldi	r22, 0x06	; 6
    3108:	41 e0       	ldi	r20, 0x01	; 1
    310a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    310e:	d1 c2       	rjmp	.+1442   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	6f ef       	ldi	r22, 0xFF	; 255
    3114:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3118:	82 e0       	ldi	r24, 0x02	; 2
    311a:	6f ef       	ldi	r22, 0xFF	; 255
    311c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    3120:	82 e0       	ldi	r24, 0x02	; 2
    3122:	61 e0       	ldi	r22, 0x01	; 1
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    312a:	82 e0       	ldi	r24, 0x02	; 2
    312c:	62 e0       	ldi	r22, 0x02	; 2
    312e:	40 e0       	ldi	r20, 0x00	; 0
    3130:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3134:	be c2       	rjmp	.+1404   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3136:	82 e0       	ldi	r24, 0x02	; 2
    3138:	6f ef       	ldi	r22, 0xFF	; 255
    313a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3146:	82 e0       	ldi	r24, 0x02	; 2
    3148:	62 e0       	ldi	r22, 0x02	; 2
    314a:	41 e0       	ldi	r20, 0x01	; 1
    314c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	65 e0       	ldi	r22, 0x05	; 5
    3154:	41 e0       	ldi	r20, 0x01	; 1
    3156:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    315a:	ab c2       	rjmp	.+1366   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    315c:	82 e0       	ldi	r24, 0x02	; 2
    315e:	6f ef       	ldi	r22, 0xFF	; 255
    3160:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    316c:	82 e0       	ldi	r24, 0x02	; 2
    316e:	64 e0       	ldi	r22, 0x04	; 4
    3170:	41 e0       	ldi	r20, 0x01	; 1
    3172:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    3176:	82 e0       	ldi	r24, 0x02	; 2
    3178:	65 e0       	ldi	r22, 0x05	; 5
    317a:	41 e0       	ldi	r20, 0x01	; 1
    317c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3180:	98 c2       	rjmp	.+1328   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3182:	82 e0       	ldi	r24, 0x02	; 2
    3184:	6f ef       	ldi	r22, 0xFF	; 255
    3186:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    318a:	82 e0       	ldi	r24, 0x02	; 2
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    3192:	82 e0       	ldi	r24, 0x02	; 2
    3194:	60 e0       	ldi	r22, 0x00	; 0
    3196:	41 e0       	ldi	r20, 0x01	; 1
    3198:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_HIGH);
    319c:	82 e0       	ldi	r24, 0x02	; 2
    319e:	63 e0       	ldi	r22, 0x03	; 3
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    31a6:	82 e0       	ldi	r24, 0x02	; 2
    31a8:	64 e0       	ldi	r22, 0x04	; 4
    31aa:	41 e0       	ldi	r20, 0x01	; 1
    31ac:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    31b0:	80 c2       	rjmp	.+1280   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	6f ef       	ldi	r22, 0xFF	; 255
    31b6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    31ba:	82 e0       	ldi	r24, 0x02	; 2
    31bc:	60 e0       	ldi	r22, 0x00	; 0
    31be:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	41 e0       	ldi	r20, 0x01	; 1
    31c8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	64 e0       	ldi	r22, 0x04	; 4
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    31d6:	6d c2       	rjmp	.+1242   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	6f ef       	ldi	r22, 0xFF	; 255
    31dc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    31e8:	82 e0       	ldi	r24, 0x02	; 2
    31ea:	61 e0       	ldi	r22, 0x01	; 1
    31ec:	41 e0       	ldi	r20, 0x01	; 1
    31ee:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    31f2:	5f c2       	rjmp	.+1214   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31f4:	82 e0       	ldi	r24, 0x02	; 2
    31f6:	6f ef       	ldi	r22, 0xFF	; 255
    31f8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    31fc:	82 e0       	ldi	r24, 0x02	; 2
    31fe:	6f ef       	ldi	r22, 0xFF	; 255
    3200:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    3204:	82 e0       	ldi	r24, 0x02	; 2
    3206:	60 e0       	ldi	r22, 0x00	; 0
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    320e:	82 e0       	ldi	r24, 0x02	; 2
    3210:	61 e0       	ldi	r22, 0x01	; 1
    3212:	40 e0       	ldi	r20, 0x00	; 0
    3214:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3218:	82 e0       	ldi	r24, 0x02	; 2
    321a:	62 e0       	ldi	r22, 0x02	; 2
    321c:	40 e0       	ldi	r20, 0x00	; 0
    321e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3222:	47 c2       	rjmp	.+1166   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3224:	82 e0       	ldi	r24, 0x02	; 2
    3226:	6f ef       	ldi	r22, 0xFF	; 255
    3228:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    322c:	82 e0       	ldi	r24, 0x02	; 2
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
    3234:	3e c2       	rjmp	.+1148   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3236:	82 e0       	ldi	r24, 0x02	; 2
    3238:	6f ef       	ldi	r22, 0xFF	; 255
    323a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    323e:	82 e0       	ldi	r24, 0x02	; 2
    3240:	60 e0       	ldi	r22, 0x00	; 0
    3242:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3246:	82 e0       	ldi	r24, 0x02	; 2
    3248:	64 e0       	ldi	r22, 0x04	; 4
    324a:	41 e0       	ldi	r20, 0x01	; 1
    324c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3250:	30 c2       	rjmp	.+1120   	; 0x36b2 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3252:	18 8e       	std	Y+24, r1	; 0x18
    3254:	30 c2       	rjmp	.+1120   	; 0x36b6 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    3256:	18 8e       	std	Y+24, r1	; 0x18
    3258:	2e c2       	rjmp	.+1116   	; 0x36b6 <SevenSegment_Display+0x11d2>
			}
			break;
			case DIO_PORTD:
				switch(TYPE)
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	39 87       	std	Y+9, r19	; 0x09
    3262:	28 87       	std	Y+8, r18	; 0x08
    3264:	88 85       	ldd	r24, Y+8	; 0x08
    3266:	99 85       	ldd	r25, Y+9	; 0x09
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	39 f0       	breq	.+14     	; 0x327a <SevenSegment_Display+0xd96>
    326c:	28 85       	ldd	r18, Y+8	; 0x08
    326e:	39 85       	ldd	r19, Y+9	; 0x09
    3270:	21 30       	cpi	r18, 0x01	; 1
    3272:	31 05       	cpc	r19, r1
    3274:	09 f4       	brne	.+2      	; 0x3278 <SevenSegment_Display+0xd94>
    3276:	0d c1       	rjmp	.+538    	; 0x3492 <SevenSegment_Display+0xfae>
    3278:	18 c2       	rjmp	.+1072   	; 0x36aa <SevenSegment_Display+0x11c6>
					{
						case CommonCathod:
							DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    327a:	83 e0       	ldi	r24, 0x03	; 3
    327c:	6f ef       	ldi	r22, 0xFF	; 255
    327e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
							DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_LOW);
    3282:	83 e0       	ldi	r24, 0x03	; 3
    3284:	67 e0       	ldi	r22, 0x07	; 7
    3286:	40 e0       	ldi	r20, 0x00	; 0
    3288:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
							switch(NUM)
    328c:	8b 81       	ldd	r24, Y+3	; 0x03
    328e:	28 2f       	mov	r18, r24
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	3f 83       	std	Y+7, r19	; 0x07
    3294:	2e 83       	std	Y+6, r18	; 0x06
    3296:	8e 81       	ldd	r24, Y+6	; 0x06
    3298:	9f 81       	ldd	r25, Y+7	; 0x07
    329a:	84 30       	cpi	r24, 0x04	; 4
    329c:	91 05       	cpc	r25, r1
    329e:	09 f4       	brne	.+2      	; 0x32a2 <SevenSegment_Display+0xdbe>
    32a0:	8e c0       	rjmp	.+284    	; 0x33be <SevenSegment_Display+0xeda>
    32a2:	2e 81       	ldd	r18, Y+6	; 0x06
    32a4:	3f 81       	ldd	r19, Y+7	; 0x07
    32a6:	25 30       	cpi	r18, 0x05	; 5
    32a8:	31 05       	cpc	r19, r1
    32aa:	ec f4       	brge	.+58     	; 0x32e6 <SevenSegment_Display+0xe02>
    32ac:	8e 81       	ldd	r24, Y+6	; 0x06
    32ae:	9f 81       	ldd	r25, Y+7	; 0x07
    32b0:	81 30       	cpi	r24, 0x01	; 1
    32b2:	91 05       	cpc	r25, r1
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <SevenSegment_Display+0xdd4>
    32b6:	4a c0       	rjmp	.+148    	; 0x334c <SevenSegment_Display+0xe68>
    32b8:	2e 81       	ldd	r18, Y+6	; 0x06
    32ba:	3f 81       	ldd	r19, Y+7	; 0x07
    32bc:	22 30       	cpi	r18, 0x02	; 2
    32be:	31 05       	cpc	r19, r1
    32c0:	2c f4       	brge	.+10     	; 0x32cc <SevenSegment_Display+0xde8>
    32c2:	8e 81       	ldd	r24, Y+6	; 0x06
    32c4:	9f 81       	ldd	r25, Y+7	; 0x07
    32c6:	00 97       	sbiw	r24, 0x00	; 0
    32c8:	99 f1       	breq	.+102    	; 0x3330 <SevenSegment_Display+0xe4c>
    32ca:	e1 c0       	rjmp	.+450    	; 0x348e <SevenSegment_Display+0xfaa>
    32cc:	2e 81       	ldd	r18, Y+6	; 0x06
    32ce:	3f 81       	ldd	r19, Y+7	; 0x07
    32d0:	22 30       	cpi	r18, 0x02	; 2
    32d2:	31 05       	cpc	r19, r1
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <SevenSegment_Display+0xdf4>
    32d6:	4d c0       	rjmp	.+154    	; 0x3372 <SevenSegment_Display+0xe8e>
    32d8:	8e 81       	ldd	r24, Y+6	; 0x06
    32da:	9f 81       	ldd	r25, Y+7	; 0x07
    32dc:	83 30       	cpi	r24, 0x03	; 3
    32de:	91 05       	cpc	r25, r1
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <SevenSegment_Display+0xe00>
    32e2:	5a c0       	rjmp	.+180    	; 0x3398 <SevenSegment_Display+0xeb4>
    32e4:	d4 c0       	rjmp	.+424    	; 0x348e <SevenSegment_Display+0xfaa>
    32e6:	2e 81       	ldd	r18, Y+6	; 0x06
    32e8:	3f 81       	ldd	r19, Y+7	; 0x07
    32ea:	27 30       	cpi	r18, 0x07	; 7
    32ec:	31 05       	cpc	r19, r1
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <SevenSegment_Display+0xe0e>
    32f0:	9f c0       	rjmp	.+318    	; 0x3430 <SevenSegment_Display+0xf4c>
    32f2:	8e 81       	ldd	r24, Y+6	; 0x06
    32f4:	9f 81       	ldd	r25, Y+7	; 0x07
    32f6:	88 30       	cpi	r24, 0x08	; 8
    32f8:	91 05       	cpc	r25, r1
    32fa:	6c f4       	brge	.+26     	; 0x3316 <SevenSegment_Display+0xe32>
    32fc:	2e 81       	ldd	r18, Y+6	; 0x06
    32fe:	3f 81       	ldd	r19, Y+7	; 0x07
    3300:	25 30       	cpi	r18, 0x05	; 5
    3302:	31 05       	cpc	r19, r1
    3304:	09 f4       	brne	.+2      	; 0x3308 <SevenSegment_Display+0xe24>
    3306:	73 c0       	rjmp	.+230    	; 0x33ee <SevenSegment_Display+0xf0a>
    3308:	8e 81       	ldd	r24, Y+6	; 0x06
    330a:	9f 81       	ldd	r25, Y+7	; 0x07
    330c:	86 30       	cpi	r24, 0x06	; 6
    330e:	91 05       	cpc	r25, r1
    3310:	09 f4       	brne	.+2      	; 0x3314 <SevenSegment_Display+0xe30>
    3312:	80 c0       	rjmp	.+256    	; 0x3414 <SevenSegment_Display+0xf30>
    3314:	bc c0       	rjmp	.+376    	; 0x348e <SevenSegment_Display+0xfaa>
    3316:	2e 81       	ldd	r18, Y+6	; 0x06
    3318:	3f 81       	ldd	r19, Y+7	; 0x07
    331a:	28 30       	cpi	r18, 0x08	; 8
    331c:	31 05       	cpc	r19, r1
    331e:	09 f4       	brne	.+2      	; 0x3322 <SevenSegment_Display+0xe3e>
    3320:	9f c0       	rjmp	.+318    	; 0x3460 <SevenSegment_Display+0xf7c>
    3322:	8e 81       	ldd	r24, Y+6	; 0x06
    3324:	9f 81       	ldd	r25, Y+7	; 0x07
    3326:	89 30       	cpi	r24, 0x09	; 9
    3328:	91 05       	cpc	r25, r1
    332a:	09 f4       	brne	.+2      	; 0x332e <SevenSegment_Display+0xe4a>
    332c:	a2 c0       	rjmp	.+324    	; 0x3472 <SevenSegment_Display+0xf8e>
    332e:	af c0       	rjmp	.+350    	; 0x348e <SevenSegment_Display+0xfaa>
								{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3330:	83 e0       	ldi	r24, 0x03	; 3
    3332:	6f ef       	ldi	r22, 0xFF	; 255
    3334:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3338:	83 e0       	ldi	r24, 0x03	; 3
    333a:	6f ef       	ldi	r22, 0xFF	; 255
    333c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_LOW);
    3340:	83 e0       	ldi	r24, 0x03	; 3
    3342:	66 e0       	ldi	r22, 0x06	; 6
    3344:	40 e0       	ldi	r20, 0x00	; 0
    3346:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    334a:	b3 c1       	rjmp	.+870    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    334c:	83 e0       	ldi	r24, 0x03	; 3
    334e:	6f ef       	ldi	r22, 0xFF	; 255
    3350:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3354:	83 e0       	ldi	r24, 0x03	; 3
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    335c:	83 e0       	ldi	r24, 0x03	; 3
    335e:	61 e0       	ldi	r22, 0x01	; 1
    3360:	41 e0       	ldi	r20, 0x01	; 1
    3362:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    3366:	83 e0       	ldi	r24, 0x03	; 3
    3368:	62 e0       	ldi	r22, 0x02	; 2
    336a:	41 e0       	ldi	r20, 0x01	; 1
    336c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3370:	a0 c1       	rjmp	.+832    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3372:	83 e0       	ldi	r24, 0x03	; 3
    3374:	6f ef       	ldi	r22, 0xFF	; 255
    3376:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    337a:	83 e0       	ldi	r24, 0x03	; 3
    337c:	6f ef       	ldi	r22, 0xFF	; 255
    337e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    3382:	83 e0       	ldi	r24, 0x03	; 3
    3384:	62 e0       	ldi	r22, 0x02	; 2
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    338c:	83 e0       	ldi	r24, 0x03	; 3
    338e:	65 e0       	ldi	r22, 0x05	; 5
    3390:	40 e0       	ldi	r20, 0x00	; 0
    3392:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3396:	8d c1       	rjmp	.+794    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3398:	83 e0       	ldi	r24, 0x03	; 3
    339a:	6f ef       	ldi	r22, 0xFF	; 255
    339c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    33a0:	83 e0       	ldi	r24, 0x03	; 3
    33a2:	6f ef       	ldi	r22, 0xFF	; 255
    33a4:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    33a8:	83 e0       	ldi	r24, 0x03	; 3
    33aa:	64 e0       	ldi	r22, 0x04	; 4
    33ac:	40 e0       	ldi	r20, 0x00	; 0
    33ae:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	65 e0       	ldi	r22, 0x05	; 5
    33b6:	40 e0       	ldi	r20, 0x00	; 0
    33b8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    33bc:	7a c1       	rjmp	.+756    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    33be:	83 e0       	ldi	r24, 0x03	; 3
    33c0:	6f ef       	ldi	r22, 0xFF	; 255
    33c2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    33c6:	83 e0       	ldi	r24, 0x03	; 3
    33c8:	6f ef       	ldi	r22, 0xFF	; 255
    33ca:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    33ce:	83 e0       	ldi	r24, 0x03	; 3
    33d0:	60 e0       	ldi	r22, 0x00	; 0
    33d2:	40 e0       	ldi	r20, 0x00	; 0
    33d4:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_LOW);
    33d8:	83 e0       	ldi	r24, 0x03	; 3
    33da:	63 e0       	ldi	r22, 0x03	; 3
    33dc:	40 e0       	ldi	r20, 0x00	; 0
    33de:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	64 e0       	ldi	r22, 0x04	; 4
    33e6:	40 e0       	ldi	r20, 0x00	; 0
    33e8:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    33ec:	62 c1       	rjmp	.+708    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    33ee:	83 e0       	ldi	r24, 0x03	; 3
    33f0:	6f ef       	ldi	r22, 0xFF	; 255
    33f2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    33f6:	83 e0       	ldi	r24, 0x03	; 3
    33f8:	6f ef       	ldi	r22, 0xFF	; 255
    33fa:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    33fe:	83 e0       	ldi	r24, 0x03	; 3
    3400:	61 e0       	ldi	r22, 0x01	; 1
    3402:	40 e0       	ldi	r20, 0x00	; 0
    3404:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    3408:	83 e0       	ldi	r24, 0x03	; 3
    340a:	64 e0       	ldi	r22, 0x04	; 4
    340c:	40 e0       	ldi	r20, 0x00	; 0
    340e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3412:	4f c1       	rjmp	.+670    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3414:	83 e0       	ldi	r24, 0x03	; 3
    3416:	6f ef       	ldi	r22, 0xFF	; 255
    3418:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    341c:	83 e0       	ldi	r24, 0x03	; 3
    341e:	6f ef       	ldi	r22, 0xFF	; 255
    3420:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    3424:	83 e0       	ldi	r24, 0x03	; 3
    3426:	61 e0       	ldi	r22, 0x01	; 1
    3428:	40 e0       	ldi	r20, 0x00	; 0
    342a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    342e:	41 c1       	rjmp	.+642    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3430:	83 e0       	ldi	r24, 0x03	; 3
    3432:	6f ef       	ldi	r22, 0xFF	; 255
    3434:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3438:	83 e0       	ldi	r24, 0x03	; 3
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    3440:	83 e0       	ldi	r24, 0x03	; 3
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	41 e0       	ldi	r20, 0x01	; 1
    3446:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    344a:	83 e0       	ldi	r24, 0x03	; 3
    344c:	61 e0       	ldi	r22, 0x01	; 1
    344e:	41 e0       	ldi	r20, 0x01	; 1
    3450:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    3454:	83 e0       	ldi	r24, 0x03	; 3
    3456:	62 e0       	ldi	r22, 0x02	; 2
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    345e:	29 c1       	rjmp	.+594    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3460:	83 e0       	ldi	r24, 0x03	; 3
    3462:	6f ef       	ldi	r22, 0xFF	; 255
    3464:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3468:	83 e0       	ldi	r24, 0x03	; 3
    346a:	6f ef       	ldi	r22, 0xFF	; 255
    346c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
    3470:	20 c1       	rjmp	.+576    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3472:	83 e0       	ldi	r24, 0x03	; 3
    3474:	6f ef       	ldi	r22, 0xFF	; 255
    3476:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    347a:	83 e0       	ldi	r24, 0x03	; 3
    347c:	6f ef       	ldi	r22, 0xFF	; 255
    347e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    3482:	83 e0       	ldi	r24, 0x03	; 3
    3484:	64 e0       	ldi	r22, 0x04	; 4
    3486:	40 e0       	ldi	r20, 0x00	; 0
    3488:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    348c:	12 c1       	rjmp	.+548    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    348e:	18 8e       	std	Y+24, r1	; 0x18
    3490:	12 c1       	rjmp	.+548    	; 0x36b6 <SevenSegment_Display+0x11d2>
							}
							break;
					case CommonAnode:
						DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3492:	83 e0       	ldi	r24, 0x03	; 3
    3494:	6f ef       	ldi	r22, 0xFF	; 255
    3496:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_HIGH);
    349a:	83 e0       	ldi	r24, 0x03	; 3
    349c:	67 e0       	ldi	r22, 0x07	; 7
    349e:	41 e0       	ldi	r20, 0x01	; 1
    34a0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
						switch(NUM)
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	28 2f       	mov	r18, r24
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	3d 83       	std	Y+5, r19	; 0x05
    34ac:	2c 83       	std	Y+4, r18	; 0x04
    34ae:	8c 81       	ldd	r24, Y+4	; 0x04
    34b0:	9d 81       	ldd	r25, Y+5	; 0x05
    34b2:	84 30       	cpi	r24, 0x04	; 4
    34b4:	91 05       	cpc	r25, r1
    34b6:	09 f4       	brne	.+2      	; 0x34ba <SevenSegment_Display+0xfd6>
    34b8:	8e c0       	rjmp	.+284    	; 0x35d6 <SevenSegment_Display+0x10f2>
    34ba:	2c 81       	ldd	r18, Y+4	; 0x04
    34bc:	3d 81       	ldd	r19, Y+5	; 0x05
    34be:	25 30       	cpi	r18, 0x05	; 5
    34c0:	31 05       	cpc	r19, r1
    34c2:	ec f4       	brge	.+58     	; 0x34fe <SevenSegment_Display+0x101a>
    34c4:	8c 81       	ldd	r24, Y+4	; 0x04
    34c6:	9d 81       	ldd	r25, Y+5	; 0x05
    34c8:	81 30       	cpi	r24, 0x01	; 1
    34ca:	91 05       	cpc	r25, r1
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <SevenSegment_Display+0xfec>
    34ce:	4a c0       	rjmp	.+148    	; 0x3564 <SevenSegment_Display+0x1080>
    34d0:	2c 81       	ldd	r18, Y+4	; 0x04
    34d2:	3d 81       	ldd	r19, Y+5	; 0x05
    34d4:	22 30       	cpi	r18, 0x02	; 2
    34d6:	31 05       	cpc	r19, r1
    34d8:	2c f4       	brge	.+10     	; 0x34e4 <SevenSegment_Display+0x1000>
    34da:	8c 81       	ldd	r24, Y+4	; 0x04
    34dc:	9d 81       	ldd	r25, Y+5	; 0x05
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	99 f1       	breq	.+102    	; 0x3548 <SevenSegment_Display+0x1064>
    34e2:	e1 c0       	rjmp	.+450    	; 0x36a6 <SevenSegment_Display+0x11c2>
    34e4:	2c 81       	ldd	r18, Y+4	; 0x04
    34e6:	3d 81       	ldd	r19, Y+5	; 0x05
    34e8:	22 30       	cpi	r18, 0x02	; 2
    34ea:	31 05       	cpc	r19, r1
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <SevenSegment_Display+0x100c>
    34ee:	4d c0       	rjmp	.+154    	; 0x358a <SevenSegment_Display+0x10a6>
    34f0:	8c 81       	ldd	r24, Y+4	; 0x04
    34f2:	9d 81       	ldd	r25, Y+5	; 0x05
    34f4:	83 30       	cpi	r24, 0x03	; 3
    34f6:	91 05       	cpc	r25, r1
    34f8:	09 f4       	brne	.+2      	; 0x34fc <SevenSegment_Display+0x1018>
    34fa:	5a c0       	rjmp	.+180    	; 0x35b0 <SevenSegment_Display+0x10cc>
    34fc:	d4 c0       	rjmp	.+424    	; 0x36a6 <SevenSegment_Display+0x11c2>
    34fe:	2c 81       	ldd	r18, Y+4	; 0x04
    3500:	3d 81       	ldd	r19, Y+5	; 0x05
    3502:	27 30       	cpi	r18, 0x07	; 7
    3504:	31 05       	cpc	r19, r1
    3506:	09 f4       	brne	.+2      	; 0x350a <SevenSegment_Display+0x1026>
    3508:	9f c0       	rjmp	.+318    	; 0x3648 <SevenSegment_Display+0x1164>
    350a:	8c 81       	ldd	r24, Y+4	; 0x04
    350c:	9d 81       	ldd	r25, Y+5	; 0x05
    350e:	88 30       	cpi	r24, 0x08	; 8
    3510:	91 05       	cpc	r25, r1
    3512:	6c f4       	brge	.+26     	; 0x352e <SevenSegment_Display+0x104a>
    3514:	2c 81       	ldd	r18, Y+4	; 0x04
    3516:	3d 81       	ldd	r19, Y+5	; 0x05
    3518:	25 30       	cpi	r18, 0x05	; 5
    351a:	31 05       	cpc	r19, r1
    351c:	09 f4       	brne	.+2      	; 0x3520 <SevenSegment_Display+0x103c>
    351e:	73 c0       	rjmp	.+230    	; 0x3606 <SevenSegment_Display+0x1122>
    3520:	8c 81       	ldd	r24, Y+4	; 0x04
    3522:	9d 81       	ldd	r25, Y+5	; 0x05
    3524:	86 30       	cpi	r24, 0x06	; 6
    3526:	91 05       	cpc	r25, r1
    3528:	09 f4       	brne	.+2      	; 0x352c <SevenSegment_Display+0x1048>
    352a:	80 c0       	rjmp	.+256    	; 0x362c <SevenSegment_Display+0x1148>
    352c:	bc c0       	rjmp	.+376    	; 0x36a6 <SevenSegment_Display+0x11c2>
    352e:	2c 81       	ldd	r18, Y+4	; 0x04
    3530:	3d 81       	ldd	r19, Y+5	; 0x05
    3532:	28 30       	cpi	r18, 0x08	; 8
    3534:	31 05       	cpc	r19, r1
    3536:	09 f4       	brne	.+2      	; 0x353a <SevenSegment_Display+0x1056>
    3538:	9f c0       	rjmp	.+318    	; 0x3678 <SevenSegment_Display+0x1194>
    353a:	8c 81       	ldd	r24, Y+4	; 0x04
    353c:	9d 81       	ldd	r25, Y+5	; 0x05
    353e:	89 30       	cpi	r24, 0x09	; 9
    3540:	91 05       	cpc	r25, r1
    3542:	09 f4       	brne	.+2      	; 0x3546 <SevenSegment_Display+0x1062>
    3544:	a2 c0       	rjmp	.+324    	; 0x368a <SevenSegment_Display+0x11a6>
    3546:	af c0       	rjmp	.+350    	; 0x36a6 <SevenSegment_Display+0x11c2>
							{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3548:	83 e0       	ldi	r24, 0x03	; 3
    354a:	6f ef       	ldi	r22, 0xFF	; 255
    354c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3550:	83 e0       	ldi	r24, 0x03	; 3
    3552:	60 e0       	ldi	r22, 0x00	; 0
    3554:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_HIGH);
    3558:	83 e0       	ldi	r24, 0x03	; 3
    355a:	66 e0       	ldi	r22, 0x06	; 6
    355c:	41 e0       	ldi	r20, 0x01	; 1
    355e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3562:	a7 c0       	rjmp	.+334    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3564:	83 e0       	ldi	r24, 0x03	; 3
    3566:	6f ef       	ldi	r22, 0xFF	; 255
    3568:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    356c:	83 e0       	ldi	r24, 0x03	; 3
    356e:	6f ef       	ldi	r22, 0xFF	; 255
    3570:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    3574:	83 e0       	ldi	r24, 0x03	; 3
    3576:	61 e0       	ldi	r22, 0x01	; 1
    3578:	40 e0       	ldi	r20, 0x00	; 0
    357a:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    357e:	83 e0       	ldi	r24, 0x03	; 3
    3580:	62 e0       	ldi	r22, 0x02	; 2
    3582:	40 e0       	ldi	r20, 0x00	; 0
    3584:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3588:	94 c0       	rjmp	.+296    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    358a:	83 e0       	ldi	r24, 0x03	; 3
    358c:	6f ef       	ldi	r22, 0xFF	; 255
    358e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3592:	83 e0       	ldi	r24, 0x03	; 3
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    359a:	83 e0       	ldi	r24, 0x03	; 3
    359c:	62 e0       	ldi	r22, 0x02	; 2
    359e:	41 e0       	ldi	r20, 0x01	; 1
    35a0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    35a4:	83 e0       	ldi	r24, 0x03	; 3
    35a6:	65 e0       	ldi	r22, 0x05	; 5
    35a8:	41 e0       	ldi	r20, 0x01	; 1
    35aa:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    35ae:	81 c0       	rjmp	.+258    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    35b0:	83 e0       	ldi	r24, 0x03	; 3
    35b2:	6f ef       	ldi	r22, 0xFF	; 255
    35b4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    35b8:	83 e0       	ldi	r24, 0x03	; 3
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    35c0:	83 e0       	ldi	r24, 0x03	; 3
    35c2:	64 e0       	ldi	r22, 0x04	; 4
    35c4:	41 e0       	ldi	r20, 0x01	; 1
    35c6:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    35ca:	83 e0       	ldi	r24, 0x03	; 3
    35cc:	65 e0       	ldi	r22, 0x05	; 5
    35ce:	41 e0       	ldi	r20, 0x01	; 1
    35d0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    35d4:	6e c0       	rjmp	.+220    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    35d6:	83 e0       	ldi	r24, 0x03	; 3
    35d8:	6f ef       	ldi	r22, 0xFF	; 255
    35da:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    35de:	83 e0       	ldi	r24, 0x03	; 3
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    35e6:	83 e0       	ldi	r24, 0x03	; 3
    35e8:	60 e0       	ldi	r22, 0x00	; 0
    35ea:	41 e0       	ldi	r20, 0x01	; 1
    35ec:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_HIGH);
    35f0:	83 e0       	ldi	r24, 0x03	; 3
    35f2:	63 e0       	ldi	r22, 0x03	; 3
    35f4:	41 e0       	ldi	r20, 0x01	; 1
    35f6:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    35fa:	83 e0       	ldi	r24, 0x03	; 3
    35fc:	64 e0       	ldi	r22, 0x04	; 4
    35fe:	41 e0       	ldi	r20, 0x01	; 1
    3600:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3604:	56 c0       	rjmp	.+172    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3606:	83 e0       	ldi	r24, 0x03	; 3
    3608:	6f ef       	ldi	r22, 0xFF	; 255
    360a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    360e:	83 e0       	ldi	r24, 0x03	; 3
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    3616:	83 e0       	ldi	r24, 0x03	; 3
    3618:	61 e0       	ldi	r22, 0x01	; 1
    361a:	41 e0       	ldi	r20, 0x01	; 1
    361c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    3620:	83 e0       	ldi	r24, 0x03	; 3
    3622:	64 e0       	ldi	r22, 0x04	; 4
    3624:	41 e0       	ldi	r20, 0x01	; 1
    3626:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    362a:	43 c0       	rjmp	.+134    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    362c:	83 e0       	ldi	r24, 0x03	; 3
    362e:	6f ef       	ldi	r22, 0xFF	; 255
    3630:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3634:	83 e0       	ldi	r24, 0x03	; 3
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    363c:	83 e0       	ldi	r24, 0x03	; 3
    363e:	61 e0       	ldi	r22, 0x01	; 1
    3640:	41 e0       	ldi	r20, 0x01	; 1
    3642:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3646:	35 c0       	rjmp	.+106    	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3648:	83 e0       	ldi	r24, 0x03	; 3
    364a:	6f ef       	ldi	r22, 0xFF	; 255
    364c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3650:	83 e0       	ldi	r24, 0x03	; 3
    3652:	6f ef       	ldi	r22, 0xFF	; 255
    3654:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    3658:	83 e0       	ldi	r24, 0x03	; 3
    365a:	60 e0       	ldi	r22, 0x00	; 0
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    3662:	83 e0       	ldi	r24, 0x03	; 3
    3664:	61 e0       	ldi	r22, 0x01	; 1
    3666:	40 e0       	ldi	r20, 0x00	; 0
    3668:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    366c:	83 e0       	ldi	r24, 0x03	; 3
    366e:	62 e0       	ldi	r22, 0x02	; 2
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3676:	1d c0       	rjmp	.+58     	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3678:	83 e0       	ldi	r24, 0x03	; 3
    367a:	6f ef       	ldi	r22, 0xFF	; 255
    367c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3680:	83 e0       	ldi	r24, 0x03	; 3
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
    3688:	14 c0       	rjmp	.+40     	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    368a:	83 e0       	ldi	r24, 0x03	; 3
    368c:	6f ef       	ldi	r22, 0xFF	; 255
    368e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	60 e0       	ldi	r22, 0x00	; 0
    3696:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    369a:	83 e0       	ldi	r24, 0x03	; 3
    369c:	64 e0       	ldi	r22, 0x04	; 4
    369e:	41 e0       	ldi	r20, 0x01	; 1
    36a0:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    36a4:	06 c0       	rjmp	.+12     	; 0x36b2 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    36a6:	18 8e       	std	Y+24, r1	; 0x18
    36a8:	06 c0       	rjmp	.+12     	; 0x36b6 <SevenSegment_Display+0x11d2>
							}
					break;
					default:
					return E_OK;
    36aa:	18 8e       	std	Y+24, r1	; 0x18
    36ac:	04 c0       	rjmp	.+8      	; 0x36b6 <SevenSegment_Display+0x11d2>
				}
				break;
	default:
	return E_OK;
    36ae:	18 8e       	std	Y+24, r1	; 0x18
    36b0:	02 c0       	rjmp	.+4      	; 0x36b6 <SevenSegment_Display+0x11d2>
}
	return E_NOK;
    36b2:	91 e0       	ldi	r25, 0x01	; 1
    36b4:	98 8f       	std	Y+24, r25	; 0x18
    36b6:	88 8d       	ldd	r24, Y+24	; 0x18
}
    36b8:	6e 96       	adiw	r28, 0x1e	; 30
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <CLCD_init>:
#include "LCD_Config.h"
#include <stdio.h>
#include <util/delay.h>
#include <stdlib.h>
void CLCD_init(void)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	2e 97       	sbiw	r28, 0x0e	; 14
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
	//Initialize LCD pins direction
	DIO_SetPortDirection(CLCD_DataPort,DIO_OUTPUT);
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RS_PIN,DIO_OUTPUT);
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	41 e0       	ldi	r20, 0x01	; 1
    36ec:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RW_PIN,DIO_OUTPUT);
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	61 e0       	ldi	r22, 0x01	; 1
    36f4:	41 e0       	ldi	r20, 0x01	; 1
    36f6:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_E_PIN,DIO_OUTPUT);
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	62 e0       	ldi	r22, 0x02	; 2
    36fe:	41 e0       	ldi	r20, 0x01	; 1
    3700:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	a0 e2       	ldi	r26, 0x20	; 32
    370a:	b2 e4       	ldi	r27, 0x42	; 66
    370c:	8b 87       	std	Y+11, r24	; 0x0b
    370e:	9c 87       	std	Y+12, r25	; 0x0c
    3710:	ad 87       	std	Y+13, r26	; 0x0d
    3712:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3714:	6b 85       	ldd	r22, Y+11	; 0x0b
    3716:	7c 85       	ldd	r23, Y+12	; 0x0c
    3718:	8d 85       	ldd	r24, Y+13	; 0x0d
    371a:	9e 85       	ldd	r25, Y+14	; 0x0e
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	4a ef       	ldi	r20, 0xFA	; 250
    3722:	54 e4       	ldi	r21, 0x44	; 68
    3724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	8f 83       	std	Y+7, r24	; 0x07
    372e:	98 87       	std	Y+8, r25	; 0x08
    3730:	a9 87       	std	Y+9, r26	; 0x09
    3732:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3734:	6f 81       	ldd	r22, Y+7	; 0x07
    3736:	78 85       	ldd	r23, Y+8	; 0x08
    3738:	89 85       	ldd	r24, Y+9	; 0x09
    373a:	9a 85       	ldd	r25, Y+10	; 0x0a
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e8       	ldi	r20, 0x80	; 128
    3742:	5f e3       	ldi	r21, 0x3F	; 63
    3744:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3748:	88 23       	and	r24, r24
    374a:	2c f4       	brge	.+10     	; 0x3756 <CLCD_init+0x8c>
		__ticks = 1;
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	9e 83       	std	Y+6, r25	; 0x06
    3752:	8d 83       	std	Y+5, r24	; 0x05
    3754:	3f c0       	rjmp	.+126    	; 0x37d4 <CLCD_init+0x10a>
	else if (__tmp > 65535)
    3756:	6f 81       	ldd	r22, Y+7	; 0x07
    3758:	78 85       	ldd	r23, Y+8	; 0x08
    375a:	89 85       	ldd	r24, Y+9	; 0x09
    375c:	9a 85       	ldd	r25, Y+10	; 0x0a
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	3f ef       	ldi	r19, 0xFF	; 255
    3762:	4f e7       	ldi	r20, 0x7F	; 127
    3764:	57 e4       	ldi	r21, 0x47	; 71
    3766:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    376a:	18 16       	cp	r1, r24
    376c:	4c f5       	brge	.+82     	; 0x37c0 <CLCD_init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    376e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3770:	7c 85       	ldd	r23, Y+12	; 0x0c
    3772:	8d 85       	ldd	r24, Y+13	; 0x0d
    3774:	9e 85       	ldd	r25, Y+14	; 0x0e
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	40 e2       	ldi	r20, 0x20	; 32
    377c:	51 e4       	ldi	r21, 0x41	; 65
    377e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	bc 01       	movw	r22, r24
    3788:	cd 01       	movw	r24, r26
    378a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	9e 83       	std	Y+6, r25	; 0x06
    3794:	8d 83       	std	Y+5, r24	; 0x05
    3796:	0f c0       	rjmp	.+30     	; 0x37b6 <CLCD_init+0xec>
    3798:	88 ec       	ldi	r24, 0xC8	; 200
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	9c 83       	std	Y+4, r25	; 0x04
    379e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37a0:	8b 81       	ldd	r24, Y+3	; 0x03
    37a2:	9c 81       	ldd	r25, Y+4	; 0x04
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <CLCD_init+0xda>
    37a8:	9c 83       	std	Y+4, r25	; 0x04
    37aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ac:	8d 81       	ldd	r24, Y+5	; 0x05
    37ae:	9e 81       	ldd	r25, Y+6	; 0x06
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	9e 83       	std	Y+6, r25	; 0x06
    37b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b6:	8d 81       	ldd	r24, Y+5	; 0x05
    37b8:	9e 81       	ldd	r25, Y+6	; 0x06
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	69 f7       	brne	.-38     	; 0x3798 <CLCD_init+0xce>
    37be:	14 c0       	rjmp	.+40     	; 0x37e8 <CLCD_init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c0:	6f 81       	ldd	r22, Y+7	; 0x07
    37c2:	78 85       	ldd	r23, Y+8	; 0x08
    37c4:	89 85       	ldd	r24, Y+9	; 0x09
    37c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	9e 83       	std	Y+6, r25	; 0x06
    37d2:	8d 83       	std	Y+5, r24	; 0x05
    37d4:	8d 81       	ldd	r24, Y+5	; 0x05
    37d6:	9e 81       	ldd	r25, Y+6	; 0x06
    37d8:	9a 83       	std	Y+2, r25	; 0x02
    37da:	89 83       	std	Y+1, r24	; 0x01
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	9a 81       	ldd	r25, Y+2	; 0x02
    37e0:	01 97       	sbiw	r24, 0x01	; 1
    37e2:	f1 f7       	brne	.-4      	; 0x37e0 <CLCD_init+0x116>
    37e4:	9a 83       	std	Y+2, r25	; 0x02
    37e6:	89 83       	std	Y+1, r24	; 0x01
	#ifdef CLCD_OneLine_5x8Size
	CLCD_SendCommand(CLCD_OneLine_5x8Size);
	#elif CLCD_OneLine_5x11Size
	CLCD_SendCommand(CLCD_OneLine_5x11Size );
	#elif  CLCD_TwoLines_5x8Size
	CLCD_SendCommand(CLCD_TwoLines_5x8Size);
    37e8:	88 e3       	ldi	r24, 0x38	; 56
    37ea:	0e 94 06 1c 	call	0x380c	; 0x380c <CLCD_SendCommand>
	#elif CLCD_TwoLines_5x11Size
	CLCD_SendCommand(CLCD_TwoLines_5x11Size);
	#endif

	CLCD_SendCommand(CLCD_DISP_ON_CURSOR_BLINK);
    37ee:	8f e0       	ldi	r24, 0x0F	; 15
    37f0:	0e 94 06 1c 	call	0x380c	; 0x380c <CLCD_SendCommand>

	CLCD_SendCommand(CLCD_CLEAR);
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	0e 94 06 1c 	call	0x380c	; 0x380c <CLCD_SendCommand>
}
    37fa:	2e 96       	adiw	r28, 0x0e	; 14
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	cd bf       	out	0x3d, r28	; 61
    3806:	cf 91       	pop	r28
    3808:	df 91       	pop	r29
    380a:	08 95       	ret

0000380c <CLCD_SendCommand>:

void CLCD_SendCommand(u8 Command)
{
    380c:	df 93       	push	r29
    380e:	cf 93       	push	r28
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
    3814:	2f 97       	sbiw	r28, 0x0f	; 15
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
	//SET ReadWrite pin low to write
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	61 e0       	ldi	r22, 0x01	; 1
    3830:	40 e0       	ldi	r20, 0x00	; 0
    3832:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
	//SET Data/Command Port value is the command
	DIO_SetPortValue(CLCD_DataPort,Command);
    3836:	82 e0       	ldi	r24, 0x02	; 2
    3838:	6f 85       	ldd	r22, Y+15	; 0x0f
    383a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	62 e0       	ldi	r22, 0x02	; 2
    3842:	41 e0       	ldi	r20, 0x01	; 1
    3844:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	a0 e0       	ldi	r26, 0x00	; 0
    384e:	b0 e4       	ldi	r27, 0x40	; 64
    3850:	8b 87       	std	Y+11, r24	; 0x0b
    3852:	9c 87       	std	Y+12, r25	; 0x0c
    3854:	ad 87       	std	Y+13, r26	; 0x0d
    3856:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3858:	6b 85       	ldd	r22, Y+11	; 0x0b
    385a:	7c 85       	ldd	r23, Y+12	; 0x0c
    385c:	8d 85       	ldd	r24, Y+13	; 0x0d
    385e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	4a ef       	ldi	r20, 0xFA	; 250
    3866:	54 e4       	ldi	r21, 0x44	; 68
    3868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	8f 83       	std	Y+7, r24	; 0x07
    3872:	98 87       	std	Y+8, r25	; 0x08
    3874:	a9 87       	std	Y+9, r26	; 0x09
    3876:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3878:	6f 81       	ldd	r22, Y+7	; 0x07
    387a:	78 85       	ldd	r23, Y+8	; 0x08
    387c:	89 85       	ldd	r24, Y+9	; 0x09
    387e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e8       	ldi	r20, 0x80	; 128
    3886:	5f e3       	ldi	r21, 0x3F	; 63
    3888:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    388c:	88 23       	and	r24, r24
    388e:	2c f4       	brge	.+10     	; 0x389a <CLCD_SendCommand+0x8e>
		__ticks = 1;
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	9e 83       	std	Y+6, r25	; 0x06
    3896:	8d 83       	std	Y+5, r24	; 0x05
    3898:	3f c0       	rjmp	.+126    	; 0x3918 <CLCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    389a:	6f 81       	ldd	r22, Y+7	; 0x07
    389c:	78 85       	ldd	r23, Y+8	; 0x08
    389e:	89 85       	ldd	r24, Y+9	; 0x09
    38a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	3f ef       	ldi	r19, 0xFF	; 255
    38a6:	4f e7       	ldi	r20, 0x7F	; 127
    38a8:	57 e4       	ldi	r21, 0x47	; 71
    38aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ae:	18 16       	cp	r1, r24
    38b0:	4c f5       	brge	.+82     	; 0x3904 <CLCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	40 e2       	ldi	r20, 0x20	; 32
    38c0:	51 e4       	ldi	r21, 0x41	; 65
    38c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	bc 01       	movw	r22, r24
    38cc:	cd 01       	movw	r24, r26
    38ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	9e 83       	std	Y+6, r25	; 0x06
    38d8:	8d 83       	std	Y+5, r24	; 0x05
    38da:	0f c0       	rjmp	.+30     	; 0x38fa <CLCD_SendCommand+0xee>
    38dc:	88 ec       	ldi	r24, 0xC8	; 200
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	9c 83       	std	Y+4, r25	; 0x04
    38e2:	8b 83       	std	Y+3, r24	; 0x03
    38e4:	8b 81       	ldd	r24, Y+3	; 0x03
    38e6:	9c 81       	ldd	r25, Y+4	; 0x04
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <CLCD_SendCommand+0xdc>
    38ec:	9c 83       	std	Y+4, r25	; 0x04
    38ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f0:	8d 81       	ldd	r24, Y+5	; 0x05
    38f2:	9e 81       	ldd	r25, Y+6	; 0x06
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	9e 83       	std	Y+6, r25	; 0x06
    38f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38fa:	8d 81       	ldd	r24, Y+5	; 0x05
    38fc:	9e 81       	ldd	r25, Y+6	; 0x06
    38fe:	00 97       	sbiw	r24, 0x00	; 0
    3900:	69 f7       	brne	.-38     	; 0x38dc <CLCD_SendCommand+0xd0>
    3902:	14 c0       	rjmp	.+40     	; 0x392c <CLCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3904:	6f 81       	ldd	r22, Y+7	; 0x07
    3906:	78 85       	ldd	r23, Y+8	; 0x08
    3908:	89 85       	ldd	r24, Y+9	; 0x09
    390a:	9a 85       	ldd	r25, Y+10	; 0x0a
    390c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	9e 83       	std	Y+6, r25	; 0x06
    3916:	8d 83       	std	Y+5, r24	; 0x05
    3918:	8d 81       	ldd	r24, Y+5	; 0x05
    391a:	9e 81       	ldd	r25, Y+6	; 0x06
    391c:	9a 83       	std	Y+2, r25	; 0x02
    391e:	89 83       	std	Y+1, r24	; 0x01
    3920:	89 81       	ldd	r24, Y+1	; 0x01
    3922:	9a 81       	ldd	r25, Y+2	; 0x02
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	f1 f7       	brne	.-4      	; 0x3924 <CLCD_SendCommand+0x118>
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	62 e0       	ldi	r22, 0x02	; 2
    3930:	40 e0       	ldi	r20, 0x00	; 0
    3932:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
}
    3936:	2f 96       	adiw	r28, 0x0f	; 15
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	08 95       	ret

00003948 <CLCD_SendData>:

void CLCD_SendData(u8 Data)
{
    3948:	df 93       	push	r29
    394a:	cf 93       	push	r28
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	2f 97       	sbiw	r28, 0x0f	; 15
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	cd bf       	out	0x3d, r28	; 61
    395c:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	41 e0       	ldi	r20, 0x01	; 1
    3964:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
	//SET ReadWrite pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	61 e0       	ldi	r22, 0x01	; 1
    396c:	40 e0       	ldi	r20, 0x00	; 0
    396e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
	//SET Data/Command Port value is the Data
	DIO_SetPortValue(CLCD_DataPort,Data);
    3972:	82 e0       	ldi	r24, 0x02	; 2
    3974:	6f 85       	ldd	r22, Y+15	; 0x0f
    3976:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	62 e0       	ldi	r22, 0x02	; 2
    397e:	41 e0       	ldi	r20, 0x01	; 1
    3980:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	a0 e0       	ldi	r26, 0x00	; 0
    398a:	b0 e4       	ldi	r27, 0x40	; 64
    398c:	8b 87       	std	Y+11, r24	; 0x0b
    398e:	9c 87       	std	Y+12, r25	; 0x0c
    3990:	ad 87       	std	Y+13, r26	; 0x0d
    3992:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3994:	6b 85       	ldd	r22, Y+11	; 0x0b
    3996:	7c 85       	ldd	r23, Y+12	; 0x0c
    3998:	8d 85       	ldd	r24, Y+13	; 0x0d
    399a:	9e 85       	ldd	r25, Y+14	; 0x0e
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	4a ef       	ldi	r20, 0xFA	; 250
    39a2:	54 e4       	ldi	r21, 0x44	; 68
    39a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	8f 83       	std	Y+7, r24	; 0x07
    39ae:	98 87       	std	Y+8, r25	; 0x08
    39b0:	a9 87       	std	Y+9, r26	; 0x09
    39b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39b4:	6f 81       	ldd	r22, Y+7	; 0x07
    39b6:	78 85       	ldd	r23, Y+8	; 0x08
    39b8:	89 85       	ldd	r24, Y+9	; 0x09
    39ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e8       	ldi	r20, 0x80	; 128
    39c2:	5f e3       	ldi	r21, 0x3F	; 63
    39c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39c8:	88 23       	and	r24, r24
    39ca:	2c f4       	brge	.+10     	; 0x39d6 <CLCD_SendData+0x8e>
		__ticks = 1;
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	9e 83       	std	Y+6, r25	; 0x06
    39d2:	8d 83       	std	Y+5, r24	; 0x05
    39d4:	3f c0       	rjmp	.+126    	; 0x3a54 <CLCD_SendData+0x10c>
	else if (__tmp > 65535)
    39d6:	6f 81       	ldd	r22, Y+7	; 0x07
    39d8:	78 85       	ldd	r23, Y+8	; 0x08
    39da:	89 85       	ldd	r24, Y+9	; 0x09
    39dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	3f ef       	ldi	r19, 0xFF	; 255
    39e2:	4f e7       	ldi	r20, 0x7F	; 127
    39e4:	57 e4       	ldi	r21, 0x47	; 71
    39e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ea:	18 16       	cp	r1, r24
    39ec:	4c f5       	brge	.+82     	; 0x3a40 <CLCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e2       	ldi	r20, 0x20	; 32
    39fc:	51 e4       	ldi	r21, 0x41	; 65
    39fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	bc 01       	movw	r22, r24
    3a08:	cd 01       	movw	r24, r26
    3a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	9e 83       	std	Y+6, r25	; 0x06
    3a14:	8d 83       	std	Y+5, r24	; 0x05
    3a16:	0f c0       	rjmp	.+30     	; 0x3a36 <CLCD_SendData+0xee>
    3a18:	88 ec       	ldi	r24, 0xC8	; 200
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	9c 83       	std	Y+4, r25	; 0x04
    3a1e:	8b 83       	std	Y+3, r24	; 0x03
    3a20:	8b 81       	ldd	r24, Y+3	; 0x03
    3a22:	9c 81       	ldd	r25, Y+4	; 0x04
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <CLCD_SendData+0xdc>
    3a28:	9c 83       	std	Y+4, r25	; 0x04
    3a2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	9e 83       	std	Y+6, r25	; 0x06
    3a34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a36:	8d 81       	ldd	r24, Y+5	; 0x05
    3a38:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3a:	00 97       	sbiw	r24, 0x00	; 0
    3a3c:	69 f7       	brne	.-38     	; 0x3a18 <CLCD_SendData+0xd0>
    3a3e:	14 c0       	rjmp	.+40     	; 0x3a68 <CLCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a40:	6f 81       	ldd	r22, Y+7	; 0x07
    3a42:	78 85       	ldd	r23, Y+8	; 0x08
    3a44:	89 85       	ldd	r24, Y+9	; 0x09
    3a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	9e 83       	std	Y+6, r25	; 0x06
    3a52:	8d 83       	std	Y+5, r24	; 0x05
    3a54:	8d 81       	ldd	r24, Y+5	; 0x05
    3a56:	9e 81       	ldd	r25, Y+6	; 0x06
    3a58:	9a 83       	std	Y+2, r25	; 0x02
    3a5a:	89 83       	std	Y+1, r24	; 0x01
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <CLCD_SendData+0x118>
    3a64:	9a 83       	std	Y+2, r25	; 0x02
    3a66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	62 e0       	ldi	r22, 0x02	; 2
    3a6c:	40 e0       	ldi	r20, 0x00	; 0
    3a6e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>
}
    3a72:	2f 96       	adiw	r28, 0x0f	; 15
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <CLCD_SendWord>:

void CLCD_SendWord(u8 *Word_PTR)
{
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <CLCD_SendWord+0x6>
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	9a 83       	std	Y+2, r25	; 0x02
    3a90:	89 83       	std	Y+1, r24	; 0x01
    3a92:	0b c0       	rjmp	.+22     	; 0x3aaa <CLCD_SendWord+0x26>
	while(*Word_PTR) 		//Word = String = array of charaters
	{
		CLCD_SendData(*Word_PTR++);
    3a94:	e9 81       	ldd	r30, Y+1	; 0x01
    3a96:	fa 81       	ldd	r31, Y+2	; 0x02
    3a98:	20 81       	ld	r18, Z
    3a9a:	89 81       	ldd	r24, Y+1	; 0x01
    3a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a9e:	01 96       	adiw	r24, 0x01	; 1
    3aa0:	9a 83       	std	Y+2, r25	; 0x02
    3aa2:	89 83       	std	Y+1, r24	; 0x01
    3aa4:	82 2f       	mov	r24, r18
    3aa6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <CLCD_SendData>
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
}

void CLCD_SendWord(u8 *Word_PTR)
{
	while(*Word_PTR) 		//Word = String = array of charaters
    3aaa:	e9 81       	ldd	r30, Y+1	; 0x01
    3aac:	fa 81       	ldd	r31, Y+2	; 0x02
    3aae:	80 81       	ld	r24, Z
    3ab0:	88 23       	and	r24, r24
    3ab2:	81 f7       	brne	.-32     	; 0x3a94 <CLCD_SendWord+0x10>
	{
		CLCD_SendData(*Word_PTR++);
	}
}
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	08 95       	ret

00003abe <CLCD_GoToXY>:

//to move from position to another in CLCD
STD_Return CLCD_GoToXY(u8 X_Position,u8 Y_Position)
{
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	00 d0       	rcall	.+0      	; 0x3ac4 <CLCD_GoToXY+0x6>
    3ac4:	00 d0       	rcall	.+0      	; 0x3ac6 <CLCD_GoToXY+0x8>
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62
    3aca:	8a 83       	std	Y+2, r24	; 0x02
    3acc:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_address;
	if(X_Position == 0)
    3ace:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad0:	88 23       	and	r24, r24
    3ad2:	49 f4       	brne	.+18     	; 0x3ae6 <CLCD_GoToXY+0x28>
		{
			DDRAM_address = Y_Position;
    3ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad6:	89 83       	std	Y+1, r24	; 0x01
			CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	80 58       	subi	r24, 0x80	; 128
    3adc:	0e 94 06 1c 	call	0x380c	; 0x380c <CLCD_SendCommand>
			return E_NOK;
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	8c 83       	std	Y+4, r24	; 0x04
    3ae4:	0e c0       	rjmp	.+28     	; 0x3b02 <CLCD_GoToXY+0x44>
		}
	else if (X_Position == 1)
    3ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae8:	81 30       	cpi	r24, 0x01	; 1
    3aea:	51 f4       	brne	.+20     	; 0x3b00 <CLCD_GoToXY+0x42>
		{
		DDRAM_address = Y_Position + FirstLoc_SecondLine;
    3aec:	8b 81       	ldd	r24, Y+3	; 0x03
    3aee:	80 5c       	subi	r24, 0xC0	; 192
    3af0:	89 83       	std	Y+1, r24	; 0x01
		CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	80 58       	subi	r24, 0x80	; 128
    3af6:	0e 94 06 1c 	call	0x380c	; 0x380c <CLCD_SendCommand>
		return E_NOK;
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	8c 83       	std	Y+4, r24	; 0x04
    3afe:	01 c0       	rjmp	.+2      	; 0x3b02 <CLCD_GoToXY+0x44>
		}
	else
	{
		return E_OK;
    3b00:	1c 82       	std	Y+4, r1	; 0x04
    3b02:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <CLCD_SendSpecialChar>:
//to write special function by CGRAM
void CLCD_SendSpecialChar(u8 *Pattern,u8 BlockNumber,u8 X_Position,u8 Y_Position)
{
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	cd b7       	in	r28, 0x3d	; 61
    3b18:	de b7       	in	r29, 0x3e	; 62
    3b1a:	27 97       	sbiw	r28, 0x07	; 7
    3b1c:	0f b6       	in	r0, 0x3f	; 63
    3b1e:	f8 94       	cli
    3b20:	de bf       	out	0x3e, r29	; 62
    3b22:	0f be       	out	0x3f, r0	; 63
    3b24:	cd bf       	out	0x3d, r28	; 61
    3b26:	9c 83       	std	Y+4, r25	; 0x04
    3b28:	8b 83       	std	Y+3, r24	; 0x03
    3b2a:	6d 83       	std	Y+5, r22	; 0x05
    3b2c:	4e 83       	std	Y+6, r20	; 0x06
    3b2e:	2f 83       	std	Y+7, r18	; 0x07
	u8 CGRAM_address=0;
    3b30:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter;
	CGRAM_address = BlockNumber*8;
    3b32:	8d 81       	ldd	r24, Y+5	; 0x05
    3b34:	88 2f       	mov	r24, r24
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	88 0f       	add	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	88 0f       	add	r24, r24
    3b3e:	99 1f       	adc	r25, r25
    3b40:	88 0f       	add	r24, r24
    3b42:	99 1f       	adc	r25, r25
    3b44:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_SendCommand(CGRAM_address+Set_Bit6);
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	80 5c       	subi	r24, 0xC0	; 192
    3b4a:	0e 94 06 1c 	call	0x380c	; 0x380c <CLCD_SendCommand>

	for(counter=0;counter<8;counter++)
    3b4e:	19 82       	std	Y+1, r1	; 0x01
    3b50:	0e c0       	rjmp	.+28     	; 0x3b6e <CLCD_SendSpecialChar+0x5c>
		{
			CLCD_SendData(Pattern[counter]);
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	28 2f       	mov	r18, r24
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5c:	fc 01       	movw	r30, r24
    3b5e:	e2 0f       	add	r30, r18
    3b60:	f3 1f       	adc	r31, r19
    3b62:	80 81       	ld	r24, Z
    3b64:	0e 94 a4 1c 	call	0x3948	; 0x3948 <CLCD_SendData>
	u8 CGRAM_address=0;
	u8 counter;
	CGRAM_address = BlockNumber*8;
	CLCD_SendCommand(CGRAM_address+Set_Bit6);

	for(counter=0;counter<8;counter++)
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	8f 5f       	subi	r24, 0xFF	; 255
    3b6c:	89 83       	std	Y+1, r24	; 0x01
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	88 30       	cpi	r24, 0x08	; 8
    3b72:	78 f3       	brcs	.-34     	; 0x3b52 <CLCD_SendSpecialChar+0x40>
		{
			CLCD_SendData(Pattern[counter]);
		}
	CLCD_GoToXY(X_Position,Y_Position);
    3b74:	8e 81       	ldd	r24, Y+6	; 0x06
    3b76:	6f 81       	ldd	r22, Y+7	; 0x07
    3b78:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <CLCD_GoToXY>
	CLCD_SendData(BlockNumber);
    3b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <CLCD_SendData>
}
    3b82:	27 96       	adiw	r28, 0x07	; 7
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	cf 91       	pop	r28
    3b90:	df 91       	pop	r29
    3b92:	08 95       	ret

00003b94 <CLCD_Display_Decimal_Number>:

void CLCD_Display_Decimal_Number(s32 num)
{
    3b94:	df 93       	push	r29
    3b96:	cf 93       	push	r28
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	61 97       	sbiw	r28, 0x11	; 17
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	6e 87       	std	Y+14, r22	; 0x0e
    3baa:	7f 87       	std	Y+15, r23	; 0x0f
    3bac:	88 8b       	std	Y+16, r24	; 0x10
    3bae:	99 8b       	std	Y+17, r25	; 0x11
	u8 i = 0, j, digit, str[10];
    3bb0:	1b 82       	std	Y+3, r1	; 0x03

	/* if number 0 */
	if (0 == num)
    3bb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bb6:	a8 89       	ldd	r26, Y+16	; 0x10
    3bb8:	b9 89       	ldd	r27, Y+17	; 0x11
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	a1 05       	cpc	r26, r1
    3bbe:	b1 05       	cpc	r27, r1
    3bc0:	19 f4       	brne	.+6      	; 0x3bc8 <CLCD_Display_Decimal_Number+0x34>
	{
		CLCD_SendData('0');
    3bc2:	80 e3       	ldi	r24, 0x30	; 48
    3bc4:	0e 94 a4 1c 	call	0x3948	; 0x3948 <CLCD_SendData>
	}

	/* if the number is negative */
	if (num < 0)
    3bc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bca:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bcc:	a8 89       	ldd	r26, Y+16	; 0x10
    3bce:	b9 89       	ldd	r27, Y+17	; 0x11
    3bd0:	bb 23       	and	r27, r27
    3bd2:	0c f0       	brlt	.+2      	; 0x3bd6 <CLCD_Display_Decimal_Number+0x42>
    3bd4:	42 c0       	rjmp	.+132    	; 0x3c5a <CLCD_Display_Decimal_Number+0xc6>
	{
		CLCD_SendData('-');
    3bd6:	8d e2       	ldi	r24, 0x2D	; 45
    3bd8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <CLCD_SendData>

		/* convert to positive form */
		num = num * -1;
    3bdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bde:	9f 85       	ldd	r25, Y+15	; 0x0f
    3be0:	a8 89       	ldd	r26, Y+16	; 0x10
    3be2:	b9 89       	ldd	r27, Y+17	; 0x11
    3be4:	b0 95       	com	r27
    3be6:	a0 95       	com	r26
    3be8:	90 95       	com	r25
    3bea:	81 95       	neg	r24
    3bec:	9f 4f       	sbci	r25, 0xFF	; 255
    3bee:	af 4f       	sbci	r26, 0xFF	; 255
    3bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf2:	8e 87       	std	Y+14, r24	; 0x0e
    3bf4:	9f 87       	std	Y+15, r25	; 0x0f
    3bf6:	a8 8b       	std	Y+16, r26	; 0x10
    3bf8:	b9 8b       	std	Y+17, r27	; 0x11
    3bfa:	2f c0       	rjmp	.+94     	; 0x3c5a <CLCD_Display_Decimal_Number+0xc6>
	}

	/* loop on digits of the number */
	while (num > 0)
	{
		digit = (num % 10) + '0';
    3bfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c00:	a8 89       	ldd	r26, Y+16	; 0x10
    3c02:	b9 89       	ldd	r27, Y+17	; 0x11
    3c04:	2a e0       	ldi	r18, 0x0A	; 10
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e0       	ldi	r20, 0x00	; 0
    3c0a:	50 e0       	ldi	r21, 0x00	; 0
    3c0c:	bc 01       	movw	r22, r24
    3c0e:	cd 01       	movw	r24, r26
    3c10:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__divmodsi4>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	80 5d       	subi	r24, 0xD0	; 208
    3c1a:	89 83       	std	Y+1, r24	; 0x01
		str[i] = digit;
    3c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1e:	28 2f       	mov	r18, r24
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	ce 01       	movw	r24, r28
    3c24:	04 96       	adiw	r24, 0x04	; 4
    3c26:	fc 01       	movw	r30, r24
    3c28:	e2 0f       	add	r30, r18
    3c2a:	f3 1f       	adc	r31, r19
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	80 83       	st	Z, r24
		num /= 10;
    3c30:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c32:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c34:	a8 89       	ldd	r26, Y+16	; 0x10
    3c36:	b9 89       	ldd	r27, Y+17	; 0x11
    3c38:	2a e0       	ldi	r18, 0x0A	; 10
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	40 e0       	ldi	r20, 0x00	; 0
    3c3e:	50 e0       	ldi	r21, 0x00	; 0
    3c40:	bc 01       	movw	r22, r24
    3c42:	cd 01       	movw	r24, r26
    3c44:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__divmodsi4>
    3c48:	da 01       	movw	r26, r20
    3c4a:	c9 01       	movw	r24, r18
    3c4c:	8e 87       	std	Y+14, r24	; 0x0e
    3c4e:	9f 87       	std	Y+15, r25	; 0x0f
    3c50:	a8 8b       	std	Y+16, r26	; 0x10
    3c52:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    3c54:	8b 81       	ldd	r24, Y+3	; 0x03
    3c56:	8f 5f       	subi	r24, 0xFF	; 255
    3c58:	8b 83       	std	Y+3, r24	; 0x03
		/* convert to positive form */
		num = num * -1;
	}

	/* loop on digits of the number */
	while (num > 0)
    3c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c5e:	a8 89       	ldd	r26, Y+16	; 0x10
    3c60:	b9 89       	ldd	r27, Y+17	; 0x11
    3c62:	18 16       	cp	r1, r24
    3c64:	19 06       	cpc	r1, r25
    3c66:	1a 06       	cpc	r1, r26
    3c68:	1b 06       	cpc	r1, r27
    3c6a:	44 f2       	brlt	.-112    	; 0x3bfc <CLCD_Display_Decimal_Number+0x68>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    3c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6e:	8a 83       	std	Y+2, r24	; 0x02
    3c70:	11 c0       	rjmp	.+34     	; 0x3c94 <CLCD_Display_Decimal_Number+0x100>
	{
		CLCD_SendData(str[j - 1]);
    3c72:	8a 81       	ldd	r24, Y+2	; 0x02
    3c74:	88 2f       	mov	r24, r24
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	9c 01       	movw	r18, r24
    3c7a:	21 50       	subi	r18, 0x01	; 1
    3c7c:	30 40       	sbci	r19, 0x00	; 0
    3c7e:	ce 01       	movw	r24, r28
    3c80:	04 96       	adiw	r24, 0x04	; 4
    3c82:	fc 01       	movw	r30, r24
    3c84:	e2 0f       	add	r30, r18
    3c86:	f3 1f       	adc	r31, r19
    3c88:	80 81       	ld	r24, Z
    3c8a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <CLCD_SendData>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	81 50       	subi	r24, 0x01	; 1
    3c92:	8a 83       	std	Y+2, r24	; 0x02
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	88 23       	and	r24, r24
    3c98:	61 f7       	brne	.-40     	; 0x3c72 <CLCD_Display_Decimal_Number+0xde>
	{
		CLCD_SendData(str[j - 1]);
	}
}
    3c9a:	61 96       	adiw	r28, 0x11	; 17
    3c9c:	0f b6       	in	r0, 0x3f	; 63
    3c9e:	f8 94       	cli
    3ca0:	de bf       	out	0x3e, r29	; 62
    3ca2:	0f be       	out	0x3f, r0	; 63
    3ca4:	cd bf       	out	0x3d, r28	; 61
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	08 95       	ret

00003cac <CLCD_Display_RealNumber>:
void CLCD_Display_RealNumber(f32 num)
{
    3cac:	df 93       	push	r29
    3cae:	cf 93       	push	r28
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    3cb4:	29 97       	sbiw	r28, 0x09	; 9
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	de bf       	out	0x3e, r29	; 62
    3cbc:	0f be       	out	0x3f, r0	; 63
    3cbe:	cd bf       	out	0x3d, r28	; 61
    3cc0:	6e 83       	std	Y+6, r22	; 0x06
    3cc2:	7f 83       	std	Y+7, r23	; 0x07
    3cc4:	88 87       	std	Y+8, r24	; 0x08
    3cc6:	99 87       	std	Y+9, r25	; 0x09
	//Left number to the decimal point
	s32 left = (s32)num;
    3cc8:	6e 81       	ldd	r22, Y+6	; 0x06
    3cca:	7f 81       	ldd	r23, Y+7	; 0x07
    3ccc:	88 85       	ldd	r24, Y+8	; 0x08
    3cce:	99 85       	ldd	r25, Y+9	; 0x09
    3cd0:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	8a 83       	std	Y+2, r24	; 0x02
    3cda:	9b 83       	std	Y+3, r25	; 0x03
    3cdc:	ac 83       	std	Y+4, r26	; 0x04
    3cde:	bd 83       	std	Y+5, r27	; 0x05
	//calculation to the Right number to the decimal point
	u8 right = (f32)(num - left) * 100;
    3ce0:	6a 81       	ldd	r22, Y+2	; 0x02
    3ce2:	7b 81       	ldd	r23, Y+3	; 0x03
    3ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ce8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3cec:	9b 01       	movw	r18, r22
    3cee:	ac 01       	movw	r20, r24
    3cf0:	6e 81       	ldd	r22, Y+6	; 0x06
    3cf2:	7f 81       	ldd	r23, Y+7	; 0x07
    3cf4:	88 85       	ldd	r24, Y+8	; 0x08
    3cf6:	99 85       	ldd	r25, Y+9	; 0x09
    3cf8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	bc 01       	movw	r22, r24
    3d02:	cd 01       	movw	r24, r26
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	48 ec       	ldi	r20, 0xC8	; 200
    3d0a:	52 e4       	ldi	r21, 0x42	; 66
    3d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	bc 01       	movw	r22, r24
    3d16:	cd 01       	movw	r24, r26
    3d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	89 83       	std	Y+1, r24	; 0x01
	//Display Left number to the decimal point
	CLCD_Display_Decimal_Number(left);
    3d22:	8a 81       	ldd	r24, Y+2	; 0x02
    3d24:	9b 81       	ldd	r25, Y+3	; 0x03
    3d26:	ac 81       	ldd	r26, Y+4	; 0x04
    3d28:	bd 81       	ldd	r27, Y+5	; 0x05
    3d2a:	bc 01       	movw	r22, r24
    3d2c:	cd 01       	movw	r24, r26
    3d2e:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <CLCD_Display_Decimal_Number>
	//Display the decimal point
	CLCD_SendData('.');
    3d32:	8e e2       	ldi	r24, 0x2E	; 46
    3d34:	0e 94 a4 1c 	call	0x3948	; 0x3948 <CLCD_SendData>
	//Display the Right number to the decimal point
	CLCD_Display_Decimal_Number(right);
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	88 2f       	mov	r24, r24
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	a0 e0       	ldi	r26, 0x00	; 0
    3d40:	b0 e0       	ldi	r27, 0x00	; 0
    3d42:	bc 01       	movw	r22, r24
    3d44:	cd 01       	movw	r24, r26
    3d46:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <CLCD_Display_Decimal_Number>
}
    3d4a:	29 96       	adiw	r28, 0x09	; 9
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	de bf       	out	0x3e, r29	; 62
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	cd bf       	out	0x3d, r28	; 61
    3d56:	cf 91       	pop	r28
    3d58:	df 91       	pop	r29
    3d5a:	08 95       	ret

00003d5c <KeyPad_Pressed_Key>:
 * Description          : function to define which switch is pressed in the keypad
 * 
 * @return u8           : return the value of the pressed switch 
 */
u8 KeyPad_Pressed_Key(void)
{
    3d5c:	df 93       	push	r29
    3d5e:	cf 93       	push	r28
    3d60:	00 d0       	rcall	.+0      	; 0x3d62 <KeyPad_Pressed_Key+0x6>
    3d62:	00 d0       	rcall	.+0      	; 0x3d64 <KeyPad_Pressed_Key+0x8>
    3d64:	0f 92       	push	r0
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
	u8 ColumnIndex,RowIndex,PinState,PressedKey;

	PressedKey=Key_Not_Pressed;
    3d6a:	8f ef       	ldi	r24, 0xFF	; 255
    3d6c:	89 83       	std	Y+1, r24	; 0x01

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    3d6e:	1b 82       	std	Y+3, r1	; 0x03
    3d70:	7a c0       	rjmp	.+244    	; 0x3e66 <KeyPad_Pressed_Key+0x10a>
	{
		//Set column of Keypad Output
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	6f ef       	ldi	r22, 0xFF	; 255
    3d76:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPortDirection>
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	88 2f       	mov	r24, r24
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	fc 01       	movw	r30, r24
    3d82:	e8 59       	subi	r30, 0x98	; 152
    3d84:	fe 4f       	sbci	r31, 0xFE	; 254
    3d86:	90 81       	ld	r25, Z
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	69 2f       	mov	r22, r25
    3d8c:	40 e0       	ldi	r20, 0x00	; 0
    3d8e:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    3d92:	1a 82       	std	Y+2, r1	; 0x02
    3d94:	55 c0       	rjmp	.+170    	; 0x3e40 <KeyPad_Pressed_Key+0xe4>
		{
			//Set Row input and activate pull-up
			DIO_SetPinDirection(KeyPad_Port,KeyPad_Row_Arr[RowIndex],DIO_INPUT);
    3d96:	8a 81       	ldd	r24, Y+2	; 0x02
    3d98:	88 2f       	mov	r24, r24
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	e4 59       	subi	r30, 0x94	; 148
    3da0:	fe 4f       	sbci	r31, 0xFE	; 254
    3da2:	90 81       	ld	r25, Z
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	69 2f       	mov	r22, r25
    3da8:	40 e0       	ldi	r20, 0x00	; 0
    3daa:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
			DIO_EnablePullup(KeyPad_Port,KeyPad_Row_Arr[RowIndex],ENABLE_PullUp);
    3dae:	8a 81       	ldd	r24, Y+2	; 0x02
    3db0:	88 2f       	mov	r24, r24
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	fc 01       	movw	r30, r24
    3db6:	e4 59       	subi	r30, 0x94	; 148
    3db8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dba:	90 81       	ld	r25, Z
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	69 2f       	mov	r22, r25
    3dc0:	40 e0       	ldi	r20, 0x00	; 0
    3dc2:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_EnablePullup>

			//Read the current row
			DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    3dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc8:	88 2f       	mov	r24, r24
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	fc 01       	movw	r30, r24
    3dce:	e4 59       	subi	r30, 0x94	; 148
    3dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd2:	90 81       	ld	r25, Z
    3dd4:	9e 01       	movw	r18, r28
    3dd6:	2c 5f       	subi	r18, 0xFC	; 252
    3dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	69 2f       	mov	r22, r25
    3dde:	a9 01       	movw	r20, r18
    3de0:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <DIO_GetPinValue>

			//Check if switch is pressed
			if(PinState==DIO_LOW)
    3de4:	8c 81       	ldd	r24, Y+4	; 0x04
    3de6:	88 23       	and	r24, r24
    3de8:	41 f5       	brne	.+80     	; 0x3e3a <KeyPad_Pressed_Key+0xde>
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];
    3dea:	8a 81       	ldd	r24, Y+2	; 0x02
    3dec:	48 2f       	mov	r20, r24
    3dee:	50 e0       	ldi	r21, 0x00	; 0
    3df0:	8b 81       	ldd	r24, Y+3	; 0x03
    3df2:	28 2f       	mov	r18, r24
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	ca 01       	movw	r24, r20
    3df8:	88 0f       	add	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	88 0f       	add	r24, r24
    3dfe:	99 1f       	adc	r25, r25
    3e00:	82 0f       	add	r24, r18
    3e02:	93 1f       	adc	r25, r19
    3e04:	fc 01       	movw	r30, r24
    3e06:	e0 59       	subi	r30, 0x90	; 144
    3e08:	fe 4f       	sbci	r31, 0xFE	; 254
    3e0a:	80 81       	ld	r24, Z
    3e0c:	89 83       	std	Y+1, r24	; 0x01
    3e0e:	0f c0       	rjmp	.+30     	; 0x3e2e <KeyPad_Pressed_Key+0xd2>

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    3e10:	8a 81       	ldd	r24, Y+2	; 0x02
    3e12:	88 2f       	mov	r24, r24
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	fc 01       	movw	r30, r24
    3e18:	e4 59       	subi	r30, 0x94	; 148
    3e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e1c:	90 81       	ld	r25, Z
    3e1e:	9e 01       	movw	r18, r28
    3e20:	2c 5f       	subi	r18, 0xFC	; 252
    3e22:	3f 4f       	sbci	r19, 0xFF	; 255
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	69 2f       	mov	r22, r25
    3e28:	a9 01       	movw	r20, r18
    3e2a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <DIO_GetPinValue>
			if(PinState==DIO_LOW)
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
    3e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e30:	88 23       	and	r24, r24
    3e32:	71 f3       	breq	.-36     	; 0x3e10 <KeyPad_Pressed_Key+0xb4>
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
				}
				return PressedKey;
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	8d 83       	std	Y+5, r24	; 0x05
    3e38:	1c c0       	rjmp	.+56     	; 0x3e72 <KeyPad_Pressed_Key+0x116>
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    3e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3c:	8f 5f       	subi	r24, 0xFF	; 255
    3e3e:	8a 83       	std	Y+2, r24	; 0x02
    3e40:	8a 81       	ldd	r24, Y+2	; 0x02
    3e42:	84 30       	cpi	r24, 0x04	; 4
    3e44:	08 f4       	brcc	.+2      	; 0x3e48 <KeyPad_Pressed_Key+0xec>
    3e46:	a7 cf       	rjmp	.-178    	; 0x3d96 <KeyPad_Pressed_Key+0x3a>
				}
				return PressedKey;
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
    3e48:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4a:	88 2f       	mov	r24, r24
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	fc 01       	movw	r30, r24
    3e50:	e8 59       	subi	r30, 0x98	; 152
    3e52:	fe 4f       	sbci	r31, 0xFE	; 254
    3e54:	90 81       	ld	r25, Z
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	69 2f       	mov	r22, r25
    3e5a:	41 e0       	ldi	r20, 0x01	; 1
    3e5c:	0e 94 c6 0b 	call	0x178c	; 0x178c <DIO_SetPinValue>

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    3e60:	8b 81       	ldd	r24, Y+3	; 0x03
    3e62:	8f 5f       	subi	r24, 0xFF	; 255
    3e64:	8b 83       	std	Y+3, r24	; 0x03
    3e66:	8b 81       	ldd	r24, Y+3	; 0x03
    3e68:	84 30       	cpi	r24, 0x04	; 4
    3e6a:	08 f4       	brcc	.+2      	; 0x3e6e <KeyPad_Pressed_Key+0x112>
    3e6c:	82 cf       	rjmp	.-252    	; 0x3d72 <KeyPad_Pressed_Key+0x16>
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
	}
	return PressedKey;
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	8d 83       	std	Y+5, r24	; 0x05
    3e72:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <main>:
#include "MCAL/Timer/timer.h"
#include "MCAL/External_Interrupt/External_Interrupt.h"
#include "util/delay.h"

void main()
	{
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	2f 97       	sbiw	r28, 0x0f	; 15
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
			u8 counter;
			Timer0_init();
    3e98:	0e 94 75 07 	call	0xeea	; 0xeea <Timer0_init>
			DIO_SetPinDirection(DIO_PORTB,3,DIO_OUTPUT);//OC pin O/p
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	63 e0       	ldi	r22, 0x03	; 3
    3ea0:	41 e0       	ldi	r20, 0x01	; 1
    3ea2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <DIO_SetPinDirection>
			Timer0_SetValue(125);
    3ea6:	8d e7       	ldi	r24, 0x7D	; 125
    3ea8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Timer0_SetValue>
			while(1)
				{
					for(counter=0;counter<=255;counter++)
    3eac:	1f 86       	std	Y+15, r1	; 0x0f
					{
						Timer0_SetValue(counter);
    3eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eb0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Timer0_SetValue>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	a0 e2       	ldi	r26, 0x20	; 32
    3eba:	b1 e4       	ldi	r27, 0x41	; 65
    3ebc:	8b 87       	std	Y+11, r24	; 0x0b
    3ebe:	9c 87       	std	Y+12, r25	; 0x0c
    3ec0:	ad 87       	std	Y+13, r26	; 0x0d
    3ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	4a ef       	ldi	r20, 0xFA	; 250
    3ed2:	54 e4       	ldi	r21, 0x44	; 68
    3ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	8f 83       	std	Y+7, r24	; 0x07
    3ede:	98 87       	std	Y+8, r25	; 0x08
    3ee0:	a9 87       	std	Y+9, r26	; 0x09
    3ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee6:	78 85       	ldd	r23, Y+8	; 0x08
    3ee8:	89 85       	ldd	r24, Y+9	; 0x09
    3eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e8       	ldi	r20, 0x80	; 128
    3ef2:	5f e3       	ldi	r21, 0x3F	; 63
    3ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ef8:	88 23       	and	r24, r24
    3efa:	2c f4       	brge	.+10     	; 0x3f06 <main+0x82>
		__ticks = 1;
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	9e 83       	std	Y+6, r25	; 0x06
    3f02:	8d 83       	std	Y+5, r24	; 0x05
    3f04:	3f c0       	rjmp	.+126    	; 0x3f84 <main+0x100>
	else if (__tmp > 65535)
    3f06:	6f 81       	ldd	r22, Y+7	; 0x07
    3f08:	78 85       	ldd	r23, Y+8	; 0x08
    3f0a:	89 85       	ldd	r24, Y+9	; 0x09
    3f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	3f ef       	ldi	r19, 0xFF	; 255
    3f12:	4f e7       	ldi	r20, 0x7F	; 127
    3f14:	57 e4       	ldi	r21, 0x47	; 71
    3f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1a:	18 16       	cp	r1, r24
    3f1c:	4c f5       	brge	.+82     	; 0x3f70 <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	40 e2       	ldi	r20, 0x20	; 32
    3f2c:	51 e4       	ldi	r21, 0x41	; 65
    3f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	bc 01       	movw	r22, r24
    3f38:	cd 01       	movw	r24, r26
    3f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	9e 83       	std	Y+6, r25	; 0x06
    3f44:	8d 83       	std	Y+5, r24	; 0x05
    3f46:	0f c0       	rjmp	.+30     	; 0x3f66 <main+0xe2>
    3f48:	88 ec       	ldi	r24, 0xC8	; 200
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	9c 83       	std	Y+4, r25	; 0x04
    3f4e:	8b 83       	std	Y+3, r24	; 0x03
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	9c 81       	ldd	r25, Y+4	; 0x04
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	f1 f7       	brne	.-4      	; 0x3f54 <main+0xd0>
    3f58:	9c 83       	std	Y+4, r25	; 0x04
    3f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	9e 83       	std	Y+6, r25	; 0x06
    3f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f66:	8d 81       	ldd	r24, Y+5	; 0x05
    3f68:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6a:	00 97       	sbiw	r24, 0x00	; 0
    3f6c:	69 f7       	brne	.-38     	; 0x3f48 <main+0xc4>
    3f6e:	14 c0       	rjmp	.+40     	; 0x3f98 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f70:	6f 81       	ldd	r22, Y+7	; 0x07
    3f72:	78 85       	ldd	r23, Y+8	; 0x08
    3f74:	89 85       	ldd	r24, Y+9	; 0x09
    3f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	9e 83       	std	Y+6, r25	; 0x06
    3f82:	8d 83       	std	Y+5, r24	; 0x05
    3f84:	8d 81       	ldd	r24, Y+5	; 0x05
    3f86:	9e 81       	ldd	r25, Y+6	; 0x06
    3f88:	9a 83       	std	Y+2, r25	; 0x02
    3f8a:	89 83       	std	Y+1, r24	; 0x01
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <main+0x10c>
    3f94:	9a 83       	std	Y+2, r25	; 0x02
    3f96:	89 83       	std	Y+1, r24	; 0x01
			Timer0_init();
			DIO_SetPinDirection(DIO_PORTB,3,DIO_OUTPUT);//OC pin O/p
			Timer0_SetValue(125);
			while(1)
				{
					for(counter=0;counter<=255;counter++)
    3f98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f9a:	8f 5f       	subi	r24, 0xFF	; 255
    3f9c:	8f 87       	std	Y+15, r24	; 0x0f
    3f9e:	87 cf       	rjmp	.-242    	; 0x3eae <main+0x2a>

00003fa0 <__divmodsi4>:
    3fa0:	97 fb       	bst	r25, 7
    3fa2:	09 2e       	mov	r0, r25
    3fa4:	05 26       	eor	r0, r21
    3fa6:	0e d0       	rcall	.+28     	; 0x3fc4 <__divmodsi4_neg1>
    3fa8:	57 fd       	sbrc	r21, 7
    3faa:	04 d0       	rcall	.+8      	; 0x3fb4 <__divmodsi4_neg2>
    3fac:	14 d0       	rcall	.+40     	; 0x3fd6 <__udivmodsi4>
    3fae:	0a d0       	rcall	.+20     	; 0x3fc4 <__divmodsi4_neg1>
    3fb0:	00 1c       	adc	r0, r0
    3fb2:	38 f4       	brcc	.+14     	; 0x3fc2 <__divmodsi4_exit>

00003fb4 <__divmodsi4_neg2>:
    3fb4:	50 95       	com	r21
    3fb6:	40 95       	com	r20
    3fb8:	30 95       	com	r19
    3fba:	21 95       	neg	r18
    3fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3fbe:	4f 4f       	sbci	r20, 0xFF	; 255
    3fc0:	5f 4f       	sbci	r21, 0xFF	; 255

00003fc2 <__divmodsi4_exit>:
    3fc2:	08 95       	ret

00003fc4 <__divmodsi4_neg1>:
    3fc4:	f6 f7       	brtc	.-4      	; 0x3fc2 <__divmodsi4_exit>
    3fc6:	90 95       	com	r25
    3fc8:	80 95       	com	r24
    3fca:	70 95       	com	r23
    3fcc:	61 95       	neg	r22
    3fce:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    3fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd4:	08 95       	ret

00003fd6 <__udivmodsi4>:
    3fd6:	a1 e2       	ldi	r26, 0x21	; 33
    3fd8:	1a 2e       	mov	r1, r26
    3fda:	aa 1b       	sub	r26, r26
    3fdc:	bb 1b       	sub	r27, r27
    3fde:	fd 01       	movw	r30, r26
    3fe0:	0d c0       	rjmp	.+26     	; 0x3ffc <__udivmodsi4_ep>

00003fe2 <__udivmodsi4_loop>:
    3fe2:	aa 1f       	adc	r26, r26
    3fe4:	bb 1f       	adc	r27, r27
    3fe6:	ee 1f       	adc	r30, r30
    3fe8:	ff 1f       	adc	r31, r31
    3fea:	a2 17       	cp	r26, r18
    3fec:	b3 07       	cpc	r27, r19
    3fee:	e4 07       	cpc	r30, r20
    3ff0:	f5 07       	cpc	r31, r21
    3ff2:	20 f0       	brcs	.+8      	; 0x3ffc <__udivmodsi4_ep>
    3ff4:	a2 1b       	sub	r26, r18
    3ff6:	b3 0b       	sbc	r27, r19
    3ff8:	e4 0b       	sbc	r30, r20
    3ffa:	f5 0b       	sbc	r31, r21

00003ffc <__udivmodsi4_ep>:
    3ffc:	66 1f       	adc	r22, r22
    3ffe:	77 1f       	adc	r23, r23
    4000:	88 1f       	adc	r24, r24
    4002:	99 1f       	adc	r25, r25
    4004:	1a 94       	dec	r1
    4006:	69 f7       	brne	.-38     	; 0x3fe2 <__udivmodsi4_loop>
    4008:	60 95       	com	r22
    400a:	70 95       	com	r23
    400c:	80 95       	com	r24
    400e:	90 95       	com	r25
    4010:	9b 01       	movw	r18, r22
    4012:	ac 01       	movw	r20, r24
    4014:	bd 01       	movw	r22, r26
    4016:	cf 01       	movw	r24, r30
    4018:	08 95       	ret

0000401a <__prologue_saves__>:
    401a:	2f 92       	push	r2
    401c:	3f 92       	push	r3
    401e:	4f 92       	push	r4
    4020:	5f 92       	push	r5
    4022:	6f 92       	push	r6
    4024:	7f 92       	push	r7
    4026:	8f 92       	push	r8
    4028:	9f 92       	push	r9
    402a:	af 92       	push	r10
    402c:	bf 92       	push	r11
    402e:	cf 92       	push	r12
    4030:	df 92       	push	r13
    4032:	ef 92       	push	r14
    4034:	ff 92       	push	r15
    4036:	0f 93       	push	r16
    4038:	1f 93       	push	r17
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	ca 1b       	sub	r28, r26
    4044:	db 0b       	sbc	r29, r27
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	09 94       	ijmp

00004052 <__epilogue_restores__>:
    4052:	2a 88       	ldd	r2, Y+18	; 0x12
    4054:	39 88       	ldd	r3, Y+17	; 0x11
    4056:	48 88       	ldd	r4, Y+16	; 0x10
    4058:	5f 84       	ldd	r5, Y+15	; 0x0f
    405a:	6e 84       	ldd	r6, Y+14	; 0x0e
    405c:	7d 84       	ldd	r7, Y+13	; 0x0d
    405e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4060:	9b 84       	ldd	r9, Y+11	; 0x0b
    4062:	aa 84       	ldd	r10, Y+10	; 0x0a
    4064:	b9 84       	ldd	r11, Y+9	; 0x09
    4066:	c8 84       	ldd	r12, Y+8	; 0x08
    4068:	df 80       	ldd	r13, Y+7	; 0x07
    406a:	ee 80       	ldd	r14, Y+6	; 0x06
    406c:	fd 80       	ldd	r15, Y+5	; 0x05
    406e:	0c 81       	ldd	r16, Y+4	; 0x04
    4070:	1b 81       	ldd	r17, Y+3	; 0x03
    4072:	aa 81       	ldd	r26, Y+2	; 0x02
    4074:	b9 81       	ldd	r27, Y+1	; 0x01
    4076:	ce 0f       	add	r28, r30
    4078:	d1 1d       	adc	r29, r1
    407a:	0f b6       	in	r0, 0x3f	; 63
    407c:	f8 94       	cli
    407e:	de bf       	out	0x3e, r29	; 62
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	cd bf       	out	0x3d, r28	; 61
    4084:	ed 01       	movw	r28, r26
    4086:	08 95       	ret

00004088 <_exit>:
    4088:	f8 94       	cli

0000408a <__stop_program>:
    408a:	ff cf       	rjmp	.-2      	; 0x408a <__stop_program>
