
I2C_Test_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00005c3e  00005cd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800180  00800180  00005df2  2**0
                  ALLOC
  3 .stab         00006630  00000000  00000000  00005df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002fa0  00000000  00000000  0000c424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000f584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000f798  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00011daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00013278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00014584  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00014764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00014a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015485  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 37 10 	jmp	0x206e	; 0x206e <__vector_1>
       8:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__vector_2>
       c:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__vector_3>
      10:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_4>
      14:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_5>
      18:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_6>
      1c:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_7>
      20:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_8>
      24:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__vector_9>
      28:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_10>
      2c:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_11>
      30:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_12>
      34:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_13>
      38:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_14>
      3c:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_15>
      40:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fc e5       	ldi	r31, 0x5C	; 92
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <main>
      8a:	0c 94 1d 2e 	jmp	0x5c3a	; 0x5c3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e6 2d 	jmp	0x5bcc	; 0x5bcc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 02 2e 	jmp	0x5c04	; 0x5c04 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e6 2d 	jmp	0x5bcc	; 0x5bcc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 02 2e 	jmp	0x5c04	; 0x5c04 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ef 2d 	jmp	0x5bde	; 0x5bde <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 0b 2e 	jmp	0x5c16	; 0x5c16 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 12 2e 	jmp	0x5c24	; 0x5c24 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <USART_init>:
static void (*TXC_CallBackFunc)(void);
static void (*RXC_CallBackFunc)(void);
static void (*UDRE_CallBackFunc)(void);

void USART_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <USART_init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
   u16 UBBR_Temp = 0;
     ef4:	1a 82       	std	Y+2, r1	; 0x02
     ef6:	19 82       	std	Y+1, r1	; 0x01
	//Enable USART Mode
	#if defined USART_Tx_Only
	SET_BIT(UCSRB,TXEN);
     ef8:	aa e2       	ldi	r26, 0x2A	; 42
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ea e2       	ldi	r30, 0x2A	; 42
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	8c 93       	st	X, r24
	#elif defined USART_Rx_InterruptEnable
    SET_BIT(UCSRB,RXCIE);
	#elif defined USART_Tx_InterruptEnable
    SET_BIT(UCSRB,TXCIE);
	#elif defined USART_UDRE_InterruptEnable
    SET_BIT(UCSRB,UDRIE);
     f06:	aa e2       	ldi	r26, 0x2A	; 42
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea e2       	ldi	r30, 0x2A	; 42
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	8c 93       	st	X, r24
    SET_BIT(UCSRB,TXCIE);
    SET_BIT(UCSRB,UDRIE);
	#endif
    //ProcessorType
	#if defined USART_SingleProcessor
    CLEAR_BIT(UCSRA,MPCM);
     f14:	ab e2       	ldi	r26, 0x2B	; 43
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	eb e2       	ldi	r30, 0x2B	; 43
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8e 7f       	andi	r24, 0xFE	; 254
     f20:	8c 93       	st	X, r24
    SET_BIT(UCSRA,MPCM);
    #endif

    //OperationMode
    #if defined USART_Asynchronus_NormalSpeed
    UBBR_Temp=((f32)F_CPU) /((16.0)*(BaudRate))-0.5;
     f22:	83 e3       	ldi	r24, 0x33	; 51
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(UCSRC,URSEL);
     f2a:	a0 e4       	ldi	r26, 0x40	; 64
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e0 e4       	ldi	r30, 0x40	; 64
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 68       	ori	r24, 0x80	; 128
     f36:	8c 93       	st	X, r24
    SET_BIT(UCSRC,URSEL);
    SET_BIT(UCSRC,UMSEL);
	#endif

    //Set BaudRate Value in UBRR Register
    UBRRH = (u16)(UBBR_Temp>>8);
     f38:	e0 e4       	ldi	r30, 0x40	; 64
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	89 2f       	mov	r24, r25
     f42:	99 27       	eor	r25, r25
     f44:	80 83       	st	Z, r24
    UBRRL = (u8)UBBR_Temp;
     f46:	e9 e2       	ldi	r30, 0x29	; 41
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	80 83       	st	Z, r24

    //ClockPolarity
	#if defined USART_Recieve_Sample_OnFalling_Transmit_Sample_OnRising
    CLEAR_BIT(UCSRC,UCPOL);
	#elif defined USART_Recieve_Sample_OnRising_Transmit_Sample_OnFalling
    SET_BIT(UCSRC,UCPOL);
     f4e:	a0 e4       	ldi	r26, 0x40	; 64
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	8c 93       	st	X, r24
    #endif
    //ControlFrame
    //StopBit Number
    #if defined USART_Frame_1StopBit
    CLEAR_BIT(UCSRC,USBS);
     f5c:	a0 e4       	ldi	r26, 0x40	; 64
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e0 e4       	ldi	r30, 0x40	; 64
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	87 7f       	andi	r24, 0xF7	; 247
     f68:	8c 93       	st	X, r24
    #elif defined USART_Frame_2StopBit
    SET_BIT(UCSRC,USBS);
    #endif
    //Parity
    #if defined USART_Frame_DisableParity
    CLEAR_BIT(UCSRC,UPM0);
     f6a:	a0 e4       	ldi	r26, 0x40	; 64
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e0 e4       	ldi	r30, 0x40	; 64
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8f 7e       	andi	r24, 0xEF	; 239
     f76:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC,UPM1);
     f78:	a0 e4       	ldi	r26, 0x40	; 64
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e0 e4       	ldi	r30, 0x40	; 64
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 7d       	andi	r24, 0xDF	; 223
     f84:	8c 93       	st	X, r24
	#elif defined USART_7DataBit
    CLEAR_BIT(UCSRC,UCSZ0);
    SET_BIT(UCSRC,UCSZ1);
    CLEAR_BIT(UCSRC,UCSZ2);
	#elif defined USART_8DataBit
    SET_BIT(UCSRC,UCSZ0);
     f86:	a0 e4       	ldi	r26, 0x40	; 64
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e0 e4       	ldi	r30, 0x40	; 64
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	8c 93       	st	X, r24
    SET_BIT(UCSRC,UCSZ1);
     f94:	a0 e4       	ldi	r26, 0x40	; 64
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e0 e4       	ldi	r30, 0x40	; 64
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC,UCSZ2);
     fa2:	a0 e4       	ldi	r26, 0x40	; 64
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e0 e4       	ldi	r30, 0x40	; 64
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8b 7f       	andi	r24, 0xFB	; 251
     fae:	8c 93       	st	X, r24
    SET_BIT(UCSRC,UCSZ0);
    SET_BIT(UCSRC,UCSZ1);
    SET_BIT(UCSRC,UCSZ2);
    #endif

}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <USART_Transmit_Data_Polling>:

void USART_Transmit_Data_Polling(u8 Tx_Data)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01
	/* by using interrupt method when the UDRE ready and equal 1 start to transmit*/
	while(IS_BIT_CLEAR(UCSRA, UDRE));
     fc6:	eb e2       	ldi	r30, 0x2B	; 43
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	80 72       	andi	r24, 0x20	; 32
     fd2:	90 70       	andi	r25, 0x00	; 0
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	b9 f3       	breq	.-18     	; 0xfc6 <USART_Transmit_Data_Polling+0xc>
		#elif defined USART_6DataBit
		UDR = Tx_Data;
		#elif defined USART_7DataBit
		UDR = Tx_Data;
		#elif defined USART_8DataBit
		UDR = Tx_Data;
     fd8:	ec e2       	ldi	r30, 0x2C	; 44
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	80 83       	st	Z, r24
		/*Clear bit of TXB8 and select bit no of Data 9 and shifted it TXB8 bit*/
		UCSRB |= (UCSRB & CLEAR_TXB8) | ((Tx_Data&(Select_bit_9))>>Shift_No_from_9th_DataBit_to_TXB8_bit);
		/*Rest of 9 bit data stored in the UDR Register*/
		UDR = Tx_Data;
		#endif
}
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <USART_Receive_Data_Polling>:
STD_Return USART_Receive_Data_Polling(u8 *Rx_Data)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <USART_Receive_Data_Polling+0x6>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01

	while(IS_BIT_CLEAR(UCSRA,RXC));
     ff8:	eb e2       	ldi	r30, 0x2B	; 43
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	88 23       	and	r24, r24
    1000:	dc f7       	brge	.-10     	; 0xff8 <USART_Receive_Data_Polling+0x10>
		//Error found solve by users
			if ((IS_BIT_SET(UCSRA,FE))||(IS_BIT_SET(UCSRA,DOR))||(IS_BIT_SET(UCSRA,PE)))
    1002:	eb e2       	ldi	r30, 0x2B	; 43
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	80 71       	andi	r24, 0x10	; 16
    100e:	90 70       	andi	r25, 0x00	; 0
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	91 f4       	brne	.+36     	; 0x1038 <USART_Receive_Data_Polling+0x50>
    1014:	eb e2       	ldi	r30, 0x2B	; 43
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	88 70       	andi	r24, 0x08	; 8
    1020:	90 70       	andi	r25, 0x00	; 0
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	49 f4       	brne	.+18     	; 0x1038 <USART_Receive_Data_Polling+0x50>
    1026:	eb e2       	ldi	r30, 0x2B	; 43
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	84 70       	andi	r24, 0x04	; 4
    1032:	90 70       	andi	r25, 0x00	; 0
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	11 f0       	breq	.+4      	; 0x103c <USART_Receive_Data_Polling+0x54>
			{
				return E_OK;
    1038:	1b 82       	std	Y+3, r1	; 0x03
    103a:	08 c0       	rjmp	.+16     	; 0x104c <USART_Receive_Data_Polling+0x64>
					#elif defined USART_6DataBit
					*Rx_Data = UDR;
					#elif defined USART_7DataBit
					*Rx_Data = UDR;
					#elif defined USART_8DataBit
					*Rx_Data = UDR;
    103c:	ec e2       	ldi	r30, 0x2C	; 44
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	e9 81       	ldd	r30, Y+1	; 0x01
    1044:	fa 81       	ldd	r31, Y+2	; 0x02
    1046:	80 83       	st	Z, r24
					#elif defined USART_9DataBit
					*Rx_Data |= ((UCSRB&Select_bit_RXB8)<<Shift_No_from_RXB8_to_9th_DataBit);
					*Rx_Data |= UDR;
					#endif
	}
	return E_NOK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	8b 83       	std	Y+3, r24	; 0x03
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <USART_Transmit_Data_Interrupt>:

void USART_Transmit_Data_Interrupt(u8 Tx_Data)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
	#elif defined USART_6DataBit
	UDR = Tx_Data;
	#elif defined USART_7DataBit
	UDR = Tx_Data;
	#elif defined USART_8DataBit
	UDR = Tx_Data;
    1066:	ec e2       	ldi	r30, 0x2C	; 44
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	80 83       	st	Z, r24
	UCSRB |= (UCSRB & CLEAR_TXB8) | ((Tx_Data&(Select_bit_9))>>Shift_No_from_9th_DataBit_to_TXB8_bit);
	/*Rest of 9 bit data stored in the UDR Register*/
	UDR = Tx_Data;
	#endif

}
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <USART_Receive_Data_Interrupt>:
STD_Return USART_Receive_Data_Interrupt(u8 *Rx_Data)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <USART_Receive_Data_Interrupt+0x6>
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
		//Error found solve by users
			if ((IS_BIT_SET(UCSRA,FE))||(IS_BIT_SET(UCSRA,DOR))||(IS_BIT_SET(UCSRA,PE)))
    1086:	eb e2       	ldi	r30, 0x2B	; 43
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	80 71       	andi	r24, 0x10	; 16
    1092:	90 70       	andi	r25, 0x00	; 0
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	91 f4       	brne	.+36     	; 0x10bc <USART_Receive_Data_Interrupt+0x46>
    1098:	eb e2       	ldi	r30, 0x2B	; 43
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	88 70       	andi	r24, 0x08	; 8
    10a4:	90 70       	andi	r25, 0x00	; 0
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	49 f4       	brne	.+18     	; 0x10bc <USART_Receive_Data_Interrupt+0x46>
    10aa:	eb e2       	ldi	r30, 0x2B	; 43
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	84 70       	andi	r24, 0x04	; 4
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <USART_Receive_Data_Interrupt+0x4a>
			{
				return E_OK;
    10bc:	1b 82       	std	Y+3, r1	; 0x03
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <USART_Receive_Data_Interrupt+0x5a>
					#elif defined USART_6DataBit
					*Rx_Data = UDR;
					#elif defined USART_7DataBit
					*Rx_Data = UDR;
					#elif defined USART_8DataBit
					*Rx_Data = UDR;
    10c0:	ec e2       	ldi	r30, 0x2C	; 44
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	e9 81       	ldd	r30, Y+1	; 0x01
    10c8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
					#elif defined USART_9DataBit
					*Rx_Data |= ((UCSRB&Select_bit_RXB8)<<Shift_No_from_RXB8_to_9th_DataBit);
					*Rx_Data |= UDR;
					#endif
			}
	return E_NOK;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	8b 83       	std	Y+3, r24	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <TXC_Callback>:
void TXC_Callback(void(*Func_PTR)(void))
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <TXC_Callback+0x6>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	TXC_CallBackFunc = Func_PTR;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	90 93 81 01 	sts	0x0181, r25
    10f4:	80 93 80 01 	sts	0x0180, r24
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <__vector_15>:
ISR(USART_TXC_vect)
{
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	(*TXC_CallBackFunc)();
    112c:	e0 91 80 01 	lds	r30, 0x0180
    1130:	f0 91 81 01 	lds	r31, 0x0181
    1134:	09 95       	icall
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <RXC_Callback>:

void RXC_Callback(void(*Func_PTR)(void))
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <RXC_Callback+0x6>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	9a 83       	std	Y+2, r25	; 0x02
    1168:	89 83       	std	Y+1, r24	; 0x01
	RXC_CallBackFunc = Func_PTR;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	90 93 83 01 	sts	0x0183, r25
    1172:	80 93 82 01 	sts	0x0182, r24
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <__vector_13>:
ISR(USART_RXC_vect)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	(*RXC_CallBackFunc)();
    11aa:	e0 91 82 01 	lds	r30, 0x0182
    11ae:	f0 91 83 01 	lds	r31, 0x0183
    11b2:	09 95       	icall
}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <UDRE_Callback>:

void UDRE_Callback(void(*Func_PTR)(void))
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <UDRE_Callback+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
	UDRE_CallBackFunc = Func_PTR;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	90 93 85 01 	sts	0x0185, r25
    11f0:	80 93 84 01 	sts	0x0184, r24
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <__vector_14>:

ISR(USART_UDRE_vect)
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	(*UDRE_CallBackFunc)();
    1228:	e0 91 84 01 	lds	r30, 0x0184
    122c:	f0 91 85 01 	lds	r31, 0x0185
    1230:	09 95       	icall
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti

00001258 <Timer0_init>:
static void (*Timer1_ICU_CallBackFunc)(void);
static void (*Timer2_OVF_CallBack_Func)(void);
static void (*Timer2_CTC_CallBack_Func)(void);

void Timer0_init(void)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
						SET_BIT(TCCR0,COM00);
						SET_BIT(TCCR0,COM01);
		#endif

#elif  defined Timer0_Fast_PWM_Mode
		SET_BIT(TCCR0,WGM00);
    1260:	a3 e5       	ldi	r26, 0x53	; 83
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e3 e5       	ldi	r30, 0x53	; 83
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 64       	ori	r24, 0x40	; 64
    126c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    126e:	a3 e5       	ldi	r26, 0x53	; 83
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e3 e5       	ldi	r30, 0x53	; 83
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	88 60       	ori	r24, 0x08	; 8
    127a:	8c 93       	st	X, r24
		/*OC0 -> PINB3 in Atmega32*/
		#if defined Normal_PORT_Operation //OC0 Disconnected
				CLEAR_BIT(TCCR0,COM00);
				CLEAR_BIT(TCCR0,COM01);
		#elif defined ClearCompareMatch_SetTop_OCO	//Non_Inverted Mode
				CLEAR_BIT(TCCR0,COM00);
    127c:	a3 e5       	ldi	r26, 0x53	; 83
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e3 e5       	ldi	r30, 0x53	; 83
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8f 7e       	andi	r24, 0xEF	; 239
    1288:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
    128a:	a3 e5       	ldi	r26, 0x53	; 83
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e3 e5       	ldi	r30, 0x53	; 83
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_No_Prescaler
				SET_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
		#elif defined Timer0_CLK_8_Prescaler
				CLEAR_BIT(TCCR0,CS00);
    1298:	a3 e5       	ldi	r26, 0x53	; 83
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e3 e5       	ldi	r30, 0x53	; 83
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8e 7f       	andi	r24, 0xFE	; 254
    12a4:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    12a6:	a3 e5       	ldi	r26, 0x53	; 83
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e3 e5       	ldi	r30, 0x53	; 83
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
    12b4:	a3 e5       	ldi	r26, 0x53	; 83
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e3 e5       	ldi	r30, 0x53	; 83
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8b 7f       	andi	r24, 0xFB	; 251
    12c0:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_External_RisingEdge_CounterMode //On Pin T0
				SET_BIT(TCCR0,CS00);
				SET_BIT(TCCR0,CS01);
				SET_BIT(TCCR0,CS02);
		#endif
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <Timer0_SetValue>:
void Timer0_SetValue(u8 Value)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	0f 92       	push	r0
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer0_CTC_Timer_Mode
	OCR0 = Value; //Set Compare Output Value
#elif defined Timer0_PhaseCorrect_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer0_Fast_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
    12d4:	ec e5       	ldi	r30, 0x5C	; 92
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	80 83       	st	Z, r24
#endif
}
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <Timer0_CallBack>:

void Timer0_CallBack(void (*FUNC_PTR)(void))
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <Timer0_CallBack+0x6>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer0_Normal_Timer_Mode
		Timer0_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer0_CTC_Timer_Mode
		Timer0_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	Timer0_OVF_CallBack_Func();
    1326:	e0 91 86 01 	lds	r30, 0x0186
    132a:	f0 91 87 01 	lds	r31, 0x0187
    132e:	09 95       	icall
}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	ff 91       	pop	r31
    1336:	ef 91       	pop	r30
    1338:	bf 91       	pop	r27
    133a:	af 91       	pop	r26
    133c:	9f 91       	pop	r25
    133e:	8f 91       	pop	r24
    1340:	7f 91       	pop	r23
    1342:	6f 91       	pop	r22
    1344:	5f 91       	pop	r21
    1346:	4f 91       	pop	r20
    1348:	3f 91       	pop	r19
    134a:	2f 91       	pop	r18
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_CallBack_Func();
    1380:	e0 91 88 01 	lds	r30, 0x0188
    1384:	f0 91 89 01 	lds	r31, 0x0189
    1388:	09 95       	icall
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <Timer1_init>:


void Timer1_init(void)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	#elif defined Timer1_CLK_No_Prescaler
			SET_BIT(TCCR1B,CS10);
			CLEAR_BIT(TCCR1B,CS11);
			CLEAR_BIT(TCCR1B,CS12);
	#elif defined Timer1_CLK_8_Prescaler
			CLEAR_BIT(TCCR1B,CS10);
    13b8:	ae e4       	ldi	r26, 0x4E	; 78
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ee e4       	ldi	r30, 0x4E	; 78
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8e 7f       	andi	r24, 0xFE	; 254
    13c4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    13c6:	ae e4       	ldi	r26, 0x4E	; 78
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ee e4       	ldi	r30, 0x4E	; 78
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	82 60       	ori	r24, 0x02	; 2
    13d2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS12);
    13d4:	ae e4       	ldi	r26, 0x4E	; 78
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ee e4       	ldi	r30, 0x4E	; 78
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8b 7f       	andi	r24, 0xFB	; 251
    13e0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
	#endif

/*********************************WaveMode Generation Mode Selection************************************/
#if defined Timer1_Normal_Timer_Mode
				CLEAR_BIT(TCCR1A,WGM10);
    13e2:	af e4       	ldi	r26, 0x4F	; 79
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ef e4       	ldi	r30, 0x4F	; 79
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8e 7f       	andi	r24, 0xFE	; 254
    13ee:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    13f0:	af e4       	ldi	r26, 0x4F	; 79
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ef e4       	ldi	r30, 0x4F	; 79
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8d 7f       	andi	r24, 0xFD	; 253
    13fc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM12);
    13fe:	ae e4       	ldi	r26, 0x4E	; 78
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ee e4       	ldi	r30, 0x4E	; 78
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	87 7f       	andi	r24, 0xF7	; 247
    140a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    140c:	ae e4       	ldi	r26, 0x4E	; 78
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ee e4       	ldi	r30, 0x4E	; 78
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7e       	andi	r24, 0xEF	; 239
    1418:	8c 93       	st	X, r24
				SET_BIT(TIMSK,TOIE1);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	84 60       	ori	r24, 0x04	; 4
    1426:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
			CLEAR_BIT(TCCR1A,WGM11);
			SET_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
#endif
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <Timer1_SetValueChannelA>:

void Timer1_SetValueChannelA(u16 Value)	//to Set value of timer ChannelA
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <Timer1_SetValueChannelA+0x6>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
#if defined TIMER1_ChannelA
	#if defined Timer1_Normal_Timer_Mode
		TCNT1 = Value; //Set Overflow Value
    143c:	ec e4       	ldi	r30, 0x4C	; 76
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
		OCR1A = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelA
		OCR1A=Value;
	#endif
#endif
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <Timer1_SetValueChannelB>:
void Timer1_SetValueChannelB(u16 Value)	//to Set value of timer ChannelB
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <Timer1_SetValueChannelB+0x6>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelB
		OCR1B=Value;
	#endif
#endif
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <Timer1_ReadValueChannelA>:

void Timer1_ReadValueChannelA(u16 *value)	//to Read value of timer
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <Timer1_ReadValueChannelA+0x6>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
#if defined TIMER1_ChannelA
#if defined Timer1_Normal_Timer_Mode
	*value=TCNT1; //Set Overflow Value
    1478:	ec e4       	ldi	r30, 0x4C	; 76
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	80 83       	st	Z, r24
			*value=OCR1A;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
			*value=OCR1A;
#endif
#endif
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <Timer1_ReadValueChannelB>:

void Timer1_ReadValueChannelB(u16 *value)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <Timer1_ReadValueChannelB+0x6>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
	*value=OCR1B;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
	*value=OCR1B;
#endif
#endif
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <Timer1_ICU_EdgeSelection>:

STD_Return Timer1_ICU_EdgeSelection(ICU_Edge_Control_t State) //for Edge Selection which ICU will used
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <Timer1_ICU_EdgeSelection+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <Timer1_ICU_EdgeSelection+0x8>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3c 83       	std	Y+4, r19	; 0x04
    14c0:	2b 83       	std	Y+3, r18	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f0       	breq	.+26     	; 0x14e4 <Timer1_ICU_EdgeSelection+0x3a>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	21 30       	cpi	r18, 0x01	; 1
    14d0:	31 05       	cpc	r19, r1
    14d2:	81 f4       	brne	.+32     	; 0x14f4 <Timer1_ICU_EdgeSelection+0x4a>
	{
		case ICU_Rising_Edge:
			SET_BIT(TCCR1B,ICES1);
    14d4:	ae e4       	ldi	r26, 0x4E	; 78
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ee e4       	ldi	r30, 0x4E	; 78
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 64       	ori	r24, 0x40	; 64
    14e0:	8c 93       	st	X, r24
    14e2:	0a c0       	rjmp	.+20     	; 0x14f8 <Timer1_ICU_EdgeSelection+0x4e>
			break;
		case ICU_Falling_Edge:
			CLEAR_BIT(TCCR1B,ICES1);
    14e4:	ae e4       	ldi	r26, 0x4E	; 78
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ee e4       	ldi	r30, 0x4E	; 78
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7b       	andi	r24, 0xBF	; 191
    14f0:	8c 93       	st	X, r24
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <Timer1_ICU_EdgeSelection+0x4e>
			break;
		default:
			return E_OK;
    14f4:	1a 82       	std	Y+2, r1	; 0x02
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <Timer1_ICU_EdgeSelection+0x52>
	}
	return E_NOK;
    14f8:	31 e0       	ldi	r19, 0x01	; 1
    14fa:	3a 83       	std	Y+2, r19	; 0x02
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <Timer1_ICU_Interrupt>:
STD_Return Timer1_ICU_Interrupt(ICU_Interrupt_State State) //Enable or Disable ICU interrupt
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <Timer1_ICU_Interrupt+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <Timer1_ICU_Interrupt+0x8>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3c 83       	std	Y+4, r19	; 0x04
    1522:	2b 83       	std	Y+3, r18	; 0x03
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	31 f0       	breq	.+12     	; 0x1538 <Timer1_ICU_Interrupt+0x2c>
    152c:	2b 81       	ldd	r18, Y+3	; 0x03
    152e:	3c 81       	ldd	r19, Y+4	; 0x04
    1530:	21 30       	cpi	r18, 0x01	; 1
    1532:	31 05       	cpc	r19, r1
    1534:	49 f0       	breq	.+18     	; 0x1548 <Timer1_ICU_Interrupt+0x3c>
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <Timer1_ICU_Interrupt+0x4c>
	{
	//receive the ICU  result on the ICP pin => pin 6 portD
	case Enable_ICU_Interrupt:
		//Enable Input Capture Interrupt
		SET_BIT(TIMSK,TICIE1);
    1538:	a9 e5       	ldi	r26, 0x59	; 89
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e9 e5       	ldi	r30, 0x59	; 89
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 62       	ori	r24, 0x20	; 32
    1544:	8c 93       	st	X, r24
    1546:	0a c0       	rjmp	.+20     	; 0x155c <Timer1_ICU_Interrupt+0x50>
		break;
	case Disable_ICU_Interrupt:
		//disable Input Capture Interrupt
		CLEAR_BIT(TIMSK,TICIE1);
    1548:	a9 e5       	ldi	r26, 0x59	; 89
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e9 e5       	ldi	r30, 0x59	; 89
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8f 7d       	andi	r24, 0xDF	; 223
    1554:	8c 93       	st	X, r24
    1556:	02 c0       	rjmp	.+4      	; 0x155c <Timer1_ICU_Interrupt+0x50>
		break;
	default:
		return E_OK;
    1558:	1a 82       	std	Y+2, r1	; 0x02
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <Timer1_ICU_Interrupt+0x54>
	}
return E_NOK;
    155c:	31 e0       	ldi	r19, 0x01	; 1
    155e:	3a 83       	std	Y+2, r19	; 0x02
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <Timer1_SetICR1_TopValue>:

void Timer1_SetICR1_TopValue(u16 Top_Value) //ICR1
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Timer1_SetICR1_TopValue+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Top_Value;
    157e:	e6 e4       	ldi	r30, 0x46	; 70
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <Timer1_Read_ICR_Value>:

void Timer1_Read_ICR_Value(u16  *value)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <Timer1_Read_ICR_Value+0x6>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
	//Store value of InputCaptureRegister & get it back
	*value=ICR1;
    15a2:	e6 e4       	ldi	r30, 0x46	; 70
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	e9 81       	ldd	r30, Y+1	; 0x01
    15ac:	fa 81       	ldd	r31, Y+2	; 0x02
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <ICU_CallBack_Func>:
void ICU_CallBack_Func(void(*PTR_Func)(void))
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <ICU_CallBack_Func+0x6>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_CallBackFunc=PTR_Func;
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	90 93 91 01 	sts	0x0191, r25
    15d2:	80 93 90 01 	sts	0x0190, r24
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <Timer1_CallBack>:

void Timer1_CallBack(void (*FUNC_PTR)(void))
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <Timer1_CallBack+0x6>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer1_Normal_Timer_Mode
	Timer1_OVF_CallBack_Func = FUNC_PTR;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	90 93 8b 01 	sts	0x018B, r25
    15f6:	80 93 8a 01 	sts	0x018A, r24
		Timer1_CTC_A_CallBack_Func = FUNC_PTR;
	#elif defined TIMER1_ChannelB
		Timer1_CTC_B_CallBack_Func = FUNC_PTR;
	#endif
		#endif
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <__vector_9>:
//ISR of OVF
ISR(TIMER1_OVF_vect)
{
    1604:	1f 92       	push	r1
    1606:	0f 92       	push	r0
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	0f 92       	push	r0
    160c:	11 24       	eor	r1, r1
    160e:	2f 93       	push	r18
    1610:	3f 93       	push	r19
    1612:	4f 93       	push	r20
    1614:	5f 93       	push	r21
    1616:	6f 93       	push	r22
    1618:	7f 93       	push	r23
    161a:	8f 93       	push	r24
    161c:	9f 93       	push	r25
    161e:	af 93       	push	r26
    1620:	bf 93       	push	r27
    1622:	ef 93       	push	r30
    1624:	ff 93       	push	r31
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
	Timer1_OVF_CallBack_Func();
    162e:	e0 91 8a 01 	lds	r30, 0x018A
    1632:	f0 91 8b 01 	lds	r31, 0x018B
    1636:	09 95       	icall
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <__vector_7>:
//ISR of COMP_ChannelA
ISR(TIMER1_COMPA_vect)
{
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	2f 93       	push	r18
    166a:	3f 93       	push	r19
    166c:	4f 93       	push	r20
    166e:	5f 93       	push	r21
    1670:	6f 93       	push	r22
    1672:	7f 93       	push	r23
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	af 93       	push	r26
    167a:	bf 93       	push	r27
    167c:	ef 93       	push	r30
    167e:	ff 93       	push	r31
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_A_CallBack_Func();
    1688:	e0 91 8c 01 	lds	r30, 0x018C
    168c:	f0 91 8d 01 	lds	r31, 0x018D
    1690:	09 95       	icall
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_8>:
//ISR of COMP_ChannelB
ISR(TIMER1_COMPB_vect)
{
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	2f 93       	push	r18
    16c4:	3f 93       	push	r19
    16c6:	4f 93       	push	r20
    16c8:	5f 93       	push	r21
    16ca:	6f 93       	push	r22
    16cc:	7f 93       	push	r23
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
    16d6:	ef 93       	push	r30
    16d8:	ff 93       	push	r31
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_B_CallBack_Func();
    16e2:	e0 91 8e 01 	lds	r30, 0x018E
    16e6:	f0 91 8f 01 	lds	r31, 0x018F
    16ea:	09 95       	icall
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_6>:
//ISR of ICU
ISR(TIMER1_ICU_vect)
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	Timer1_ICU_CallBackFunc();
    173c:	e0 91 90 01 	lds	r30, 0x0190
    1740:	f0 91 91 01 	lds	r31, 0x0191
    1744:	09 95       	icall
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <Timer2_init>:
void Timer2_init(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
		#elif defined Timer2_CLK_External_RisingEdge_CounterMode //On Pin T2
				SET_BIT(TCCR2,CS20);
				SET_BIT(TCCR2,CS21);
				SET_BIT(TCCR2,CS22);
		#endif
}
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <Timer2_SetValue>:
void Timer2_SetValue(u8 Value)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer2_PhaseCorrect_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer2_Fast_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#endif
}
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <Timer2_CallBack>:

void Timer2_CallBack(void (*FUNC_PTR)(void))
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <Timer2_CallBack+0x6>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	9a 83       	std	Y+2, r25	; 0x02
    179a:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer2_Normal_Timer_Mode
		Timer2_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer2_CTC_Timer_Mode
		Timer2_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	2f 93       	push	r18
    17b2:	3f 93       	push	r19
    17b4:	4f 93       	push	r20
    17b6:	5f 93       	push	r21
    17b8:	6f 93       	push	r22
    17ba:	7f 93       	push	r23
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	af 93       	push	r26
    17c2:	bf 93       	push	r27
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	Timer2_OVF_CallBack_Func();
    17d0:	e0 91 92 01 	lds	r30, 0x0192
    17d4:	f0 91 93 01 	lds	r31, 0x0193
    17d8:	09 95       	icall
}
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	ff 91       	pop	r31
    17e0:	ef 91       	pop	r30
    17e2:	bf 91       	pop	r27
    17e4:	af 91       	pop	r26
    17e6:	9f 91       	pop	r25
    17e8:	8f 91       	pop	r24
    17ea:	7f 91       	pop	r23
    17ec:	6f 91       	pop	r22
    17ee:	5f 91       	pop	r21
    17f0:	4f 91       	pop	r20
    17f2:	3f 91       	pop	r19
    17f4:	2f 91       	pop	r18
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
	Timer2_CTC_CallBack_Func();
    182a:	e0 91 94 01 	lds	r30, 0x0194
    182e:	f0 91 95 01 	lds	r31, 0x0195
    1832:	09 95       	icall
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <SPI_init>:
#include "SPI.h"

static void (*STC_Callback_Func)(void);

void SPI_init(void)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(SPCR,SPE);
    1862:	ad e2       	ldi	r26, 0x2D	; 45
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	ed e2       	ldi	r30, 0x2D	; 45
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	80 64       	ori	r24, 0x40	; 64
    186e:	8c 93       	st	X, r24
	    #if defined DataOrder_MSB
	    CLEAR_BIT(SPCR,DORD);	//leave it cleared by default or CLEAR_BIT
	    #elif defined DataOrder_LSB
	    SET_BIT(SPCR,DORD);
    1870:	ad e2       	ldi	r26, 0x2D	; 45
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ed e2       	ldi	r30, 0x2D	; 45
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 62       	ori	r24, 0x20	; 32
    187c:	8c 93       	st	X, r24
	    #endif

	    #if defined SCK_FREQUENCY_4
	    //leave it cleared by default
	    #elif defined SCK_FREQUENCY_16
	    SET_BIT(SPCR,SPR0);
    187e:	ad e2       	ldi	r26, 0x2D	; 45
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ed e2       	ldi	r30, 0x2D	; 45
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	8c 93       	st	X, r24
	    SET_BIT(SPCR,SPR0);
	    SET_BIT(SPCR,SPR1);
	    #endif

	    #if defined Leading_Edge_Rising_Trailling_Edge_Falling
			CLEAR_BIT(SPCR,CPOL);
    188c:	ad e2       	ldi	r26, 0x2D	; 45
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ed e2       	ldi	r30, 0x2D	; 45
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	87 7f       	andi	r24, 0xF7	; 247
    1898:	8c 93       	st	X, r24
			SET_BIT(SPCR,CPOL);
		#endif

		//Clock phase selection
		#if defined Receive_First_Send_Second
			CLEAR_BIT(SPCR,CPHA);
    189a:	ad e2       	ldi	r26, 0x2D	; 45
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ed e2       	ldi	r30, 0x2D	; 45
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8b 7f       	andi	r24, 0xFB	; 251
    18a6:	8c 93       	st	X, r24
		#elif defined Send_First_Receive_Second
			SET_BIT(SPCR,CPHA);
		#endif
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <SPI_Interrupt_State>:

STD_Return SPI_Interrupt_State(SPI_Interrupt_State_t state)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <SPI_Interrupt_State+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <SPI_Interrupt_State+0x8>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3c 83       	std	Y+4, r19	; 0x04
    18c4:	2b 83       	std	Y+3, r18	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	31 f0       	breq	.+12     	; 0x18da <SPI_Interrupt_State+0x2c>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	21 30       	cpi	r18, 0x01	; 1
    18d4:	31 05       	cpc	r19, r1
    18d6:	49 f0       	breq	.+18     	; 0x18ea <SPI_Interrupt_State+0x3c>
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <SPI_Interrupt_State+0x4c>
		{
			case SPI_Interrupt_Enable:
				SET_BIT(SPCR,SPIE);
    18da:	ad e2       	ldi	r26, 0x2D	; 45
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ed e2       	ldi	r30, 0x2D	; 45
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	80 68       	ori	r24, 0x80	; 128
    18e6:	8c 93       	st	X, r24
    18e8:	0a c0       	rjmp	.+20     	; 0x18fe <SPI_Interrupt_State+0x50>
				break;
			case SPI_Interrupt_Disable:
				CLEAR_BIT(SPCR,SPIE);
    18ea:	ad e2       	ldi	r26, 0x2D	; 45
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ed e2       	ldi	r30, 0x2D	; 45
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 77       	andi	r24, 0x7F	; 127
    18f6:	8c 93       	st	X, r24
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <SPI_Interrupt_State+0x50>
				break;
			default:
		       return E_OK;
    18fa:	1a 82       	std	Y+2, r1	; 0x02
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <SPI_Interrupt_State+0x54>
		}
	return E_NOK;
    18fe:	31 e0       	ldi	r19, 0x01	; 1
    1900:	3a 83       	std	Y+2, r19	; 0x02
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <SPI_MasterSlave_Selection>:

STD_Return SPI_MasterSlave_Selection(SPI_Mode_Selection_t mode)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <SPI_MasterSlave_Selection+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <SPI_MasterSlave_Selection+0x8>
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3c 83       	std	Y+4, r19	; 0x04
    1928:	2b 83       	std	Y+3, r18	; 0x03
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	09 f1       	breq	.+66     	; 0x1974 <SPI_MasterSlave_Selection+0x62>
    1932:	2b 81       	ldd	r18, Y+3	; 0x03
    1934:	3c 81       	ldd	r19, Y+4	; 0x04
    1936:	21 30       	cpi	r18, 0x01	; 1
    1938:	31 05       	cpc	r19, r1
    193a:	c1 f5       	brne	.+112    	; 0x19ac <SPI_MasterSlave_Selection+0x9a>
		{

    		case SPI_MASTER:
				SET_BIT(SPCR,MSTR);
    193c:	ad e2       	ldi	r26, 0x2D	; 45
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	ed e2       	ldi	r30, 0x2D	; 45
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 61       	ori	r24, 0x10	; 16
    1948:	8c 93       	st	X, r24
				DIO_SetPinDirection(MISO_PORT,MISO_PIN,DIO_INPUT);
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	66 e0       	ldi	r22, 0x06	; 6
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				DIO_SetPinDirection(MOSI_PORT,MOSI_PIN,DIO_OUTPUT);
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	65 e0       	ldi	r22, 0x05	; 5
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				DIO_SetPinDirection(SCK_PORT,SCK_PIN,DIO_OUTPUT);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	67 e0       	ldi	r22, 0x07	; 7
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				/*to keep master is master must have always input high except that it will be slave*/
				DIO_EnablePullup(SS_PORT,SS_PIN,ENABLE_PullUp);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	64 e0       	ldi	r22, 0x04	; 4
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_EnablePullup>
    1972:	1e c0       	rjmp	.+60     	; 0x19b0 <SPI_MasterSlave_Selection+0x9e>

    				break;
			case SPI_SLAVE:
				CLEAR_BIT(SPCR,MSTR);
    1974:	ad e2       	ldi	r26, 0x2D	; 45
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ed e2       	ldi	r30, 0x2D	; 45
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8f 7e       	andi	r24, 0xEF	; 239
    1980:	8c 93       	st	X, r24
				DIO_SetPinDirection(MOSI_PORT,MOSI_PIN,DIO_INPUT);
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	65 e0       	ldi	r22, 0x05	; 5
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				DIO_SetPinDirection(SCK_PORT,SCK_PIN,DIO_INPUT);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	67 e0       	ldi	r22, 0x07	; 7
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				DIO_SetPinDirection(MISO_PORT,MISO_PIN,DIO_OUTPUT);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	66 e0       	ldi	r22, 0x06	; 6
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				/*to keep all slaves unselected till put on it LOW*/
				DIO_EnablePullup(SS_PORT,SS_PIN,ENABLE_PullUp);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	64 e0       	ldi	r22, 0x04	; 4
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_EnablePullup>
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <SPI_MasterSlave_Selection+0x9e>

				break;

			default:
				return E_OK;
    19ac:	1a 82       	std	Y+2, r1	; 0x02
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <SPI_MasterSlave_Selection+0xa2>
		}
	return E_NOK;
    19b0:	31 e0       	ldi	r19, 0x01	; 1
    19b2:	3a 83       	std	Y+2, r19	; 0x02
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <SPI_Transmit_Data_Polling>:


void SPI_Transmit_Data_Polling(u8 Trasnsmitted_Data)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	0f 92       	push	r0
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	89 83       	std	Y+1, r24	; 0x01
	SPDR= Trasnsmitted_Data;
    19d0:	ef e2       	ldi	r30, 0x2F	; 47
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	80 83       	st	Z, r24
	while (IS_BIT_CLEAR(SPSR, SPIF));
    19d8:	ee e2       	ldi	r30, 0x2E	; 46
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	88 23       	and	r24, r24
    19e0:	dc f7       	brge	.-10     	; 0x19d8 <SPI_Transmit_Data_Polling+0x14>

}
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <SPI_Receive_Data_Polling>:
void SPI_Receive_Data_Polling(u8 *Received_Data)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <SPI_Receive_Data_Polling+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
	while (IS_BIT_CLEAR(SPSR, SPIF));
    19f8:	ee e2       	ldi	r30, 0x2E	; 46
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	88 23       	and	r24, r24
    1a00:	dc f7       	brge	.-10     	; 0x19f8 <SPI_Receive_Data_Polling+0xe>
	*Received_Data=SPDR;
    1a02:	ef e2       	ldi	r30, 0x2F	; 47
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	80 83       	st	Z, r24
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <SPI_TranRec_Data>:

void SPI_TranRec_Data(u8 TransmitData,u8 *ReceiveData)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <SPI_TranRec_Data+0x6>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	7b 83       	std	Y+3, r23	; 0x03
    1a28:	6a 83       	std	Y+2, r22	; 0x02
	/*send data*/
	SPDR= TransmitData;
    1a2a:	ef e2       	ldi	r30, 0x2F	; 47
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	80 83       	st	Z, r24
	/*wait till transfer completed*/
	while (GET_BIT(SPSR, SPIF)==0);
    1a32:	ee e2       	ldi	r30, 0x2E	; 46
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	88 23       	and	r24, r24
    1a3a:	dc f7       	brge	.-10     	; 0x1a32 <SPI_TranRec_Data+0x1a>
	/*receive data*/
	*ReceiveData=SPDR;
    1a3c:	ef e2       	ldi	r30, 0x2F	; 47
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	ea 81       	ldd	r30, Y+2	; 0x02
    1a44:	fb 81       	ldd	r31, Y+3	; 0x03
    1a46:	80 83       	st	Z, r24
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <SPI_Transmit_Data_Interrupt>:

void SPI_Transmit_Data_Interrupt(u8 Trasnsmitted_Data)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	SPDR= Trasnsmitted_Data;
    1a60:	ef e2       	ldi	r30, 0x2F	; 47
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	80 83       	st	Z, r24
}
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <SPI_Receive_Data_Interrupt>:
void SPI_Receive_Data_Interrupt(u8 *Received_Data)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <SPI_Receive_Data_Interrupt+0x6>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	*Received_Data=SPDR;
    1a7e:	ef e2       	ldi	r30, 0x2F	; 47
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	e9 81       	ldd	r30, Y+1	; 0x01
    1a86:	fa 81       	ldd	r31, Y+2	; 0x02
    1a88:	80 83       	st	Z, r24
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <STC_Callback>:


void STC_Callback(void(*func_ptr)(void))
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <STC_Callback+0x6>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	STC_Callback_Func=func_ptr;
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa6:	90 93 97 01 	sts	0x0197, r25
    1aaa:	80 93 96 01 	sts	0x0196, r24
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <__vector_12>:

ISR(SPI_STC_vect)
{
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	(*STC_Callback_Func)();
    1ae2:	e0 91 96 01 	lds	r30, 0x0196
    1ae6:	f0 91 97 01 	lds	r31, 0x0197
    1aea:	09 95       	icall
}
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	ff 91       	pop	r31
    1af2:	ef 91       	pop	r30
    1af4:	bf 91       	pop	r27
    1af6:	af 91       	pop	r26
    1af8:	9f 91       	pop	r25
    1afa:	8f 91       	pop	r24
    1afc:	7f 91       	pop	r23
    1afe:	6f 91       	pop	r22
    1b00:	5f 91       	pop	r21
    1b02:	4f 91       	pop	r20
    1b04:	3f 91       	pop	r19
    1b06:	2f 91       	pop	r18
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	0f 90       	pop	r0
    1b0e:	1f 90       	pop	r1
    1b10:	18 95       	reti

00001b12 <I2C_init_Master>:
 *  Created on: Jul 6, 2022
 *      Author: Seko
 */
#include "I2C.h"
void I2C_init_Master(u8 TWBR_Value,u8 Address)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <I2C_init_Master+0x6>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	6a 83       	std	Y+2, r22	; 0x02
	/*Enable TWI*/
	SET_BIT(TWCR,TWEN);
    1b20:	a6 e5       	ldi	r26, 0x56	; 86
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e6 e5       	ldi	r30, 0x56	; 86
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	84 60       	ori	r24, 0x04	; 4
    1b2c:	8c 93       	st	X, r24
	/*Enable ACK*/
#if defined ACK_Enable
	SET_BIT(TWCR,TWEA);
    1b2e:	a6 e5       	ldi	r26, 0x56	; 86
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e6 e5       	ldi	r30, 0x56	; 86
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 64       	ori	r24, 0x40	; 64
    1b3a:	8c 93       	st	X, r24
#elif defined NACK_Enable
CLEAR_BIT(TWCR,TWEA);
	#endif
	#if defined Master_Prescaler_1
		CLEAR_BIT(TWSR,TWPS0);
    1b3c:	a1 e2       	ldi	r26, 0x21	; 33
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e1 e2       	ldi	r30, 0x21	; 33
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8e 7f       	andi	r24, 0xFE	; 254
    1b48:	8c 93       	st	X, r24
		CLEAR_BIT(TWSR,TWPS1);
    1b4a:	a1 e2       	ldi	r26, 0x21	; 33
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e1 e2       	ldi	r30, 0x21	; 33
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8d 7f       	andi	r24, 0xFD	; 253
    1b56:	8c 93       	st	X, r24
		SET_BIT(TWSR,TWPS1);
		#elif defined Master_Prescaler_64
		SET_BIT(TWSR,TWPS0);
		SET_BIT(TWSR,TWPS1);
	#endif
	TWBR = TWBR_Value; //Define the value from data sheet
    1b58:	e0 e2       	ldi	r30, 0x20	; 32
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	80 83       	st	Z, r24

	#if defined Master_Addressed
	/*write Address */
	TWAR=Address<<1;
    1b60:	e2 e2       	ldi	r30, 0x22	; 34
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	88 0f       	add	r24, r24
    1b68:	80 83       	st	Z, r24
	#elif defined  Master_Not_Addressed
	TWAR = 0;
	#endif

	#if defined I2C_Master_Not_Recognize_GeneralCall
	SET_BIT(TWAR,TWGCE);
    1b6a:	a2 e2       	ldi	r26, 0x22	; 34
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e2 e2       	ldi	r30, 0x22	; 34
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	81 60       	ori	r24, 0x01	; 1
    1b76:	8c 93       	st	X, r24
	#elif defined I2C_Master_Not_Recognize_GeneralCall
	CLEAR_BIT(TWAR,TWGCE);
	#endif
}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <I2C_init_Salve>:

/*TWI Initialize as a Salve*/

void I2C_init_Salve(u8 Address)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	0f 92       	push	r0
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	/*Enable TWI*/
	SET_BIT(TWCR,TWEN);
    1b8e:	a6 e5       	ldi	r26, 0x56	; 86
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e6 e5       	ldi	r30, 0x56	; 86
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	84 60       	ori	r24, 0x04	; 4
    1b9a:	8c 93       	st	X, r24

	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1b9c:	a6 e5       	ldi	r26, 0x56	; 86
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e6 e5       	ldi	r30, 0x56	; 86
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	80 64       	ori	r24, 0x40	; 64
    1ba8:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	/*Enable interrupt flag*/
	SET_BIT(TWCR,TWINT);
    1baa:	a6 e5       	ldi	r26, 0x56	; 86
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e6 e5       	ldi	r30, 0x56	; 86
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 68       	ori	r24, 0x80	; 128
    1bb6:	8c 93       	st	X, r24
	#if defined Slave_Addressed
	/*write Address */
	TWAR=Address<<1;
    1bb8:	e2 e2       	ldi	r30, 0x22	; 34
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	88 0f       	add	r24, r24
    1bc0:	80 83       	st	Z, r24
	#if defined I2C_Slave_Recognize_GeneralCall
	SET_BIT(TWAR,TWGCE);
	#elif define I2C_Slave_Not_Recognize_GeneralCall
	CLEAR_BIT(TWAR,TWGCE);
	#endif
}
    1bc2:	0f 90       	pop	r0
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <I2C_Start_Condtion_Polling>:

/*TWI Start condition*/
I2C_Error_States_t I2C_Start_Condtion_Polling(void)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	0f 92       	push	r0
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	/*send start condition*/
	SET_BIT(TWCR,TWSTA);
    1bd4:	a6 e5       	ldi	r26, 0x56	; 86
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e6 e5       	ldi	r30, 0x56	; 86
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	80 62       	ori	r24, 0x20	; 32
    1be0:	8c 93       	st	X, r24
	/*Clear  TWI flag*/
	SET_BIT(TWCR,TWINT);
    1be2:	a6 e5       	ldi	r26, 0x56	; 86
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e6 e5       	ldi	r30, 0x56	; 86
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	80 68       	ori	r24, 0x80	; 128
    1bee:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Raised*/
	while(GET_BIT(TWCR,TWINT)==0);
    1bf0:	e6 e5       	ldi	r30, 0x56	; 86
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	88 23       	and	r24, r24
    1bf8:	dc f7       	brge	.-10     	; 0x1bf0 <I2C_Start_Condtion_Polling+0x26>
	/*Check the operation statues of start condition*/
	if((TWSR&0xF8) != 0x08)
    1bfa:	e1 e2       	ldi	r30, 0x21	; 33
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	88 7f       	andi	r24, 0xF8	; 248
    1c06:	90 70       	andi	r25, 0x00	; 0
    1c08:	88 30       	cpi	r24, 0x08	; 8
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	19 f0       	breq	.+6      	; 0x1c14 <I2C_Start_Condtion_Polling+0x4a>
	{

		return I2C_StartCondition_Error;
    1c0e:	82 e0       	ldi	r24, 0x02	; 2
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <I2C_Start_Condtion_Polling+0x4c>
	}
	else
	{

		return I2C_NO_Error;
    1c14:	19 82       	std	Y+1, r1	; 0x01
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <I2C_RepeatedStart_Condtion_Polling>:
/*TWI Start Repeated Function*/
I2C_Error_States_t  I2C_RepeatedStart_Condtion_Polling(void)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	0f 92       	push	r0
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
		/*send start condition*/
		SET_BIT(TWCR,TWSTA);
    1c2a:	a6 e5       	ldi	r26, 0x56	; 86
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e6 e5       	ldi	r30, 0x56	; 86
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	80 62       	ori	r24, 0x20	; 32
    1c36:	8c 93       	st	X, r24
		/*Clear  TWI flag*/
		SET_BIT(TWCR,TWINT);
    1c38:	a6 e5       	ldi	r26, 0x56	; 86
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e6 e5       	ldi	r30, 0x56	; 86
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 68       	ori	r24, 0x80	; 128
    1c44:	8c 93       	st	X, r24
		/*wait until the operation finish and Flag Is Rasised*/
		while(GET_BIT(TWCR,TWINT)==0);
    1c46:	e6 e5       	ldi	r30, 0x56	; 86
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	88 23       	and	r24, r24
    1c4e:	dc f7       	brge	.-10     	; 0x1c46 <I2C_RepeatedStart_Condtion_Polling+0x26>
		/*Check the operation statues*/
		if((TWSR&0xF8) != 0x10)
    1c50:	e1 e2       	ldi	r30, 0x21	; 33
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	88 2f       	mov	r24, r24
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	88 7f       	andi	r24, 0xF8	; 248
    1c5c:	90 70       	andi	r25, 0x00	; 0
    1c5e:	80 31       	cpi	r24, 0x10	; 16
    1c60:	91 05       	cpc	r25, r1
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <I2C_RepeatedStart_Condtion_Polling+0x4a>
		{
			return I2C_RepeatedStartCondition_Error;
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <I2C_RepeatedStart_Condtion_Polling+0x4c>
		}
		else
		{
			return I2C_NO_Error;
    1c6a:	19 82       	std	Y+1, r1	; 0x01
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
		}
}
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <I2C_Slave_WriteAddress_Mode_Polling>:

/*TWI send  SLave Address with Write*/
I2C_Error_States_t I2C_Slave_WriteAddress_Mode_Polling(u8 SalveAddress)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <I2C_Slave_WriteAddress_Mode_Polling+0x6>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	89 83       	std	Y+1, r24	; 0x01
	TWDR &= ((SalveAddress<<1)|0);                    //Address and write instruction
    1c82:	a3 e2       	ldi	r26, 0x23	; 35
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e3 e2       	ldi	r30, 0x23	; 35
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	82 23       	and	r24, r18
    1c9a:	8c 93       	st	X, r24
	CLEAR_BIT(TWCR,TWSTA);
    1c9c:	a6 e5       	ldi	r26, 0x56	; 86
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e6 e5       	ldi	r30, 0x56	; 86
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8f 7d       	andi	r24, 0xDF	; 223
    1ca8:	8c 93       	st	X, r24

	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1caa:	a6 e5       	ldi	r26, 0x56	; 86
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e6 e5       	ldi	r30, 0x56	; 86
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 64       	ori	r24, 0x40	; 64
    1cb6:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	SET_BIT(TWCR,TWINT);
    1cb8:	a6 e5       	ldi	r26, 0x56	; 86
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e6 e5       	ldi	r30, 0x56	; 86
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 68       	ori	r24, 0x80	; 128
    1cc4:	8c 93       	st	X, r24
	while(GET_BIT(TWCR,TWINT)==0);               // Wait till complete TWDR byte transmitted
    1cc6:	e6 e5       	ldi	r30, 0x56	; 86
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	88 23       	and	r24, r24
    1cce:	dc f7       	brge	.-10     	; 0x1cc6 <I2C_Slave_WriteAddress_Mode_Polling+0x50>
#if defined Status_With_ACK
	/*Check the operation statuesSLA+W &ACK*/
	if(((TWSR)&(0xF8)) != (0x18))
    1cd0:	e1 e2       	ldi	r30, 0x21	; 33
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	88 7f       	andi	r24, 0xF8	; 248
    1cdc:	90 70       	andi	r25, 0x00	; 0
    1cde:	88 31       	cpi	r24, 0x18	; 24
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	19 f0       	breq	.+6      	; 0x1cea <I2C_Slave_WriteAddress_Mode_Polling+0x74>
	{
		return I2C_SlaveAddress_ACK_Write_Error;
    1ce4:	85 e0       	ldi	r24, 0x05	; 5
    1ce6:	8a 83       	std	Y+2, r24	; 0x02
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <I2C_Slave_WriteAddress_Mode_Polling+0x76>
	}
	else
	{
		return I2C_NO_Error;
    1cea:	1a 82       	std	Y+2, r1	; 0x02
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
		{
			return I2C_NO_Error;
			/*Do Nothing*/
		}
#endif
}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <I2C_Slave_ReadAddress_Mode_Polling>:

/*TWI send SLave Address with Read*/
I2C_Error_States_t I2C_Slave_ReadAddress_Mode_Polling(u8 SalveAddress)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <I2C_Slave_ReadAddress_Mode_Polling+0x6>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	89 83       	std	Y+1, r24	; 0x01
	/*Send Salve Address --> 7 Bit with Read */
	TWDR &= ((SalveAddress <<1)|	SET_BIT(TWDR,Read_Write_Pin));//Address and write instruction
    1d04:	23 e2       	ldi	r18, 0x23	; 35
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	e3 e2       	ldi	r30, 0x23	; 35
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	a3 e2       	ldi	r26, 0x23	; 35
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e3 e2       	ldi	r30, 0x23	; 35
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	81 60       	ori	r24, 0x01	; 1
    1d28:	8c 93       	st	X, r24
    1d2a:	8c 91       	ld	r24, X
    1d2c:	89 2b       	or	r24, r25
    1d2e:	84 23       	and	r24, r20
    1d30:	f9 01       	movw	r30, r18
    1d32:	80 83       	st	Z, r24
	/*Clear interrupt TWI Flag*/
	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1d34:	a6 e5       	ldi	r26, 0x56	; 86
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e6 e5       	ldi	r30, 0x56	; 86
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	80 64       	ori	r24, 0x40	; 64
    1d40:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	SET_BIT(TWCR,TWINT);
    1d42:	a6 e5       	ldi	r26, 0x56	; 86
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e6 e5       	ldi	r30, 0x56	; 86
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	80 68       	ori	r24, 0x80	; 128
    1d4e:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEN);
    1d50:	a6 e5       	ldi	r26, 0x56	; 86
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e6 e5       	ldi	r30, 0x56	; 86
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	84 60       	ori	r24, 0x04	; 4
    1d5c:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,TWINT)==0);
    1d5e:	e6 e5       	ldi	r30, 0x56	; 86
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	88 23       	and	r24, r24
    1d66:	dc f7       	brge	.-10     	; 0x1d5e <I2C_Slave_ReadAddress_Mode_Polling+0x66>
#if defined Status_With_ACK
	/*Check the operation statues ACK*/
	if((TWSR&0xF8) != 0x40)
    1d68:	e1 e2       	ldi	r30, 0x21	; 33
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 2f       	mov	r24, r24
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	88 7f       	andi	r24, 0xF8	; 248
    1d74:	90 70       	andi	r25, 0x00	; 0
    1d76:	80 34       	cpi	r24, 0x40	; 64
    1d78:	91 05       	cpc	r25, r1
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <I2C_Slave_ReadAddress_Mode_Polling+0x8a>
	{
		return I2C_SlaveAddress_ACK_Read_Error;
    1d7c:	f4 e0       	ldi	r31, 0x04	; 4
    1d7e:	fa 83       	std	Y+2, r31	; 0x02
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <I2C_Slave_ReadAddress_Mode_Polling+0x8c>
	else
	{
		/*Do Nothing*/
	}
#endif
	return I2C_NO_Error;
    1d82:	1a 82       	std	Y+2, r1	; 0x02
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <I2C_MasterWriteDataByte>:

/*TWI send data as a master*/
I2C_Error_States_t I2C_MasterWriteDataByte(u8 Data)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <I2C_MasterWriteDataByte+0x6>
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	/*Send Data */
	TWDR=Data;
    1d9c:	e3 e2       	ldi	r30, 0x23	; 35
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	80 83       	st	Z, r24
	/*Clear interrupt TWI Flag*/
	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1da4:	a6 e5       	ldi	r26, 0x56	; 86
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e6 e5       	ldi	r30, 0x56	; 86
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	80 64       	ori	r24, 0x40	; 64
    1db0:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	SET_BIT(TWCR,TWINT);
    1db2:	a6 e5       	ldi	r26, 0x56	; 86
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e6 e5       	ldi	r30, 0x56	; 86
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	80 68       	ori	r24, 0x80	; 128
    1dbe:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEN);
    1dc0:	a6 e5       	ldi	r26, 0x56	; 86
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e6 e5       	ldi	r30, 0x56	; 86
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	84 60       	ori	r24, 0x04	; 4
    1dcc:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,TWINT)==0);
    1dce:	e6 e5       	ldi	r30, 0x56	; 86
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	88 23       	and	r24, r24
    1dd6:	dc f7       	brge	.-10     	; 0x1dce <I2C_MasterWriteDataByte+0x3e>
#if defined Status_With_ACK
	/*Check the operation statues data transmit with ACK*/
	if((TWSR&0xF8) != 0x28)
    1dd8:	e1 e2       	ldi	r30, 0x21	; 33
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	88 7f       	andi	r24, 0xF8	; 248
    1de4:	90 70       	andi	r25, 0x00	; 0
    1de6:	88 32       	cpi	r24, 0x28	; 40
    1de8:	91 05       	cpc	r25, r1
    1dea:	19 f0       	breq	.+6      	; 0x1df2 <I2C_MasterWriteDataByte+0x62>
	{
		return I2C_MasterByte_ACK_Write_Error;
    1dec:	88 e0       	ldi	r24, 0x08	; 8
    1dee:	8a 83       	std	Y+2, r24	; 0x02
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <I2C_MasterWriteDataByte+0x64>
		else
		{
			/*Do Nothing*/
		}
#endif
	return I2C_NO_Error;
    1df2:	1a 82       	std	Y+2, r1	; 0x02
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <I2C_MasterReadDataByte>:

/*TWI read data as a master*/
I2C_Error_States_t I2C_MasterReadDataByte(u8 *Data)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <I2C_MasterReadDataByte+0x6>
    1e06:	0f 92       	push	r0
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
	/*Clear interrupt TWI Flag*/
	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1e10:	a6 e5       	ldi	r26, 0x56	; 86
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e6 e5       	ldi	r30, 0x56	; 86
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 64       	ori	r24, 0x40	; 64
    1e1c:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	SET_BIT(TWCR,TWINT);
    1e1e:	a6 e5       	ldi	r26, 0x56	; 86
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e6 e5       	ldi	r30, 0x56	; 86
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 68       	ori	r24, 0x80	; 128
    1e2a:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEN);
    1e2c:	a6 e5       	ldi	r26, 0x56	; 86
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e6 e5       	ldi	r30, 0x56	; 86
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	84 60       	ori	r24, 0x04	; 4
    1e38:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Raised*/
	while(GET_BIT(TWCR,TWINT)==0);
    1e3a:	e6 e5       	ldi	r30, 0x56	; 86
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 23       	and	r24, r24
    1e42:	dc f7       	brge	.-10     	; 0x1e3a <I2C_MasterReadDataByte+0x3a>
#if defined Status_With_ACK
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x50)
    1e44:	e1 e2       	ldi	r30, 0x21	; 33
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	88 7f       	andi	r24, 0xF8	; 248
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	80 35       	cpi	r24, 0x50	; 80
    1e54:	91 05       	cpc	r25, r1
    1e56:	19 f0       	breq	.+6      	; 0x1e5e <I2C_MasterReadDataByte+0x5e>
	{
		return I2C_MasterByte_ACK_Read_Error;
    1e58:	8a e0       	ldi	r24, 0x0A	; 10
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <I2C_MasterReadDataByte+0x6c>
	}
	else
	{
		*Data=TWDR;
    1e5e:	e3 e2       	ldi	r30, 0x23	; 35
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	80 83       	st	Z, r24
	else
	{
		*Data=TWDR;
	}
#endif
	return I2C_NO_Error;
    1e6a:	1b 82       	std	Y+3, r1	; 0x03
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <I2C_SalveListenToBus>:

/*Salve Listen to bus*/
I2C_Error_States_t I2C_SalveListenToBus(u8 *BusData)
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <I2C_SalveListenToBus+0x6>
    1e80:	0f 92       	push	r0
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	9a 83       	std	Y+2, r25	; 0x02
    1e88:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		/*wait until operation finish*/
		while(GET_BIT(TWCR,TWINT)==0);
    1e8a:	e6 e5       	ldi	r30, 0x56	; 86
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 23       	and	r24, r24
    1e92:	dc f7       	brge	.-10     	; 0x1e8a <I2C_SalveListenToBus+0x10>
		if((TWSR&0xF8) !=0x60)
    1e94:	e1 e2       	ldi	r30, 0x21	; 33
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	88 7f       	andi	r24, 0xF8	; 248
    1ea0:	90 70       	andi	r25, 0x00	; 0
    1ea2:	80 36       	cpi	r24, 0x60	; 96
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	19 f0       	breq	.+6      	; 0x1eae <I2C_SalveListenToBus+0x34>

		{
			return I2C_SlaveReceive_SLA_W_ACK_Error;
    1ea8:	81 e1       	ldi	r24, 0x11	; 17
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
    1eac:	1b c0       	rjmp	.+54     	; 0x1ee4 <I2C_SalveListenToBus+0x6a>
		}
		else
		{
		}
		/*Own SlA+R with ACK return slave transmit*/
		if((TWSR&0xF8) !=0xA8)
    1eae:	e1 e2       	ldi	r30, 0x21	; 33
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	88 7f       	andi	r24, 0xF8	; 248
    1eba:	90 70       	andi	r25, 0x00	; 0
    1ebc:	88 3a       	cpi	r24, 0xA8	; 168
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	19 f0       	breq	.+6      	; 0x1ec8 <I2C_SalveListenToBus+0x4e>
		{
			return 	I2C_SlaveReceive_SLA_R_ACK_Error;
    1ec2:	82 e1       	ldi	r24, 0x12	; 18
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    1ec6:	0e c0       	rjmp	.+28     	; 0x1ee4 <I2C_SalveListenToBus+0x6a>
		{

		}

		/*General Call with ACK return*/
		if((TWSR&0xF8) !=0x70)
    1ec8:	e1 e2       	ldi	r30, 0x21	; 33
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	88 7f       	andi	r24, 0xF8	; 248
    1ed4:	90 70       	andi	r25, 0x00	; 0
    1ed6:	80 37       	cpi	r24, 0x70	; 112
    1ed8:	91 05       	cpc	r25, r1
    1eda:	19 f0       	breq	.+6      	; 0x1ee2 <I2C_SalveListenToBus+0x68>
		{
			return I2C_Slave_Arbritration_Lost_GeneralCall_ACK_Error;
    1edc:	83 e1       	ldi	r24, 0x13	; 19
    1ede:	8b 83       	std	Y+3, r24	; 0x03
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <I2C_SalveListenToBus+0x6a>
		}
		else
		{

		}
		return I2C_NO_Error;
    1ee2:	1b 82       	std	Y+3, r1	; 0x03
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <I2C_SalveReceiveData>:

/*Salve Receive*/
I2C_Error_States_t I2C_SalveReceiveData(u8 *Data)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <I2C_SalveReceiveData+0x6>
    1ef8:	0f 92       	push	r0
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,TWEN);
    1f02:	a6 e5       	ldi	r26, 0x56	; 86
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e6 e5       	ldi	r30, 0x56	; 86
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	84 60       	ori	r24, 0x04	; 4
    1f0e:	8c 93       	st	X, r24
	/*Clear interrupt TWI Flag*/
	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1f10:	a6 e5       	ldi	r26, 0x56	; 86
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e6 e5       	ldi	r30, 0x56	; 86
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	80 64       	ori	r24, 0x40	; 64
    1f1c:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
SET_BIT(TWCR,TWINT);
    1f1e:	a6 e5       	ldi	r26, 0x56	; 86
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e6 e5       	ldi	r30, 0x56	; 86
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	80 68       	ori	r24, 0x80	; 128
    1f2a:	8c 93       	st	X, r24

	/*wait until operation End */
	while(GET_BIT(TWCR,TWINT)==0);
    1f2c:	e6 e5       	ldi	r30, 0x56	; 86
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	88 23       	and	r24, r24
    1f34:	dc f7       	brge	.-10     	; 0x1f2c <I2C_SalveReceiveData+0x3a>
	*Data = TWDR;
    1f36:	e3 e2       	ldi	r30, 0x23	; 35
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f40:	80 83       	st	Z, r24

#if defined Status_With_ACK
	/*check for received data with ACK*/
	if((TWSR&0xF8)!=0x80)
    1f42:	e1 e2       	ldi	r30, 0x21	; 33
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	88 7f       	andi	r24, 0xF8	; 248
    1f4e:	90 70       	andi	r25, 0x00	; 0
    1f50:	80 38       	cpi	r24, 0x80	; 128
    1f52:	91 05       	cpc	r25, r1
    1f54:	19 f0       	breq	.+6      	; 0x1f5c <I2C_SalveReceiveData+0x6a>
	{
		return I2C_SlaveByte_ACK_Read_Error;
    1f56:	8c e0       	ldi	r24, 0x0C	; 12
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    1f5a:	1b c0       	rjmp	.+54     	; 0x1f92 <I2C_SalveReceiveData+0xa0>
	}
	else
	{
		*Data = TWDR;
    1f5c:	e3 e2       	ldi	r30, 0x23	; 35
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	e9 81       	ldd	r30, Y+1	; 0x01
    1f64:	fa 81       	ldd	r31, Y+2	; 0x02
    1f66:	80 83       	st	Z, r24
	{
		*Data = TWDR;
	}
#endif
	/*Check For Stop condition*/
	if((TWSR&0xF8) !=0xA0)
    1f68:	e1 e2       	ldi	r30, 0x21	; 33
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	88 7f       	andi	r24, 0xF8	; 248
    1f74:	90 70       	andi	r25, 0x00	; 0
    1f76:	80 3a       	cpi	r24, 0xA0	; 160
    1f78:	91 05       	cpc	r25, r1
    1f7a:	19 f0       	breq	.+6      	; 0x1f82 <I2C_SalveReceiveData+0x90>
	{
		return I2C_StopCondition_Error;
    1f7c:	84 e1       	ldi	r24, 0x14	; 20
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
    1f80:	08 c0       	rjmp	.+16     	; 0x1f92 <I2C_SalveReceiveData+0xa0>
	}
	{
		/*Clear Flag*/
		SET_BIT(TWCR,TWINT);
    1f82:	a6 e5       	ldi	r26, 0x56	; 86
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e6 e5       	ldi	r30, 0x56	; 86
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	80 68       	ori	r24, 0x80	; 128
    1f8e:	8c 93       	st	X, r24
	}
	return I2C_NO_Error;
    1f90:	1b 82       	std	Y+3, r1	; 0x03
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <I2C_SalveWriteData>:


I2C_Error_States_t I2C_SalveWriteData(u8 Data)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <I2C_SalveWriteData+0x6>
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Data;
    1fac:	e3 e2       	ldi	r30, 0x23	; 35
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	80 83       	st	Z, r24
	/*Clear interrupt TWI Flag*/
	#if defined ACK_Enable
		SET_BIT(TWCR,TWEA);
    1fb4:	a6 e5       	ldi	r26, 0x56	; 86
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e6 e5       	ldi	r30, 0x56	; 86
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 64       	ori	r24, 0x40	; 64
    1fc0:	8c 93       	st	X, r24
	#elif defined NACK_Enable
	CLEAR_BIT(TWCR,TWEA);
		#endif
	SET_BIT(TWCR,TWINT);
    1fc2:	a6 e5       	ldi	r26, 0x56	; 86
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e6 e5       	ldi	r30, 0x56	; 86
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 68       	ori	r24, 0x80	; 128
    1fce:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEN);
    1fd0:	a6 e5       	ldi	r26, 0x56	; 86
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e6 e5       	ldi	r30, 0x56	; 86
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	84 60       	ori	r24, 0x04	; 4
    1fdc:	8c 93       	st	X, r24
	/*wait until operation End */
	while(GET_BIT(TWCR,TWINT)==0);
    1fde:	e6 e5       	ldi	r30, 0x56	; 86
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 23       	and	r24, r24
    1fe6:	dc f7       	brge	.-10     	; 0x1fde <I2C_SalveWriteData+0x3e>
	/*Check For Repeated Start*/
	if((TWSR&0xF8) !=0xA0)
    1fe8:	e1 e2       	ldi	r30, 0x21	; 33
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	88 7f       	andi	r24, 0xF8	; 248
    1ff4:	90 70       	andi	r25, 0x00	; 0
    1ff6:	80 3a       	cpi	r24, 0xA0	; 160
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	19 f0       	breq	.+6      	; 0x2002 <I2C_SalveWriteData+0x62>
	{
		return I2C_RepeatedStartCondition_Error;
    1ffc:	83 e0       	ldi	r24, 0x03	; 3
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	08 c0       	rjmp	.+16     	; 0x2012 <I2C_SalveWriteData+0x72>
	}
	else
	{
		/*Clear Flag*/
		SET_BIT(TWCR,TWINT);
    2002:	a6 e5       	ldi	r26, 0x56	; 86
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e6 e5       	ldi	r30, 0x56	; 86
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	80 68       	ori	r24, 0x80	; 128
    200e:	8c 93       	st	X, r24
		return I2C_NO_Error;
    2010:	1a 82       	std	Y+2, r1	; 0x02
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
		return I2C_NO_Error;
	}

#endif
	return I2C_NO_Error;
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <I2C_Stop_Condtion_Polling>:

/*TWI Stop condition*/
void I2C_Stop_Condtion_Polling(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
	/*Send Stop Condition*/
	SET_BIT(TWCR,TWSTO);
    2026:	a6 e5       	ldi	r26, 0x56	; 86
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e6 e5       	ldi	r30, 0x56	; 86
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 61       	ori	r24, 0x10	; 16
    2032:	8c 93       	st	X, r24
	/*Clear TWI  interrupt flag*/
	SET_BIT(TWCR,TWINT);
    2034:	a6 e5       	ldi	r26, 0x56	; 86
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e6 e5       	ldi	r30, 0x56	; 86
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	80 68       	ori	r24, 0x80	; 128
    2040:	8c 93       	st	X, r24
}
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <I2C_Status_Check>:


void I2C_Status_Check(u8 *Status)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <I2C_Status_Check+0x6>
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
	*Status = (TWSR & (0XF8));
    2056:	e1 e2       	ldi	r30, 0x21	; 33
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	88 7f       	andi	r24, 0xF8	; 248
    205e:	e9 81       	ldd	r30, Y+1	; 0x01
    2060:	fa 81       	ldd	r31, Y+2	; 0x02
    2062:	80 83       	st	Z, r24
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <__vector_1>:
static void (*External_Function0)(void);
static void (*External_Function1)(void);
static void (*External_Function2)(void);
/****************************************ISR for INT0*************************************************/
ISR(INT0_Vect)
{
    206e:	1f 92       	push	r1
    2070:	0f 92       	push	r0
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	0f 92       	push	r0
    2076:	11 24       	eor	r1, r1
    2078:	2f 93       	push	r18
    207a:	3f 93       	push	r19
    207c:	4f 93       	push	r20
    207e:	5f 93       	push	r21
    2080:	6f 93       	push	r22
    2082:	7f 93       	push	r23
    2084:	8f 93       	push	r24
    2086:	9f 93       	push	r25
    2088:	af 93       	push	r26
    208a:	bf 93       	push	r27
    208c:	ef 93       	push	r30
    208e:	ff 93       	push	r31
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	(*External_Function0)();
    2098:	e0 91 98 01 	lds	r30, 0x0198
    209c:	f0 91 99 01 	lds	r31, 0x0199
    20a0:	09 95       	icall
}
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	ff 91       	pop	r31
    20a8:	ef 91       	pop	r30
    20aa:	bf 91       	pop	r27
    20ac:	af 91       	pop	r26
    20ae:	9f 91       	pop	r25
    20b0:	8f 91       	pop	r24
    20b2:	7f 91       	pop	r23
    20b4:	6f 91       	pop	r22
    20b6:	5f 91       	pop	r21
    20b8:	4f 91       	pop	r20
    20ba:	3f 91       	pop	r19
    20bc:	2f 91       	pop	r18
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f 90       	pop	r0
    20c4:	1f 90       	pop	r1
    20c6:	18 95       	reti

000020c8 <__vector_2>:
/****************************************ISR for INT1*************************************************/
ISR(INT1_Vect)
{
    20c8:	1f 92       	push	r1
    20ca:	0f 92       	push	r0
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	0f 92       	push	r0
    20d0:	11 24       	eor	r1, r1
    20d2:	2f 93       	push	r18
    20d4:	3f 93       	push	r19
    20d6:	4f 93       	push	r20
    20d8:	5f 93       	push	r21
    20da:	6f 93       	push	r22
    20dc:	7f 93       	push	r23
    20de:	8f 93       	push	r24
    20e0:	9f 93       	push	r25
    20e2:	af 93       	push	r26
    20e4:	bf 93       	push	r27
    20e6:	ef 93       	push	r30
    20e8:	ff 93       	push	r31
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
	(*External_Function1)();
    20f2:	e0 91 9a 01 	lds	r30, 0x019A
    20f6:	f0 91 9b 01 	lds	r31, 0x019B
    20fa:	09 95       	icall
}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	ff 91       	pop	r31
    2102:	ef 91       	pop	r30
    2104:	bf 91       	pop	r27
    2106:	af 91       	pop	r26
    2108:	9f 91       	pop	r25
    210a:	8f 91       	pop	r24
    210c:	7f 91       	pop	r23
    210e:	6f 91       	pop	r22
    2110:	5f 91       	pop	r21
    2112:	4f 91       	pop	r20
    2114:	3f 91       	pop	r19
    2116:	2f 91       	pop	r18
    2118:	0f 90       	pop	r0
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	0f 90       	pop	r0
    211e:	1f 90       	pop	r1
    2120:	18 95       	reti

00002122 <__vector_3>:
/****************************************ISR for INT2*************************************************/
ISR(INT2_Vect)
{
    2122:	1f 92       	push	r1
    2124:	0f 92       	push	r0
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	0f 92       	push	r0
    212a:	11 24       	eor	r1, r1
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	ef 93       	push	r30
    2142:	ff 93       	push	r31
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
	(*External_Function2)();
    214c:	e0 91 9c 01 	lds	r30, 0x019C
    2150:	f0 91 9d 01 	lds	r31, 0x019D
    2154:	09 95       	icall
}
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	ff 91       	pop	r31
    215c:	ef 91       	pop	r30
    215e:	bf 91       	pop	r27
    2160:	af 91       	pop	r26
    2162:	9f 91       	pop	r25
    2164:	8f 91       	pop	r24
    2166:	7f 91       	pop	r23
    2168:	6f 91       	pop	r22
    216a:	5f 91       	pop	r21
    216c:	4f 91       	pop	r20
    216e:	3f 91       	pop	r19
    2170:	2f 91       	pop	r18
    2172:	0f 90       	pop	r0
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	0f 90       	pop	r0
    2178:	1f 90       	pop	r1
    217a:	18 95       	reti

0000217c <Enable_Global_Interrupt>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return Enable_Global_Interrupt(Global_Interrupt_State_t state)
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	00 d0       	rcall	.+0      	; 0x2182 <Enable_Global_Interrupt+0x6>
    2182:	00 d0       	rcall	.+0      	; 0x2184 <Enable_Global_Interrupt+0x8>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	3c 83       	std	Y+4, r19	; 0x04
    2192:	2b 83       	std	Y+3, r18	; 0x03
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	31 f0       	breq	.+12     	; 0x21a8 <Enable_Global_Interrupt+0x2c>
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	21 30       	cpi	r18, 0x01	; 1
    21a2:	31 05       	cpc	r19, r1
    21a4:	49 f0       	breq	.+18     	; 0x21b8 <Enable_Global_Interrupt+0x3c>
    21a6:	10 c0       	rjmp	.+32     	; 0x21c8 <Enable_Global_Interrupt+0x4c>
		{
			case Enable_GIE_Interrupt:
				SET_BIT(SREG,GIE);
    21a8:	af e5       	ldi	r26, 0x5F	; 95
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	ef e5       	ldi	r30, 0x5F	; 95
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	80 68       	ori	r24, 0x80	; 128
    21b4:	8c 93       	st	X, r24
    21b6:	0a c0       	rjmp	.+20     	; 0x21cc <Enable_Global_Interrupt+0x50>
				break;
			case Disable_GIE_Interrupt:
				CLEAR_BIT(SREG,GIE);
    21b8:	af e5       	ldi	r26, 0x5F	; 95
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	ef e5       	ldi	r30, 0x5F	; 95
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	8f 77       	andi	r24, 0x7F	; 127
    21c4:	8c 93       	st	X, r24
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <Enable_Global_Interrupt+0x50>
				break;
			default:
				return E_OK;
    21c8:	1a 82       	std	Y+2, r1	; 0x02
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <Enable_Global_Interrupt+0x54>
		}
	return E_NOK;
    21cc:	31 e0       	ldi	r19, 0x01	; 1
    21ce:	3a 83       	std	Y+2, r19	; 0x02
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <Enable_External_INT0>:
/*****************************************************************************************************/
STD_Return Enable_External_INT0(Peripheral_Interrupt_State_t State)
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <Enable_External_INT0+0x6>
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <Enable_External_INT0+0x8>
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	3c 83       	std	Y+4, r19	; 0x04
    21f6:	2b 83       	std	Y+3, r18	; 0x03
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	31 f0       	breq	.+12     	; 0x220c <Enable_External_INT0+0x2c>
    2200:	2b 81       	ldd	r18, Y+3	; 0x03
    2202:	3c 81       	ldd	r19, Y+4	; 0x04
    2204:	21 30       	cpi	r18, 0x01	; 1
    2206:	31 05       	cpc	r19, r1
    2208:	49 f0       	breq	.+18     	; 0x221c <Enable_External_INT0+0x3c>
    220a:	10 c0       	rjmp	.+32     	; 0x222c <Enable_External_INT0+0x4c>
	{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT0);
    220c:	ab e5       	ldi	r26, 0x5B	; 91
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	eb e5       	ldi	r30, 0x5B	; 91
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	80 64       	ori	r24, 0x40	; 64
    2218:	8c 93       	st	X, r24
    221a:	0a c0       	rjmp	.+20     	; 0x2230 <Enable_External_INT0+0x50>

	break;
	case Disable_PIE_Interrupt:
		CLEAR_BIT(GICR,INT0);
    221c:	ab e5       	ldi	r26, 0x5B	; 91
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	eb e5       	ldi	r30, 0x5B	; 91
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8f 7b       	andi	r24, 0xBF	; 191
    2228:	8c 93       	st	X, r24
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <Enable_External_INT0+0x50>
	break;
	default:
		return E_OK;
    222c:	1a 82       	std	Y+2, r1	; 0x02
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <Enable_External_INT0+0x54>
	}
	return E_NOK;
    2230:	31 e0       	ldi	r19, 0x01	; 1
    2232:	3a 83       	std	Y+2, r19	; 0x02
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <External_Int0_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int0_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <External_Int0_EdgeSelection+0x6>
    224a:	00 d0       	rcall	.+0      	; 0x224c <External_Int0_EdgeSelection+0x8>
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	89 83       	std	Y+1, r24	; 0x01
			switch(SenseLevel)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3c 83       	std	Y+4, r19	; 0x04
    225a:	2b 83       	std	Y+3, r18	; 0x03
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	a1 f0       	breq	.+40     	; 0x228c <External_Int0_EdgeSelection+0x48>
    2264:	2b 81       	ldd	r18, Y+3	; 0x03
    2266:	3c 81       	ldd	r19, Y+4	; 0x04
    2268:	21 30       	cpi	r18, 0x01	; 1
    226a:	31 05       	cpc	r19, r1
    226c:	f1 f4       	brne	.+60     	; 0x22aa <External_Int0_EdgeSelection+0x66>
				{
					case Rising_Edge_Sense:
							SET_BIT(MCUCR,ISC00);
    226e:	a5 e5       	ldi	r26, 0x55	; 85
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e5 e5       	ldi	r30, 0x55	; 85
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	81 60       	ori	r24, 0x01	; 1
    227a:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    227c:	a5 e5       	ldi	r26, 0x55	; 85
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e5 e5       	ldi	r30, 0x55	; 85
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	82 60       	ori	r24, 0x02	; 2
    2288:	8c 93       	st	X, r24
    228a:	11 c0       	rjmp	.+34     	; 0x22ae <External_Int0_EdgeSelection+0x6a>
							break;
					case Falling_Edge_Sense:
							CLEAR_BIT(MCUCR,ISC00);
    228c:	a5 e5       	ldi	r26, 0x55	; 85
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e5 e5       	ldi	r30, 0x55	; 85
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	8e 7f       	andi	r24, 0xFE	; 254
    2298:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC01);
    229a:	a5 e5       	ldi	r26, 0x55	; 85
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e5 e5       	ldi	r30, 0x55	; 85
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	82 60       	ori	r24, 0x02	; 2
    22a6:	8c 93       	st	X, r24
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <External_Int0_EdgeSelection+0x6a>
							break;
					default:
						return E_OK;
    22aa:	1a 82       	std	Y+2, r1	; 0x02
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <External_Int0_EdgeSelection+0x6e>
				}
	return E_NOK;
    22ae:	31 e0       	ldi	r19, 0x01	; 1
    22b0:	3a 83       	std	Y+2, r19	; 0x02
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <CallBack_Int0>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int0(void (*Func_Ptr)(void))
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <CallBack_Int0+0x6>
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	89 83       	std	Y+1, r24	; 0x01
	External_Function0=Func_Ptr;
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	9a 81       	ldd	r25, Y+2	; 0x02
    22d4:	90 93 99 01 	sts	0x0199, r25
    22d8:	80 93 98 01 	sts	0x0198, r24
	return E_NOK;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <Enable_External_INT1>:
/*****************************************************************************************************/
STD_Return Enable_External_INT1(Peripheral_Interrupt_State_t State)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <Enable_External_INT1+0x6>
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <Enable_External_INT1+0x8>
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	3c 83       	std	Y+4, r19	; 0x04
    22fe:	2b 83       	std	Y+3, r18	; 0x03
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	31 f0       	breq	.+12     	; 0x2314 <Enable_External_INT1+0x2c>
    2308:	2b 81       	ldd	r18, Y+3	; 0x03
    230a:	3c 81       	ldd	r19, Y+4	; 0x04
    230c:	21 30       	cpi	r18, 0x01	; 1
    230e:	31 05       	cpc	r19, r1
    2310:	49 f0       	breq	.+18     	; 0x2324 <Enable_External_INT1+0x3c>
    2312:	10 c0       	rjmp	.+32     	; 0x2334 <Enable_External_INT1+0x4c>
		{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT1);
    2314:	ab e5       	ldi	r26, 0x5B	; 91
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	eb e5       	ldi	r30, 0x5B	; 91
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	80 68       	ori	r24, 0x80	; 128
    2320:	8c 93       	st	X, r24
    2322:	0a c0       	rjmp	.+20     	; 0x2338 <Enable_External_INT1+0x50>
		break;
		case Disable_PIE_Interrupt:
			CLEAR_BIT(GICR,INT1);
    2324:	ab e5       	ldi	r26, 0x5B	; 91
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	eb e5       	ldi	r30, 0x5B	; 91
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	8f 77       	andi	r24, 0x7F	; 127
    2330:	8c 93       	st	X, r24
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <Enable_External_INT1+0x50>
		break;
		default:
			return E_OK;
    2334:	1a 82       	std	Y+2, r1	; 0x02
    2336:	02 c0       	rjmp	.+4      	; 0x233c <Enable_External_INT1+0x54>
		}
	return E_NOK;
    2338:	31 e0       	ldi	r19, 0x01	; 1
    233a:	3a 83       	std	Y+2, r19	; 0x02
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <External_Int1_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int1_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <External_Int1_EdgeSelection+0x6>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <External_Int1_EdgeSelection+0x8>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	3c 83       	std	Y+4, r19	; 0x04
    2362:	2b 83       	std	Y+3, r18	; 0x03
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	b1 f0       	breq	.+44     	; 0x2398 <External_Int1_EdgeSelection+0x4c>
    236c:	2b 81       	ldd	r18, Y+3	; 0x03
    236e:	3c 81       	ldd	r19, Y+4	; 0x04
    2370:	21 30       	cpi	r18, 0x01	; 1
    2372:	31 05       	cpc	r19, r1
    2374:	11 f5       	brne	.+68     	; 0x23ba <External_Int1_EdgeSelection+0x6e>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCR,ISC10);
    2376:	a5 e5       	ldi	r26, 0x55	; 85
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e5 e5       	ldi	r30, 0x55	; 85
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	84 60       	ori	r24, 0x04	; 4
    2382:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    2384:	a5 e5       	ldi	r26, 0x55	; 85
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e5 e5       	ldi	r30, 0x55	; 85
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	88 60       	ori	r24, 0x08	; 8
    2390:	8c 93       	st	X, r24
								return E_NOK;
    2392:	31 e0       	ldi	r19, 0x01	; 1
    2394:	3a 83       	std	Y+2, r19	; 0x02
    2396:	12 c0       	rjmp	.+36     	; 0x23bc <External_Int1_EdgeSelection+0x70>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCR,ISC10);
    2398:	a5 e5       	ldi	r26, 0x55	; 85
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e5 e5       	ldi	r30, 0x55	; 85
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8b 7f       	andi	r24, 0xFB	; 251
    23a4:	8c 93       	st	X, r24
								SET_BIT(MCUCR,ISC11);
    23a6:	a5 e5       	ldi	r26, 0x55	; 85
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e5 e5       	ldi	r30, 0x55	; 85
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	88 60       	ori	r24, 0x08	; 8
    23b2:	8c 93       	st	X, r24
								return E_NOK;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	8a 83       	std	Y+2, r24	; 0x02
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <External_Int1_EdgeSelection+0x70>
								break;
						default:
							return E_OK;
    23ba:	1a 82       	std	Y+2, r1	; 0x02
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
					}
		return E_NOK;
}
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <CallBack_Int1>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int1(void (*Func_Ptr)(void))
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <CallBack_Int1+0x6>
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
	External_Function1=Func_Ptr;
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	90 93 9b 01 	sts	0x019B, r25
    23e2:	80 93 9a 01 	sts	0x019A, r24
	return E_NOK;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
}
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <Enable_External_INT2>:
/*****************************************************************************************************/

STD_Return Enable_External_INT2(Peripheral_Interrupt_State_t State)
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <Enable_External_INT2+0x6>
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <Enable_External_INT2+0x8>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	3c 83       	std	Y+4, r19	; 0x04
    2408:	2b 83       	std	Y+3, r18	; 0x03
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	31 f0       	breq	.+12     	; 0x241e <Enable_External_INT2+0x2c>
    2412:	2b 81       	ldd	r18, Y+3	; 0x03
    2414:	3c 81       	ldd	r19, Y+4	; 0x04
    2416:	21 30       	cpi	r18, 0x01	; 1
    2418:	31 05       	cpc	r19, r1
    241a:	49 f0       	breq	.+18     	; 0x242e <Enable_External_INT2+0x3c>
    241c:	10 c0       	rjmp	.+32     	; 0x243e <Enable_External_INT2+0x4c>
		{
			case Enable_PIE_Interrupt:
				SET_BIT(GICR,INT2);
    241e:	ab e5       	ldi	r26, 0x5B	; 91
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	eb e5       	ldi	r30, 0x5B	; 91
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	80 62       	ori	r24, 0x20	; 32
    242a:	8c 93       	st	X, r24
    242c:	0a c0       	rjmp	.+20     	; 0x2442 <Enable_External_INT2+0x50>
				break;
				case Disable_PIE_Interrupt:
					CLEAR_BIT(GICR,INT1);
    242e:	ab e5       	ldi	r26, 0x5B	; 91
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	eb e5       	ldi	r30, 0x5B	; 91
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	8f 77       	andi	r24, 0x7F	; 127
    243a:	8c 93       	st	X, r24
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <Enable_External_INT2+0x50>
				break;
				default:
					return E_OK;
    243e:	1a 82       	std	Y+2, r1	; 0x02
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <Enable_External_INT2+0x54>
		 	}
	return E_NOK;
    2442:	31 e0       	ldi	r19, 0x01	; 1
    2444:	3a 83       	std	Y+2, r19	; 0x02
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <External_Int2_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int2_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	00 d0       	rcall	.+0      	; 0x245c <External_Int2_EdgeSelection+0x6>
    245c:	00 d0       	rcall	.+0      	; 0x245e <External_Int2_EdgeSelection+0x8>
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	3c 83       	std	Y+4, r19	; 0x04
    246c:	2b 83       	std	Y+3, r18	; 0x03
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	79 f0       	breq	.+30     	; 0x2494 <External_Int2_EdgeSelection+0x3e>
    2476:	2b 81       	ldd	r18, Y+3	; 0x03
    2478:	3c 81       	ldd	r19, Y+4	; 0x04
    247a:	21 30       	cpi	r18, 0x01	; 1
    247c:	31 05       	cpc	r19, r1
    247e:	a1 f4       	brne	.+40     	; 0x24a8 <External_Int2_EdgeSelection+0x52>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCSR,ISC2);
    2480:	a4 e5       	ldi	r26, 0x54	; 84
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e4 e5       	ldi	r30, 0x54	; 84
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	80 64       	ori	r24, 0x40	; 64
    248c:	8c 93       	st	X, r24
								return E_NOK;
    248e:	31 e0       	ldi	r19, 0x01	; 1
    2490:	3a 83       	std	Y+2, r19	; 0x02
    2492:	0b c0       	rjmp	.+22     	; 0x24aa <External_Int2_EdgeSelection+0x54>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCSR,ISC2);
    2494:	a4 e5       	ldi	r26, 0x54	; 84
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e4 e5       	ldi	r30, 0x54	; 84
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	8f 7b       	andi	r24, 0xBF	; 191
    24a0:	8c 93       	st	X, r24
								return E_NOK;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    24a6:	01 c0       	rjmp	.+2      	; 0x24aa <External_Int2_EdgeSelection+0x54>
								break;
						default:
							return E_OK;
    24a8:	1a 82       	std	Y+2, r1	; 0x02
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
					}

		return E_NOK;
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <CallBack_Int2>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int2(void (*Func_Ptr)(void))
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <CallBack_Int2+0x6>
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	9a 83       	std	Y+2, r25	; 0x02
    24c6:	89 83       	std	Y+1, r24	; 0x01
	External_Function2=Func_Ptr;
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	90 93 9d 01 	sts	0x019D, r25
    24d0:	80 93 9c 01 	sts	0x019C, r24
	return E_NOK;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <DIO_init>:
 * 
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 **/
void DIO_init(void)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    // initializing all pins are input
    DDRA=0;
    24e8:	ea e3       	ldi	r30, 0x3A	; 58
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	10 82       	st	Z, r1
    DDRB=0;
    24ee:	e7 e3       	ldi	r30, 0x37	; 55
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	10 82       	st	Z, r1
    DDRC=0;
    24f4:	e4 e3       	ldi	r30, 0x34	; 52
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	10 82       	st	Z, r1
    DDRD=0;
    24fa:	e1 e3       	ldi	r30, 0x31	; 49
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	10 82       	st	Z, r1

    PORTA=0;
    2500:	eb e3       	ldi	r30, 0x3B	; 59
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	10 82       	st	Z, r1
    PORTB=0;
    2506:	e8 e3       	ldi	r30, 0x38	; 56
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	10 82       	st	Z, r1
    PORTC=0;
    250c:	e5 e3       	ldi	r30, 0x35	; 53
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	10 82       	st	Z, r1
    PORTD=0;
    2512:	e2 e3       	ldi	r30, 0x32	; 50
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	10 82       	st	Z, r1
    //enable the internal pull up resistor
    CLEAR_BIT(SFIOR,PUD);
    2518:	a0 e5       	ldi	r26, 0x50	; 80
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e0 e5       	ldi	r30, 0x50	; 80
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	8b 7f       	andi	r24, 0xFB	; 251
    2524:	8c 93       	st	X, r24
}
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <DIO_SetPinDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinDirection(DIO_Ports_t PORT, u8 PIN, DIO_Direction_t Direction)
	{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	2e 97       	sbiw	r28, 0x0e	; 14
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	6a 83       	std	Y+2, r22	; 0x02
    2544:	4b 83       	std	Y+3, r20	; 0x03
		// check for safety
		if(PIN>MAX_PinNum)
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	88 30       	cpi	r24, 0x08	; 8
    254a:	10 f0       	brcs	.+4      	; 0x2550 <DIO_SetPinDirection+0x24>
			{
				return E_OK;
    254c:	1e 86       	std	Y+14, r1	; 0x0e
    254e:	0e c1       	rjmp	.+540    	; 0x276c <DIO_SetPinDirection+0x240>
			}
		else
			{
				switch(PORT)
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	3d 87       	std	Y+13, r19	; 0x0d
    2558:	2c 87       	std	Y+12, r18	; 0x0c
    255a:	8c 85       	ldd	r24, Y+12	; 0x0c
    255c:	9d 85       	ldd	r25, Y+13	; 0x0d
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	91 05       	cpc	r25, r1
    2562:	09 f4       	brne	.+2      	; 0x2566 <DIO_SetPinDirection+0x3a>
    2564:	51 c0       	rjmp	.+162    	; 0x2608 <DIO_SetPinDirection+0xdc>
    2566:	2c 85       	ldd	r18, Y+12	; 0x0c
    2568:	3d 85       	ldd	r19, Y+13	; 0x0d
    256a:	22 30       	cpi	r18, 0x02	; 2
    256c:	31 05       	cpc	r19, r1
    256e:	2c f4       	brge	.+10     	; 0x257a <DIO_SetPinDirection+0x4e>
    2570:	8c 85       	ldd	r24, Y+12	; 0x0c
    2572:	9d 85       	ldd	r25, Y+13	; 0x0d
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	71 f0       	breq	.+28     	; 0x2594 <DIO_SetPinDirection+0x68>
    2578:	f5 c0       	rjmp	.+490    	; 0x2764 <DIO_SetPinDirection+0x238>
    257a:	2c 85       	ldd	r18, Y+12	; 0x0c
    257c:	3d 85       	ldd	r19, Y+13	; 0x0d
    257e:	22 30       	cpi	r18, 0x02	; 2
    2580:	31 05       	cpc	r19, r1
    2582:	09 f4       	brne	.+2      	; 0x2586 <DIO_SetPinDirection+0x5a>
    2584:	7b c0       	rjmp	.+246    	; 0x267c <DIO_SetPinDirection+0x150>
    2586:	8c 85       	ldd	r24, Y+12	; 0x0c
    2588:	9d 85       	ldd	r25, Y+13	; 0x0d
    258a:	83 30       	cpi	r24, 0x03	; 3
    258c:	91 05       	cpc	r25, r1
    258e:	09 f4       	brne	.+2      	; 0x2592 <DIO_SetPinDirection+0x66>
    2590:	af c0       	rjmp	.+350    	; 0x26f0 <DIO_SetPinDirection+0x1c4>
    2592:	e8 c0       	rjmp	.+464    	; 0x2764 <DIO_SetPinDirection+0x238>
					{
						case DIO_PORTA:
							switch (Direction)
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	3b 87       	std	Y+11, r19	; 0x0b
    259c:	2a 87       	std	Y+10, r18	; 0x0a
    259e:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	31 f0       	breq	.+12     	; 0x25b2 <DIO_SetPinDirection+0x86>
    25a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    25a8:	3b 85       	ldd	r19, Y+11	; 0x0b
    25aa:	21 30       	cpi	r18, 0x01	; 1
    25ac:	31 05       	cpc	r19, r1
    25ae:	b1 f0       	breq	.+44     	; 0x25dc <DIO_SetPinDirection+0xb0>
    25b0:	29 c0       	rjmp	.+82     	; 0x2604 <DIO_SetPinDirection+0xd8>
								{
									case DIO_INPUT:
									CLEAR_BIT(DDRA,PIN);
    25b2:	aa e3       	ldi	r26, 0x3A	; 58
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	ea e3       	ldi	r30, 0x3A	; 58
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	48 2f       	mov	r20, r24
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	02 2e       	mov	r0, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <DIO_SetPinDirection+0xa4>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	0a 94       	dec	r0
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <DIO_SetPinDirection+0xa0>
    25d4:	80 95       	com	r24
    25d6:	84 23       	and	r24, r20
    25d8:	8c 93       	st	X, r24
    25da:	c6 c0       	rjmp	.+396    	; 0x2768 <DIO_SetPinDirection+0x23c>
									break;
									case DIO_OUTPUT:
									SET_BIT(DDRA,PIN);
    25dc:	aa e3       	ldi	r26, 0x3A	; 58
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	ea e3       	ldi	r30, 0x3A	; 58
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	48 2f       	mov	r20, r24
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	02 2e       	mov	r0, r18
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <DIO_SetPinDirection+0xce>
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	0a 94       	dec	r0
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <DIO_SetPinDirection+0xca>
    25fe:	84 2b       	or	r24, r20
    2600:	8c 93       	st	X, r24
    2602:	b2 c0       	rjmp	.+356    	; 0x2768 <DIO_SetPinDirection+0x23c>
									break;
									default:
									return E_OK;
    2604:	1e 86       	std	Y+14, r1	; 0x0e
    2606:	b2 c0       	rjmp	.+356    	; 0x276c <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTB:
							switch (Direction)
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	39 87       	std	Y+9, r19	; 0x09
    2610:	28 87       	std	Y+8, r18	; 0x08
    2612:	88 85       	ldd	r24, Y+8	; 0x08
    2614:	99 85       	ldd	r25, Y+9	; 0x09
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	31 f0       	breq	.+12     	; 0x2626 <DIO_SetPinDirection+0xfa>
    261a:	28 85       	ldd	r18, Y+8	; 0x08
    261c:	39 85       	ldd	r19, Y+9	; 0x09
    261e:	21 30       	cpi	r18, 0x01	; 1
    2620:	31 05       	cpc	r19, r1
    2622:	b1 f0       	breq	.+44     	; 0x2650 <DIO_SetPinDirection+0x124>
    2624:	29 c0       	rjmp	.+82     	; 0x2678 <DIO_SetPinDirection+0x14c>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRB,PIN);
    2626:	a7 e3       	ldi	r26, 0x37	; 55
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e7 e3       	ldi	r30, 0x37	; 55
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	48 2f       	mov	r20, r24
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	02 2e       	mov	r0, r18
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <DIO_SetPinDirection+0x118>
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	0a 94       	dec	r0
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <DIO_SetPinDirection+0x114>
    2648:	80 95       	com	r24
    264a:	84 23       	and	r24, r20
    264c:	8c 93       	st	X, r24
    264e:	8c c0       	rjmp	.+280    	; 0x2768 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRB,PIN);
    2650:	a7 e3       	ldi	r26, 0x37	; 55
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e7 e3       	ldi	r30, 0x37	; 55
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	48 2f       	mov	r20, r24
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	02 2e       	mov	r0, r18
    2668:	02 c0       	rjmp	.+4      	; 0x266e <DIO_SetPinDirection+0x142>
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	0a 94       	dec	r0
    2670:	e2 f7       	brpl	.-8      	; 0x266a <DIO_SetPinDirection+0x13e>
    2672:	84 2b       	or	r24, r20
    2674:	8c 93       	st	X, r24
    2676:	78 c0       	rjmp	.+240    	; 0x2768 <DIO_SetPinDirection+0x23c>
										break;
									default:
									return E_OK;
    2678:	1e 86       	std	Y+14, r1	; 0x0e
    267a:	78 c0       	rjmp	.+240    	; 0x276c <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTC:
							switch (Direction)
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	3f 83       	std	Y+7, r19	; 0x07
    2684:	2e 83       	std	Y+6, r18	; 0x06
    2686:	8e 81       	ldd	r24, Y+6	; 0x06
    2688:	9f 81       	ldd	r25, Y+7	; 0x07
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	31 f0       	breq	.+12     	; 0x269a <DIO_SetPinDirection+0x16e>
    268e:	2e 81       	ldd	r18, Y+6	; 0x06
    2690:	3f 81       	ldd	r19, Y+7	; 0x07
    2692:	21 30       	cpi	r18, 0x01	; 1
    2694:	31 05       	cpc	r19, r1
    2696:	b1 f0       	breq	.+44     	; 0x26c4 <DIO_SetPinDirection+0x198>
    2698:	29 c0       	rjmp	.+82     	; 0x26ec <DIO_SetPinDirection+0x1c0>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRC,PIN);
    269a:	a4 e3       	ldi	r26, 0x34	; 52
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	e4 e3       	ldi	r30, 0x34	; 52
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	48 2f       	mov	r20, r24
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	02 2e       	mov	r0, r18
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <DIO_SetPinDirection+0x18c>
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	0a 94       	dec	r0
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <DIO_SetPinDirection+0x188>
    26bc:	80 95       	com	r24
    26be:	84 23       	and	r24, r20
    26c0:	8c 93       	st	X, r24
    26c2:	52 c0       	rjmp	.+164    	; 0x2768 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRC,PIN);
    26c4:	a4 e3       	ldi	r26, 0x34	; 52
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e4 e3       	ldi	r30, 0x34	; 52
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	48 2f       	mov	r20, r24
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 2e       	mov	r0, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <DIO_SetPinDirection+0x1b6>
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	0a 94       	dec	r0
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <DIO_SetPinDirection+0x1b2>
    26e6:	84 2b       	or	r24, r20
    26e8:	8c 93       	st	X, r24
    26ea:	3e c0       	rjmp	.+124    	; 0x2768 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    26ec:	1e 86       	std	Y+14, r1	; 0x0e
    26ee:	3e c0       	rjmp	.+124    	; 0x276c <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTD:
							switch (Direction)
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	3d 83       	std	Y+5, r19	; 0x05
    26f8:	2c 83       	std	Y+4, r18	; 0x04
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	9d 81       	ldd	r25, Y+5	; 0x05
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	31 f0       	breq	.+12     	; 0x270e <DIO_SetPinDirection+0x1e2>
    2702:	2c 81       	ldd	r18, Y+4	; 0x04
    2704:	3d 81       	ldd	r19, Y+5	; 0x05
    2706:	21 30       	cpi	r18, 0x01	; 1
    2708:	31 05       	cpc	r19, r1
    270a:	b1 f0       	breq	.+44     	; 0x2738 <DIO_SetPinDirection+0x20c>
    270c:	29 c0       	rjmp	.+82     	; 0x2760 <DIO_SetPinDirection+0x234>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRD,PIN);
    270e:	a1 e3       	ldi	r26, 0x31	; 49
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e1 e3       	ldi	r30, 0x31	; 49
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	48 2f       	mov	r20, r24
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	02 2e       	mov	r0, r18
    2726:	02 c0       	rjmp	.+4      	; 0x272c <DIO_SetPinDirection+0x200>
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	0a 94       	dec	r0
    272e:	e2 f7       	brpl	.-8      	; 0x2728 <DIO_SetPinDirection+0x1fc>
    2730:	80 95       	com	r24
    2732:	84 23       	and	r24, r20
    2734:	8c 93       	st	X, r24
    2736:	18 c0       	rjmp	.+48     	; 0x2768 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRD,PIN);
    2738:	a1 e3       	ldi	r26, 0x31	; 49
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	e1 e3       	ldi	r30, 0x31	; 49
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	48 2f       	mov	r20, r24
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	02 2e       	mov	r0, r18
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <DIO_SetPinDirection+0x22a>
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	0a 94       	dec	r0
    2758:	e2 f7       	brpl	.-8      	; 0x2752 <DIO_SetPinDirection+0x226>
    275a:	84 2b       	or	r24, r20
    275c:	8c 93       	st	X, r24
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    2760:	1e 86       	std	Y+14, r1	; 0x0e
    2762:	04 c0       	rjmp	.+8      	; 0x276c <DIO_SetPinDirection+0x240>
								}
							break;
							default:
								return E_OK;
    2764:	1e 86       	std	Y+14, r1	; 0x0e
    2766:	02 c0       	rjmp	.+4      	; 0x276c <DIO_SetPinDirection+0x240>
					}
			}
	return E_NOK;
    2768:	31 e0       	ldi	r19, 0x01	; 1
    276a:	3e 87       	std	Y+14, r19	; 0x0e
    276c:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    276e:	2e 96       	adiw	r28, 0x0e	; 14
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <DIO_SetPortDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortDirection(DIO_Ports_t PORT,u8 Direction)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <DIO_SetPortDirection+0x6>
    2786:	00 d0       	rcall	.+0      	; 0x2788 <DIO_SetPortDirection+0x8>
    2788:	0f 92       	push	r0
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	3d 83       	std	Y+5, r19	; 0x05
    279a:	2c 83       	std	Y+4, r18	; 0x04
    279c:	8c 81       	ldd	r24, Y+4	; 0x04
    279e:	9d 81       	ldd	r25, Y+5	; 0x05
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	91 05       	cpc	r25, r1
    27a4:	d1 f0       	breq	.+52     	; 0x27da <DIO_SetPortDirection+0x5a>
    27a6:	2c 81       	ldd	r18, Y+4	; 0x04
    27a8:	3d 81       	ldd	r19, Y+5	; 0x05
    27aa:	22 30       	cpi	r18, 0x02	; 2
    27ac:	31 05       	cpc	r19, r1
    27ae:	2c f4       	brge	.+10     	; 0x27ba <DIO_SetPortDirection+0x3a>
    27b0:	8c 81       	ldd	r24, Y+4	; 0x04
    27b2:	9d 81       	ldd	r25, Y+5	; 0x05
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	61 f0       	breq	.+24     	; 0x27d0 <DIO_SetPortDirection+0x50>
    27b8:	1f c0       	rjmp	.+62     	; 0x27f8 <DIO_SetPortDirection+0x78>
    27ba:	2c 81       	ldd	r18, Y+4	; 0x04
    27bc:	3d 81       	ldd	r19, Y+5	; 0x05
    27be:	22 30       	cpi	r18, 0x02	; 2
    27c0:	31 05       	cpc	r19, r1
    27c2:	81 f0       	breq	.+32     	; 0x27e4 <DIO_SetPortDirection+0x64>
    27c4:	8c 81       	ldd	r24, Y+4	; 0x04
    27c6:	9d 81       	ldd	r25, Y+5	; 0x05
    27c8:	83 30       	cpi	r24, 0x03	; 3
    27ca:	91 05       	cpc	r25, r1
    27cc:	81 f0       	breq	.+32     	; 0x27ee <DIO_SetPortDirection+0x6e>
    27ce:	14 c0       	rjmp	.+40     	; 0x27f8 <DIO_SetPortDirection+0x78>
						{
							case DIO_PORTA:
								DDRA=Direction;
    27d0:	ea e3       	ldi	r30, 0x3A	; 58
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	80 83       	st	Z, r24
    27d8:	11 c0       	rjmp	.+34     	; 0x27fc <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTB:
								DDRB=Direction;
    27da:	e7 e3       	ldi	r30, 0x37	; 55
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	80 83       	st	Z, r24
    27e2:	0c c0       	rjmp	.+24     	; 0x27fc <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTC:
								DDRC=Direction;
    27e4:	e4 e3       	ldi	r30, 0x34	; 52
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	80 83       	st	Z, r24
    27ec:	07 c0       	rjmp	.+14     	; 0x27fc <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTD:
								DDRD=Direction;
    27ee:	e1 e3       	ldi	r30, 0x31	; 49
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	80 83       	st	Z, r24
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <DIO_SetPortDirection+0x7c>
							break;
							default:
							return E_OK;
    27f8:	1b 82       	std	Y+3, r1	; 0x03
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <DIO_SetPortDirection+0x80>

						}
	return E_NOK;
    27fc:	91 e0       	ldi	r25, 0x01	; 1
    27fe:	9b 83       	std	Y+3, r25	; 0x03
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <DIO_SetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 							return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t State)
	{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	2e 97       	sbiw	r28, 0x0e	; 14
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	6a 83       	std	Y+2, r22	; 0x02
    282a:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	88 30       	cpi	r24, 0x08	; 8
    2830:	10 f0       	brcs	.+4      	; 0x2836 <DIO_SetPinValue+0x24>
			{
				return E_OK;
    2832:	1e 86       	std	Y+14, r1	; 0x0e
    2834:	0e c1       	rjmp	.+540    	; 0x2a52 <DIO_SetPinValue+0x240>
			}
		else
			{
				switch(PORT)
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	28 2f       	mov	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	3d 87       	std	Y+13, r19	; 0x0d
    283e:	2c 87       	std	Y+12, r18	; 0x0c
    2840:	8c 85       	ldd	r24, Y+12	; 0x0c
    2842:	9d 85       	ldd	r25, Y+13	; 0x0d
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	91 05       	cpc	r25, r1
    2848:	09 f4       	brne	.+2      	; 0x284c <DIO_SetPinValue+0x3a>
    284a:	51 c0       	rjmp	.+162    	; 0x28ee <DIO_SetPinValue+0xdc>
    284c:	2c 85       	ldd	r18, Y+12	; 0x0c
    284e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2850:	22 30       	cpi	r18, 0x02	; 2
    2852:	31 05       	cpc	r19, r1
    2854:	2c f4       	brge	.+10     	; 0x2860 <DIO_SetPinValue+0x4e>
    2856:	8c 85       	ldd	r24, Y+12	; 0x0c
    2858:	9d 85       	ldd	r25, Y+13	; 0x0d
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	71 f0       	breq	.+28     	; 0x287a <DIO_SetPinValue+0x68>
    285e:	f5 c0       	rjmp	.+490    	; 0x2a4a <DIO_SetPinValue+0x238>
    2860:	2c 85       	ldd	r18, Y+12	; 0x0c
    2862:	3d 85       	ldd	r19, Y+13	; 0x0d
    2864:	22 30       	cpi	r18, 0x02	; 2
    2866:	31 05       	cpc	r19, r1
    2868:	09 f4       	brne	.+2      	; 0x286c <DIO_SetPinValue+0x5a>
    286a:	7b c0       	rjmp	.+246    	; 0x2962 <DIO_SetPinValue+0x150>
    286c:	8c 85       	ldd	r24, Y+12	; 0x0c
    286e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2870:	83 30       	cpi	r24, 0x03	; 3
    2872:	91 05       	cpc	r25, r1
    2874:	09 f4       	brne	.+2      	; 0x2878 <DIO_SetPinValue+0x66>
    2876:	af c0       	rjmp	.+350    	; 0x29d6 <DIO_SetPinValue+0x1c4>
    2878:	e8 c0       	rjmp	.+464    	; 0x2a4a <DIO_SetPinValue+0x238>
					{
						case DIO_PORTA:
							switch(State)
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	3b 87       	std	Y+11, r19	; 0x0b
    2882:	2a 87       	std	Y+10, r18	; 0x0a
    2884:	8a 85       	ldd	r24, Y+10	; 0x0a
    2886:	9b 85       	ldd	r25, Y+11	; 0x0b
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	31 f0       	breq	.+12     	; 0x2898 <DIO_SetPinValue+0x86>
    288c:	2a 85       	ldd	r18, Y+10	; 0x0a
    288e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2890:	21 30       	cpi	r18, 0x01	; 1
    2892:	31 05       	cpc	r19, r1
    2894:	b1 f0       	breq	.+44     	; 0x28c2 <DIO_SetPinValue+0xb0>
    2896:	29 c0       	rjmp	.+82     	; 0x28ea <DIO_SetPinValue+0xd8>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTA,PIN);
    2898:	ab e3       	ldi	r26, 0x3B	; 59
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	eb e3       	ldi	r30, 0x3B	; 59
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	48 2f       	mov	r20, r24
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	02 2e       	mov	r0, r18
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <DIO_SetPinValue+0xa4>
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	0a 94       	dec	r0
    28b8:	e2 f7       	brpl	.-8      	; 0x28b2 <DIO_SetPinValue+0xa0>
    28ba:	80 95       	com	r24
    28bc:	84 23       	and	r24, r20
    28be:	8c 93       	st	X, r24
    28c0:	c6 c0       	rjmp	.+396    	; 0x2a4e <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTA,PIN);
    28c2:	ab e3       	ldi	r26, 0x3B	; 59
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	eb e3       	ldi	r30, 0x3B	; 59
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	48 2f       	mov	r20, r24
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	28 2f       	mov	r18, r24
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	02 2e       	mov	r0, r18
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <DIO_SetPinValue+0xce>
    28dc:	88 0f       	add	r24, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	0a 94       	dec	r0
    28e2:	e2 f7       	brpl	.-8      	; 0x28dc <DIO_SetPinValue+0xca>
    28e4:	84 2b       	or	r24, r20
    28e6:	8c 93       	st	X, r24
    28e8:	b2 c0       	rjmp	.+356    	; 0x2a4e <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    28ea:	1e 86       	std	Y+14, r1	; 0x0e
    28ec:	b2 c0       	rjmp	.+356    	; 0x2a52 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTB:
							switch(State)
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	39 87       	std	Y+9, r19	; 0x09
    28f6:	28 87       	std	Y+8, r18	; 0x08
    28f8:	88 85       	ldd	r24, Y+8	; 0x08
    28fa:	99 85       	ldd	r25, Y+9	; 0x09
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	31 f0       	breq	.+12     	; 0x290c <DIO_SetPinValue+0xfa>
    2900:	28 85       	ldd	r18, Y+8	; 0x08
    2902:	39 85       	ldd	r19, Y+9	; 0x09
    2904:	21 30       	cpi	r18, 0x01	; 1
    2906:	31 05       	cpc	r19, r1
    2908:	b1 f0       	breq	.+44     	; 0x2936 <DIO_SetPinValue+0x124>
    290a:	29 c0       	rjmp	.+82     	; 0x295e <DIO_SetPinValue+0x14c>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTB,PIN);
    290c:	a8 e3       	ldi	r26, 0x38	; 56
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e8 e3       	ldi	r30, 0x38	; 56
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	48 2f       	mov	r20, r24
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	02 2e       	mov	r0, r18
    2924:	02 c0       	rjmp	.+4      	; 0x292a <DIO_SetPinValue+0x118>
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	0a 94       	dec	r0
    292c:	e2 f7       	brpl	.-8      	; 0x2926 <DIO_SetPinValue+0x114>
    292e:	80 95       	com	r24
    2930:	84 23       	and	r24, r20
    2932:	8c 93       	st	X, r24
    2934:	8c c0       	rjmp	.+280    	; 0x2a4e <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTB,PIN);
    2936:	a8 e3       	ldi	r26, 0x38	; 56
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e8 e3       	ldi	r30, 0x38	; 56
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	48 2f       	mov	r20, r24
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	02 2e       	mov	r0, r18
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <DIO_SetPinValue+0x142>
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	0a 94       	dec	r0
    2956:	e2 f7       	brpl	.-8      	; 0x2950 <DIO_SetPinValue+0x13e>
    2958:	84 2b       	or	r24, r20
    295a:	8c 93       	st	X, r24
    295c:	78 c0       	rjmp	.+240    	; 0x2a4e <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    295e:	1e 86       	std	Y+14, r1	; 0x0e
    2960:	78 c0       	rjmp	.+240    	; 0x2a52 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTC:
							switch(State)
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	3f 83       	std	Y+7, r19	; 0x07
    296a:	2e 83       	std	Y+6, r18	; 0x06
    296c:	8e 81       	ldd	r24, Y+6	; 0x06
    296e:	9f 81       	ldd	r25, Y+7	; 0x07
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	31 f0       	breq	.+12     	; 0x2980 <DIO_SetPinValue+0x16e>
    2974:	2e 81       	ldd	r18, Y+6	; 0x06
    2976:	3f 81       	ldd	r19, Y+7	; 0x07
    2978:	21 30       	cpi	r18, 0x01	; 1
    297a:	31 05       	cpc	r19, r1
    297c:	b1 f0       	breq	.+44     	; 0x29aa <DIO_SetPinValue+0x198>
    297e:	29 c0       	rjmp	.+82     	; 0x29d2 <DIO_SetPinValue+0x1c0>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTC,PIN);
    2980:	a5 e3       	ldi	r26, 0x35	; 53
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e5 e3       	ldi	r30, 0x35	; 53
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	48 2f       	mov	r20, r24
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	02 2e       	mov	r0, r18
    2998:	02 c0       	rjmp	.+4      	; 0x299e <DIO_SetPinValue+0x18c>
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	0a 94       	dec	r0
    29a0:	e2 f7       	brpl	.-8      	; 0x299a <DIO_SetPinValue+0x188>
    29a2:	80 95       	com	r24
    29a4:	84 23       	and	r24, r20
    29a6:	8c 93       	st	X, r24
    29a8:	52 c0       	rjmp	.+164    	; 0x2a4e <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTC,PIN);
    29aa:	a5 e3       	ldi	r26, 0x35	; 53
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	e5 e3       	ldi	r30, 0x35	; 53
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	48 2f       	mov	r20, r24
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	02 2e       	mov	r0, r18
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <DIO_SetPinValue+0x1b6>
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	0a 94       	dec	r0
    29ca:	e2 f7       	brpl	.-8      	; 0x29c4 <DIO_SetPinValue+0x1b2>
    29cc:	84 2b       	or	r24, r20
    29ce:	8c 93       	st	X, r24
    29d0:	3e c0       	rjmp	.+124    	; 0x2a4e <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    29d2:	1e 86       	std	Y+14, r1	; 0x0e
    29d4:	3e c0       	rjmp	.+124    	; 0x2a52 <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTD:
							switch(State)
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	3d 83       	std	Y+5, r19	; 0x05
    29de:	2c 83       	std	Y+4, r18	; 0x04
    29e0:	8c 81       	ldd	r24, Y+4	; 0x04
    29e2:	9d 81       	ldd	r25, Y+5	; 0x05
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	31 f0       	breq	.+12     	; 0x29f4 <DIO_SetPinValue+0x1e2>
    29e8:	2c 81       	ldd	r18, Y+4	; 0x04
    29ea:	3d 81       	ldd	r19, Y+5	; 0x05
    29ec:	21 30       	cpi	r18, 0x01	; 1
    29ee:	31 05       	cpc	r19, r1
    29f0:	b1 f0       	breq	.+44     	; 0x2a1e <DIO_SetPinValue+0x20c>
    29f2:	29 c0       	rjmp	.+82     	; 0x2a46 <DIO_SetPinValue+0x234>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTD,PIN);
    29f4:	a2 e3       	ldi	r26, 0x32	; 50
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	e2 e3       	ldi	r30, 0x32	; 50
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	48 2f       	mov	r20, r24
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	28 2f       	mov	r18, r24
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	02 2e       	mov	r0, r18
    2a0c:	02 c0       	rjmp	.+4      	; 0x2a12 <DIO_SetPinValue+0x200>
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	0a 94       	dec	r0
    2a14:	e2 f7       	brpl	.-8      	; 0x2a0e <DIO_SetPinValue+0x1fc>
    2a16:	80 95       	com	r24
    2a18:	84 23       	and	r24, r20
    2a1a:	8c 93       	st	X, r24
    2a1c:	18 c0       	rjmp	.+48     	; 0x2a4e <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTD,PIN);
    2a1e:	a2 e3       	ldi	r26, 0x32	; 50
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e2 e3       	ldi	r30, 0x32	; 50
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	48 2f       	mov	r20, r24
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	02 2e       	mov	r0, r18
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <DIO_SetPinValue+0x22a>
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	0a 94       	dec	r0
    2a3e:	e2 f7       	brpl	.-8      	; 0x2a38 <DIO_SetPinValue+0x226>
    2a40:	84 2b       	or	r24, r20
    2a42:	8c 93       	st	X, r24
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    2a46:	1e 86       	std	Y+14, r1	; 0x0e
    2a48:	04 c0       	rjmp	.+8      	; 0x2a52 <DIO_SetPinValue+0x240>
								}
						break;
							default:
							return E_OK;
    2a4a:	1e 86       	std	Y+14, r1	; 0x0e
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <DIO_SetPinValue+0x240>
					}
			}
		return E_NOK;
    2a4e:	31 e0       	ldi	r19, 0x01	; 1
    2a50:	3e 87       	std	Y+14, r19	; 0x0e
    2a52:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    2a54:	2e 96       	adiw	r28, 0x0e	; 14
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <DIO_SetPortValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortValue(DIO_Ports_t PORT,u8 value)
{
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <DIO_SetPortValue+0x6>
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <DIO_SetPortValue+0x8>
    2a6e:	0f 92       	push	r0
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	89 83       	std	Y+1, r24	; 0x01
    2a76:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	3d 83       	std	Y+5, r19	; 0x05
    2a80:	2c 83       	std	Y+4, r18	; 0x04
    2a82:	8c 81       	ldd	r24, Y+4	; 0x04
    2a84:	9d 81       	ldd	r25, Y+5	; 0x05
    2a86:	81 30       	cpi	r24, 0x01	; 1
    2a88:	91 05       	cpc	r25, r1
    2a8a:	d1 f0       	breq	.+52     	; 0x2ac0 <DIO_SetPortValue+0x5a>
    2a8c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a8e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a90:	22 30       	cpi	r18, 0x02	; 2
    2a92:	31 05       	cpc	r19, r1
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <DIO_SetPortValue+0x3a>
    2a96:	8c 81       	ldd	r24, Y+4	; 0x04
    2a98:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	61 f0       	breq	.+24     	; 0x2ab6 <DIO_SetPortValue+0x50>
    2a9e:	1f c0       	rjmp	.+62     	; 0x2ade <DIO_SetPortValue+0x78>
    2aa0:	2c 81       	ldd	r18, Y+4	; 0x04
    2aa2:	3d 81       	ldd	r19, Y+5	; 0x05
    2aa4:	22 30       	cpi	r18, 0x02	; 2
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	81 f0       	breq	.+32     	; 0x2aca <DIO_SetPortValue+0x64>
    2aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    2aac:	9d 81       	ldd	r25, Y+5	; 0x05
    2aae:	83 30       	cpi	r24, 0x03	; 3
    2ab0:	91 05       	cpc	r25, r1
    2ab2:	81 f0       	breq	.+32     	; 0x2ad4 <DIO_SetPortValue+0x6e>
    2ab4:	14 c0       	rjmp	.+40     	; 0x2ade <DIO_SetPortValue+0x78>
						{
							case DIO_PORTA:
								PORTA=value;
    2ab6:	eb e3       	ldi	r30, 0x3B	; 59
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	80 83       	st	Z, r24
    2abe:	11 c0       	rjmp	.+34     	; 0x2ae2 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTB:
								PORTB=value;
    2ac0:	e8 e3       	ldi	r30, 0x38	; 56
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	80 83       	st	Z, r24
    2ac8:	0c c0       	rjmp	.+24     	; 0x2ae2 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTC:
								PORTC=value;
    2aca:	e5 e3       	ldi	r30, 0x35	; 53
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	80 83       	st	Z, r24
    2ad2:	07 c0       	rjmp	.+14     	; 0x2ae2 <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTD:
								PORTD=value;
    2ad4:	e2 e3       	ldi	r30, 0x32	; 50
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	80 83       	st	Z, r24
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <DIO_SetPortValue+0x7c>

							break;
							default:
							return E_OK;
    2ade:	1b 82       	std	Y+3, r1	; 0x03
    2ae0:	02 c0       	rjmp	.+4      	; 0x2ae6 <DIO_SetPortValue+0x80>

						}
	return E_NOK;
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	9b 83       	std	Y+3, r25	; 0x03
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <DIO_GetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_GetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t* State)
	{
    2af8:	df 93       	push	r29
    2afa:	cf 93       	push	r28
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	27 97       	sbiw	r28, 0x07	; 7
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	6a 83       	std	Y+2, r22	; 0x02
    2b10:	5c 83       	std	Y+4, r21	; 0x04
    2b12:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	88 30       	cpi	r24, 0x08	; 8
    2b18:	10 f0       	brcs	.+4      	; 0x2b1e <DIO_GetPinValue+0x26>
			{
				return E_OK;
    2b1a:	1f 82       	std	Y+7, r1	; 0x07
    2b1c:	75 c0       	rjmp	.+234    	; 0x2c08 <DIO_GetPinValue+0x110>
			}
		else
			{
					switch(PORT)
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	3e 83       	std	Y+6, r19	; 0x06
    2b26:	2d 83       	std	Y+5, r18	; 0x05
    2b28:	4d 81       	ldd	r20, Y+5	; 0x05
    2b2a:	5e 81       	ldd	r21, Y+6	; 0x06
    2b2c:	41 30       	cpi	r20, 0x01	; 1
    2b2e:	51 05       	cpc	r21, r1
    2b30:	59 f1       	breq	.+86     	; 0x2b88 <DIO_GetPinValue+0x90>
    2b32:	8d 81       	ldd	r24, Y+5	; 0x05
    2b34:	9e 81       	ldd	r25, Y+6	; 0x06
    2b36:	82 30       	cpi	r24, 0x02	; 2
    2b38:	91 05       	cpc	r25, r1
    2b3a:	34 f4       	brge	.+12     	; 0x2b48 <DIO_GetPinValue+0x50>
    2b3c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b3e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b40:	21 15       	cp	r18, r1
    2b42:	31 05       	cpc	r19, r1
    2b44:	69 f0       	breq	.+26     	; 0x2b60 <DIO_GetPinValue+0x68>
    2b46:	5c c0       	rjmp	.+184    	; 0x2c00 <DIO_GetPinValue+0x108>
    2b48:	4d 81       	ldd	r20, Y+5	; 0x05
    2b4a:	5e 81       	ldd	r21, Y+6	; 0x06
    2b4c:	42 30       	cpi	r20, 0x02	; 2
    2b4e:	51 05       	cpc	r21, r1
    2b50:	79 f1       	breq	.+94     	; 0x2bb0 <DIO_GetPinValue+0xb8>
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	83 30       	cpi	r24, 0x03	; 3
    2b58:	91 05       	cpc	r25, r1
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <DIO_GetPinValue+0x66>
    2b5c:	3d c0       	rjmp	.+122    	; 0x2bd8 <DIO_GetPinValue+0xe0>
    2b5e:	50 c0       	rjmp	.+160    	; 0x2c00 <DIO_GetPinValue+0x108>
						{
							case DIO_PORTA:
								*State=GET_BIT(PINA,PIN);
    2b60:	e9 e3       	ldi	r30, 0x39	; 57
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a9 01       	movw	r20, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <DIO_GetPinValue+0x80>
    2b74:	55 95       	asr	r21
    2b76:	47 95       	ror	r20
    2b78:	8a 95       	dec	r24
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <DIO_GetPinValue+0x7c>
    2b7c:	ca 01       	movw	r24, r20
    2b7e:	81 70       	andi	r24, 0x01	; 1
    2b80:	eb 81       	ldd	r30, Y+3	; 0x03
    2b82:	fc 81       	ldd	r31, Y+4	; 0x04
    2b84:	80 83       	st	Z, r24
    2b86:	3e c0       	rjmp	.+124    	; 0x2c04 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTB:
								*State=GET_BIT(PINB,PIN);
    2b88:	e6 e3       	ldi	r30, 0x36	; 54
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a9 01       	movw	r20, r18
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <DIO_GetPinValue+0xa8>
    2b9c:	55 95       	asr	r21
    2b9e:	47 95       	ror	r20
    2ba0:	8a 95       	dec	r24
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <DIO_GetPinValue+0xa4>
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	81 70       	andi	r24, 0x01	; 1
    2ba8:	eb 81       	ldd	r30, Y+3	; 0x03
    2baa:	fc 81       	ldd	r31, Y+4	; 0x04
    2bac:	80 83       	st	Z, r24
    2bae:	2a c0       	rjmp	.+84     	; 0x2c04 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTC:
								*State=GET_BIT(PINC,PIN);
    2bb0:	e3 e3       	ldi	r30, 0x33	; 51
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a9 01       	movw	r20, r18
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <DIO_GetPinValue+0xd0>
    2bc4:	55 95       	asr	r21
    2bc6:	47 95       	ror	r20
    2bc8:	8a 95       	dec	r24
    2bca:	e2 f7       	brpl	.-8      	; 0x2bc4 <DIO_GetPinValue+0xcc>
    2bcc:	ca 01       	movw	r24, r20
    2bce:	81 70       	andi	r24, 0x01	; 1
    2bd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd4:	80 83       	st	Z, r24
    2bd6:	16 c0       	rjmp	.+44     	; 0x2c04 <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTD:
								*State=GET_BIT(PIND,PIN);
    2bd8:	e0 e3       	ldi	r30, 0x30	; 48
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	88 2f       	mov	r24, r24
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a9 01       	movw	r20, r18
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <DIO_GetPinValue+0xf8>
    2bec:	55 95       	asr	r21
    2bee:	47 95       	ror	r20
    2bf0:	8a 95       	dec	r24
    2bf2:	e2 f7       	brpl	.-8      	; 0x2bec <DIO_GetPinValue+0xf4>
    2bf4:	ca 01       	movw	r24, r20
    2bf6:	81 70       	andi	r24, 0x01	; 1
    2bf8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bfa:	fc 81       	ldd	r31, Y+4	; 0x04
    2bfc:	80 83       	st	Z, r24
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <DIO_GetPinValue+0x10c>
								break;
							default:
								return E_OK;
    2c00:	1f 82       	std	Y+7, r1	; 0x07
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <DIO_GetPinValue+0x110>
						}
			}
		return E_NOK;
    2c04:	51 e0       	ldi	r21, 0x01	; 1
    2c06:	5f 83       	std	Y+7, r21	; 0x07
    2c08:	8f 81       	ldd	r24, Y+7	; 0x07
	}
    2c0a:	27 96       	adiw	r28, 0x07	; 7
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <DIO_togglePin>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_togglePin(DIO_Ports_t port,u8 pin)
 {
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <DIO_togglePin+0x6>
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <DIO_togglePin+0x8>
    2c24:	0f 92       	push	r0
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PinNum)
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	88 30       	cpi	r24, 0x08	; 8
    2c32:	10 f0       	brcs	.+4      	; 0x2c38 <DIO_togglePin+0x1c>
		{
			return E_OK;
    2c34:	1d 82       	std	Y+5, r1	; 0x05
    2c36:	73 c0       	rjmp	.+230    	; 0x2d1e <DIO_togglePin+0x102>
		}
	else
		{
			switch (port)
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	3c 83       	std	Y+4, r19	; 0x04
    2c40:	2b 83       	std	Y+3, r18	; 0x03
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	91 05       	cpc	r25, r1
    2c4a:	49 f1       	breq	.+82     	; 0x2c9e <DIO_togglePin+0x82>
    2c4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c50:	22 30       	cpi	r18, 0x02	; 2
    2c52:	31 05       	cpc	r19, r1
    2c54:	2c f4       	brge	.+10     	; 0x2c60 <DIO_togglePin+0x44>
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	61 f0       	breq	.+24     	; 0x2c76 <DIO_togglePin+0x5a>
    2c5e:	5b c0       	rjmp	.+182    	; 0x2d16 <DIO_togglePin+0xfa>
    2c60:	2b 81       	ldd	r18, Y+3	; 0x03
    2c62:	3c 81       	ldd	r19, Y+4	; 0x04
    2c64:	22 30       	cpi	r18, 0x02	; 2
    2c66:	31 05       	cpc	r19, r1
    2c68:	71 f1       	breq	.+92     	; 0x2cc6 <DIO_togglePin+0xaa>
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	83 30       	cpi	r24, 0x03	; 3
    2c70:	91 05       	cpc	r25, r1
    2c72:	e9 f1       	breq	.+122    	; 0x2cee <DIO_togglePin+0xd2>
    2c74:	50 c0       	rjmp	.+160    	; 0x2d16 <DIO_togglePin+0xfa>
				{
					case DIO_PORTA:
						TOGGLE_BIT(PORTA, pin);
    2c76:	ab e3       	ldi	r26, 0x3B	; 59
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	eb e3       	ldi	r30, 0x3B	; 59
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	48 2f       	mov	r20, r24
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	02 2e       	mov	r0, r18
    2c8e:	02 c0       	rjmp	.+4      	; 0x2c94 <DIO_togglePin+0x78>
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	0a 94       	dec	r0
    2c96:	e2 f7       	brpl	.-8      	; 0x2c90 <DIO_togglePin+0x74>
    2c98:	84 27       	eor	r24, r20
    2c9a:	8c 93       	st	X, r24
    2c9c:	3e c0       	rjmp	.+124    	; 0x2d1a <DIO_togglePin+0xfe>
						break;
					case DIO_PORTB:
						TOGGLE_BIT(PORTB, pin);
    2c9e:	a8 e3       	ldi	r26, 0x38	; 56
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e8 e3       	ldi	r30, 0x38	; 56
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	48 2f       	mov	r20, r24
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	02 2e       	mov	r0, r18
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <DIO_togglePin+0xa0>
    2cb8:	88 0f       	add	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	0a 94       	dec	r0
    2cbe:	e2 f7       	brpl	.-8      	; 0x2cb8 <DIO_togglePin+0x9c>
    2cc0:	84 27       	eor	r24, r20
    2cc2:	8c 93       	st	X, r24
    2cc4:	2a c0       	rjmp	.+84     	; 0x2d1a <DIO_togglePin+0xfe>
						break;
					case DIO_PORTC:
						TOGGLE_BIT(PORTC, pin);
    2cc6:	a5 e3       	ldi	r26, 0x35	; 53
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e5 e3       	ldi	r30, 0x35	; 53
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	48 2f       	mov	r20, r24
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	02 2e       	mov	r0, r18
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <DIO_togglePin+0xc8>
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	0a 94       	dec	r0
    2ce6:	e2 f7       	brpl	.-8      	; 0x2ce0 <DIO_togglePin+0xc4>
    2ce8:	84 27       	eor	r24, r20
    2cea:	8c 93       	st	X, r24
    2cec:	16 c0       	rjmp	.+44     	; 0x2d1a <DIO_togglePin+0xfe>
						break;
					case DIO_PORTD:
						TOGGLE_BIT(PORTD, pin);
    2cee:	a2 e3       	ldi	r26, 0x32	; 50
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	e2 e3       	ldi	r30, 0x32	; 50
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	48 2f       	mov	r20, r24
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	02 2e       	mov	r0, r18
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <DIO_togglePin+0xf0>
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	0a 94       	dec	r0
    2d0e:	e2 f7       	brpl	.-8      	; 0x2d08 <DIO_togglePin+0xec>
    2d10:	84 27       	eor	r24, r20
    2d12:	8c 93       	st	X, r24
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <DIO_togglePin+0xfe>
						break;
					default:
						return E_OK;
    2d16:	1d 82       	std	Y+5, r1	; 0x05
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <DIO_togglePin+0x102>
				}
	}

	return E_NOK;
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
    2d1c:	9d 83       	std	Y+5, r25	; 0x05
    2d1e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	08 95       	ret

00002d30 <DIO_EnablePullup>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_EnablePullup(DIO_Ports_t PORT, u8 PIN, DIO_PullUpState_t Pullstate)
	{
    2d30:	df 93       	push	r29
    2d32:	cf 93       	push	r28
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	2e 97       	sbiw	r28, 0x0e	; 14
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	6a 83       	std	Y+2, r22	; 0x02
    2d48:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	88 30       	cpi	r24, 0x08	; 8
    2d4e:	10 f0       	brcs	.+4      	; 0x2d54 <DIO_EnablePullup+0x24>
			{
				return E_OK;
    2d50:	1e 86       	std	Y+14, r1	; 0x0e
    2d52:	26 c1       	rjmp	.+588    	; 0x2fa0 <DIO_EnablePullup+0x270>
			}
		else
			{
				switch(PORT)
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	28 2f       	mov	r18, r24
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	3d 87       	std	Y+13, r19	; 0x0d
    2d5c:	2c 87       	std	Y+12, r18	; 0x0c
    2d5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d60:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d62:	81 30       	cpi	r24, 0x01	; 1
    2d64:	91 05       	cpc	r25, r1
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <DIO_EnablePullup+0x3a>
    2d68:	57 c0       	rjmp	.+174    	; 0x2e18 <DIO_EnablePullup+0xe8>
    2d6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d6c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d6e:	22 30       	cpi	r18, 0x02	; 2
    2d70:	31 05       	cpc	r19, r1
    2d72:	2c f4       	brge	.+10     	; 0x2d7e <DIO_EnablePullup+0x4e>
    2d74:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d76:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	71 f0       	breq	.+28     	; 0x2d98 <DIO_EnablePullup+0x68>
    2d7c:	0d c1       	rjmp	.+538    	; 0x2f98 <DIO_EnablePullup+0x268>
    2d7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d80:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d82:	22 30       	cpi	r18, 0x02	; 2
    2d84:	31 05       	cpc	r19, r1
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <DIO_EnablePullup+0x5a>
    2d88:	87 c0       	rjmp	.+270    	; 0x2e98 <DIO_EnablePullup+0x168>
    2d8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d8e:	83 30       	cpi	r24, 0x03	; 3
    2d90:	91 05       	cpc	r25, r1
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <DIO_EnablePullup+0x66>
    2d94:	c1 c0       	rjmp	.+386    	; 0x2f18 <DIO_EnablePullup+0x1e8>
    2d96:	00 c1       	rjmp	.+512    	; 0x2f98 <DIO_EnablePullup+0x268>
				{
					case DIO_PORTA:
						switch(Pullstate)
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	28 2f       	mov	r18, r24
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	3b 87       	std	Y+11, r19	; 0x0b
    2da0:	2a 87       	std	Y+10, r18	; 0x0a
    2da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	31 f0       	breq	.+12     	; 0x2db6 <DIO_EnablePullup+0x86>
    2daa:	2a 85       	ldd	r18, Y+10	; 0x0a
    2dac:	3b 85       	ldd	r19, Y+11	; 0x0b
    2dae:	21 30       	cpi	r18, 0x01	; 1
    2db0:	31 05       	cpc	r19, r1
    2db2:	41 f1       	breq	.+80     	; 0x2e04 <DIO_EnablePullup+0xd4>
    2db4:	2f c0       	rjmp	.+94     	; 0x2e14 <DIO_EnablePullup+0xe4>
							{
								case ENABLE_PullUp:
									CLEAR_BIT(DDRA,PIN);
    2db6:	aa e3       	ldi	r26, 0x3A	; 58
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	ea e3       	ldi	r30, 0x3A	; 58
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	48 2f       	mov	r20, r24
    2dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <DIO_EnablePullup+0xa2>
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	2a 95       	dec	r18
    2dd4:	e2 f7       	brpl	.-8      	; 0x2dce <DIO_EnablePullup+0x9e>
    2dd6:	80 95       	com	r24
    2dd8:	84 23       	and	r24, r20
    2dda:	8c 93       	st	X, r24
									SET_BIT(PORTA,PIN);
    2ddc:	ab e3       	ldi	r26, 0x3B	; 59
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	eb e3       	ldi	r30, 0x3B	; 59
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	48 2f       	mov	r20, r24
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	28 2f       	mov	r18, r24
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	02 2e       	mov	r0, r18
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <DIO_EnablePullup+0xca>
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	0a 94       	dec	r0
    2dfc:	e2 f7       	brpl	.-8      	; 0x2df6 <DIO_EnablePullup+0xc6>
    2dfe:	84 2b       	or	r24, r20
    2e00:	8c 93       	st	X, r24
    2e02:	cc c0       	rjmp	.+408    	; 0x2f9c <DIO_EnablePullup+0x26c>
									break;
								case DISABLE_PullUp:
									SET_BIT(SFIOR,PUD);
    2e04:	a0 e5       	ldi	r26, 0x50	; 80
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	e0 e5       	ldi	r30, 0x50	; 80
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	84 60       	ori	r24, 0x04	; 4
    2e10:	8c 93       	st	X, r24
    2e12:	c4 c0       	rjmp	.+392    	; 0x2f9c <DIO_EnablePullup+0x26c>
									break;
								default:
									return E_OK;
    2e14:	1e 86       	std	Y+14, r1	; 0x0e
    2e16:	c4 c0       	rjmp	.+392    	; 0x2fa0 <DIO_EnablePullup+0x270>
							}
						break;
						case DIO_PORTB:
							switch(Pullstate)
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	39 87       	std	Y+9, r19	; 0x09
    2e20:	28 87       	std	Y+8, r18	; 0x08
    2e22:	88 85       	ldd	r24, Y+8	; 0x08
    2e24:	99 85       	ldd	r25, Y+9	; 0x09
    2e26:	00 97       	sbiw	r24, 0x00	; 0
    2e28:	31 f0       	breq	.+12     	; 0x2e36 <DIO_EnablePullup+0x106>
    2e2a:	28 85       	ldd	r18, Y+8	; 0x08
    2e2c:	39 85       	ldd	r19, Y+9	; 0x09
    2e2e:	21 30       	cpi	r18, 0x01	; 1
    2e30:	31 05       	cpc	r19, r1
    2e32:	41 f1       	breq	.+80     	; 0x2e84 <DIO_EnablePullup+0x154>
    2e34:	2f c0       	rjmp	.+94     	; 0x2e94 <DIO_EnablePullup+0x164>
								{
									case ENABLE_PullUp:
										CLEAR_BIT(DDRB,PIN);
    2e36:	a7 e3       	ldi	r26, 0x37	; 55
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	e7 e3       	ldi	r30, 0x37	; 55
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	48 2f       	mov	r20, r24
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <DIO_EnablePullup+0x122>
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	2a 95       	dec	r18
    2e54:	e2 f7       	brpl	.-8      	; 0x2e4e <DIO_EnablePullup+0x11e>
    2e56:	80 95       	com	r24
    2e58:	84 23       	and	r24, r20
    2e5a:	8c 93       	st	X, r24
										SET_BIT(PORTB,PIN);
    2e5c:	a8 e3       	ldi	r26, 0x38	; 56
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e8 e3       	ldi	r30, 0x38	; 56
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	48 2f       	mov	r20, r24
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	02 2e       	mov	r0, r18
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <DIO_EnablePullup+0x14a>
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	0a 94       	dec	r0
    2e7c:	e2 f7       	brpl	.-8      	; 0x2e76 <DIO_EnablePullup+0x146>
    2e7e:	84 2b       	or	r24, r20
    2e80:	8c 93       	st	X, r24
    2e82:	8c c0       	rjmp	.+280    	; 0x2f9c <DIO_EnablePullup+0x26c>
										break;
									case DISABLE_PullUp:
										SET_BIT(SFIOR,PUD);
    2e84:	a0 e5       	ldi	r26, 0x50	; 80
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e0 e5       	ldi	r30, 0x50	; 80
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	84 60       	ori	r24, 0x04	; 4
    2e90:	8c 93       	st	X, r24
    2e92:	84 c0       	rjmp	.+264    	; 0x2f9c <DIO_EnablePullup+0x26c>
										break;
									default:
										return E_OK;
    2e94:	1e 86       	std	Y+14, r1	; 0x0e
    2e96:	84 c0       	rjmp	.+264    	; 0x2fa0 <DIO_EnablePullup+0x270>
								}
							break;
							case DIO_PORTC:
								switch(Pullstate)
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	3f 83       	std	Y+7, r19	; 0x07
    2ea0:	2e 83       	std	Y+6, r18	; 0x06
    2ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	31 f0       	breq	.+12     	; 0x2eb6 <DIO_EnablePullup+0x186>
    2eaa:	2e 81       	ldd	r18, Y+6	; 0x06
    2eac:	3f 81       	ldd	r19, Y+7	; 0x07
    2eae:	21 30       	cpi	r18, 0x01	; 1
    2eb0:	31 05       	cpc	r19, r1
    2eb2:	41 f1       	breq	.+80     	; 0x2f04 <DIO_EnablePullup+0x1d4>
    2eb4:	2f c0       	rjmp	.+94     	; 0x2f14 <DIO_EnablePullup+0x1e4>
									{
										case ENABLE_PullUp:
											CLEAR_BIT(DDRC,PIN);
    2eb6:	a4 e3       	ldi	r26, 0x34	; 52
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e4 e3       	ldi	r30, 0x34	; 52
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	48 2f       	mov	r20, r24
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <DIO_EnablePullup+0x1a2>
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	2a 95       	dec	r18
    2ed4:	e2 f7       	brpl	.-8      	; 0x2ece <DIO_EnablePullup+0x19e>
    2ed6:	80 95       	com	r24
    2ed8:	84 23       	and	r24, r20
    2eda:	8c 93       	st	X, r24
											SET_BIT(PORTC,PIN);
    2edc:	a5 e3       	ldi	r26, 0x35	; 53
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	e5 e3       	ldi	r30, 0x35	; 53
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	48 2f       	mov	r20, r24
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	02 2e       	mov	r0, r18
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <DIO_EnablePullup+0x1ca>
    2ef6:	88 0f       	add	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	0a 94       	dec	r0
    2efc:	e2 f7       	brpl	.-8      	; 0x2ef6 <DIO_EnablePullup+0x1c6>
    2efe:	84 2b       	or	r24, r20
    2f00:	8c 93       	st	X, r24
    2f02:	4c c0       	rjmp	.+152    	; 0x2f9c <DIO_EnablePullup+0x26c>
											break;
										case DISABLE_PullUp:
											SET_BIT(SFIOR,PUD);
    2f04:	a0 e5       	ldi	r26, 0x50	; 80
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e0 e5       	ldi	r30, 0x50	; 80
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	84 60       	ori	r24, 0x04	; 4
    2f10:	8c 93       	st	X, r24
    2f12:	44 c0       	rjmp	.+136    	; 0x2f9c <DIO_EnablePullup+0x26c>
											break;
										default:
											return E_OK;
    2f14:	1e 86       	std	Y+14, r1	; 0x0e
    2f16:	44 c0       	rjmp	.+136    	; 0x2fa0 <DIO_EnablePullup+0x270>
									}
								break;
								case DIO_PORTD:
									switch(Pullstate)
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	3d 83       	std	Y+5, r19	; 0x05
    2f20:	2c 83       	std	Y+4, r18	; 0x04
    2f22:	8c 81       	ldd	r24, Y+4	; 0x04
    2f24:	9d 81       	ldd	r25, Y+5	; 0x05
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	31 f0       	breq	.+12     	; 0x2f36 <DIO_EnablePullup+0x206>
    2f2a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f2c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f2e:	21 30       	cpi	r18, 0x01	; 1
    2f30:	31 05       	cpc	r19, r1
    2f32:	41 f1       	breq	.+80     	; 0x2f84 <DIO_EnablePullup+0x254>
    2f34:	2f c0       	rjmp	.+94     	; 0x2f94 <DIO_EnablePullup+0x264>
										{
											case ENABLE_PullUp:
												CLEAR_BIT(DDRD,PIN);
    2f36:	a1 e3       	ldi	r26, 0x31	; 49
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	e1 e3       	ldi	r30, 0x31	; 49
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	80 81       	ld	r24, Z
    2f40:	48 2f       	mov	r20, r24
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <DIO_EnablePullup+0x222>
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	2a 95       	dec	r18
    2f54:	e2 f7       	brpl	.-8      	; 0x2f4e <DIO_EnablePullup+0x21e>
    2f56:	80 95       	com	r24
    2f58:	84 23       	and	r24, r20
    2f5a:	8c 93       	st	X, r24
												SET_BIT(PORTD,PIN);
    2f5c:	a2 e3       	ldi	r26, 0x32	; 50
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e2 e3       	ldi	r30, 0x32	; 50
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	48 2f       	mov	r20, r24
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	28 2f       	mov	r18, r24
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	02 2e       	mov	r0, r18
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <DIO_EnablePullup+0x24a>
    2f76:	88 0f       	add	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	0a 94       	dec	r0
    2f7c:	e2 f7       	brpl	.-8      	; 0x2f76 <DIO_EnablePullup+0x246>
    2f7e:	84 2b       	or	r24, r20
    2f80:	8c 93       	st	X, r24
    2f82:	0c c0       	rjmp	.+24     	; 0x2f9c <DIO_EnablePullup+0x26c>
												break;
											case DISABLE_PullUp:
												SET_BIT(SFIOR,PUD);
    2f84:	a0 e5       	ldi	r26, 0x50	; 80
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e0 e5       	ldi	r30, 0x50	; 80
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	84 60       	ori	r24, 0x04	; 4
    2f90:	8c 93       	st	X, r24
    2f92:	04 c0       	rjmp	.+8      	; 0x2f9c <DIO_EnablePullup+0x26c>
												break;
											default:
												return E_OK;
    2f94:	1e 86       	std	Y+14, r1	; 0x0e
    2f96:	04 c0       	rjmp	.+8      	; 0x2fa0 <DIO_EnablePullup+0x270>
										}
									break;
									default:
									return E_OK;
    2f98:	1e 86       	std	Y+14, r1	; 0x0e
    2f9a:	02 c0       	rjmp	.+4      	; 0x2fa0 <DIO_EnablePullup+0x270>

				}
			}
		return E_NOK;
    2f9c:	31 e0       	ldi	r19, 0x01	; 1
    2f9e:	3e 87       	std	Y+14, r19	; 0x0e
    2fa0:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    2fa2:	2e 96       	adiw	r28, 0x0e	; 14
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	de bf       	out	0x3e, r29	; 62
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <ADC_Init>:
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 */
 /*****************************************************************************************************/
STD_Return ADC_Init(ADC__State_t State)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <ADC_Init+0x6>
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <ADC_Init+0x8>
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	89 83       	std	Y+1, r24	; 0x01
	//Resolution Selection
	#if defined Resolution_8_Bit
	SET_BIT(ADMUX,ADLAR);
	#elif defined Resolution_10_Bit
	CLEAR_BIT(ADMUX,ADLAR);
    2fc2:	a7 e2       	ldi	r26, 0x27	; 39
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	e7 e2       	ldi	r30, 0x27	; 39
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	8f 7d       	andi	r24, 0xDF	; 223
    2fce:	8c 93       	st	X, r24
	//Voltage Reference Selection
	#if defined AREF_Internal_VREF
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
	#elif defined AREF_External_VREF
	SET_BIT(ADMUX,REFS0);
    2fd0:	a7 e2       	ldi	r26, 0x27	; 39
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e7 e2       	ldi	r30, 0x27	; 39
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	80 64       	ori	r24, 0x40	; 64
    2fdc:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    2fde:	a7 e2       	ldi	r26, 0x27	; 39
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	e7 e2       	ldi	r30, 0x27	; 39
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	8f 77       	andi	r24, 0x7F	; 127
    2fea:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_64
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_128
		SET_BIT(ADCSRA,ADPS0);
    2fec:	a6 e2       	ldi	r26, 0x26	; 38
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	e6 e2       	ldi	r30, 0x26	; 38
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	81 60       	ori	r24, 0x01	; 1
    2ff8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    2ffa:	a6 e2       	ldi	r26, 0x26	; 38
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e6 e2       	ldi	r30, 0x26	; 38
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	82 60       	ori	r24, 0x02	; 2
    3006:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    3008:	a6 e2       	ldi	r26, 0x26	; 38
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	e6 e2       	ldi	r30, 0x26	; 38
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	80 81       	ld	r24, Z
    3012:	84 60       	ori	r24, 0x04	; 4
    3014:	8c 93       	st	X, r24
	#endif
	switch (State)
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	3c 83       	std	Y+4, r19	; 0x04
    301e:	2b 83       	std	Y+3, r18	; 0x03
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	9c 81       	ldd	r25, Y+4	; 0x04
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	31 f0       	breq	.+12     	; 0x3034 <ADC_Init+0x80>
    3028:	2b 81       	ldd	r18, Y+3	; 0x03
    302a:	3c 81       	ldd	r19, Y+4	; 0x04
    302c:	21 30       	cpi	r18, 0x01	; 1
    302e:	31 05       	cpc	r19, r1
    3030:	49 f0       	breq	.+18     	; 0x3044 <ADC_Init+0x90>
    3032:	10 c0       	rjmp	.+32     	; 0x3054 <ADC_Init+0xa0>
		{
			case ADC_ENABLE:
				SET_BIT(ADCSRA,ADEN);
    3034:	a6 e2       	ldi	r26, 0x26	; 38
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	e6 e2       	ldi	r30, 0x26	; 38
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	80 68       	ori	r24, 0x80	; 128
    3040:	8c 93       	st	X, r24
    3042:	0a c0       	rjmp	.+20     	; 0x3058 <ADC_Init+0xa4>
				break;
			case ADC_DISABLE:
				CLEAR_BIT(ADCSRA,ADEN);
    3044:	a6 e2       	ldi	r26, 0x26	; 38
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e6 e2       	ldi	r30, 0x26	; 38
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	8f 77       	andi	r24, 0x7F	; 127
    3050:	8c 93       	st	X, r24
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <ADC_Init+0xa4>
				break;
			default:
				return E_OK;
    3054:	1a 82       	std	Y+2, r1	; 0x02
    3056:	02 c0       	rjmp	.+4      	; 0x305c <ADC_Init+0xa8>
		}
		return E_NOK;
    3058:	31 e0       	ldi	r19, 0x01	; 1
    305a:	3a 83       	std	Y+2, r19	; 0x02
    305c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <ADC_SetInterrupt_Enable>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 */
STD_Return ADC_SetInterrupt_Enable(ADC_Interrupt_State_t State)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	00 d0       	rcall	.+0      	; 0x3072 <ADC_SetInterrupt_Enable+0x6>
    3072:	00 d0       	rcall	.+0      	; 0x3074 <ADC_SetInterrupt_Enable+0x8>
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	3c 83       	std	Y+4, r19	; 0x04
    3082:	2b 83       	std	Y+3, r18	; 0x03
    3084:	8b 81       	ldd	r24, Y+3	; 0x03
    3086:	9c 81       	ldd	r25, Y+4	; 0x04
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	31 f0       	breq	.+12     	; 0x3098 <ADC_SetInterrupt_Enable+0x2c>
    308c:	2b 81       	ldd	r18, Y+3	; 0x03
    308e:	3c 81       	ldd	r19, Y+4	; 0x04
    3090:	21 30       	cpi	r18, 0x01	; 1
    3092:	31 05       	cpc	r19, r1
    3094:	49 f0       	breq	.+18     	; 0x30a8 <ADC_SetInterrupt_Enable+0x3c>
    3096:	10 c0       	rjmp	.+32     	; 0x30b8 <ADC_SetInterrupt_Enable+0x4c>
	{
		case ADC_Interrupt_ENABLE:
			SET_BIT(ADCSRA,ADIE);
    3098:	a6 e2       	ldi	r26, 0x26	; 38
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e6 e2       	ldi	r30, 0x26	; 38
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	88 60       	ori	r24, 0x08	; 8
    30a4:	8c 93       	st	X, r24
    30a6:	0a c0       	rjmp	.+20     	; 0x30bc <ADC_SetInterrupt_Enable+0x50>
			break;
		case ADC_Interrupt_DISABLE:
			CLEAR_BIT(ADCSRA,ADIE);
    30a8:	a6 e2       	ldi	r26, 0x26	; 38
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e6 e2       	ldi	r30, 0x26	; 38
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	87 7f       	andi	r24, 0xF7	; 247
    30b4:	8c 93       	st	X, r24
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <ADC_SetInterrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    30b8:	1a 82       	std	Y+2, r1	; 0x02
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <ADC_SetInterrupt_Enable+0x54>
	}
	return E_NOK;
    30bc:	31 e0       	ldi	r19, 0x01	; 1
    30be:	3a 83       	std	Y+2, r19	; 0x02
    30c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <ADC_Start_conversion>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Start_conversion(u8 channel)
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	00 d0       	rcall	.+0      	; 0x30d6 <ADC_Start_conversion+0x6>
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	89 83       	std	Y+1, r24	; 0x01
	if (channel>MaxPinNum)
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	88 30       	cpi	r24, 0x08	; 8
    30e0:	10 f0       	brcs	.+4      	; 0x30e6 <ADC_Start_conversion+0x16>
	{
		return E_OK;
    30e2:	1a 82       	std	Y+2, r1	; 0x02
    30e4:	25 c0       	rjmp	.+74     	; 0x3130 <ADC_Start_conversion+0x60>
	}
	else
	{

			//Mask for non used bits of the 8 bits of the Regsiter
			ADMUX &= Unselected_Channel_MASK;
    30e6:	a7 e2       	ldi	r26, 0x27	; 39
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	e7 e2       	ldi	r30, 0x27	; 39
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	88 7f       	andi	r24, 0xF8	; 248
    30f2:	8c 93       	st	X, r24

			//Mask for the usage 3 bits of the 8 bits
			ADMUX |= channel;
    30f4:	a7 e2       	ldi	r26, 0x27	; 39
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e7 e2       	ldi	r30, 0x27	; 39
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	90 81       	ld	r25, Z
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	89 2b       	or	r24, r25
    3102:	8c 93       	st	X, r24

			//Set the AdcStartConversion
			SET_BIT(ADCSRA,ADSC);
    3104:	a6 e2       	ldi	r26, 0x26	; 38
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e6 e2       	ldi	r30, 0x26	; 38
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	80 64       	ori	r24, 0x40	; 64
    3110:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA,ADSC) == 1);
    3112:	e6 e2       	ldi	r30, 0x26	; 38
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	82 95       	swap	r24
    311a:	86 95       	lsr	r24
    311c:	86 95       	lsr	r24
    311e:	83 70       	andi	r24, 0x03	; 3
    3120:	88 2f       	mov	r24, r24
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	81 70       	andi	r24, 0x01	; 1
    3126:	90 70       	andi	r25, 0x00	; 0
    3128:	88 23       	and	r24, r24
    312a:	99 f7       	brne	.-26     	; 0x3112 <ADC_Start_conversion+0x42>
		 //Wait conversion to finish
	}
	return E_NOK;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	8a 83       	std	Y+2, r24	; 0x02
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <ADC_Get_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Get_Value(u16 *AdcResult)
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	00 d0       	rcall	.+0      	; 0x3142 <ADC_Get_Value+0x6>
    3142:	00 d0       	rcall	.+0      	; 0x3144 <ADC_Get_Value+0x8>
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	9c 83       	std	Y+4, r25	; 0x04
    314a:	8b 83       	std	Y+3, r24	; 0x03
		u16 AdcResult_Temp=0;
    314c:	1a 82       	std	Y+2, r1	; 0x02
    314e:	19 82       	std	Y+1, r1	; 0x01
	#if defined Resolution_8_Bit
		*AdcResult=ADCH;
	#elif defined Resolution_10_Bit
		AdcResult_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    3150:	e4 e2       	ldi	r30, 0x24	; 36
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	28 2f       	mov	r18, r24
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	e5 e2       	ldi	r30, 0x25	; 37
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	98 2f       	mov	r25, r24
    3166:	88 27       	eor	r24, r24
    3168:	82 0f       	add	r24, r18
    316a:	93 1f       	adc	r25, r19
    316c:	9a 83       	std	Y+2, r25	; 0x02
    316e:	89 83       	std	Y+1, r24	; 0x01
		*AdcResult = (AdcResult_Temp & Resolution_10Bit_MASK);//Mask higher bits in ADCH and read only the 10 bits for the ADC
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	9a 81       	ldd	r25, Y+2	; 0x02
    3174:	93 70       	andi	r25, 0x03	; 3
    3176:	eb 81       	ldd	r30, Y+3	; 0x03
    3178:	fc 81       	ldd	r31, Y+4	; 0x04
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	80 83       	st	Z, r24
	#endif
		return E_NOK;
    317e:	81 e0       	ldi	r24, 0x01	; 1
}
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <ADC_Read_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Read_Value(u8 channel,u16 *AdcValue)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	00 d0       	rcall	.+0      	; 0x3194 <ADC_Read_Value+0x6>
    3194:	00 d0       	rcall	.+0      	; 0x3196 <ADC_Read_Value+0x8>
    3196:	00 d0       	rcall	.+0      	; 0x3198 <ADC_Read_Value+0xa>
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	8b 83       	std	Y+3, r24	; 0x03
    319e:	7d 83       	std	Y+5, r23	; 0x05
    31a0:	6c 83       	std	Y+4, r22	; 0x04
	u16 AdcValue_Temp=0;
    31a2:	1a 82       	std	Y+2, r1	; 0x02
    31a4:	19 82       	std	Y+1, r1	; 0x01
	if (channel>MaxPinNum)
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	88 30       	cpi	r24, 0x08	; 8
    31aa:	c0 f0       	brcs	.+48     	; 0x31dc <ADC_Read_Value+0x4e>
		{
			return E_OK;
    31ac:	1e 82       	std	Y+6, r1	; 0x06
    31ae:	3c c0       	rjmp	.+120    	; 0x3228 <ADC_Read_Value+0x9a>
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
			{
				//Mask for non used bits of the 8 bits of the Regsiter
				ADMUX &= Unselected_Channel_MASK;
    31b0:	a7 e2       	ldi	r26, 0x27	; 39
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e7 e2       	ldi	r30, 0x27	; 39
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	88 7f       	andi	r24, 0xF8	; 248
    31bc:	8c 93       	st	X, r24

				//Mask for the usage 3 bits of the 8 bits
				ADMUX |= channel;
    31be:	a7 e2       	ldi	r26, 0x27	; 39
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e7 e2       	ldi	r30, 0x27	; 39
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	90 81       	ld	r25, Z
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	89 2b       	or	r24, r25
    31cc:	8c 93       	st	X, r24

				//Set the AdcStartConversion
				SET_BIT(ADCSRA,ADSC);
    31ce:	a6 e2       	ldi	r26, 0x26	; 38
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e6 e2       	ldi	r30, 0x26	; 38
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	80 64       	ori	r24, 0x40	; 64
    31da:	8c 93       	st	X, r24
		}
		else
		{
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
    31dc:	e6 e2       	ldi	r30, 0x26	; 38
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	82 95       	swap	r24
    31e4:	86 95       	lsr	r24
    31e6:	86 95       	lsr	r24
    31e8:	83 70       	andi	r24, 0x03	; 3
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	81 70       	andi	r24, 0x01	; 1
    31f0:	90 70       	andi	r25, 0x00	; 0
    31f2:	88 23       	and	r24, r24
    31f4:	e9 f6       	brne	.-70     	; 0x31b0 <ADC_Read_Value+0x22>
			//return the read value

			#if defined Resolution_8_Bit
				*AdcValue=ADCH;
			#elif defined Resolution_10_Bit
				AdcValue_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    31f6:	e4 e2       	ldi	r30, 0x24	; 36
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	e5 e2       	ldi	r30, 0x25	; 37
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	88 2f       	mov	r24, r24
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	98 2f       	mov	r25, r24
    320c:	88 27       	eor	r24, r24
    320e:	82 0f       	add	r24, r18
    3210:	93 1f       	adc	r25, r19
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	89 83       	std	Y+1, r24	; 0x01
				*AdcValue = (AdcValue_Temp & Resolution_10Bit_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	9a 81       	ldd	r25, Y+2	; 0x02
    321a:	93 70       	andi	r25, 0x03	; 3
    321c:	ec 81       	ldd	r30, Y+4	; 0x04
    321e:	fd 81       	ldd	r31, Y+5	; 0x05
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	80 83       	st	Z, r24
			#endif
		}
	return E_NOK;
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	8e 83       	std	Y+6, r24	; 0x06
    3228:	8e 81       	ldd	r24, Y+6	; 0x06
}
    322a:	26 96       	adiw	r28, 0x06	; 6
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <ADC_ReadVolt>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_ReadVolt (u8 channel,f32 *AdcVolt)
	{
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	00 d0       	rcall	.+0      	; 0x3242 <ADC_ReadVolt+0x6>
    3242:	00 d0       	rcall	.+0      	; 0x3244 <ADC_ReadVolt+0x8>
    3244:	00 d0       	rcall	.+0      	; 0x3246 <ADC_ReadVolt+0xa>
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
    324a:	8b 83       	std	Y+3, r24	; 0x03
    324c:	7d 83       	std	Y+5, r23	; 0x05
    324e:	6c 83       	std	Y+4, r22	; 0x04
		u16 AdcValue_Temp=0;
    3250:	1a 82       	std	Y+2, r1	; 0x02
    3252:	19 82       	std	Y+1, r1	; 0x01
		if(channel>MaxPinNum)
    3254:	8b 81       	ldd	r24, Y+3	; 0x03
    3256:	88 30       	cpi	r24, 0x08	; 8
    3258:	10 f0       	brcs	.+4      	; 0x325e <ADC_ReadVolt+0x22>
			{
				return E_OK;
    325a:	1e 82       	std	Y+6, r1	; 0x06
    325c:	2e c0       	rjmp	.+92     	; 0x32ba <ADC_ReadVolt+0x7e>
			}
		else
			{
				ADC_Read_Value(channel,&AdcValue_Temp);
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	9e 01       	movw	r18, r28
    3262:	2f 5f       	subi	r18, 0xFF	; 255
    3264:	3f 4f       	sbci	r19, 0xFF	; 255
    3266:	b9 01       	movw	r22, r18
    3268:	0e 94 c7 18 	call	0x318e	; 0x318e <ADC_Read_Value>
				*AdcVolt= (((f32)AdcValue_Temp)*((f32)VREF))/((f32)(ADC_MAX));
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	cc 01       	movw	r24, r24
    3272:	a0 e0       	ldi	r26, 0x00	; 0
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	bc 01       	movw	r22, r24
    3284:	cd 01       	movw	r24, r26
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	40 ea       	ldi	r20, 0xA0	; 160
    328c:	50 e4       	ldi	r21, 0x40	; 64
    328e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	bc 01       	movw	r22, r24
    3298:	cd 01       	movw	r24, r26
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e8       	ldi	r20, 0x80	; 128
    32a0:	54 e4       	ldi	r21, 0x44	; 68
    32a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	ec 81       	ldd	r30, Y+4	; 0x04
    32ac:	fd 81       	ldd	r31, Y+5	; 0x05
    32ae:	80 83       	st	Z, r24
    32b0:	91 83       	std	Z+1, r25	; 0x01
    32b2:	a2 83       	std	Z+2, r26	; 0x02
    32b4:	b3 83       	std	Z+3, r27	; 0x03
			}
		return E_NOK;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	8e 83       	std	Y+6, r24	; 0x06
    32ba:	8e 81       	ldd	r24, Y+6	; 0x06
	}
    32bc:	26 96       	adiw	r28, 0x06	; 6
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <ADC_CallBack>:
 * 
 * @param func_ptr 		 :		pointer to function that points to the user/ External function
 * @return void			 : 		return nothing
 **/
void ADC_CallBack(void (*func_ptr)(void))
	{
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <ADC_CallBack+0x6>
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	9a 83       	std	Y+2, r25	; 0x02
    32da:	89 83       	std	Y+1, r24	; 0x01
		User_Function = func_ptr;
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	9a 81       	ldd	r25, Y+2	; 0x02
    32e0:	90 93 9f 01 	sts	0x019F, r25
    32e4:	80 93 9e 01 	sts	0x019E, r24
	}
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	08 95       	ret

000032f2 <__vector_16>:
/*********************************ISR ADC Vector******************************************************/
ISR(ADC_Vect)
{
    32f2:	1f 92       	push	r1
    32f4:	0f 92       	push	r0
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	0f 92       	push	r0
    32fa:	11 24       	eor	r1, r1
    32fc:	2f 93       	push	r18
    32fe:	3f 93       	push	r19
    3300:	4f 93       	push	r20
    3302:	5f 93       	push	r21
    3304:	6f 93       	push	r22
    3306:	7f 93       	push	r23
    3308:	8f 93       	push	r24
    330a:	9f 93       	push	r25
    330c:	af 93       	push	r26
    330e:	bf 93       	push	r27
    3310:	ef 93       	push	r30
    3312:	ff 93       	push	r31
    3314:	df 93       	push	r29
    3316:	cf 93       	push	r28
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
	(*User_Function)();
    331c:	e0 91 9e 01 	lds	r30, 0x019E
    3320:	f0 91 9f 01 	lds	r31, 0x019F
    3324:	09 95       	icall
}
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	ff 91       	pop	r31
    332c:	ef 91       	pop	r30
    332e:	bf 91       	pop	r27
    3330:	af 91       	pop	r26
    3332:	9f 91       	pop	r25
    3334:	8f 91       	pop	r24
    3336:	7f 91       	pop	r23
    3338:	6f 91       	pop	r22
    333a:	5f 91       	pop	r21
    333c:	4f 91       	pop	r20
    333e:	3f 91       	pop	r19
    3340:	2f 91       	pop	r18
    3342:	0f 90       	pop	r0
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	0f 90       	pop	r0
    3348:	1f 90       	pop	r1
    334a:	18 95       	reti

0000334c <TimingSelection>:
 * @param TYPE 						: takes the sevensegment types CommonAnode/CommonCathode
 * @param Time 						: take which time will activated Sec01/Sec10/Min01/Min10			
 * @return STD_Return 
 */
STD_Return TimingSelection(u8 StopWatch_ControlPort,SevenSegment_Type_t TYPE,SevenSegment_Sel_t Time)
{
    334c:	df 93       	push	r29
    334e:	cf 93       	push	r28
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	2a 97       	sbiw	r28, 0x0a	; 10
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	89 83       	std	Y+1, r24	; 0x01
    3362:	6a 83       	std	Y+2, r22	; 0x02
    3364:	4b 83       	std	Y+3, r20	; 0x03
	#ifdef StopWatch_ControlPort_A
	switch(TYPE)
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	28 2f       	mov	r18, r24
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	3a 87       	std	Y+10, r19	; 0x0a
    336e:	29 87       	std	Y+9, r18	; 0x09
    3370:	89 85       	ldd	r24, Y+9	; 0x09
    3372:	9a 85       	ldd	r25, Y+10	; 0x0a
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	39 f0       	breq	.+14     	; 0x3386 <TimingSelection+0x3a>
    3378:	29 85       	ldd	r18, Y+9	; 0x09
    337a:	3a 85       	ldd	r19, Y+10	; 0x0a
    337c:	21 30       	cpi	r18, 0x01	; 1
    337e:	31 05       	cpc	r19, r1
    3380:	09 f4       	brne	.+2      	; 0x3384 <TimingSelection+0x38>
    3382:	77 c0       	rjmp	.+238    	; 0x3472 <TimingSelection+0x126>
    3384:	ec c0       	rjmp	.+472    	; 0x355e <TimingSelection+0x212>
	{
		case CommonCathod:
			switch(Time)
    3386:	8b 81       	ldd	r24, Y+3	; 0x03
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	38 87       	std	Y+8, r19	; 0x08
    338e:	2f 83       	std	Y+7, r18	; 0x07
    3390:	8f 81       	ldd	r24, Y+7	; 0x07
    3392:	98 85       	ldd	r25, Y+8	; 0x08
    3394:	81 30       	cpi	r24, 0x01	; 1
    3396:	91 05       	cpc	r25, r1
    3398:	59 f1       	breq	.+86     	; 0x33f0 <TimingSelection+0xa4>
    339a:	2f 81       	ldd	r18, Y+7	; 0x07
    339c:	38 85       	ldd	r19, Y+8	; 0x08
    339e:	22 30       	cpi	r18, 0x02	; 2
    33a0:	31 05       	cpc	r19, r1
    33a2:	2c f4       	brge	.+10     	; 0x33ae <TimingSelection+0x62>
    33a4:	8f 81       	ldd	r24, Y+7	; 0x07
    33a6:	98 85       	ldd	r25, Y+8	; 0x08
    33a8:	00 97       	sbiw	r24, 0x00	; 0
    33aa:	69 f0       	breq	.+26     	; 0x33c6 <TimingSelection+0x7a>
    33ac:	60 c0       	rjmp	.+192    	; 0x346e <TimingSelection+0x122>
    33ae:	2f 81       	ldd	r18, Y+7	; 0x07
    33b0:	38 85       	ldd	r19, Y+8	; 0x08
    33b2:	22 30       	cpi	r18, 0x02	; 2
    33b4:	31 05       	cpc	r19, r1
    33b6:	89 f1       	breq	.+98     	; 0x341a <TimingSelection+0xce>
    33b8:	8f 81       	ldd	r24, Y+7	; 0x07
    33ba:	98 85       	ldd	r25, Y+8	; 0x08
    33bc:	83 30       	cpi	r24, 0x03	; 3
    33be:	91 05       	cpc	r25, r1
    33c0:	09 f4       	brne	.+2      	; 0x33c4 <TimingSelection+0x78>
    33c2:	40 c0       	rjmp	.+128    	; 0x3444 <TimingSelection+0xf8>
    33c4:	54 c0       	rjmp	.+168    	; 0x346e <TimingSelection+0x122>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	41 e0       	ldi	r20, 0x01	; 1
    33cc:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	61 e0       	ldi	r22, 0x01	; 1
    33d4:	41 e0       	ldi	r20, 0x01	; 1
    33d6:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	60 e0       	ldi	r22, 0x00	; 0
    33de:	41 e0       	ldi	r20, 0x01	; 1
    33e0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	61 e0       	ldi	r22, 0x01	; 1
    33e8:	41 e0       	ldi	r20, 0x01	; 1
    33ea:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    33ee:	b9 c0       	rjmp	.+370    	; 0x3562 <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	60 e0       	ldi	r22, 0x00	; 0
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	61 e0       	ldi	r22, 0x01	; 1
    33fe:	41 e0       	ldi	r20, 0x01	; 1
    3400:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	40 e0       	ldi	r20, 0x00	; 0
    340a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	61 e0       	ldi	r22, 0x01	; 1
    3412:	41 e0       	ldi	r20, 0x01	; 1
    3414:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3418:	a4 c0       	rjmp	.+328    	; 0x3562 <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	41 e0       	ldi	r20, 0x01	; 1
    3420:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	61 e0       	ldi	r22, 0x01	; 1
    3428:	41 e0       	ldi	r20, 0x01	; 1
    342a:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	60 e0       	ldi	r22, 0x00	; 0
    3432:	41 e0       	ldi	r20, 0x01	; 1
    3434:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	61 e0       	ldi	r22, 0x01	; 1
    343c:	40 e0       	ldi	r20, 0x00	; 0
    343e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3442:	8f c0       	rjmp	.+286    	; 0x3562 <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	60 e0       	ldi	r22, 0x00	; 0
    3448:	41 e0       	ldi	r20, 0x01	; 1
    344a:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	61 e0       	ldi	r22, 0x01	; 1
    3452:	41 e0       	ldi	r20, 0x01	; 1
    3454:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	40 e0       	ldi	r20, 0x00	; 0
    345e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	61 e0       	ldi	r22, 0x01	; 1
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    346c:	7a c0       	rjmp	.+244    	; 0x3562 <TimingSelection+0x216>
						break;
					default: return E_OK;
    346e:	1e 82       	std	Y+6, r1	; 0x06
    3470:	7a c0       	rjmp	.+244    	; 0x3566 <TimingSelection+0x21a>
				}
		break;
		case CommonAnode:
			switch(Time)
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	28 2f       	mov	r18, r24
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	3d 83       	std	Y+5, r19	; 0x05
    347a:	2c 83       	std	Y+4, r18	; 0x04
    347c:	8c 81       	ldd	r24, Y+4	; 0x04
    347e:	9d 81       	ldd	r25, Y+5	; 0x05
    3480:	81 30       	cpi	r24, 0x01	; 1
    3482:	91 05       	cpc	r25, r1
    3484:	59 f1       	breq	.+86     	; 0x34dc <TimingSelection+0x190>
    3486:	2c 81       	ldd	r18, Y+4	; 0x04
    3488:	3d 81       	ldd	r19, Y+5	; 0x05
    348a:	22 30       	cpi	r18, 0x02	; 2
    348c:	31 05       	cpc	r19, r1
    348e:	2c f4       	brge	.+10     	; 0x349a <TimingSelection+0x14e>
    3490:	8c 81       	ldd	r24, Y+4	; 0x04
    3492:	9d 81       	ldd	r25, Y+5	; 0x05
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	69 f0       	breq	.+26     	; 0x34b2 <TimingSelection+0x166>
    3498:	60 c0       	rjmp	.+192    	; 0x355a <TimingSelection+0x20e>
    349a:	2c 81       	ldd	r18, Y+4	; 0x04
    349c:	3d 81       	ldd	r19, Y+5	; 0x05
    349e:	22 30       	cpi	r18, 0x02	; 2
    34a0:	31 05       	cpc	r19, r1
    34a2:	89 f1       	breq	.+98     	; 0x3506 <TimingSelection+0x1ba>
    34a4:	8c 81       	ldd	r24, Y+4	; 0x04
    34a6:	9d 81       	ldd	r25, Y+5	; 0x05
    34a8:	83 30       	cpi	r24, 0x03	; 3
    34aa:	91 05       	cpc	r25, r1
    34ac:	09 f4       	brne	.+2      	; 0x34b0 <TimingSelection+0x164>
    34ae:	40 c0       	rjmp	.+128    	; 0x3530 <TimingSelection+0x1e4>
    34b0:	54 c0       	rjmp	.+168    	; 0x355a <TimingSelection+0x20e>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	60 e0       	ldi	r22, 0x00	; 0
    34b6:	41 e0       	ldi	r20, 0x01	; 1
    34b8:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	61 e0       	ldi	r22, 0x01	; 1
    34c0:	41 e0       	ldi	r20, 0x01	; 1
    34c2:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	61 e0       	ldi	r22, 0x01	; 1
    34d4:	40 e0       	ldi	r20, 0x00	; 0
    34d6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    34da:	43 c0       	rjmp	.+134    	; 0x3562 <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	60 e0       	ldi	r22, 0x00	; 0
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	61 e0       	ldi	r22, 0x01	; 1
    34ea:	41 e0       	ldi	r20, 0x01	; 1
    34ec:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	41 e0       	ldi	r20, 0x01	; 1
    34f6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	61 e0       	ldi	r22, 0x01	; 1
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3504:	2e c0       	rjmp	.+92     	; 0x3562 <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	41 e0       	ldi	r20, 0x01	; 1
    350c:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	61 e0       	ldi	r22, 0x01	; 1
    3514:	41 e0       	ldi	r20, 0x01	; 1
    3516:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	40 e0       	ldi	r20, 0x00	; 0
    3520:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	61 e0       	ldi	r22, 0x01	; 1
    3528:	41 e0       	ldi	r20, 0x01	; 1
    352a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    352e:	19 c0       	rjmp	.+50     	; 0x3562 <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	60 e0       	ldi	r22, 0x00	; 0
    3534:	41 e0       	ldi	r20, 0x01	; 1
    3536:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	61 e0       	ldi	r22, 0x01	; 1
    353e:	41 e0       	ldi	r20, 0x01	; 1
    3540:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	41 e0       	ldi	r20, 0x01	; 1
    354a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	41 e0       	ldi	r20, 0x01	; 1
    3554:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3558:	04 c0       	rjmp	.+8      	; 0x3562 <TimingSelection+0x216>
						break;
					default: return E_OK;
    355a:	1e 82       	std	Y+6, r1	; 0x06
    355c:	04 c0       	rjmp	.+8      	; 0x3566 <TimingSelection+0x21a>
				}
		break;
		default:
		return E_OK;
    355e:	1e 82       	std	Y+6, r1	; 0x06
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <TimingSelection+0x21a>
			break;
			default:
			return E_OK;
		}
#endif
	return E_NOK;
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3568:	2a 96       	adiw	r28, 0x0a	; 10
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <SevenSegment_Display>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return SevenSegment_Display(DIO_Ports_t PORT,SevenSegment_Type_t TYPE,Display_Number_t NUM)
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
    3582:	6e 97       	sbiw	r28, 0x1e	; 30
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	89 83       	std	Y+1, r24	; 0x01
    3590:	6a 83       	std	Y+2, r22	; 0x02
    3592:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT)
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	3e 8f       	std	Y+30, r19	; 0x1e
    359c:	2d 8f       	std	Y+29, r18	; 0x1d
    359e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35a2:	81 30       	cpi	r24, 0x01	; 1
    35a4:	91 05       	cpc	r25, r1
    35a6:	09 f4       	brne	.+2      	; 0x35aa <SevenSegment_Display+0x30>
    35a8:	4f c2       	rjmp	.+1182   	; 0x3a48 <SevenSegment_Display+0x4ce>
    35aa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    35ac:	3e 8d       	ldd	r19, Y+30	; 0x1e
    35ae:	22 30       	cpi	r18, 0x02	; 2
    35b0:	31 05       	cpc	r19, r1
    35b2:	34 f4       	brge	.+12     	; 0x35c0 <SevenSegment_Display+0x46>
    35b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	81 f0       	breq	.+32     	; 0x35dc <SevenSegment_Display+0x62>
    35bc:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <SevenSegment_Display+0x11ca>
    35c0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    35c2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    35c4:	22 30       	cpi	r18, 0x02	; 2
    35c6:	31 05       	cpc	r19, r1
    35c8:	09 f4       	brne	.+2      	; 0x35cc <SevenSegment_Display+0x52>
    35ca:	68 c4       	rjmp	.+2256   	; 0x3e9c <SevenSegment_Display+0x922>
    35cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35d0:	83 30       	cpi	r24, 0x03	; 3
    35d2:	91 05       	cpc	r25, r1
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <SevenSegment_Display+0x5e>
    35d6:	8c c6       	rjmp	.+3352   	; 0x42f0 <SevenSegment_Display+0xd76>
    35d8:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <SevenSegment_Display+0x11ca>
	{
		case DIO_PORTA:
		switch(TYPE)
    35dc:	8a 81       	ldd	r24, Y+2	; 0x02
    35de:	28 2f       	mov	r18, r24
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	3c 8f       	std	Y+28, r19	; 0x1c
    35e4:	2b 8f       	std	Y+27, r18	; 0x1b
    35e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	39 f0       	breq	.+14     	; 0x35fc <SevenSegment_Display+0x82>
    35ee:	2b 8d       	ldd	r18, Y+27	; 0x1b
    35f0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    35f2:	21 30       	cpi	r18, 0x01	; 1
    35f4:	31 05       	cpc	r19, r1
    35f6:	09 f4       	brne	.+2      	; 0x35fa <SevenSegment_Display+0x80>
    35f8:	18 c1       	rjmp	.+560    	; 0x382a <SevenSegment_Display+0x2b0>
    35fa:	24 c2       	rjmp	.+1096   	; 0x3a44 <SevenSegment_Display+0x4ca>
			{
				case CommonCathod:
					DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	6f ef       	ldi	r22, 0xFF	; 255
    3600:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_LOW);
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	67 e0       	ldi	r22, 0x07	; 7
    3608:	40 e0       	ldi	r20, 0x00	; 0
    360a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
					switch(NUM)
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	28 2f       	mov	r18, r24
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	3a 8f       	std	Y+26, r19	; 0x1a
    3616:	29 8f       	std	Y+25, r18	; 0x19
    3618:	89 8d       	ldd	r24, Y+25	; 0x19
    361a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    361c:	84 30       	cpi	r24, 0x04	; 4
    361e:	91 05       	cpc	r25, r1
    3620:	09 f4       	brne	.+2      	; 0x3624 <SevenSegment_Display+0xaa>
    3622:	92 c0       	rjmp	.+292    	; 0x3748 <SevenSegment_Display+0x1ce>
    3624:	29 8d       	ldd	r18, Y+25	; 0x19
    3626:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3628:	25 30       	cpi	r18, 0x05	; 5
    362a:	31 05       	cpc	r19, r1
    362c:	ec f4       	brge	.+58     	; 0x3668 <SevenSegment_Display+0xee>
    362e:	89 8d       	ldd	r24, Y+25	; 0x19
    3630:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3632:	81 30       	cpi	r24, 0x01	; 1
    3634:	91 05       	cpc	r25, r1
    3636:	09 f4       	brne	.+2      	; 0x363a <SevenSegment_Display+0xc0>
    3638:	4b c0       	rjmp	.+150    	; 0x36d0 <SevenSegment_Display+0x156>
    363a:	29 8d       	ldd	r18, Y+25	; 0x19
    363c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    363e:	22 30       	cpi	r18, 0x02	; 2
    3640:	31 05       	cpc	r19, r1
    3642:	2c f4       	brge	.+10     	; 0x364e <SevenSegment_Display+0xd4>
    3644:	89 8d       	ldd	r24, Y+25	; 0x19
    3646:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	99 f1       	breq	.+102    	; 0x36b2 <SevenSegment_Display+0x138>
    364c:	eb c0       	rjmp	.+470    	; 0x3824 <SevenSegment_Display+0x2aa>
    364e:	29 8d       	ldd	r18, Y+25	; 0x19
    3650:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3652:	22 30       	cpi	r18, 0x02	; 2
    3654:	31 05       	cpc	r19, r1
    3656:	09 f4       	brne	.+2      	; 0x365a <SevenSegment_Display+0xe0>
    3658:	4f c0       	rjmp	.+158    	; 0x36f8 <SevenSegment_Display+0x17e>
    365a:	89 8d       	ldd	r24, Y+25	; 0x19
    365c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    365e:	83 30       	cpi	r24, 0x03	; 3
    3660:	91 05       	cpc	r25, r1
    3662:	09 f4       	brne	.+2      	; 0x3666 <SevenSegment_Display+0xec>
    3664:	5d c0       	rjmp	.+186    	; 0x3720 <SevenSegment_Display+0x1a6>
    3666:	de c0       	rjmp	.+444    	; 0x3824 <SevenSegment_Display+0x2aa>
    3668:	29 8d       	ldd	r18, Y+25	; 0x19
    366a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    366c:	27 30       	cpi	r18, 0x07	; 7
    366e:	31 05       	cpc	r19, r1
    3670:	09 f4       	brne	.+2      	; 0x3674 <SevenSegment_Display+0xfa>
    3672:	a6 c0       	rjmp	.+332    	; 0x37c0 <SevenSegment_Display+0x246>
    3674:	89 8d       	ldd	r24, Y+25	; 0x19
    3676:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3678:	88 30       	cpi	r24, 0x08	; 8
    367a:	91 05       	cpc	r25, r1
    367c:	6c f4       	brge	.+26     	; 0x3698 <SevenSegment_Display+0x11e>
    367e:	29 8d       	ldd	r18, Y+25	; 0x19
    3680:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3682:	25 30       	cpi	r18, 0x05	; 5
    3684:	31 05       	cpc	r19, r1
    3686:	09 f4       	brne	.+2      	; 0x368a <SevenSegment_Display+0x110>
    3688:	78 c0       	rjmp	.+240    	; 0x377a <SevenSegment_Display+0x200>
    368a:	89 8d       	ldd	r24, Y+25	; 0x19
    368c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    368e:	86 30       	cpi	r24, 0x06	; 6
    3690:	91 05       	cpc	r25, r1
    3692:	09 f4       	brne	.+2      	; 0x3696 <SevenSegment_Display+0x11c>
    3694:	86 c0       	rjmp	.+268    	; 0x37a2 <SevenSegment_Display+0x228>
    3696:	c6 c0       	rjmp	.+396    	; 0x3824 <SevenSegment_Display+0x2aa>
    3698:	29 8d       	ldd	r18, Y+25	; 0x19
    369a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    369c:	28 30       	cpi	r18, 0x08	; 8
    369e:	31 05       	cpc	r19, r1
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <SevenSegment_Display+0x12a>
    36a2:	a7 c0       	rjmp	.+334    	; 0x37f2 <SevenSegment_Display+0x278>
    36a4:	89 8d       	ldd	r24, Y+25	; 0x19
    36a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36a8:	89 30       	cpi	r24, 0x09	; 9
    36aa:	91 05       	cpc	r25, r1
    36ac:	09 f4       	brne	.+2      	; 0x36b0 <SevenSegment_Display+0x136>
    36ae:	ab c0       	rjmp	.+342    	; 0x3806 <SevenSegment_Display+0x28c>
    36b0:	b9 c0       	rjmp	.+370    	; 0x3824 <SevenSegment_Display+0x2aa>
						{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	6f ef       	ldi	r22, 0xFF	; 255
    36b6:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	6f ef       	ldi	r22, 0xFF	; 255
    36be:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_LOW);
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	66 e0       	ldi	r22, 0x06	; 6
    36c6:	40 e0       	ldi	r20, 0x00	; 0
    36c8:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    36cc:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	6f ef       	ldi	r22, 0xFF	; 255
    36d4:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	60 e0       	ldi	r22, 0x00	; 0
    36dc:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	61 e0       	ldi	r22, 0x01	; 1
    36e4:	41 e0       	ldi	r20, 0x01	; 1
    36e6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	62 e0       	ldi	r22, 0x02	; 2
    36ee:	41 e0       	ldi	r20, 0x01	; 1
    36f0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    36f4:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	6f ef       	ldi	r22, 0xFF	; 255
    36fc:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	6f ef       	ldi	r22, 0xFF	; 255
    3704:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	62 e0       	ldi	r22, 0x02	; 2
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	65 e0       	ldi	r22, 0x05	; 5
    3716:	40 e0       	ldi	r20, 0x00	; 0
    3718:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    371c:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	6f ef       	ldi	r22, 0xFF	; 255
    3724:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	6f ef       	ldi	r22, 0xFF	; 255
    372c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	64 e0       	ldi	r22, 0x04	; 4
    3734:	40 e0       	ldi	r20, 0x00	; 0
    3736:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	65 e0       	ldi	r22, 0x05	; 5
    373e:	40 e0       	ldi	r20, 0x00	; 0
    3740:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3744:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	6f ef       	ldi	r22, 0xFF	; 255
    374c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	6f ef       	ldi	r22, 0xFF	; 255
    3754:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	60 e0       	ldi	r22, 0x00	; 0
    375c:	40 e0       	ldi	r20, 0x00	; 0
    375e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_LOW);
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	63 e0       	ldi	r22, 0x03	; 3
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	64 e0       	ldi	r22, 0x04	; 4
    3770:	40 e0       	ldi	r20, 0x00	; 0
    3772:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3776:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	6f ef       	ldi	r22, 0xFF	; 255
    377e:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	6f ef       	ldi	r22, 0xFF	; 255
    3786:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	61 e0       	ldi	r22, 0x01	; 1
    378e:	40 e0       	ldi	r20, 0x00	; 0
    3790:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	64 e0       	ldi	r22, 0x04	; 4
    3798:	40 e0       	ldi	r20, 0x00	; 0
    379a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    379e:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	6f ef       	ldi	r22, 0xFF	; 255
    37a6:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	6f ef       	ldi	r22, 0xFF	; 255
    37ae:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	61 e0       	ldi	r22, 0x01	; 1
    37b6:	40 e0       	ldi	r20, 0x00	; 0
    37b8:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    37bc:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	6f ef       	ldi	r22, 0xFF	; 255
    37c4:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	60 e0       	ldi	r22, 0x00	; 0
    37cc:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	60 e0       	ldi	r22, 0x00	; 0
    37d4:	41 e0       	ldi	r20, 0x01	; 1
    37d6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	61 e0       	ldi	r22, 0x01	; 1
    37de:	41 e0       	ldi	r20, 0x01	; 1
    37e0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	62 e0       	ldi	r22, 0x02	; 2
    37e8:	41 e0       	ldi	r20, 0x01	; 1
    37ea:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    37ee:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	6f ef       	ldi	r22, 0xFF	; 255
    37f6:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	6f ef       	ldi	r22, 0xFF	; 255
    37fe:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
    3802:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	6f ef       	ldi	r22, 0xFF	; 255
    380a:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	6f ef       	ldi	r22, 0xFF	; 255
    3812:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	64 e0       	ldi	r22, 0x04	; 4
    381a:	40 e0       	ldi	r20, 0x00	; 0
    381c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3820:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    3824:	18 8e       	std	Y+24, r1	; 0x18
    3826:	0c 94 a6 23 	jmp	0x474c	; 0x474c <SevenSegment_Display+0x11d2>
					}
					break;
			case CommonAnode:
				DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	6f ef       	ldi	r22, 0xFF	; 255
    382e:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
				DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_HIGH);
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	67 e0       	ldi	r22, 0x07	; 7
    3836:	41 e0       	ldi	r20, 0x01	; 1
    3838:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
				switch(NUM)
    383c:	8b 81       	ldd	r24, Y+3	; 0x03
    383e:	28 2f       	mov	r18, r24
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	3f 8b       	std	Y+23, r19	; 0x17
    3844:	2e 8b       	std	Y+22, r18	; 0x16
    3846:	8e 89       	ldd	r24, Y+22	; 0x16
    3848:	9f 89       	ldd	r25, Y+23	; 0x17
    384a:	84 30       	cpi	r24, 0x04	; 4
    384c:	91 05       	cpc	r25, r1
    384e:	09 f4       	brne	.+2      	; 0x3852 <SevenSegment_Display+0x2d8>
    3850:	8f c0       	rjmp	.+286    	; 0x3970 <SevenSegment_Display+0x3f6>
    3852:	2e 89       	ldd	r18, Y+22	; 0x16
    3854:	3f 89       	ldd	r19, Y+23	; 0x17
    3856:	25 30       	cpi	r18, 0x05	; 5
    3858:	31 05       	cpc	r19, r1
    385a:	ec f4       	brge	.+58     	; 0x3896 <SevenSegment_Display+0x31c>
    385c:	8e 89       	ldd	r24, Y+22	; 0x16
    385e:	9f 89       	ldd	r25, Y+23	; 0x17
    3860:	81 30       	cpi	r24, 0x01	; 1
    3862:	91 05       	cpc	r25, r1
    3864:	09 f4       	brne	.+2      	; 0x3868 <SevenSegment_Display+0x2ee>
    3866:	4b c0       	rjmp	.+150    	; 0x38fe <SevenSegment_Display+0x384>
    3868:	2e 89       	ldd	r18, Y+22	; 0x16
    386a:	3f 89       	ldd	r19, Y+23	; 0x17
    386c:	22 30       	cpi	r18, 0x02	; 2
    386e:	31 05       	cpc	r19, r1
    3870:	2c f4       	brge	.+10     	; 0x387c <SevenSegment_Display+0x302>
    3872:	8e 89       	ldd	r24, Y+22	; 0x16
    3874:	9f 89       	ldd	r25, Y+23	; 0x17
    3876:	00 97       	sbiw	r24, 0x00	; 0
    3878:	99 f1       	breq	.+102    	; 0x38e0 <SevenSegment_Display+0x366>
    387a:	e2 c0       	rjmp	.+452    	; 0x3a40 <SevenSegment_Display+0x4c6>
    387c:	2e 89       	ldd	r18, Y+22	; 0x16
    387e:	3f 89       	ldd	r19, Y+23	; 0x17
    3880:	22 30       	cpi	r18, 0x02	; 2
    3882:	31 05       	cpc	r19, r1
    3884:	09 f4       	brne	.+2      	; 0x3888 <SevenSegment_Display+0x30e>
    3886:	4e c0       	rjmp	.+156    	; 0x3924 <SevenSegment_Display+0x3aa>
    3888:	8e 89       	ldd	r24, Y+22	; 0x16
    388a:	9f 89       	ldd	r25, Y+23	; 0x17
    388c:	83 30       	cpi	r24, 0x03	; 3
    388e:	91 05       	cpc	r25, r1
    3890:	09 f4       	brne	.+2      	; 0x3894 <SevenSegment_Display+0x31a>
    3892:	5b c0       	rjmp	.+182    	; 0x394a <SevenSegment_Display+0x3d0>
    3894:	d5 c0       	rjmp	.+426    	; 0x3a40 <SevenSegment_Display+0x4c6>
    3896:	2e 89       	ldd	r18, Y+22	; 0x16
    3898:	3f 89       	ldd	r19, Y+23	; 0x17
    389a:	27 30       	cpi	r18, 0x07	; 7
    389c:	31 05       	cpc	r19, r1
    389e:	09 f4       	brne	.+2      	; 0x38a2 <SevenSegment_Display+0x328>
    38a0:	a0 c0       	rjmp	.+320    	; 0x39e2 <SevenSegment_Display+0x468>
    38a2:	8e 89       	ldd	r24, Y+22	; 0x16
    38a4:	9f 89       	ldd	r25, Y+23	; 0x17
    38a6:	88 30       	cpi	r24, 0x08	; 8
    38a8:	91 05       	cpc	r25, r1
    38aa:	6c f4       	brge	.+26     	; 0x38c6 <SevenSegment_Display+0x34c>
    38ac:	2e 89       	ldd	r18, Y+22	; 0x16
    38ae:	3f 89       	ldd	r19, Y+23	; 0x17
    38b0:	25 30       	cpi	r18, 0x05	; 5
    38b2:	31 05       	cpc	r19, r1
    38b4:	09 f4       	brne	.+2      	; 0x38b8 <SevenSegment_Display+0x33e>
    38b6:	74 c0       	rjmp	.+232    	; 0x39a0 <SevenSegment_Display+0x426>
    38b8:	8e 89       	ldd	r24, Y+22	; 0x16
    38ba:	9f 89       	ldd	r25, Y+23	; 0x17
    38bc:	86 30       	cpi	r24, 0x06	; 6
    38be:	91 05       	cpc	r25, r1
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <SevenSegment_Display+0x34a>
    38c2:	81 c0       	rjmp	.+258    	; 0x39c6 <SevenSegment_Display+0x44c>
    38c4:	bd c0       	rjmp	.+378    	; 0x3a40 <SevenSegment_Display+0x4c6>
    38c6:	2e 89       	ldd	r18, Y+22	; 0x16
    38c8:	3f 89       	ldd	r19, Y+23	; 0x17
    38ca:	28 30       	cpi	r18, 0x08	; 8
    38cc:	31 05       	cpc	r19, r1
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <SevenSegment_Display+0x358>
    38d0:	a0 c0       	rjmp	.+320    	; 0x3a12 <SevenSegment_Display+0x498>
    38d2:	8e 89       	ldd	r24, Y+22	; 0x16
    38d4:	9f 89       	ldd	r25, Y+23	; 0x17
    38d6:	89 30       	cpi	r24, 0x09	; 9
    38d8:	91 05       	cpc	r25, r1
    38da:	09 f4       	brne	.+2      	; 0x38de <SevenSegment_Display+0x364>
    38dc:	a3 c0       	rjmp	.+326    	; 0x3a24 <SevenSegment_Display+0x4aa>
    38de:	b0 c0       	rjmp	.+352    	; 0x3a40 <SevenSegment_Display+0x4c6>
					{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    38e0:	80 e0       	ldi	r24, 0x00	; 0
    38e2:	6f ef       	ldi	r22, 0xFF	; 255
    38e4:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_HIGH);
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	66 e0       	ldi	r22, 0x06	; 6
    38f4:	41 e0       	ldi	r20, 0x01	; 1
    38f6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    38fa:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	6f ef       	ldi	r22, 0xFF	; 255
    3902:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	6f ef       	ldi	r22, 0xFF	; 255
    390a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	61 e0       	ldi	r22, 0x01	; 1
    3912:	40 e0       	ldi	r20, 0x00	; 0
    3914:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	62 e0       	ldi	r22, 0x02	; 2
    391c:	40 e0       	ldi	r20, 0x00	; 0
    391e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3922:	12 c7       	rjmp	.+3620   	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	6f ef       	ldi	r22, 0xFF	; 255
    3928:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	62 e0       	ldi	r22, 0x02	; 2
    3938:	41 e0       	ldi	r20, 0x01	; 1
    393a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	65 e0       	ldi	r22, 0x05	; 5
    3942:	41 e0       	ldi	r20, 0x01	; 1
    3944:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3948:	ff c6       	rjmp	.+3582   	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	6f ef       	ldi	r22, 0xFF	; 255
    394e:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	64 e0       	ldi	r22, 0x04	; 4
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	65 e0       	ldi	r22, 0x05	; 5
    3968:	41 e0       	ldi	r20, 0x01	; 1
    396a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    396e:	ec c6       	rjmp	.+3544   	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	6f ef       	ldi	r22, 0xFF	; 255
    3974:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	60 e0       	ldi	r22, 0x00	; 0
    397c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	60 e0       	ldi	r22, 0x00	; 0
    3984:	41 e0       	ldi	r20, 0x01	; 1
    3986:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_HIGH);
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	63 e0       	ldi	r22, 0x03	; 3
    398e:	41 e0       	ldi	r20, 0x01	; 1
    3990:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	64 e0       	ldi	r22, 0x04	; 4
    3998:	41 e0       	ldi	r20, 0x01	; 1
    399a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    399e:	d4 c6       	rjmp	.+3496   	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	6f ef       	ldi	r22, 0xFF	; 255
    39a4:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	60 e0       	ldi	r22, 0x00	; 0
    39ac:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	61 e0       	ldi	r22, 0x01	; 1
    39b4:	41 e0       	ldi	r20, 0x01	; 1
    39b6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	64 e0       	ldi	r22, 0x04	; 4
    39be:	41 e0       	ldi	r20, 0x01	; 1
    39c0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    39c4:	c1 c6       	rjmp	.+3458   	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	6f ef       	ldi	r22, 0xFF	; 255
    39ca:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	61 e0       	ldi	r22, 0x01	; 1
    39da:	41 e0       	ldi	r20, 0x01	; 1
    39dc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    39e0:	b3 c6       	rjmp	.+3430   	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	6f ef       	ldi	r22, 0xFF	; 255
    39e6:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	6f ef       	ldi	r22, 0xFF	; 255
    39ee:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	61 e0       	ldi	r22, 0x01	; 1
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	62 e0       	ldi	r22, 0x02	; 2
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3a10:	9b c6       	rjmp	.+3382   	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	6f ef       	ldi	r22, 0xFF	; 255
    3a16:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	60 e0       	ldi	r22, 0x00	; 0
    3a1e:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
    3a22:	92 c6       	rjmp	.+3364   	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	6f ef       	ldi	r22, 0xFF	; 255
    3a28:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	64 e0       	ldi	r22, 0x04	; 4
    3a38:	41 e0       	ldi	r20, 0x01	; 1
    3a3a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3a3e:	84 c6       	rjmp	.+3336   	; 0x4748 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    3a40:	18 8e       	std	Y+24, r1	; 0x18
    3a42:	84 c6       	rjmp	.+3336   	; 0x474c <SevenSegment_Display+0x11d2>
					}
			break;
			default:
			return E_OK;
    3a44:	18 8e       	std	Y+24, r1	; 0x18
    3a46:	82 c6       	rjmp	.+3332   	; 0x474c <SevenSegment_Display+0x11d2>
		}
		break;
		case DIO_PORTB:
			switch(TYPE)
    3a48:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4a:	28 2f       	mov	r18, r24
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	3d 8b       	std	Y+21, r19	; 0x15
    3a50:	2c 8b       	std	Y+20, r18	; 0x14
    3a52:	8c 89       	ldd	r24, Y+20	; 0x14
    3a54:	9d 89       	ldd	r25, Y+21	; 0x15
    3a56:	00 97       	sbiw	r24, 0x00	; 0
    3a58:	39 f0       	breq	.+14     	; 0x3a68 <SevenSegment_Display+0x4ee>
    3a5a:	2c 89       	ldd	r18, Y+20	; 0x14
    3a5c:	3d 89       	ldd	r19, Y+21	; 0x15
    3a5e:	21 30       	cpi	r18, 0x01	; 1
    3a60:	31 05       	cpc	r19, r1
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <SevenSegment_Display+0x4ec>
    3a64:	0d c1       	rjmp	.+538    	; 0x3c80 <SevenSegment_Display+0x706>
    3a66:	18 c2       	rjmp	.+1072   	; 0x3e98 <SevenSegment_Display+0x91e>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	6f ef       	ldi	r22, 0xFF	; 255
    3a6c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_LOW);
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	67 e0       	ldi	r22, 0x07	; 7
    3a74:	40 e0       	ldi	r20, 0x00	; 0
    3a76:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						switch(NUM)
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	28 2f       	mov	r18, r24
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	3b 8b       	std	Y+19, r19	; 0x13
    3a82:	2a 8b       	std	Y+18, r18	; 0x12
    3a84:	8a 89       	ldd	r24, Y+18	; 0x12
    3a86:	9b 89       	ldd	r25, Y+19	; 0x13
    3a88:	84 30       	cpi	r24, 0x04	; 4
    3a8a:	91 05       	cpc	r25, r1
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <SevenSegment_Display+0x516>
    3a8e:	8e c0       	rjmp	.+284    	; 0x3bac <SevenSegment_Display+0x632>
    3a90:	2a 89       	ldd	r18, Y+18	; 0x12
    3a92:	3b 89       	ldd	r19, Y+19	; 0x13
    3a94:	25 30       	cpi	r18, 0x05	; 5
    3a96:	31 05       	cpc	r19, r1
    3a98:	ec f4       	brge	.+58     	; 0x3ad4 <SevenSegment_Display+0x55a>
    3a9a:	8a 89       	ldd	r24, Y+18	; 0x12
    3a9c:	9b 89       	ldd	r25, Y+19	; 0x13
    3a9e:	81 30       	cpi	r24, 0x01	; 1
    3aa0:	91 05       	cpc	r25, r1
    3aa2:	09 f4       	brne	.+2      	; 0x3aa6 <SevenSegment_Display+0x52c>
    3aa4:	4a c0       	rjmp	.+148    	; 0x3b3a <SevenSegment_Display+0x5c0>
    3aa6:	2a 89       	ldd	r18, Y+18	; 0x12
    3aa8:	3b 89       	ldd	r19, Y+19	; 0x13
    3aaa:	22 30       	cpi	r18, 0x02	; 2
    3aac:	31 05       	cpc	r19, r1
    3aae:	2c f4       	brge	.+10     	; 0x3aba <SevenSegment_Display+0x540>
    3ab0:	8a 89       	ldd	r24, Y+18	; 0x12
    3ab2:	9b 89       	ldd	r25, Y+19	; 0x13
    3ab4:	00 97       	sbiw	r24, 0x00	; 0
    3ab6:	99 f1       	breq	.+102    	; 0x3b1e <SevenSegment_Display+0x5a4>
    3ab8:	e1 c0       	rjmp	.+450    	; 0x3c7c <SevenSegment_Display+0x702>
    3aba:	2a 89       	ldd	r18, Y+18	; 0x12
    3abc:	3b 89       	ldd	r19, Y+19	; 0x13
    3abe:	22 30       	cpi	r18, 0x02	; 2
    3ac0:	31 05       	cpc	r19, r1
    3ac2:	09 f4       	brne	.+2      	; 0x3ac6 <SevenSegment_Display+0x54c>
    3ac4:	4d c0       	rjmp	.+154    	; 0x3b60 <SevenSegment_Display+0x5e6>
    3ac6:	8a 89       	ldd	r24, Y+18	; 0x12
    3ac8:	9b 89       	ldd	r25, Y+19	; 0x13
    3aca:	83 30       	cpi	r24, 0x03	; 3
    3acc:	91 05       	cpc	r25, r1
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <SevenSegment_Display+0x558>
    3ad0:	5a c0       	rjmp	.+180    	; 0x3b86 <SevenSegment_Display+0x60c>
    3ad2:	d4 c0       	rjmp	.+424    	; 0x3c7c <SevenSegment_Display+0x702>
    3ad4:	2a 89       	ldd	r18, Y+18	; 0x12
    3ad6:	3b 89       	ldd	r19, Y+19	; 0x13
    3ad8:	27 30       	cpi	r18, 0x07	; 7
    3ada:	31 05       	cpc	r19, r1
    3adc:	09 f4       	brne	.+2      	; 0x3ae0 <SevenSegment_Display+0x566>
    3ade:	9f c0       	rjmp	.+318    	; 0x3c1e <SevenSegment_Display+0x6a4>
    3ae0:	8a 89       	ldd	r24, Y+18	; 0x12
    3ae2:	9b 89       	ldd	r25, Y+19	; 0x13
    3ae4:	88 30       	cpi	r24, 0x08	; 8
    3ae6:	91 05       	cpc	r25, r1
    3ae8:	6c f4       	brge	.+26     	; 0x3b04 <SevenSegment_Display+0x58a>
    3aea:	2a 89       	ldd	r18, Y+18	; 0x12
    3aec:	3b 89       	ldd	r19, Y+19	; 0x13
    3aee:	25 30       	cpi	r18, 0x05	; 5
    3af0:	31 05       	cpc	r19, r1
    3af2:	09 f4       	brne	.+2      	; 0x3af6 <SevenSegment_Display+0x57c>
    3af4:	73 c0       	rjmp	.+230    	; 0x3bdc <SevenSegment_Display+0x662>
    3af6:	8a 89       	ldd	r24, Y+18	; 0x12
    3af8:	9b 89       	ldd	r25, Y+19	; 0x13
    3afa:	86 30       	cpi	r24, 0x06	; 6
    3afc:	91 05       	cpc	r25, r1
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <SevenSegment_Display+0x588>
    3b00:	80 c0       	rjmp	.+256    	; 0x3c02 <SevenSegment_Display+0x688>
    3b02:	bc c0       	rjmp	.+376    	; 0x3c7c <SevenSegment_Display+0x702>
    3b04:	2a 89       	ldd	r18, Y+18	; 0x12
    3b06:	3b 89       	ldd	r19, Y+19	; 0x13
    3b08:	28 30       	cpi	r18, 0x08	; 8
    3b0a:	31 05       	cpc	r19, r1
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <SevenSegment_Display+0x596>
    3b0e:	9f c0       	rjmp	.+318    	; 0x3c4e <SevenSegment_Display+0x6d4>
    3b10:	8a 89       	ldd	r24, Y+18	; 0x12
    3b12:	9b 89       	ldd	r25, Y+19	; 0x13
    3b14:	89 30       	cpi	r24, 0x09	; 9
    3b16:	91 05       	cpc	r25, r1
    3b18:	09 f4       	brne	.+2      	; 0x3b1c <SevenSegment_Display+0x5a2>
    3b1a:	a2 c0       	rjmp	.+324    	; 0x3c60 <SevenSegment_Display+0x6e6>
    3b1c:	af c0       	rjmp	.+350    	; 0x3c7c <SevenSegment_Display+0x702>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	6f ef       	ldi	r22, 0xFF	; 255
    3b22:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	6f ef       	ldi	r22, 0xFF	; 255
    3b2a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_LOW);
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	66 e0       	ldi	r22, 0x06	; 6
    3b32:	40 e0       	ldi	r20, 0x00	; 0
    3b34:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3b38:	07 c6       	rjmp	.+3086   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	6f ef       	ldi	r22, 0xFF	; 255
    3b3e:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	60 e0       	ldi	r22, 0x00	; 0
    3b46:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	61 e0       	ldi	r22, 0x01	; 1
    3b4e:	41 e0       	ldi	r20, 0x01	; 1
    3b50:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	62 e0       	ldi	r22, 0x02	; 2
    3b58:	41 e0       	ldi	r20, 0x01	; 1
    3b5a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3b5e:	f4 c5       	rjmp	.+3048   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	6f ef       	ldi	r22, 0xFF	; 255
    3b64:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	6f ef       	ldi	r22, 0xFF	; 255
    3b6c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	62 e0       	ldi	r22, 0x02	; 2
    3b74:	40 e0       	ldi	r20, 0x00	; 0
    3b76:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	65 e0       	ldi	r22, 0x05	; 5
    3b7e:	40 e0       	ldi	r20, 0x00	; 0
    3b80:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3b84:	e1 c5       	rjmp	.+3010   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	6f ef       	ldi	r22, 0xFF	; 255
    3b8a:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	6f ef       	ldi	r22, 0xFF	; 255
    3b92:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	64 e0       	ldi	r22, 0x04	; 4
    3b9a:	40 e0       	ldi	r20, 0x00	; 0
    3b9c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	65 e0       	ldi	r22, 0x05	; 5
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3baa:	ce c5       	rjmp	.+2972   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	6f ef       	ldi	r22, 0xFF	; 255
    3bb0:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	6f ef       	ldi	r22, 0xFF	; 255
    3bb8:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	60 e0       	ldi	r22, 0x00	; 0
    3bc0:	40 e0       	ldi	r20, 0x00	; 0
    3bc2:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_LOW);
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	63 e0       	ldi	r22, 0x03	; 3
    3bca:	40 e0       	ldi	r20, 0x00	; 0
    3bcc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	64 e0       	ldi	r22, 0x04	; 4
    3bd4:	40 e0       	ldi	r20, 0x00	; 0
    3bd6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3bda:	b6 c5       	rjmp	.+2924   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	6f ef       	ldi	r22, 0xFF	; 255
    3be0:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	6f ef       	ldi	r22, 0xFF	; 255
    3be8:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	61 e0       	ldi	r22, 0x01	; 1
    3bf0:	40 e0       	ldi	r20, 0x00	; 0
    3bf2:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	64 e0       	ldi	r22, 0x04	; 4
    3bfa:	40 e0       	ldi	r20, 0x00	; 0
    3bfc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3c00:	a3 c5       	rjmp	.+2886   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	6f ef       	ldi	r22, 0xFF	; 255
    3c06:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	6f ef       	ldi	r22, 0xFF	; 255
    3c0e:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	61 e0       	ldi	r22, 0x01	; 1
    3c16:	40 e0       	ldi	r20, 0x00	; 0
    3c18:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3c1c:	95 c5       	rjmp	.+2858   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	6f ef       	ldi	r22, 0xFF	; 255
    3c22:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	60 e0       	ldi	r22, 0x00	; 0
    3c2a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	60 e0       	ldi	r22, 0x00	; 0
    3c32:	41 e0       	ldi	r20, 0x01	; 1
    3c34:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	61 e0       	ldi	r22, 0x01	; 1
    3c3c:	41 e0       	ldi	r20, 0x01	; 1
    3c3e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	62 e0       	ldi	r22, 0x02	; 2
    3c46:	41 e0       	ldi	r20, 0x01	; 1
    3c48:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3c4c:	7d c5       	rjmp	.+2810   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	6f ef       	ldi	r22, 0xFF	; 255
    3c52:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	6f ef       	ldi	r22, 0xFF	; 255
    3c5a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
    3c5e:	74 c5       	rjmp	.+2792   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	6f ef       	ldi	r22, 0xFF	; 255
    3c64:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	6f ef       	ldi	r22, 0xFF	; 255
    3c6c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	64 e0       	ldi	r22, 0x04	; 4
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3c7a:	66 c5       	rjmp	.+2764   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3c7c:	18 8e       	std	Y+24, r1	; 0x18
    3c7e:	66 c5       	rjmp	.+2764   	; 0x474c <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	6f ef       	ldi	r22, 0xFF	; 255
    3c84:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_HIGH);
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	67 e0       	ldi	r22, 0x07	; 7
    3c8c:	41 e0       	ldi	r20, 0x01	; 1
    3c8e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
					switch(NUM)
    3c92:	8b 81       	ldd	r24, Y+3	; 0x03
    3c94:	28 2f       	mov	r18, r24
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	39 8b       	std	Y+17, r19	; 0x11
    3c9a:	28 8b       	std	Y+16, r18	; 0x10
    3c9c:	88 89       	ldd	r24, Y+16	; 0x10
    3c9e:	99 89       	ldd	r25, Y+17	; 0x11
    3ca0:	84 30       	cpi	r24, 0x04	; 4
    3ca2:	91 05       	cpc	r25, r1
    3ca4:	09 f4       	brne	.+2      	; 0x3ca8 <SevenSegment_Display+0x72e>
    3ca6:	8e c0       	rjmp	.+284    	; 0x3dc4 <SevenSegment_Display+0x84a>
    3ca8:	28 89       	ldd	r18, Y+16	; 0x10
    3caa:	39 89       	ldd	r19, Y+17	; 0x11
    3cac:	25 30       	cpi	r18, 0x05	; 5
    3cae:	31 05       	cpc	r19, r1
    3cb0:	ec f4       	brge	.+58     	; 0x3cec <SevenSegment_Display+0x772>
    3cb2:	88 89       	ldd	r24, Y+16	; 0x10
    3cb4:	99 89       	ldd	r25, Y+17	; 0x11
    3cb6:	81 30       	cpi	r24, 0x01	; 1
    3cb8:	91 05       	cpc	r25, r1
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <SevenSegment_Display+0x744>
    3cbc:	4a c0       	rjmp	.+148    	; 0x3d52 <SevenSegment_Display+0x7d8>
    3cbe:	28 89       	ldd	r18, Y+16	; 0x10
    3cc0:	39 89       	ldd	r19, Y+17	; 0x11
    3cc2:	22 30       	cpi	r18, 0x02	; 2
    3cc4:	31 05       	cpc	r19, r1
    3cc6:	2c f4       	brge	.+10     	; 0x3cd2 <SevenSegment_Display+0x758>
    3cc8:	88 89       	ldd	r24, Y+16	; 0x10
    3cca:	99 89       	ldd	r25, Y+17	; 0x11
    3ccc:	00 97       	sbiw	r24, 0x00	; 0
    3cce:	99 f1       	breq	.+102    	; 0x3d36 <SevenSegment_Display+0x7bc>
    3cd0:	e1 c0       	rjmp	.+450    	; 0x3e94 <SevenSegment_Display+0x91a>
    3cd2:	28 89       	ldd	r18, Y+16	; 0x10
    3cd4:	39 89       	ldd	r19, Y+17	; 0x11
    3cd6:	22 30       	cpi	r18, 0x02	; 2
    3cd8:	31 05       	cpc	r19, r1
    3cda:	09 f4       	brne	.+2      	; 0x3cde <SevenSegment_Display+0x764>
    3cdc:	4d c0       	rjmp	.+154    	; 0x3d78 <SevenSegment_Display+0x7fe>
    3cde:	88 89       	ldd	r24, Y+16	; 0x10
    3ce0:	99 89       	ldd	r25, Y+17	; 0x11
    3ce2:	83 30       	cpi	r24, 0x03	; 3
    3ce4:	91 05       	cpc	r25, r1
    3ce6:	09 f4       	brne	.+2      	; 0x3cea <SevenSegment_Display+0x770>
    3ce8:	5a c0       	rjmp	.+180    	; 0x3d9e <SevenSegment_Display+0x824>
    3cea:	d4 c0       	rjmp	.+424    	; 0x3e94 <SevenSegment_Display+0x91a>
    3cec:	28 89       	ldd	r18, Y+16	; 0x10
    3cee:	39 89       	ldd	r19, Y+17	; 0x11
    3cf0:	27 30       	cpi	r18, 0x07	; 7
    3cf2:	31 05       	cpc	r19, r1
    3cf4:	09 f4       	brne	.+2      	; 0x3cf8 <SevenSegment_Display+0x77e>
    3cf6:	9f c0       	rjmp	.+318    	; 0x3e36 <SevenSegment_Display+0x8bc>
    3cf8:	88 89       	ldd	r24, Y+16	; 0x10
    3cfa:	99 89       	ldd	r25, Y+17	; 0x11
    3cfc:	88 30       	cpi	r24, 0x08	; 8
    3cfe:	91 05       	cpc	r25, r1
    3d00:	6c f4       	brge	.+26     	; 0x3d1c <SevenSegment_Display+0x7a2>
    3d02:	28 89       	ldd	r18, Y+16	; 0x10
    3d04:	39 89       	ldd	r19, Y+17	; 0x11
    3d06:	25 30       	cpi	r18, 0x05	; 5
    3d08:	31 05       	cpc	r19, r1
    3d0a:	09 f4       	brne	.+2      	; 0x3d0e <SevenSegment_Display+0x794>
    3d0c:	73 c0       	rjmp	.+230    	; 0x3df4 <SevenSegment_Display+0x87a>
    3d0e:	88 89       	ldd	r24, Y+16	; 0x10
    3d10:	99 89       	ldd	r25, Y+17	; 0x11
    3d12:	86 30       	cpi	r24, 0x06	; 6
    3d14:	91 05       	cpc	r25, r1
    3d16:	09 f4       	brne	.+2      	; 0x3d1a <SevenSegment_Display+0x7a0>
    3d18:	80 c0       	rjmp	.+256    	; 0x3e1a <SevenSegment_Display+0x8a0>
    3d1a:	bc c0       	rjmp	.+376    	; 0x3e94 <SevenSegment_Display+0x91a>
    3d1c:	28 89       	ldd	r18, Y+16	; 0x10
    3d1e:	39 89       	ldd	r19, Y+17	; 0x11
    3d20:	28 30       	cpi	r18, 0x08	; 8
    3d22:	31 05       	cpc	r19, r1
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <SevenSegment_Display+0x7ae>
    3d26:	9f c0       	rjmp	.+318    	; 0x3e66 <SevenSegment_Display+0x8ec>
    3d28:	88 89       	ldd	r24, Y+16	; 0x10
    3d2a:	99 89       	ldd	r25, Y+17	; 0x11
    3d2c:	89 30       	cpi	r24, 0x09	; 9
    3d2e:	91 05       	cpc	r25, r1
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <SevenSegment_Display+0x7ba>
    3d32:	a2 c0       	rjmp	.+324    	; 0x3e78 <SevenSegment_Display+0x8fe>
    3d34:	af c0       	rjmp	.+350    	; 0x3e94 <SevenSegment_Display+0x91a>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	6f ef       	ldi	r22, 0xFF	; 255
    3d3a:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	60 e0       	ldi	r22, 0x00	; 0
    3d42:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_HIGH);
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	66 e0       	ldi	r22, 0x06	; 6
    3d4a:	41 e0       	ldi	r20, 0x01	; 1
    3d4c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3d50:	fb c4       	rjmp	.+2550   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	6f ef       	ldi	r22, 0xFF	; 255
    3d56:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	6f ef       	ldi	r22, 0xFF	; 255
    3d5e:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	61 e0       	ldi	r22, 0x01	; 1
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	62 e0       	ldi	r22, 0x02	; 2
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3d76:	e8 c4       	rjmp	.+2512   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	6f ef       	ldi	r22, 0xFF	; 255
    3d7c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	62 e0       	ldi	r22, 0x02	; 2
    3d8c:	41 e0       	ldi	r20, 0x01	; 1
    3d8e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	65 e0       	ldi	r22, 0x05	; 5
    3d96:	41 e0       	ldi	r20, 0x01	; 1
    3d98:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3d9c:	d5 c4       	rjmp	.+2474   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	6f ef       	ldi	r22, 0xFF	; 255
    3da2:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	60 e0       	ldi	r22, 0x00	; 0
    3daa:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	64 e0       	ldi	r22, 0x04	; 4
    3db2:	41 e0       	ldi	r20, 0x01	; 1
    3db4:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	65 e0       	ldi	r22, 0x05	; 5
    3dbc:	41 e0       	ldi	r20, 0x01	; 1
    3dbe:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3dc2:	c2 c4       	rjmp	.+2436   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	6f ef       	ldi	r22, 0xFF	; 255
    3dc8:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	60 e0       	ldi	r22, 0x00	; 0
    3dd0:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	60 e0       	ldi	r22, 0x00	; 0
    3dd8:	41 e0       	ldi	r20, 0x01	; 1
    3dda:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_HIGH);
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	63 e0       	ldi	r22, 0x03	; 3
    3de2:	41 e0       	ldi	r20, 0x01	; 1
    3de4:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	64 e0       	ldi	r22, 0x04	; 4
    3dec:	41 e0       	ldi	r20, 0x01	; 1
    3dee:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3df2:	aa c4       	rjmp	.+2388   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	6f ef       	ldi	r22, 0xFF	; 255
    3df8:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	60 e0       	ldi	r22, 0x00	; 0
    3e00:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	61 e0       	ldi	r22, 0x01	; 1
    3e08:	41 e0       	ldi	r20, 0x01	; 1
    3e0a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	64 e0       	ldi	r22, 0x04	; 4
    3e12:	41 e0       	ldi	r20, 0x01	; 1
    3e14:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3e18:	97 c4       	rjmp	.+2350   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	6f ef       	ldi	r22, 0xFF	; 255
    3e1e:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	60 e0       	ldi	r22, 0x00	; 0
    3e26:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	61 e0       	ldi	r22, 0x01	; 1
    3e2e:	41 e0       	ldi	r20, 0x01	; 1
    3e30:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3e34:	89 c4       	rjmp	.+2322   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	6f ef       	ldi	r22, 0xFF	; 255
    3e3a:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	6f ef       	ldi	r22, 0xFF	; 255
    3e42:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	60 e0       	ldi	r22, 0x00	; 0
    3e4a:	40 e0       	ldi	r20, 0x00	; 0
    3e4c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	61 e0       	ldi	r22, 0x01	; 1
    3e54:	40 e0       	ldi	r20, 0x00	; 0
    3e56:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	62 e0       	ldi	r22, 0x02	; 2
    3e5e:	40 e0       	ldi	r20, 0x00	; 0
    3e60:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3e64:	71 c4       	rjmp	.+2274   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	6f ef       	ldi	r22, 0xFF	; 255
    3e6a:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	60 e0       	ldi	r22, 0x00	; 0
    3e72:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
    3e76:	68 c4       	rjmp	.+2256   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	6f ef       	ldi	r22, 0xFF	; 255
    3e7c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	64 e0       	ldi	r22, 0x04	; 4
    3e8c:	41 e0       	ldi	r20, 0x01	; 1
    3e8e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3e92:	5a c4       	rjmp	.+2228   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    3e94:	18 8e       	std	Y+24, r1	; 0x18
    3e96:	5a c4       	rjmp	.+2228   	; 0x474c <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    3e98:	18 8e       	std	Y+24, r1	; 0x18
    3e9a:	58 c4       	rjmp	.+2224   	; 0x474c <SevenSegment_Display+0x11d2>
			}
			break;
		case DIO_PORTC:
			switch(TYPE)
    3e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9e:	28 2f       	mov	r18, r24
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	3f 87       	std	Y+15, r19	; 0x0f
    3ea4:	2e 87       	std	Y+14, r18	; 0x0e
    3ea6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ea8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	39 f0       	breq	.+14     	; 0x3ebc <SevenSegment_Display+0x942>
    3eae:	2e 85       	ldd	r18, Y+14	; 0x0e
    3eb0:	3f 85       	ldd	r19, Y+15	; 0x0f
    3eb2:	21 30       	cpi	r18, 0x01	; 1
    3eb4:	31 05       	cpc	r19, r1
    3eb6:	09 f4       	brne	.+2      	; 0x3eba <SevenSegment_Display+0x940>
    3eb8:	0d c1       	rjmp	.+538    	; 0x40d4 <SevenSegment_Display+0xb5a>
    3eba:	18 c2       	rjmp	.+1072   	; 0x42ec <SevenSegment_Display+0xd72>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3ebc:	82 e0       	ldi	r24, 0x02	; 2
    3ebe:	6f ef       	ldi	r22, 0xFF	; 255
    3ec0:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_LOW);
    3ec4:	82 e0       	ldi	r24, 0x02	; 2
    3ec6:	67 e0       	ldi	r22, 0x07	; 7
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						switch(NUM)
    3ece:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed0:	28 2f       	mov	r18, r24
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	3d 87       	std	Y+13, r19	; 0x0d
    3ed6:	2c 87       	std	Y+12, r18	; 0x0c
    3ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3eda:	9d 85       	ldd	r25, Y+13	; 0x0d
    3edc:	84 30       	cpi	r24, 0x04	; 4
    3ede:	91 05       	cpc	r25, r1
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <SevenSegment_Display+0x96a>
    3ee2:	8e c0       	rjmp	.+284    	; 0x4000 <SevenSegment_Display+0xa86>
    3ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ee6:	3d 85       	ldd	r19, Y+13	; 0x0d
    3ee8:	25 30       	cpi	r18, 0x05	; 5
    3eea:	31 05       	cpc	r19, r1
    3eec:	ec f4       	brge	.+58     	; 0x3f28 <SevenSegment_Display+0x9ae>
    3eee:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ef0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ef2:	81 30       	cpi	r24, 0x01	; 1
    3ef4:	91 05       	cpc	r25, r1
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <SevenSegment_Display+0x980>
    3ef8:	4a c0       	rjmp	.+148    	; 0x3f8e <SevenSegment_Display+0xa14>
    3efa:	2c 85       	ldd	r18, Y+12	; 0x0c
    3efc:	3d 85       	ldd	r19, Y+13	; 0x0d
    3efe:	22 30       	cpi	r18, 0x02	; 2
    3f00:	31 05       	cpc	r19, r1
    3f02:	2c f4       	brge	.+10     	; 0x3f0e <SevenSegment_Display+0x994>
    3f04:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f06:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f08:	00 97       	sbiw	r24, 0x00	; 0
    3f0a:	99 f1       	breq	.+102    	; 0x3f72 <SevenSegment_Display+0x9f8>
    3f0c:	e1 c0       	rjmp	.+450    	; 0x40d0 <SevenSegment_Display+0xb56>
    3f0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f10:	3d 85       	ldd	r19, Y+13	; 0x0d
    3f12:	22 30       	cpi	r18, 0x02	; 2
    3f14:	31 05       	cpc	r19, r1
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <SevenSegment_Display+0x9a0>
    3f18:	4d c0       	rjmp	.+154    	; 0x3fb4 <SevenSegment_Display+0xa3a>
    3f1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f1e:	83 30       	cpi	r24, 0x03	; 3
    3f20:	91 05       	cpc	r25, r1
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <SevenSegment_Display+0x9ac>
    3f24:	5a c0       	rjmp	.+180    	; 0x3fda <SevenSegment_Display+0xa60>
    3f26:	d4 c0       	rjmp	.+424    	; 0x40d0 <SevenSegment_Display+0xb56>
    3f28:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f2a:	3d 85       	ldd	r19, Y+13	; 0x0d
    3f2c:	27 30       	cpi	r18, 0x07	; 7
    3f2e:	31 05       	cpc	r19, r1
    3f30:	09 f4       	brne	.+2      	; 0x3f34 <SevenSegment_Display+0x9ba>
    3f32:	9f c0       	rjmp	.+318    	; 0x4072 <SevenSegment_Display+0xaf8>
    3f34:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f36:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f38:	88 30       	cpi	r24, 0x08	; 8
    3f3a:	91 05       	cpc	r25, r1
    3f3c:	6c f4       	brge	.+26     	; 0x3f58 <SevenSegment_Display+0x9de>
    3f3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f40:	3d 85       	ldd	r19, Y+13	; 0x0d
    3f42:	25 30       	cpi	r18, 0x05	; 5
    3f44:	31 05       	cpc	r19, r1
    3f46:	09 f4       	brne	.+2      	; 0x3f4a <SevenSegment_Display+0x9d0>
    3f48:	73 c0       	rjmp	.+230    	; 0x4030 <SevenSegment_Display+0xab6>
    3f4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f4c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f4e:	86 30       	cpi	r24, 0x06	; 6
    3f50:	91 05       	cpc	r25, r1
    3f52:	09 f4       	brne	.+2      	; 0x3f56 <SevenSegment_Display+0x9dc>
    3f54:	80 c0       	rjmp	.+256    	; 0x4056 <SevenSegment_Display+0xadc>
    3f56:	bc c0       	rjmp	.+376    	; 0x40d0 <SevenSegment_Display+0xb56>
    3f58:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f5a:	3d 85       	ldd	r19, Y+13	; 0x0d
    3f5c:	28 30       	cpi	r18, 0x08	; 8
    3f5e:	31 05       	cpc	r19, r1
    3f60:	09 f4       	brne	.+2      	; 0x3f64 <SevenSegment_Display+0x9ea>
    3f62:	9f c0       	rjmp	.+318    	; 0x40a2 <SevenSegment_Display+0xb28>
    3f64:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f66:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f68:	89 30       	cpi	r24, 0x09	; 9
    3f6a:	91 05       	cpc	r25, r1
    3f6c:	09 f4       	brne	.+2      	; 0x3f70 <SevenSegment_Display+0x9f6>
    3f6e:	a2 c0       	rjmp	.+324    	; 0x40b4 <SevenSegment_Display+0xb3a>
    3f70:	af c0       	rjmp	.+350    	; 0x40d0 <SevenSegment_Display+0xb56>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f72:	82 e0       	ldi	r24, 0x02	; 2
    3f74:	6f ef       	ldi	r22, 0xFF	; 255
    3f76:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3f7a:	82 e0       	ldi	r24, 0x02	; 2
    3f7c:	6f ef       	ldi	r22, 0xFF	; 255
    3f7e:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_LOW);
    3f82:	82 e0       	ldi	r24, 0x02	; 2
    3f84:	66 e0       	ldi	r22, 0x06	; 6
    3f86:	40 e0       	ldi	r20, 0x00	; 0
    3f88:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3f8c:	dd c3       	rjmp	.+1978   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3f8e:	82 e0       	ldi	r24, 0x02	; 2
    3f90:	6f ef       	ldi	r22, 0xFF	; 255
    3f92:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3f96:	82 e0       	ldi	r24, 0x02	; 2
    3f98:	60 e0       	ldi	r22, 0x00	; 0
    3f9a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3f9e:	82 e0       	ldi	r24, 0x02	; 2
    3fa0:	61 e0       	ldi	r22, 0x01	; 1
    3fa2:	41 e0       	ldi	r20, 0x01	; 1
    3fa4:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3fa8:	82 e0       	ldi	r24, 0x02	; 2
    3faa:	62 e0       	ldi	r22, 0x02	; 2
    3fac:	41 e0       	ldi	r20, 0x01	; 1
    3fae:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3fb2:	ca c3       	rjmp	.+1940   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3fb4:	82 e0       	ldi	r24, 0x02	; 2
    3fb6:	6f ef       	ldi	r22, 0xFF	; 255
    3fb8:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3fbc:	82 e0       	ldi	r24, 0x02	; 2
    3fbe:	6f ef       	ldi	r22, 0xFF	; 255
    3fc0:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3fc4:	82 e0       	ldi	r24, 0x02	; 2
    3fc6:	62 e0       	ldi	r22, 0x02	; 2
    3fc8:	40 e0       	ldi	r20, 0x00	; 0
    3fca:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    3fce:	82 e0       	ldi	r24, 0x02	; 2
    3fd0:	65 e0       	ldi	r22, 0x05	; 5
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3fd8:	b7 c3       	rjmp	.+1902   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3fda:	82 e0       	ldi	r24, 0x02	; 2
    3fdc:	6f ef       	ldi	r22, 0xFF	; 255
    3fde:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3fe2:	82 e0       	ldi	r24, 0x02	; 2
    3fe4:	6f ef       	ldi	r22, 0xFF	; 255
    3fe6:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3fea:	82 e0       	ldi	r24, 0x02	; 2
    3fec:	64 e0       	ldi	r22, 0x04	; 4
    3fee:	40 e0       	ldi	r20, 0x00	; 0
    3ff0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    3ff4:	82 e0       	ldi	r24, 0x02	; 2
    3ff6:	65 e0       	ldi	r22, 0x05	; 5
    3ff8:	40 e0       	ldi	r20, 0x00	; 0
    3ffa:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    3ffe:	a4 c3       	rjmp	.+1864   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4000:	82 e0       	ldi	r24, 0x02	; 2
    4002:	6f ef       	ldi	r22, 0xFF	; 255
    4004:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    4008:	82 e0       	ldi	r24, 0x02	; 2
    400a:	6f ef       	ldi	r22, 0xFF	; 255
    400c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    4010:	82 e0       	ldi	r24, 0x02	; 2
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	40 e0       	ldi	r20, 0x00	; 0
    4016:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_LOW);
    401a:	82 e0       	ldi	r24, 0x02	; 2
    401c:	63 e0       	ldi	r22, 0x03	; 3
    401e:	40 e0       	ldi	r20, 0x00	; 0
    4020:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    4024:	82 e0       	ldi	r24, 0x02	; 2
    4026:	64 e0       	ldi	r22, 0x04	; 4
    4028:	40 e0       	ldi	r20, 0x00	; 0
    402a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    402e:	8c c3       	rjmp	.+1816   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4030:	82 e0       	ldi	r24, 0x02	; 2
    4032:	6f ef       	ldi	r22, 0xFF	; 255
    4034:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    4038:	82 e0       	ldi	r24, 0x02	; 2
    403a:	6f ef       	ldi	r22, 0xFF	; 255
    403c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    4040:	82 e0       	ldi	r24, 0x02	; 2
    4042:	61 e0       	ldi	r22, 0x01	; 1
    4044:	40 e0       	ldi	r20, 0x00	; 0
    4046:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    404a:	82 e0       	ldi	r24, 0x02	; 2
    404c:	64 e0       	ldi	r22, 0x04	; 4
    404e:	40 e0       	ldi	r20, 0x00	; 0
    4050:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4054:	79 c3       	rjmp	.+1778   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4056:	82 e0       	ldi	r24, 0x02	; 2
    4058:	6f ef       	ldi	r22, 0xFF	; 255
    405a:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    405e:	82 e0       	ldi	r24, 0x02	; 2
    4060:	6f ef       	ldi	r22, 0xFF	; 255
    4062:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    4066:	82 e0       	ldi	r24, 0x02	; 2
    4068:	61 e0       	ldi	r22, 0x01	; 1
    406a:	40 e0       	ldi	r20, 0x00	; 0
    406c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4070:	6b c3       	rjmp	.+1750   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4072:	82 e0       	ldi	r24, 0x02	; 2
    4074:	6f ef       	ldi	r22, 0xFF	; 255
    4076:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    407a:	82 e0       	ldi	r24, 0x02	; 2
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    4082:	82 e0       	ldi	r24, 0x02	; 2
    4084:	60 e0       	ldi	r22, 0x00	; 0
    4086:	41 e0       	ldi	r20, 0x01	; 1
    4088:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    408c:	82 e0       	ldi	r24, 0x02	; 2
    408e:	61 e0       	ldi	r22, 0x01	; 1
    4090:	41 e0       	ldi	r20, 0x01	; 1
    4092:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    4096:	82 e0       	ldi	r24, 0x02	; 2
    4098:	62 e0       	ldi	r22, 0x02	; 2
    409a:	41 e0       	ldi	r20, 0x01	; 1
    409c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    40a0:	53 c3       	rjmp	.+1702   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    40a2:	82 e0       	ldi	r24, 0x02	; 2
    40a4:	6f ef       	ldi	r22, 0xFF	; 255
    40a6:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    40aa:	82 e0       	ldi	r24, 0x02	; 2
    40ac:	6f ef       	ldi	r22, 0xFF	; 255
    40ae:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
    40b2:	4a c3       	rjmp	.+1684   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    40b4:	82 e0       	ldi	r24, 0x02	; 2
    40b6:	6f ef       	ldi	r22, 0xFF	; 255
    40b8:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    40bc:	82 e0       	ldi	r24, 0x02	; 2
    40be:	6f ef       	ldi	r22, 0xFF	; 255
    40c0:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    40c4:	82 e0       	ldi	r24, 0x02	; 2
    40c6:	64 e0       	ldi	r22, 0x04	; 4
    40c8:	40 e0       	ldi	r20, 0x00	; 0
    40ca:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    40ce:	3c c3       	rjmp	.+1656   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    40d0:	18 8e       	std	Y+24, r1	; 0x18
    40d2:	3c c3       	rjmp	.+1656   	; 0x474c <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    40d4:	82 e0       	ldi	r24, 0x02	; 2
    40d6:	6f ef       	ldi	r22, 0xFF	; 255
    40d8:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_HIGH);
    40dc:	82 e0       	ldi	r24, 0x02	; 2
    40de:	67 e0       	ldi	r22, 0x07	; 7
    40e0:	41 e0       	ldi	r20, 0x01	; 1
    40e2:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
					switch(NUM)
    40e6:	8b 81       	ldd	r24, Y+3	; 0x03
    40e8:	28 2f       	mov	r18, r24
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	3b 87       	std	Y+11, r19	; 0x0b
    40ee:	2a 87       	std	Y+10, r18	; 0x0a
    40f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    40f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    40f4:	84 30       	cpi	r24, 0x04	; 4
    40f6:	91 05       	cpc	r25, r1
    40f8:	09 f4       	brne	.+2      	; 0x40fc <SevenSegment_Display+0xb82>
    40fa:	8e c0       	rjmp	.+284    	; 0x4218 <SevenSegment_Display+0xc9e>
    40fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    40fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    4100:	25 30       	cpi	r18, 0x05	; 5
    4102:	31 05       	cpc	r19, r1
    4104:	ec f4       	brge	.+58     	; 0x4140 <SevenSegment_Display+0xbc6>
    4106:	8a 85       	ldd	r24, Y+10	; 0x0a
    4108:	9b 85       	ldd	r25, Y+11	; 0x0b
    410a:	81 30       	cpi	r24, 0x01	; 1
    410c:	91 05       	cpc	r25, r1
    410e:	09 f4       	brne	.+2      	; 0x4112 <SevenSegment_Display+0xb98>
    4110:	4a c0       	rjmp	.+148    	; 0x41a6 <SevenSegment_Display+0xc2c>
    4112:	2a 85       	ldd	r18, Y+10	; 0x0a
    4114:	3b 85       	ldd	r19, Y+11	; 0x0b
    4116:	22 30       	cpi	r18, 0x02	; 2
    4118:	31 05       	cpc	r19, r1
    411a:	2c f4       	brge	.+10     	; 0x4126 <SevenSegment_Display+0xbac>
    411c:	8a 85       	ldd	r24, Y+10	; 0x0a
    411e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	99 f1       	breq	.+102    	; 0x418a <SevenSegment_Display+0xc10>
    4124:	e1 c0       	rjmp	.+450    	; 0x42e8 <SevenSegment_Display+0xd6e>
    4126:	2a 85       	ldd	r18, Y+10	; 0x0a
    4128:	3b 85       	ldd	r19, Y+11	; 0x0b
    412a:	22 30       	cpi	r18, 0x02	; 2
    412c:	31 05       	cpc	r19, r1
    412e:	09 f4       	brne	.+2      	; 0x4132 <SevenSegment_Display+0xbb8>
    4130:	4d c0       	rjmp	.+154    	; 0x41cc <SevenSegment_Display+0xc52>
    4132:	8a 85       	ldd	r24, Y+10	; 0x0a
    4134:	9b 85       	ldd	r25, Y+11	; 0x0b
    4136:	83 30       	cpi	r24, 0x03	; 3
    4138:	91 05       	cpc	r25, r1
    413a:	09 f4       	brne	.+2      	; 0x413e <SevenSegment_Display+0xbc4>
    413c:	5a c0       	rjmp	.+180    	; 0x41f2 <SevenSegment_Display+0xc78>
    413e:	d4 c0       	rjmp	.+424    	; 0x42e8 <SevenSegment_Display+0xd6e>
    4140:	2a 85       	ldd	r18, Y+10	; 0x0a
    4142:	3b 85       	ldd	r19, Y+11	; 0x0b
    4144:	27 30       	cpi	r18, 0x07	; 7
    4146:	31 05       	cpc	r19, r1
    4148:	09 f4       	brne	.+2      	; 0x414c <SevenSegment_Display+0xbd2>
    414a:	9f c0       	rjmp	.+318    	; 0x428a <SevenSegment_Display+0xd10>
    414c:	8a 85       	ldd	r24, Y+10	; 0x0a
    414e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4150:	88 30       	cpi	r24, 0x08	; 8
    4152:	91 05       	cpc	r25, r1
    4154:	6c f4       	brge	.+26     	; 0x4170 <SevenSegment_Display+0xbf6>
    4156:	2a 85       	ldd	r18, Y+10	; 0x0a
    4158:	3b 85       	ldd	r19, Y+11	; 0x0b
    415a:	25 30       	cpi	r18, 0x05	; 5
    415c:	31 05       	cpc	r19, r1
    415e:	09 f4       	brne	.+2      	; 0x4162 <SevenSegment_Display+0xbe8>
    4160:	73 c0       	rjmp	.+230    	; 0x4248 <SevenSegment_Display+0xcce>
    4162:	8a 85       	ldd	r24, Y+10	; 0x0a
    4164:	9b 85       	ldd	r25, Y+11	; 0x0b
    4166:	86 30       	cpi	r24, 0x06	; 6
    4168:	91 05       	cpc	r25, r1
    416a:	09 f4       	brne	.+2      	; 0x416e <SevenSegment_Display+0xbf4>
    416c:	80 c0       	rjmp	.+256    	; 0x426e <SevenSegment_Display+0xcf4>
    416e:	bc c0       	rjmp	.+376    	; 0x42e8 <SevenSegment_Display+0xd6e>
    4170:	2a 85       	ldd	r18, Y+10	; 0x0a
    4172:	3b 85       	ldd	r19, Y+11	; 0x0b
    4174:	28 30       	cpi	r18, 0x08	; 8
    4176:	31 05       	cpc	r19, r1
    4178:	09 f4       	brne	.+2      	; 0x417c <SevenSegment_Display+0xc02>
    417a:	9f c0       	rjmp	.+318    	; 0x42ba <SevenSegment_Display+0xd40>
    417c:	8a 85       	ldd	r24, Y+10	; 0x0a
    417e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4180:	89 30       	cpi	r24, 0x09	; 9
    4182:	91 05       	cpc	r25, r1
    4184:	09 f4       	brne	.+2      	; 0x4188 <SevenSegment_Display+0xc0e>
    4186:	a2 c0       	rjmp	.+324    	; 0x42cc <SevenSegment_Display+0xd52>
    4188:	af c0       	rjmp	.+350    	; 0x42e8 <SevenSegment_Display+0xd6e>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    418a:	82 e0       	ldi	r24, 0x02	; 2
    418c:	6f ef       	ldi	r22, 0xFF	; 255
    418e:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4192:	82 e0       	ldi	r24, 0x02	; 2
    4194:	60 e0       	ldi	r22, 0x00	; 0
    4196:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_HIGH);
    419a:	82 e0       	ldi	r24, 0x02	; 2
    419c:	66 e0       	ldi	r22, 0x06	; 6
    419e:	41 e0       	ldi	r20, 0x01	; 1
    41a0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    41a4:	d1 c2       	rjmp	.+1442   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    41a6:	82 e0       	ldi	r24, 0x02	; 2
    41a8:	6f ef       	ldi	r22, 0xFF	; 255
    41aa:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    41ae:	82 e0       	ldi	r24, 0x02	; 2
    41b0:	6f ef       	ldi	r22, 0xFF	; 255
    41b2:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    41b6:	82 e0       	ldi	r24, 0x02	; 2
    41b8:	61 e0       	ldi	r22, 0x01	; 1
    41ba:	40 e0       	ldi	r20, 0x00	; 0
    41bc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    41c0:	82 e0       	ldi	r24, 0x02	; 2
    41c2:	62 e0       	ldi	r22, 0x02	; 2
    41c4:	40 e0       	ldi	r20, 0x00	; 0
    41c6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    41ca:	be c2       	rjmp	.+1404   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    41cc:	82 e0       	ldi	r24, 0x02	; 2
    41ce:	6f ef       	ldi	r22, 0xFF	; 255
    41d0:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    41d4:	82 e0       	ldi	r24, 0x02	; 2
    41d6:	60 e0       	ldi	r22, 0x00	; 0
    41d8:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    41dc:	82 e0       	ldi	r24, 0x02	; 2
    41de:	62 e0       	ldi	r22, 0x02	; 2
    41e0:	41 e0       	ldi	r20, 0x01	; 1
    41e2:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    41e6:	82 e0       	ldi	r24, 0x02	; 2
    41e8:	65 e0       	ldi	r22, 0x05	; 5
    41ea:	41 e0       	ldi	r20, 0x01	; 1
    41ec:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    41f0:	ab c2       	rjmp	.+1366   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    41f2:	82 e0       	ldi	r24, 0x02	; 2
    41f4:	6f ef       	ldi	r22, 0xFF	; 255
    41f6:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    41fa:	82 e0       	ldi	r24, 0x02	; 2
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    4202:	82 e0       	ldi	r24, 0x02	; 2
    4204:	64 e0       	ldi	r22, 0x04	; 4
    4206:	41 e0       	ldi	r20, 0x01	; 1
    4208:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    420c:	82 e0       	ldi	r24, 0x02	; 2
    420e:	65 e0       	ldi	r22, 0x05	; 5
    4210:	41 e0       	ldi	r20, 0x01	; 1
    4212:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4216:	98 c2       	rjmp	.+1328   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	6f ef       	ldi	r22, 0xFF	; 255
    421c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4220:	82 e0       	ldi	r24, 0x02	; 2
    4222:	60 e0       	ldi	r22, 0x00	; 0
    4224:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    4228:	82 e0       	ldi	r24, 0x02	; 2
    422a:	60 e0       	ldi	r22, 0x00	; 0
    422c:	41 e0       	ldi	r20, 0x01	; 1
    422e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_HIGH);
    4232:	82 e0       	ldi	r24, 0x02	; 2
    4234:	63 e0       	ldi	r22, 0x03	; 3
    4236:	41 e0       	ldi	r20, 0x01	; 1
    4238:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    423c:	82 e0       	ldi	r24, 0x02	; 2
    423e:	64 e0       	ldi	r22, 0x04	; 4
    4240:	41 e0       	ldi	r20, 0x01	; 1
    4242:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4246:	80 c2       	rjmp	.+1280   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    4248:	82 e0       	ldi	r24, 0x02	; 2
    424a:	6f ef       	ldi	r22, 0xFF	; 255
    424c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4250:	82 e0       	ldi	r24, 0x02	; 2
    4252:	60 e0       	ldi	r22, 0x00	; 0
    4254:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    4258:	82 e0       	ldi	r24, 0x02	; 2
    425a:	61 e0       	ldi	r22, 0x01	; 1
    425c:	41 e0       	ldi	r20, 0x01	; 1
    425e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    4262:	82 e0       	ldi	r24, 0x02	; 2
    4264:	64 e0       	ldi	r22, 0x04	; 4
    4266:	41 e0       	ldi	r20, 0x01	; 1
    4268:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    426c:	6d c2       	rjmp	.+1242   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    426e:	82 e0       	ldi	r24, 0x02	; 2
    4270:	6f ef       	ldi	r22, 0xFF	; 255
    4272:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    4276:	82 e0       	ldi	r24, 0x02	; 2
    4278:	60 e0       	ldi	r22, 0x00	; 0
    427a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    427e:	82 e0       	ldi	r24, 0x02	; 2
    4280:	61 e0       	ldi	r22, 0x01	; 1
    4282:	41 e0       	ldi	r20, 0x01	; 1
    4284:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4288:	5f c2       	rjmp	.+1214   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    428a:	82 e0       	ldi	r24, 0x02	; 2
    428c:	6f ef       	ldi	r22, 0xFF	; 255
    428e:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    4292:	82 e0       	ldi	r24, 0x02	; 2
    4294:	6f ef       	ldi	r22, 0xFF	; 255
    4296:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    429a:	82 e0       	ldi	r24, 0x02	; 2
    429c:	60 e0       	ldi	r22, 0x00	; 0
    429e:	40 e0       	ldi	r20, 0x00	; 0
    42a0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    42a4:	82 e0       	ldi	r24, 0x02	; 2
    42a6:	61 e0       	ldi	r22, 0x01	; 1
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    42ae:	82 e0       	ldi	r24, 0x02	; 2
    42b0:	62 e0       	ldi	r22, 0x02	; 2
    42b2:	40 e0       	ldi	r20, 0x00	; 0
    42b4:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    42b8:	47 c2       	rjmp	.+1166   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    42ba:	82 e0       	ldi	r24, 0x02	; 2
    42bc:	6f ef       	ldi	r22, 0xFF	; 255
    42be:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    42c2:	82 e0       	ldi	r24, 0x02	; 2
    42c4:	60 e0       	ldi	r22, 0x00	; 0
    42c6:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
    42ca:	3e c2       	rjmp	.+1148   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    42cc:	82 e0       	ldi	r24, 0x02	; 2
    42ce:	6f ef       	ldi	r22, 0xFF	; 255
    42d0:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    42d4:	82 e0       	ldi	r24, 0x02	; 2
    42d6:	60 e0       	ldi	r22, 0x00	; 0
    42d8:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    42dc:	82 e0       	ldi	r24, 0x02	; 2
    42de:	64 e0       	ldi	r22, 0x04	; 4
    42e0:	41 e0       	ldi	r20, 0x01	; 1
    42e2:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    42e6:	30 c2       	rjmp	.+1120   	; 0x4748 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    42e8:	18 8e       	std	Y+24, r1	; 0x18
    42ea:	30 c2       	rjmp	.+1120   	; 0x474c <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    42ec:	18 8e       	std	Y+24, r1	; 0x18
    42ee:	2e c2       	rjmp	.+1116   	; 0x474c <SevenSegment_Display+0x11d2>
			}
			break;
			case DIO_PORTD:
				switch(TYPE)
    42f0:	8a 81       	ldd	r24, Y+2	; 0x02
    42f2:	28 2f       	mov	r18, r24
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	39 87       	std	Y+9, r19	; 0x09
    42f8:	28 87       	std	Y+8, r18	; 0x08
    42fa:	88 85       	ldd	r24, Y+8	; 0x08
    42fc:	99 85       	ldd	r25, Y+9	; 0x09
    42fe:	00 97       	sbiw	r24, 0x00	; 0
    4300:	39 f0       	breq	.+14     	; 0x4310 <SevenSegment_Display+0xd96>
    4302:	28 85       	ldd	r18, Y+8	; 0x08
    4304:	39 85       	ldd	r19, Y+9	; 0x09
    4306:	21 30       	cpi	r18, 0x01	; 1
    4308:	31 05       	cpc	r19, r1
    430a:	09 f4       	brne	.+2      	; 0x430e <SevenSegment_Display+0xd94>
    430c:	0d c1       	rjmp	.+538    	; 0x4528 <SevenSegment_Display+0xfae>
    430e:	18 c2       	rjmp	.+1072   	; 0x4740 <SevenSegment_Display+0x11c6>
					{
						case CommonCathod:
							DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4310:	83 e0       	ldi	r24, 0x03	; 3
    4312:	6f ef       	ldi	r22, 0xFF	; 255
    4314:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
							DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_LOW);
    4318:	83 e0       	ldi	r24, 0x03	; 3
    431a:	67 e0       	ldi	r22, 0x07	; 7
    431c:	40 e0       	ldi	r20, 0x00	; 0
    431e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
							switch(NUM)
    4322:	8b 81       	ldd	r24, Y+3	; 0x03
    4324:	28 2f       	mov	r18, r24
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	3f 83       	std	Y+7, r19	; 0x07
    432a:	2e 83       	std	Y+6, r18	; 0x06
    432c:	8e 81       	ldd	r24, Y+6	; 0x06
    432e:	9f 81       	ldd	r25, Y+7	; 0x07
    4330:	84 30       	cpi	r24, 0x04	; 4
    4332:	91 05       	cpc	r25, r1
    4334:	09 f4       	brne	.+2      	; 0x4338 <SevenSegment_Display+0xdbe>
    4336:	8e c0       	rjmp	.+284    	; 0x4454 <SevenSegment_Display+0xeda>
    4338:	2e 81       	ldd	r18, Y+6	; 0x06
    433a:	3f 81       	ldd	r19, Y+7	; 0x07
    433c:	25 30       	cpi	r18, 0x05	; 5
    433e:	31 05       	cpc	r19, r1
    4340:	ec f4       	brge	.+58     	; 0x437c <SevenSegment_Display+0xe02>
    4342:	8e 81       	ldd	r24, Y+6	; 0x06
    4344:	9f 81       	ldd	r25, Y+7	; 0x07
    4346:	81 30       	cpi	r24, 0x01	; 1
    4348:	91 05       	cpc	r25, r1
    434a:	09 f4       	brne	.+2      	; 0x434e <SevenSegment_Display+0xdd4>
    434c:	4a c0       	rjmp	.+148    	; 0x43e2 <SevenSegment_Display+0xe68>
    434e:	2e 81       	ldd	r18, Y+6	; 0x06
    4350:	3f 81       	ldd	r19, Y+7	; 0x07
    4352:	22 30       	cpi	r18, 0x02	; 2
    4354:	31 05       	cpc	r19, r1
    4356:	2c f4       	brge	.+10     	; 0x4362 <SevenSegment_Display+0xde8>
    4358:	8e 81       	ldd	r24, Y+6	; 0x06
    435a:	9f 81       	ldd	r25, Y+7	; 0x07
    435c:	00 97       	sbiw	r24, 0x00	; 0
    435e:	99 f1       	breq	.+102    	; 0x43c6 <SevenSegment_Display+0xe4c>
    4360:	e1 c0       	rjmp	.+450    	; 0x4524 <SevenSegment_Display+0xfaa>
    4362:	2e 81       	ldd	r18, Y+6	; 0x06
    4364:	3f 81       	ldd	r19, Y+7	; 0x07
    4366:	22 30       	cpi	r18, 0x02	; 2
    4368:	31 05       	cpc	r19, r1
    436a:	09 f4       	brne	.+2      	; 0x436e <SevenSegment_Display+0xdf4>
    436c:	4d c0       	rjmp	.+154    	; 0x4408 <SevenSegment_Display+0xe8e>
    436e:	8e 81       	ldd	r24, Y+6	; 0x06
    4370:	9f 81       	ldd	r25, Y+7	; 0x07
    4372:	83 30       	cpi	r24, 0x03	; 3
    4374:	91 05       	cpc	r25, r1
    4376:	09 f4       	brne	.+2      	; 0x437a <SevenSegment_Display+0xe00>
    4378:	5a c0       	rjmp	.+180    	; 0x442e <SevenSegment_Display+0xeb4>
    437a:	d4 c0       	rjmp	.+424    	; 0x4524 <SevenSegment_Display+0xfaa>
    437c:	2e 81       	ldd	r18, Y+6	; 0x06
    437e:	3f 81       	ldd	r19, Y+7	; 0x07
    4380:	27 30       	cpi	r18, 0x07	; 7
    4382:	31 05       	cpc	r19, r1
    4384:	09 f4       	brne	.+2      	; 0x4388 <SevenSegment_Display+0xe0e>
    4386:	9f c0       	rjmp	.+318    	; 0x44c6 <SevenSegment_Display+0xf4c>
    4388:	8e 81       	ldd	r24, Y+6	; 0x06
    438a:	9f 81       	ldd	r25, Y+7	; 0x07
    438c:	88 30       	cpi	r24, 0x08	; 8
    438e:	91 05       	cpc	r25, r1
    4390:	6c f4       	brge	.+26     	; 0x43ac <SevenSegment_Display+0xe32>
    4392:	2e 81       	ldd	r18, Y+6	; 0x06
    4394:	3f 81       	ldd	r19, Y+7	; 0x07
    4396:	25 30       	cpi	r18, 0x05	; 5
    4398:	31 05       	cpc	r19, r1
    439a:	09 f4       	brne	.+2      	; 0x439e <SevenSegment_Display+0xe24>
    439c:	73 c0       	rjmp	.+230    	; 0x4484 <SevenSegment_Display+0xf0a>
    439e:	8e 81       	ldd	r24, Y+6	; 0x06
    43a0:	9f 81       	ldd	r25, Y+7	; 0x07
    43a2:	86 30       	cpi	r24, 0x06	; 6
    43a4:	91 05       	cpc	r25, r1
    43a6:	09 f4       	brne	.+2      	; 0x43aa <SevenSegment_Display+0xe30>
    43a8:	80 c0       	rjmp	.+256    	; 0x44aa <SevenSegment_Display+0xf30>
    43aa:	bc c0       	rjmp	.+376    	; 0x4524 <SevenSegment_Display+0xfaa>
    43ac:	2e 81       	ldd	r18, Y+6	; 0x06
    43ae:	3f 81       	ldd	r19, Y+7	; 0x07
    43b0:	28 30       	cpi	r18, 0x08	; 8
    43b2:	31 05       	cpc	r19, r1
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <SevenSegment_Display+0xe3e>
    43b6:	9f c0       	rjmp	.+318    	; 0x44f6 <SevenSegment_Display+0xf7c>
    43b8:	8e 81       	ldd	r24, Y+6	; 0x06
    43ba:	9f 81       	ldd	r25, Y+7	; 0x07
    43bc:	89 30       	cpi	r24, 0x09	; 9
    43be:	91 05       	cpc	r25, r1
    43c0:	09 f4       	brne	.+2      	; 0x43c4 <SevenSegment_Display+0xe4a>
    43c2:	a2 c0       	rjmp	.+324    	; 0x4508 <SevenSegment_Display+0xf8e>
    43c4:	af c0       	rjmp	.+350    	; 0x4524 <SevenSegment_Display+0xfaa>
								{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    43c6:	83 e0       	ldi	r24, 0x03	; 3
    43c8:	6f ef       	ldi	r22, 0xFF	; 255
    43ca:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    43ce:	83 e0       	ldi	r24, 0x03	; 3
    43d0:	6f ef       	ldi	r22, 0xFF	; 255
    43d2:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_LOW);
    43d6:	83 e0       	ldi	r24, 0x03	; 3
    43d8:	66 e0       	ldi	r22, 0x06	; 6
    43da:	40 e0       	ldi	r20, 0x00	; 0
    43dc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    43e0:	b3 c1       	rjmp	.+870    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    43e2:	83 e0       	ldi	r24, 0x03	; 3
    43e4:	6f ef       	ldi	r22, 0xFF	; 255
    43e6:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    43ea:	83 e0       	ldi	r24, 0x03	; 3
    43ec:	60 e0       	ldi	r22, 0x00	; 0
    43ee:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    43f2:	83 e0       	ldi	r24, 0x03	; 3
    43f4:	61 e0       	ldi	r22, 0x01	; 1
    43f6:	41 e0       	ldi	r20, 0x01	; 1
    43f8:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    43fc:	83 e0       	ldi	r24, 0x03	; 3
    43fe:	62 e0       	ldi	r22, 0x02	; 2
    4400:	41 e0       	ldi	r20, 0x01	; 1
    4402:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4406:	a0 c1       	rjmp	.+832    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4408:	83 e0       	ldi	r24, 0x03	; 3
    440a:	6f ef       	ldi	r22, 0xFF	; 255
    440c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4410:	83 e0       	ldi	r24, 0x03	; 3
    4412:	6f ef       	ldi	r22, 0xFF	; 255
    4414:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    4418:	83 e0       	ldi	r24, 0x03	; 3
    441a:	62 e0       	ldi	r22, 0x02	; 2
    441c:	40 e0       	ldi	r20, 0x00	; 0
    441e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    4422:	83 e0       	ldi	r24, 0x03	; 3
    4424:	65 e0       	ldi	r22, 0x05	; 5
    4426:	40 e0       	ldi	r20, 0x00	; 0
    4428:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    442c:	8d c1       	rjmp	.+794    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    442e:	83 e0       	ldi	r24, 0x03	; 3
    4430:	6f ef       	ldi	r22, 0xFF	; 255
    4432:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4436:	83 e0       	ldi	r24, 0x03	; 3
    4438:	6f ef       	ldi	r22, 0xFF	; 255
    443a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    443e:	83 e0       	ldi	r24, 0x03	; 3
    4440:	64 e0       	ldi	r22, 0x04	; 4
    4442:	40 e0       	ldi	r20, 0x00	; 0
    4444:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    4448:	83 e0       	ldi	r24, 0x03	; 3
    444a:	65 e0       	ldi	r22, 0x05	; 5
    444c:	40 e0       	ldi	r20, 0x00	; 0
    444e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4452:	7a c1       	rjmp	.+756    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4454:	83 e0       	ldi	r24, 0x03	; 3
    4456:	6f ef       	ldi	r22, 0xFF	; 255
    4458:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    445c:	83 e0       	ldi	r24, 0x03	; 3
    445e:	6f ef       	ldi	r22, 0xFF	; 255
    4460:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    4464:	83 e0       	ldi	r24, 0x03	; 3
    4466:	60 e0       	ldi	r22, 0x00	; 0
    4468:	40 e0       	ldi	r20, 0x00	; 0
    446a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_LOW);
    446e:	83 e0       	ldi	r24, 0x03	; 3
    4470:	63 e0       	ldi	r22, 0x03	; 3
    4472:	40 e0       	ldi	r20, 0x00	; 0
    4474:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    4478:	83 e0       	ldi	r24, 0x03	; 3
    447a:	64 e0       	ldi	r22, 0x04	; 4
    447c:	40 e0       	ldi	r20, 0x00	; 0
    447e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4482:	62 c1       	rjmp	.+708    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4484:	83 e0       	ldi	r24, 0x03	; 3
    4486:	6f ef       	ldi	r22, 0xFF	; 255
    4488:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    448c:	83 e0       	ldi	r24, 0x03	; 3
    448e:	6f ef       	ldi	r22, 0xFF	; 255
    4490:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    4494:	83 e0       	ldi	r24, 0x03	; 3
    4496:	61 e0       	ldi	r22, 0x01	; 1
    4498:	40 e0       	ldi	r20, 0x00	; 0
    449a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    449e:	83 e0       	ldi	r24, 0x03	; 3
    44a0:	64 e0       	ldi	r22, 0x04	; 4
    44a2:	40 e0       	ldi	r20, 0x00	; 0
    44a4:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    44a8:	4f c1       	rjmp	.+670    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    44aa:	83 e0       	ldi	r24, 0x03	; 3
    44ac:	6f ef       	ldi	r22, 0xFF	; 255
    44ae:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    44b2:	83 e0       	ldi	r24, 0x03	; 3
    44b4:	6f ef       	ldi	r22, 0xFF	; 255
    44b6:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    44ba:	83 e0       	ldi	r24, 0x03	; 3
    44bc:	61 e0       	ldi	r22, 0x01	; 1
    44be:	40 e0       	ldi	r20, 0x00	; 0
    44c0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    44c4:	41 c1       	rjmp	.+642    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    44c6:	83 e0       	ldi	r24, 0x03	; 3
    44c8:	6f ef       	ldi	r22, 0xFF	; 255
    44ca:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    44ce:	83 e0       	ldi	r24, 0x03	; 3
    44d0:	60 e0       	ldi	r22, 0x00	; 0
    44d2:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    44d6:	83 e0       	ldi	r24, 0x03	; 3
    44d8:	60 e0       	ldi	r22, 0x00	; 0
    44da:	41 e0       	ldi	r20, 0x01	; 1
    44dc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    44e0:	83 e0       	ldi	r24, 0x03	; 3
    44e2:	61 e0       	ldi	r22, 0x01	; 1
    44e4:	41 e0       	ldi	r20, 0x01	; 1
    44e6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    44ea:	83 e0       	ldi	r24, 0x03	; 3
    44ec:	62 e0       	ldi	r22, 0x02	; 2
    44ee:	41 e0       	ldi	r20, 0x01	; 1
    44f0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    44f4:	29 c1       	rjmp	.+594    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    44f6:	83 e0       	ldi	r24, 0x03	; 3
    44f8:	6f ef       	ldi	r22, 0xFF	; 255
    44fa:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    44fe:	83 e0       	ldi	r24, 0x03	; 3
    4500:	6f ef       	ldi	r22, 0xFF	; 255
    4502:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
    4506:	20 c1       	rjmp	.+576    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4508:	83 e0       	ldi	r24, 0x03	; 3
    450a:	6f ef       	ldi	r22, 0xFF	; 255
    450c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4510:	83 e0       	ldi	r24, 0x03	; 3
    4512:	6f ef       	ldi	r22, 0xFF	; 255
    4514:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    4518:	83 e0       	ldi	r24, 0x03	; 3
    451a:	64 e0       	ldi	r22, 0x04	; 4
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4522:	12 c1       	rjmp	.+548    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    4524:	18 8e       	std	Y+24, r1	; 0x18
    4526:	12 c1       	rjmp	.+548    	; 0x474c <SevenSegment_Display+0x11d2>
							}
							break;
					case CommonAnode:
						DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4528:	83 e0       	ldi	r24, 0x03	; 3
    452a:	6f ef       	ldi	r22, 0xFF	; 255
    452c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_HIGH);
    4530:	83 e0       	ldi	r24, 0x03	; 3
    4532:	67 e0       	ldi	r22, 0x07	; 7
    4534:	41 e0       	ldi	r20, 0x01	; 1
    4536:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
						switch(NUM)
    453a:	8b 81       	ldd	r24, Y+3	; 0x03
    453c:	28 2f       	mov	r18, r24
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	3d 83       	std	Y+5, r19	; 0x05
    4542:	2c 83       	std	Y+4, r18	; 0x04
    4544:	8c 81       	ldd	r24, Y+4	; 0x04
    4546:	9d 81       	ldd	r25, Y+5	; 0x05
    4548:	84 30       	cpi	r24, 0x04	; 4
    454a:	91 05       	cpc	r25, r1
    454c:	09 f4       	brne	.+2      	; 0x4550 <SevenSegment_Display+0xfd6>
    454e:	8e c0       	rjmp	.+284    	; 0x466c <SevenSegment_Display+0x10f2>
    4550:	2c 81       	ldd	r18, Y+4	; 0x04
    4552:	3d 81       	ldd	r19, Y+5	; 0x05
    4554:	25 30       	cpi	r18, 0x05	; 5
    4556:	31 05       	cpc	r19, r1
    4558:	ec f4       	brge	.+58     	; 0x4594 <SevenSegment_Display+0x101a>
    455a:	8c 81       	ldd	r24, Y+4	; 0x04
    455c:	9d 81       	ldd	r25, Y+5	; 0x05
    455e:	81 30       	cpi	r24, 0x01	; 1
    4560:	91 05       	cpc	r25, r1
    4562:	09 f4       	brne	.+2      	; 0x4566 <SevenSegment_Display+0xfec>
    4564:	4a c0       	rjmp	.+148    	; 0x45fa <SevenSegment_Display+0x1080>
    4566:	2c 81       	ldd	r18, Y+4	; 0x04
    4568:	3d 81       	ldd	r19, Y+5	; 0x05
    456a:	22 30       	cpi	r18, 0x02	; 2
    456c:	31 05       	cpc	r19, r1
    456e:	2c f4       	brge	.+10     	; 0x457a <SevenSegment_Display+0x1000>
    4570:	8c 81       	ldd	r24, Y+4	; 0x04
    4572:	9d 81       	ldd	r25, Y+5	; 0x05
    4574:	00 97       	sbiw	r24, 0x00	; 0
    4576:	99 f1       	breq	.+102    	; 0x45de <SevenSegment_Display+0x1064>
    4578:	e1 c0       	rjmp	.+450    	; 0x473c <SevenSegment_Display+0x11c2>
    457a:	2c 81       	ldd	r18, Y+4	; 0x04
    457c:	3d 81       	ldd	r19, Y+5	; 0x05
    457e:	22 30       	cpi	r18, 0x02	; 2
    4580:	31 05       	cpc	r19, r1
    4582:	09 f4       	brne	.+2      	; 0x4586 <SevenSegment_Display+0x100c>
    4584:	4d c0       	rjmp	.+154    	; 0x4620 <SevenSegment_Display+0x10a6>
    4586:	8c 81       	ldd	r24, Y+4	; 0x04
    4588:	9d 81       	ldd	r25, Y+5	; 0x05
    458a:	83 30       	cpi	r24, 0x03	; 3
    458c:	91 05       	cpc	r25, r1
    458e:	09 f4       	brne	.+2      	; 0x4592 <SevenSegment_Display+0x1018>
    4590:	5a c0       	rjmp	.+180    	; 0x4646 <SevenSegment_Display+0x10cc>
    4592:	d4 c0       	rjmp	.+424    	; 0x473c <SevenSegment_Display+0x11c2>
    4594:	2c 81       	ldd	r18, Y+4	; 0x04
    4596:	3d 81       	ldd	r19, Y+5	; 0x05
    4598:	27 30       	cpi	r18, 0x07	; 7
    459a:	31 05       	cpc	r19, r1
    459c:	09 f4       	brne	.+2      	; 0x45a0 <SevenSegment_Display+0x1026>
    459e:	9f c0       	rjmp	.+318    	; 0x46de <SevenSegment_Display+0x1164>
    45a0:	8c 81       	ldd	r24, Y+4	; 0x04
    45a2:	9d 81       	ldd	r25, Y+5	; 0x05
    45a4:	88 30       	cpi	r24, 0x08	; 8
    45a6:	91 05       	cpc	r25, r1
    45a8:	6c f4       	brge	.+26     	; 0x45c4 <SevenSegment_Display+0x104a>
    45aa:	2c 81       	ldd	r18, Y+4	; 0x04
    45ac:	3d 81       	ldd	r19, Y+5	; 0x05
    45ae:	25 30       	cpi	r18, 0x05	; 5
    45b0:	31 05       	cpc	r19, r1
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <SevenSegment_Display+0x103c>
    45b4:	73 c0       	rjmp	.+230    	; 0x469c <SevenSegment_Display+0x1122>
    45b6:	8c 81       	ldd	r24, Y+4	; 0x04
    45b8:	9d 81       	ldd	r25, Y+5	; 0x05
    45ba:	86 30       	cpi	r24, 0x06	; 6
    45bc:	91 05       	cpc	r25, r1
    45be:	09 f4       	brne	.+2      	; 0x45c2 <SevenSegment_Display+0x1048>
    45c0:	80 c0       	rjmp	.+256    	; 0x46c2 <SevenSegment_Display+0x1148>
    45c2:	bc c0       	rjmp	.+376    	; 0x473c <SevenSegment_Display+0x11c2>
    45c4:	2c 81       	ldd	r18, Y+4	; 0x04
    45c6:	3d 81       	ldd	r19, Y+5	; 0x05
    45c8:	28 30       	cpi	r18, 0x08	; 8
    45ca:	31 05       	cpc	r19, r1
    45cc:	09 f4       	brne	.+2      	; 0x45d0 <SevenSegment_Display+0x1056>
    45ce:	9f c0       	rjmp	.+318    	; 0x470e <SevenSegment_Display+0x1194>
    45d0:	8c 81       	ldd	r24, Y+4	; 0x04
    45d2:	9d 81       	ldd	r25, Y+5	; 0x05
    45d4:	89 30       	cpi	r24, 0x09	; 9
    45d6:	91 05       	cpc	r25, r1
    45d8:	09 f4       	brne	.+2      	; 0x45dc <SevenSegment_Display+0x1062>
    45da:	a2 c0       	rjmp	.+324    	; 0x4720 <SevenSegment_Display+0x11a6>
    45dc:	af c0       	rjmp	.+350    	; 0x473c <SevenSegment_Display+0x11c2>
							{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    45de:	83 e0       	ldi	r24, 0x03	; 3
    45e0:	6f ef       	ldi	r22, 0xFF	; 255
    45e2:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    45e6:	83 e0       	ldi	r24, 0x03	; 3
    45e8:	60 e0       	ldi	r22, 0x00	; 0
    45ea:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_HIGH);
    45ee:	83 e0       	ldi	r24, 0x03	; 3
    45f0:	66 e0       	ldi	r22, 0x06	; 6
    45f2:	41 e0       	ldi	r20, 0x01	; 1
    45f4:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    45f8:	a7 c0       	rjmp	.+334    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    45fa:	83 e0       	ldi	r24, 0x03	; 3
    45fc:	6f ef       	ldi	r22, 0xFF	; 255
    45fe:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    4602:	83 e0       	ldi	r24, 0x03	; 3
    4604:	6f ef       	ldi	r22, 0xFF	; 255
    4606:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    460a:	83 e0       	ldi	r24, 0x03	; 3
    460c:	61 e0       	ldi	r22, 0x01	; 1
    460e:	40 e0       	ldi	r20, 0x00	; 0
    4610:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    4614:	83 e0       	ldi	r24, 0x03	; 3
    4616:	62 e0       	ldi	r22, 0x02	; 2
    4618:	40 e0       	ldi	r20, 0x00	; 0
    461a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    461e:	94 c0       	rjmp	.+296    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4620:	83 e0       	ldi	r24, 0x03	; 3
    4622:	6f ef       	ldi	r22, 0xFF	; 255
    4624:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4628:	83 e0       	ldi	r24, 0x03	; 3
    462a:	60 e0       	ldi	r22, 0x00	; 0
    462c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    4630:	83 e0       	ldi	r24, 0x03	; 3
    4632:	62 e0       	ldi	r22, 0x02	; 2
    4634:	41 e0       	ldi	r20, 0x01	; 1
    4636:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    463a:	83 e0       	ldi	r24, 0x03	; 3
    463c:	65 e0       	ldi	r22, 0x05	; 5
    463e:	41 e0       	ldi	r20, 0x01	; 1
    4640:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4644:	81 c0       	rjmp	.+258    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4646:	83 e0       	ldi	r24, 0x03	; 3
    4648:	6f ef       	ldi	r22, 0xFF	; 255
    464a:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    464e:	83 e0       	ldi	r24, 0x03	; 3
    4650:	60 e0       	ldi	r22, 0x00	; 0
    4652:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    4656:	83 e0       	ldi	r24, 0x03	; 3
    4658:	64 e0       	ldi	r22, 0x04	; 4
    465a:	41 e0       	ldi	r20, 0x01	; 1
    465c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    4660:	83 e0       	ldi	r24, 0x03	; 3
    4662:	65 e0       	ldi	r22, 0x05	; 5
    4664:	41 e0       	ldi	r20, 0x01	; 1
    4666:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    466a:	6e c0       	rjmp	.+220    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    466c:	83 e0       	ldi	r24, 0x03	; 3
    466e:	6f ef       	ldi	r22, 0xFF	; 255
    4670:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4674:	83 e0       	ldi	r24, 0x03	; 3
    4676:	60 e0       	ldi	r22, 0x00	; 0
    4678:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    467c:	83 e0       	ldi	r24, 0x03	; 3
    467e:	60 e0       	ldi	r22, 0x00	; 0
    4680:	41 e0       	ldi	r20, 0x01	; 1
    4682:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_HIGH);
    4686:	83 e0       	ldi	r24, 0x03	; 3
    4688:	63 e0       	ldi	r22, 0x03	; 3
    468a:	41 e0       	ldi	r20, 0x01	; 1
    468c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    4690:	83 e0       	ldi	r24, 0x03	; 3
    4692:	64 e0       	ldi	r22, 0x04	; 4
    4694:	41 e0       	ldi	r20, 0x01	; 1
    4696:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    469a:	56 c0       	rjmp	.+172    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    469c:	83 e0       	ldi	r24, 0x03	; 3
    469e:	6f ef       	ldi	r22, 0xFF	; 255
    46a0:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    46a4:	83 e0       	ldi	r24, 0x03	; 3
    46a6:	60 e0       	ldi	r22, 0x00	; 0
    46a8:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    46ac:	83 e0       	ldi	r24, 0x03	; 3
    46ae:	61 e0       	ldi	r22, 0x01	; 1
    46b0:	41 e0       	ldi	r20, 0x01	; 1
    46b2:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    46b6:	83 e0       	ldi	r24, 0x03	; 3
    46b8:	64 e0       	ldi	r22, 0x04	; 4
    46ba:	41 e0       	ldi	r20, 0x01	; 1
    46bc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    46c0:	43 c0       	rjmp	.+134    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    46c2:	83 e0       	ldi	r24, 0x03	; 3
    46c4:	6f ef       	ldi	r22, 0xFF	; 255
    46c6:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    46ca:	83 e0       	ldi	r24, 0x03	; 3
    46cc:	60 e0       	ldi	r22, 0x00	; 0
    46ce:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    46d2:	83 e0       	ldi	r24, 0x03	; 3
    46d4:	61 e0       	ldi	r22, 0x01	; 1
    46d6:	41 e0       	ldi	r20, 0x01	; 1
    46d8:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    46dc:	35 c0       	rjmp	.+106    	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    46de:	83 e0       	ldi	r24, 0x03	; 3
    46e0:	6f ef       	ldi	r22, 0xFF	; 255
    46e2:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    46e6:	83 e0       	ldi	r24, 0x03	; 3
    46e8:	6f ef       	ldi	r22, 0xFF	; 255
    46ea:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    46ee:	83 e0       	ldi	r24, 0x03	; 3
    46f0:	60 e0       	ldi	r22, 0x00	; 0
    46f2:	40 e0       	ldi	r20, 0x00	; 0
    46f4:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    46f8:	83 e0       	ldi	r24, 0x03	; 3
    46fa:	61 e0       	ldi	r22, 0x01	; 1
    46fc:	40 e0       	ldi	r20, 0x00	; 0
    46fe:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    4702:	83 e0       	ldi	r24, 0x03	; 3
    4704:	62 e0       	ldi	r22, 0x02	; 2
    4706:	40 e0       	ldi	r20, 0x00	; 0
    4708:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    470c:	1d c0       	rjmp	.+58     	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    470e:	83 e0       	ldi	r24, 0x03	; 3
    4710:	6f ef       	ldi	r22, 0xFF	; 255
    4712:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4716:	83 e0       	ldi	r24, 0x03	; 3
    4718:	60 e0       	ldi	r22, 0x00	; 0
    471a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
    471e:	14 c0       	rjmp	.+40     	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    4720:	83 e0       	ldi	r24, 0x03	; 3
    4722:	6f ef       	ldi	r22, 0xFF	; 255
    4724:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    4728:	83 e0       	ldi	r24, 0x03	; 3
    472a:	60 e0       	ldi	r22, 0x00	; 0
    472c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    4730:	83 e0       	ldi	r24, 0x03	; 3
    4732:	64 e0       	ldi	r22, 0x04	; 4
    4734:	41 e0       	ldi	r20, 0x01	; 1
    4736:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    473a:	06 c0       	rjmp	.+12     	; 0x4748 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    473c:	18 8e       	std	Y+24, r1	; 0x18
    473e:	06 c0       	rjmp	.+12     	; 0x474c <SevenSegment_Display+0x11d2>
							}
					break;
					default:
					return E_OK;
    4740:	18 8e       	std	Y+24, r1	; 0x18
    4742:	04 c0       	rjmp	.+8      	; 0x474c <SevenSegment_Display+0x11d2>
				}
				break;
	default:
	return E_OK;
    4744:	18 8e       	std	Y+24, r1	; 0x18
    4746:	02 c0       	rjmp	.+4      	; 0x474c <SevenSegment_Display+0x11d2>
}
	return E_NOK;
    4748:	91 e0       	ldi	r25, 0x01	; 1
    474a:	98 8f       	std	Y+24, r25	; 0x18
    474c:	88 8d       	ldd	r24, Y+24	; 0x18
}
    474e:	6e 96       	adiw	r28, 0x1e	; 30
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	f8 94       	cli
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	cd bf       	out	0x3d, r28	; 61
    475a:	cf 91       	pop	r28
    475c:	df 91       	pop	r29
    475e:	08 95       	ret

00004760 <CLCD_init>:
#include "LCD_Config.h"
#include <util/delay.h>


void CLCD_init(void)
{
    4760:	df 93       	push	r29
    4762:	cf 93       	push	r28
    4764:	cd b7       	in	r28, 0x3d	; 61
    4766:	de b7       	in	r29, 0x3e	; 62
    4768:	e8 97       	sbiw	r28, 0x38	; 56
    476a:	0f b6       	in	r0, 0x3f	; 63
    476c:	f8 94       	cli
    476e:	de bf       	out	0x3e, r29	; 62
    4770:	0f be       	out	0x3f, r0	; 63
    4772:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(40);


	#elif defined CLCD_4_BitMode
			/*Initialize LCD pins direction*/
				DIO_SetPinDirection(CLCD_DataPort,Data_Pin7,DIO_OUTPUT);
    4774:	82 e0       	ldi	r24, 0x02	; 2
    4776:	67 e0       	ldi	r22, 0x07	; 7
    4778:	41 e0       	ldi	r20, 0x01	; 1
    477a:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_DataPort,Data_Pin6,DIO_OUTPUT);
    477e:	82 e0       	ldi	r24, 0x02	; 2
    4780:	66 e0       	ldi	r22, 0x06	; 6
    4782:	41 e0       	ldi	r20, 0x01	; 1
    4784:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_DataPort,Data_Pin5,DIO_OUTPUT);
    4788:	82 e0       	ldi	r24, 0x02	; 2
    478a:	65 e0       	ldi	r22, 0x05	; 5
    478c:	41 e0       	ldi	r20, 0x01	; 1
    478e:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_DataPort,Data_Pin5,DIO_OUTPUT);
    4792:	82 e0       	ldi	r24, 0x02	; 2
    4794:	65 e0       	ldi	r22, 0x05	; 5
    4796:	41 e0       	ldi	r20, 0x01	; 1
    4798:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>

				DIO_SetPinDirection(CLCD_ControlPort,CLCD_RS_PIN,DIO_OUTPUT);
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	60 e0       	ldi	r22, 0x00	; 0
    47a0:	41 e0       	ldi	r20, 0x01	; 1
    47a2:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_ControlPort,CLCD_RW_PIN,DIO_OUTPUT);
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	61 e0       	ldi	r22, 0x01	; 1
    47aa:	41 e0       	ldi	r20, 0x01	; 1
    47ac:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
				DIO_SetPinDirection(CLCD_ControlPort,CLCD_E_PIN,DIO_OUTPUT);
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	62 e0       	ldi	r22, 0x02	; 2
    47b4:	41 e0       	ldi	r20, 0x01	; 1
    47b6:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	a0 e2       	ldi	r26, 0x20	; 32
    47c0:	b2 e4       	ldi	r27, 0x42	; 66
    47c2:	8d ab       	std	Y+53, r24	; 0x35
    47c4:	9e ab       	std	Y+54, r25	; 0x36
    47c6:	af ab       	std	Y+55, r26	; 0x37
    47c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ca:	6d a9       	ldd	r22, Y+53	; 0x35
    47cc:	7e a9       	ldd	r23, Y+54	; 0x36
    47ce:	8f a9       	ldd	r24, Y+55	; 0x37
    47d0:	98 ad       	ldd	r25, Y+56	; 0x38
    47d2:	20 e0       	ldi	r18, 0x00	; 0
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	4a ef       	ldi	r20, 0xFA	; 250
    47d8:	54 e4       	ldi	r21, 0x44	; 68
    47da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47de:	dc 01       	movw	r26, r24
    47e0:	cb 01       	movw	r24, r22
    47e2:	89 ab       	std	Y+49, r24	; 0x31
    47e4:	9a ab       	std	Y+50, r25	; 0x32
    47e6:	ab ab       	std	Y+51, r26	; 0x33
    47e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    47ea:	69 a9       	ldd	r22, Y+49	; 0x31
    47ec:	7a a9       	ldd	r23, Y+50	; 0x32
    47ee:	8b a9       	ldd	r24, Y+51	; 0x33
    47f0:	9c a9       	ldd	r25, Y+52	; 0x34
    47f2:	20 e0       	ldi	r18, 0x00	; 0
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	40 e8       	ldi	r20, 0x80	; 128
    47f8:	5f e3       	ldi	r21, 0x3F	; 63
    47fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47fe:	88 23       	and	r24, r24
    4800:	2c f4       	brge	.+10     	; 0x480c <CLCD_init+0xac>
		__ticks = 1;
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	98 ab       	std	Y+48, r25	; 0x30
    4808:	8f a7       	std	Y+47, r24	; 0x2f
    480a:	3f c0       	rjmp	.+126    	; 0x488a <CLCD_init+0x12a>
	else if (__tmp > 65535)
    480c:	69 a9       	ldd	r22, Y+49	; 0x31
    480e:	7a a9       	ldd	r23, Y+50	; 0x32
    4810:	8b a9       	ldd	r24, Y+51	; 0x33
    4812:	9c a9       	ldd	r25, Y+52	; 0x34
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	3f ef       	ldi	r19, 0xFF	; 255
    4818:	4f e7       	ldi	r20, 0x7F	; 127
    481a:	57 e4       	ldi	r21, 0x47	; 71
    481c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4820:	18 16       	cp	r1, r24
    4822:	4c f5       	brge	.+82     	; 0x4876 <CLCD_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4824:	6d a9       	ldd	r22, Y+53	; 0x35
    4826:	7e a9       	ldd	r23, Y+54	; 0x36
    4828:	8f a9       	ldd	r24, Y+55	; 0x37
    482a:	98 ad       	ldd	r25, Y+56	; 0x38
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	40 e2       	ldi	r20, 0x20	; 32
    4832:	51 e4       	ldi	r21, 0x41	; 65
    4834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	bc 01       	movw	r22, r24
    483e:	cd 01       	movw	r24, r26
    4840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	98 ab       	std	Y+48, r25	; 0x30
    484a:	8f a7       	std	Y+47, r24	; 0x2f
    484c:	0f c0       	rjmp	.+30     	; 0x486c <CLCD_init+0x10c>
    484e:	88 ec       	ldi	r24, 0xC8	; 200
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	9e a7       	std	Y+46, r25	; 0x2e
    4854:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4856:	8d a5       	ldd	r24, Y+45	; 0x2d
    4858:	9e a5       	ldd	r25, Y+46	; 0x2e
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	f1 f7       	brne	.-4      	; 0x485a <CLCD_init+0xfa>
    485e:	9e a7       	std	Y+46, r25	; 0x2e
    4860:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4862:	8f a5       	ldd	r24, Y+47	; 0x2f
    4864:	98 a9       	ldd	r25, Y+48	; 0x30
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	98 ab       	std	Y+48, r25	; 0x30
    486a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    486c:	8f a5       	ldd	r24, Y+47	; 0x2f
    486e:	98 a9       	ldd	r25, Y+48	; 0x30
    4870:	00 97       	sbiw	r24, 0x00	; 0
    4872:	69 f7       	brne	.-38     	; 0x484e <CLCD_init+0xee>
    4874:	14 c0       	rjmp	.+40     	; 0x489e <CLCD_init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4876:	69 a9       	ldd	r22, Y+49	; 0x31
    4878:	7a a9       	ldd	r23, Y+50	; 0x32
    487a:	8b a9       	ldd	r24, Y+51	; 0x33
    487c:	9c a9       	ldd	r25, Y+52	; 0x34
    487e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22
    4886:	98 ab       	std	Y+48, r25	; 0x30
    4888:	8f a7       	std	Y+47, r24	; 0x2f
    488a:	8f a5       	ldd	r24, Y+47	; 0x2f
    488c:	98 a9       	ldd	r25, Y+48	; 0x30
    488e:	9c a7       	std	Y+44, r25	; 0x2c
    4890:	8b a7       	std	Y+43, r24	; 0x2b
    4892:	8b a5       	ldd	r24, Y+43	; 0x2b
    4894:	9c a5       	ldd	r25, Y+44	; 0x2c
    4896:	01 97       	sbiw	r24, 0x01	; 1
    4898:	f1 f7       	brne	.-4      	; 0x4896 <CLCD_init+0x136>
    489a:	9c a7       	std	Y+44, r25	; 0x2c
    489c:	8b a7       	std	Y+43, r24	; 0x2b

				/*Wait for more than 30 ms*/
				_delay_ms(40);

				DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	60 e0       	ldi	r22, 0x00	; 0
    48a2:	40 e0       	ldi	r20, 0x00	; 0
    48a4:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
				DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	61 e0       	ldi	r22, 0x01	; 1
    48ac:	40 e0       	ldi	r20, 0x00	; 0
    48ae:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>

			/*Set command to data pins*/
			DIO_SetPinValue(CLCD_DataPort,Data_Pin7,DIO_LOW);
    48b2:	82 e0       	ldi	r24, 0x02	; 2
    48b4:	67 e0       	ldi	r22, 0x07	; 7
    48b6:	40 e0       	ldi	r20, 0x00	; 0
    48b8:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin6,DIO_LOW);
    48bc:	82 e0       	ldi	r24, 0x02	; 2
    48be:	66 e0       	ldi	r22, 0x06	; 6
    48c0:	40 e0       	ldi	r20, 0x00	; 0
    48c2:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin5,DIO_HIGH);
    48c6:	82 e0       	ldi	r24, 0x02	; 2
    48c8:	65 e0       	ldi	r22, 0x05	; 5
    48ca:	41 e0       	ldi	r20, 0x01	; 1
    48cc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin4,DIO_LOW);
    48d0:	82 e0       	ldi	r24, 0x02	; 2
    48d2:	64 e0       	ldi	r22, 0x04	; 4
    48d4:	40 e0       	ldi	r20, 0x00	; 0
    48d6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
			/*Send enable pulse*/
		    DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	62 e0       	ldi	r22, 0x02	; 2
    48de:	41 e0       	ldi	r20, 0x01	; 1
    48e0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	a0 e0       	ldi	r26, 0x00	; 0
    48ea:	b0 e4       	ldi	r27, 0x40	; 64
    48ec:	8f a3       	std	Y+39, r24	; 0x27
    48ee:	98 a7       	std	Y+40, r25	; 0x28
    48f0:	a9 a7       	std	Y+41, r26	; 0x29
    48f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f4:	6f a1       	ldd	r22, Y+39	; 0x27
    48f6:	78 a5       	ldd	r23, Y+40	; 0x28
    48f8:	89 a5       	ldd	r24, Y+41	; 0x29
    48fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	4a ef       	ldi	r20, 0xFA	; 250
    4902:	54 e4       	ldi	r21, 0x44	; 68
    4904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4908:	dc 01       	movw	r26, r24
    490a:	cb 01       	movw	r24, r22
    490c:	8b a3       	std	Y+35, r24	; 0x23
    490e:	9c a3       	std	Y+36, r25	; 0x24
    4910:	ad a3       	std	Y+37, r26	; 0x25
    4912:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4914:	6b a1       	ldd	r22, Y+35	; 0x23
    4916:	7c a1       	ldd	r23, Y+36	; 0x24
    4918:	8d a1       	ldd	r24, Y+37	; 0x25
    491a:	9e a1       	ldd	r25, Y+38	; 0x26
    491c:	20 e0       	ldi	r18, 0x00	; 0
    491e:	30 e0       	ldi	r19, 0x00	; 0
    4920:	40 e8       	ldi	r20, 0x80	; 128
    4922:	5f e3       	ldi	r21, 0x3F	; 63
    4924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4928:	88 23       	and	r24, r24
    492a:	2c f4       	brge	.+10     	; 0x4936 <CLCD_init+0x1d6>
		__ticks = 1;
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	9a a3       	std	Y+34, r25	; 0x22
    4932:	89 a3       	std	Y+33, r24	; 0x21
    4934:	3f c0       	rjmp	.+126    	; 0x49b4 <CLCD_init+0x254>
	else if (__tmp > 65535)
    4936:	6b a1       	ldd	r22, Y+35	; 0x23
    4938:	7c a1       	ldd	r23, Y+36	; 0x24
    493a:	8d a1       	ldd	r24, Y+37	; 0x25
    493c:	9e a1       	ldd	r25, Y+38	; 0x26
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	3f ef       	ldi	r19, 0xFF	; 255
    4942:	4f e7       	ldi	r20, 0x7F	; 127
    4944:	57 e4       	ldi	r21, 0x47	; 71
    4946:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    494a:	18 16       	cp	r1, r24
    494c:	4c f5       	brge	.+82     	; 0x49a0 <CLCD_init+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    494e:	6f a1       	ldd	r22, Y+39	; 0x27
    4950:	78 a5       	ldd	r23, Y+40	; 0x28
    4952:	89 a5       	ldd	r24, Y+41	; 0x29
    4954:	9a a5       	ldd	r25, Y+42	; 0x2a
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	40 e2       	ldi	r20, 0x20	; 32
    495c:	51 e4       	ldi	r21, 0x41	; 65
    495e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	bc 01       	movw	r22, r24
    4968:	cd 01       	movw	r24, r26
    496a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	9a a3       	std	Y+34, r25	; 0x22
    4974:	89 a3       	std	Y+33, r24	; 0x21
    4976:	0f c0       	rjmp	.+30     	; 0x4996 <CLCD_init+0x236>
    4978:	88 ec       	ldi	r24, 0xC8	; 200
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	98 a3       	std	Y+32, r25	; 0x20
    497e:	8f 8f       	std	Y+31, r24	; 0x1f
    4980:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4982:	98 a1       	ldd	r25, Y+32	; 0x20
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	f1 f7       	brne	.-4      	; 0x4984 <CLCD_init+0x224>
    4988:	98 a3       	std	Y+32, r25	; 0x20
    498a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    498c:	89 a1       	ldd	r24, Y+33	; 0x21
    498e:	9a a1       	ldd	r25, Y+34	; 0x22
    4990:	01 97       	sbiw	r24, 0x01	; 1
    4992:	9a a3       	std	Y+34, r25	; 0x22
    4994:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4996:	89 a1       	ldd	r24, Y+33	; 0x21
    4998:	9a a1       	ldd	r25, Y+34	; 0x22
    499a:	00 97       	sbiw	r24, 0x00	; 0
    499c:	69 f7       	brne	.-38     	; 0x4978 <CLCD_init+0x218>
    499e:	14 c0       	rjmp	.+40     	; 0x49c8 <CLCD_init+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a0:	6b a1       	ldd	r22, Y+35	; 0x23
    49a2:	7c a1       	ldd	r23, Y+36	; 0x24
    49a4:	8d a1       	ldd	r24, Y+37	; 0x25
    49a6:	9e a1       	ldd	r25, Y+38	; 0x26
    49a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ac:	dc 01       	movw	r26, r24
    49ae:	cb 01       	movw	r24, r22
    49b0:	9a a3       	std	Y+34, r25	; 0x22
    49b2:	89 a3       	std	Y+33, r24	; 0x21
    49b4:	89 a1       	ldd	r24, Y+33	; 0x21
    49b6:	9a a1       	ldd	r25, Y+34	; 0x22
    49b8:	9e 8f       	std	Y+30, r25	; 0x1e
    49ba:	8d 8f       	std	Y+29, r24	; 0x1d
    49bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49c0:	01 97       	sbiw	r24, 0x01	; 1
    49c2:	f1 f7       	brne	.-4      	; 0x49c0 <CLCD_init+0x260>
    49c4:	9e 8f       	std	Y+30, r25	; 0x1e
    49c6:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(2);
		    DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    49c8:	81 e0       	ldi	r24, 0x01	; 1
    49ca:	62 e0       	ldi	r22, 0x02	; 2
    49cc:	40 e0       	ldi	r20, 0x00	; 0
    49ce:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
			/*Set command to data pins*/
			DIO_SetPinValue(CLCD_DataPort,Data_Pin7,DIO_LOW);
    49d2:	82 e0       	ldi	r24, 0x02	; 2
    49d4:	67 e0       	ldi	r22, 0x07	; 7
    49d6:	40 e0       	ldi	r20, 0x00	; 0
    49d8:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin6,DIO_LOW);
    49dc:	82 e0       	ldi	r24, 0x02	; 2
    49de:	66 e0       	ldi	r22, 0x06	; 6
    49e0:	40 e0       	ldi	r20, 0x00	; 0
    49e2:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin5,DIO_HIGH);
    49e6:	82 e0       	ldi	r24, 0x02	; 2
    49e8:	65 e0       	ldi	r22, 0x05	; 5
    49ea:	41 e0       	ldi	r20, 0x01	; 1
    49ec:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
			DIO_SetPinValue(CLCD_DataPort,Data_Pin4,DIO_LOW);
    49f0:	82 e0       	ldi	r24, 0x02	; 2
    49f2:	64 e0       	ldi	r22, 0x04	; 4
    49f4:	40 e0       	ldi	r20, 0x00	; 0
    49f6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
			/*Send enable pulse*/
		    DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	62 e0       	ldi	r22, 0x02	; 2
    49fe:	41 e0       	ldi	r20, 0x01	; 1
    4a00:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	a0 e0       	ldi	r26, 0x00	; 0
    4a0a:	b0 e4       	ldi	r27, 0x40	; 64
    4a0c:	89 8f       	std	Y+25, r24	; 0x19
    4a0e:	9a 8f       	std	Y+26, r25	; 0x1a
    4a10:	ab 8f       	std	Y+27, r26	; 0x1b
    4a12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a14:	69 8d       	ldd	r22, Y+25	; 0x19
    4a16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	4a ef       	ldi	r20, 0xFA	; 250
    4a22:	54 e4       	ldi	r21, 0x44	; 68
    4a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a28:	dc 01       	movw	r26, r24
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	8d 8b       	std	Y+21, r24	; 0x15
    4a2e:	9e 8b       	std	Y+22, r25	; 0x16
    4a30:	af 8b       	std	Y+23, r26	; 0x17
    4a32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a34:	6d 89       	ldd	r22, Y+21	; 0x15
    4a36:	7e 89       	ldd	r23, Y+22	; 0x16
    4a38:	8f 89       	ldd	r24, Y+23	; 0x17
    4a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	40 e8       	ldi	r20, 0x80	; 128
    4a42:	5f e3       	ldi	r21, 0x3F	; 63
    4a44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a48:	88 23       	and	r24, r24
    4a4a:	2c f4       	brge	.+10     	; 0x4a56 <CLCD_init+0x2f6>
		__ticks = 1;
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	9c 8b       	std	Y+20, r25	; 0x14
    4a52:	8b 8b       	std	Y+19, r24	; 0x13
    4a54:	3f c0       	rjmp	.+126    	; 0x4ad4 <CLCD_init+0x374>
	else if (__tmp > 65535)
    4a56:	6d 89       	ldd	r22, Y+21	; 0x15
    4a58:	7e 89       	ldd	r23, Y+22	; 0x16
    4a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	3f ef       	ldi	r19, 0xFF	; 255
    4a62:	4f e7       	ldi	r20, 0x7F	; 127
    4a64:	57 e4       	ldi	r21, 0x47	; 71
    4a66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a6a:	18 16       	cp	r1, r24
    4a6c:	4c f5       	brge	.+82     	; 0x4ac0 <CLCD_init+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a6e:	69 8d       	ldd	r22, Y+25	; 0x19
    4a70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e2       	ldi	r20, 0x20	; 32
    4a7c:	51 e4       	ldi	r21, 0x41	; 65
    4a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	bc 01       	movw	r22, r24
    4a88:	cd 01       	movw	r24, r26
    4a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a8e:	dc 01       	movw	r26, r24
    4a90:	cb 01       	movw	r24, r22
    4a92:	9c 8b       	std	Y+20, r25	; 0x14
    4a94:	8b 8b       	std	Y+19, r24	; 0x13
    4a96:	0f c0       	rjmp	.+30     	; 0x4ab6 <CLCD_init+0x356>
    4a98:	88 ec       	ldi	r24, 0xC8	; 200
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	9a 8b       	std	Y+18, r25	; 0x12
    4a9e:	89 8b       	std	Y+17, r24	; 0x11
    4aa0:	89 89       	ldd	r24, Y+17	; 0x11
    4aa2:	9a 89       	ldd	r25, Y+18	; 0x12
    4aa4:	01 97       	sbiw	r24, 0x01	; 1
    4aa6:	f1 f7       	brne	.-4      	; 0x4aa4 <CLCD_init+0x344>
    4aa8:	9a 8b       	std	Y+18, r25	; 0x12
    4aaa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aac:	8b 89       	ldd	r24, Y+19	; 0x13
    4aae:	9c 89       	ldd	r25, Y+20	; 0x14
    4ab0:	01 97       	sbiw	r24, 0x01	; 1
    4ab2:	9c 8b       	std	Y+20, r25	; 0x14
    4ab4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    4aba:	00 97       	sbiw	r24, 0x00	; 0
    4abc:	69 f7       	brne	.-38     	; 0x4a98 <CLCD_init+0x338>
    4abe:	14 c0       	rjmp	.+40     	; 0x4ae8 <CLCD_init+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	9c 8b       	std	Y+20, r25	; 0x14
    4ad2:	8b 8b       	std	Y+19, r24	; 0x13
    4ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ad8:	98 8b       	std	Y+16, r25	; 0x10
    4ada:	8f 87       	std	Y+15, r24	; 0x0f
    4adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ade:	98 89       	ldd	r25, Y+16	; 0x10
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	f1 f7       	brne	.-4      	; 0x4ae0 <CLCD_init+0x380>
    4ae4:	98 8b       	std	Y+16, r25	; 0x10
    4ae6:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(2);
		    DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	62 e0       	ldi	r22, 0x02	; 2
    4aec:	40 e0       	ldi	r20, 0x00	; 0
    4aee:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
  			DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    		_delay_ms(2);
    		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);

		  #elif defined CLCD_TwoLines_5x8Size
            DIO_SetPinValue(CLCD_DataPort,Data_Pin7,DIO_HIGH);
    4af2:	82 e0       	ldi	r24, 0x02	; 2
    4af4:	67 e0       	ldi	r22, 0x07	; 7
    4af6:	41 e0       	ldi	r20, 0x01	; 1
    4af8:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
            DIO_SetPinValue(CLCD_DataPort,Data_Pin6,DIO_LOW);
    4afc:	82 e0       	ldi	r24, 0x02	; 2
    4afe:	66 e0       	ldi	r22, 0x06	; 6
    4b00:	40 e0       	ldi	r20, 0x00	; 0
    4b02:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>

            DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    4b06:	81 e0       	ldi	r24, 0x01	; 1
    4b08:	62 e0       	ldi	r22, 0x02	; 2
    4b0a:	41 e0       	ldi	r20, 0x01	; 1
    4b0c:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	a0 e0       	ldi	r26, 0x00	; 0
    4b16:	b0 e4       	ldi	r27, 0x40	; 64
    4b18:	8b 87       	std	Y+11, r24	; 0x0b
    4b1a:	9c 87       	std	Y+12, r25	; 0x0c
    4b1c:	ad 87       	std	Y+13, r26	; 0x0d
    4b1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b20:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b22:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b24:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b26:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	4a ef       	ldi	r20, 0xFA	; 250
    4b2e:	54 e4       	ldi	r21, 0x44	; 68
    4b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b34:	dc 01       	movw	r26, r24
    4b36:	cb 01       	movw	r24, r22
    4b38:	8f 83       	std	Y+7, r24	; 0x07
    4b3a:	98 87       	std	Y+8, r25	; 0x08
    4b3c:	a9 87       	std	Y+9, r26	; 0x09
    4b3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b40:	6f 81       	ldd	r22, Y+7	; 0x07
    4b42:	78 85       	ldd	r23, Y+8	; 0x08
    4b44:	89 85       	ldd	r24, Y+9	; 0x09
    4b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	40 e8       	ldi	r20, 0x80	; 128
    4b4e:	5f e3       	ldi	r21, 0x3F	; 63
    4b50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b54:	88 23       	and	r24, r24
    4b56:	2c f4       	brge	.+10     	; 0x4b62 <CLCD_init+0x402>
		__ticks = 1;
    4b58:	81 e0       	ldi	r24, 0x01	; 1
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	9e 83       	std	Y+6, r25	; 0x06
    4b5e:	8d 83       	std	Y+5, r24	; 0x05
    4b60:	3f c0       	rjmp	.+126    	; 0x4be0 <CLCD_init+0x480>
	else if (__tmp > 65535)
    4b62:	6f 81       	ldd	r22, Y+7	; 0x07
    4b64:	78 85       	ldd	r23, Y+8	; 0x08
    4b66:	89 85       	ldd	r24, Y+9	; 0x09
    4b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b6a:	20 e0       	ldi	r18, 0x00	; 0
    4b6c:	3f ef       	ldi	r19, 0xFF	; 255
    4b6e:	4f e7       	ldi	r20, 0x7F	; 127
    4b70:	57 e4       	ldi	r21, 0x47	; 71
    4b72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b76:	18 16       	cp	r1, r24
    4b78:	4c f5       	brge	.+82     	; 0x4bcc <CLCD_init+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b82:	20 e0       	ldi	r18, 0x00	; 0
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	40 e2       	ldi	r20, 0x20	; 32
    4b88:	51 e4       	ldi	r21, 0x41	; 65
    4b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b8e:	dc 01       	movw	r26, r24
    4b90:	cb 01       	movw	r24, r22
    4b92:	bc 01       	movw	r22, r24
    4b94:	cd 01       	movw	r24, r26
    4b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	cb 01       	movw	r24, r22
    4b9e:	9e 83       	std	Y+6, r25	; 0x06
    4ba0:	8d 83       	std	Y+5, r24	; 0x05
    4ba2:	0f c0       	rjmp	.+30     	; 0x4bc2 <CLCD_init+0x462>
    4ba4:	88 ec       	ldi	r24, 0xC8	; 200
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	9c 83       	std	Y+4, r25	; 0x04
    4baa:	8b 83       	std	Y+3, r24	; 0x03
    4bac:	8b 81       	ldd	r24, Y+3	; 0x03
    4bae:	9c 81       	ldd	r25, Y+4	; 0x04
    4bb0:	01 97       	sbiw	r24, 0x01	; 1
    4bb2:	f1 f7       	brne	.-4      	; 0x4bb0 <CLCD_init+0x450>
    4bb4:	9c 83       	std	Y+4, r25	; 0x04
    4bb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    4bba:	9e 81       	ldd	r25, Y+6	; 0x06
    4bbc:	01 97       	sbiw	r24, 0x01	; 1
    4bbe:	9e 83       	std	Y+6, r25	; 0x06
    4bc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc6:	00 97       	sbiw	r24, 0x00	; 0
    4bc8:	69 f7       	brne	.-38     	; 0x4ba4 <CLCD_init+0x444>
    4bca:	14 c0       	rjmp	.+40     	; 0x4bf4 <CLCD_init+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    4bce:	78 85       	ldd	r23, Y+8	; 0x08
    4bd0:	89 85       	ldd	r24, Y+9	; 0x09
    4bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd8:	dc 01       	movw	r26, r24
    4bda:	cb 01       	movw	r24, r22
    4bdc:	9e 83       	std	Y+6, r25	; 0x06
    4bde:	8d 83       	std	Y+5, r24	; 0x05
    4be0:	8d 81       	ldd	r24, Y+5	; 0x05
    4be2:	9e 81       	ldd	r25, Y+6	; 0x06
    4be4:	9a 83       	std	Y+2, r25	; 0x02
    4be6:	89 83       	std	Y+1, r24	; 0x01
    4be8:	89 81       	ldd	r24, Y+1	; 0x01
    4bea:	9a 81       	ldd	r25, Y+2	; 0x02
    4bec:	01 97       	sbiw	r24, 0x01	; 1
    4bee:	f1 f7       	brne	.-4      	; 0x4bec <CLCD_init+0x48c>
    4bf0:	9a 83       	std	Y+2, r25	; 0x02
    4bf2:	89 83       	std	Y+1, r24	; 0x01
    		_delay_ms(2);
    		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    4bf4:	81 e0       	ldi	r24, 0x01	; 1
    4bf6:	62 e0       	ldi	r22, 0x02	; 2
    4bf8:	40 e0       	ldi	r20, 0x00	; 0
    4bfa:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>

#elif defined CLCD_Curser_ON_NoBlinking
        CLCD_SendCommand(CLCD_DISP_ON_CURSOR);

#elif defined CLCD_Curser_ON_Blinking
        CLCD_SendCommand(CLCD_DISP_ON_CURSOR_BLINK);
    4bfe:	8f e0       	ldi	r24, 0x0F	; 15
    4c00:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <CLCD_SendCommand>

#endif
      	/*Clear display*/
        CLCD_SendCommand(CLCD_CLEAR);
    4c04:	81 e0       	ldi	r24, 0x01	; 1
    4c06:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <CLCD_SendCommand>
}
    4c0a:	e8 96       	adiw	r28, 0x38	; 56
    4c0c:	0f b6       	in	r0, 0x3f	; 63
    4c0e:	f8 94       	cli
    4c10:	de bf       	out	0x3e, r29	; 62
    4c12:	0f be       	out	0x3f, r0	; 63
    4c14:	cd bf       	out	0x3d, r28	; 61
    4c16:	cf 91       	pop	r28
    4c18:	df 91       	pop	r29
    4c1a:	08 95       	ret

00004c1c <CLCD_SendCommand>:

void CLCD_SendCommand(u8 Command)
{
    4c1c:	0f 93       	push	r16
    4c1e:	1f 93       	push	r17
    4c20:	df 93       	push	r29
    4c22:	cf 93       	push	r28
    4c24:	cd b7       	in	r28, 0x3d	; 61
    4c26:	de b7       	in	r29, 0x3e	; 62
    4c28:	c9 54       	subi	r28, 0x49	; 73
    4c2a:	d0 40       	sbci	r29, 0x00	; 0
    4c2c:	0f b6       	in	r0, 0x3f	; 63
    4c2e:	f8 94       	cli
    4c30:	de bf       	out	0x3e, r29	; 62
    4c32:	0f be       	out	0x3f, r0	; 63
    4c34:	cd bf       	out	0x3d, r28	; 61
    4c36:	fe 01       	movw	r30, r28
    4c38:	e7 5b       	subi	r30, 0xB7	; 183
    4c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3c:	80 83       	st	Z, r24
	/*Set RS pin to low for command*/
    DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    4c3e:	81 e0       	ldi	r24, 0x01	; 1
    4c40:	60 e0       	ldi	r22, 0x00	; 0
    4c42:	40 e0       	ldi	r20, 0x00	; 0
    4c44:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>

    /*Set RW pin to low for write*/
    DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	61 e0       	ldi	r22, 0x01	; 1
    4c4c:	40 e0       	ldi	r20, 0x00	; 0
    4c4e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
        _delay_ms(2);
        DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);

	#elif defined CLCD_4_BitMode

		DataPort =  (DataPort & 0x0F)| (UpperNibble_BitMask_Command); //send upper 4 bit
    4c52:	a5 e3       	ldi	r26, 0x35	; 53
    4c54:	b0 e0       	ldi	r27, 0x00	; 0
    4c56:	e5 e3       	ldi	r30, 0x35	; 53
    4c58:	f0 e0       	ldi	r31, 0x00	; 0
    4c5a:	80 81       	ld	r24, Z
    4c5c:	98 2f       	mov	r25, r24
    4c5e:	9f 70       	andi	r25, 0x0F	; 15
    4c60:	fe 01       	movw	r30, r28
    4c62:	e7 5b       	subi	r30, 0xB7	; 183
    4c64:	ff 4f       	sbci	r31, 0xFF	; 255
    4c66:	80 81       	ld	r24, Z
    4c68:	80 7f       	andi	r24, 0xF0	; 240
    4c6a:	89 2b       	or	r24, r25
    4c6c:	8c 93       	st	X, r24

		DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    4c6e:	81 e0       	ldi	r24, 0x01	; 1
    4c70:	60 e0       	ldi	r22, 0x00	; 0
    4c72:	40 e0       	ldi	r20, 0x00	; 0
    4c74:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	62 e0       	ldi	r22, 0x02	; 2
    4c7c:	41 e0       	ldi	r20, 0x01	; 1
    4c7e:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4c82:	fe 01       	movw	r30, r28
    4c84:	eb 5b       	subi	r30, 0xBB	; 187
    4c86:	ff 4f       	sbci	r31, 0xFF	; 255
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	a8 e4       	ldi	r26, 0x48	; 72
    4c8e:	b2 e4       	ldi	r27, 0x42	; 66
    4c90:	80 83       	st	Z, r24
    4c92:	91 83       	std	Z+1, r25	; 0x01
    4c94:	a2 83       	std	Z+2, r26	; 0x02
    4c96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4c98:	8e 01       	movw	r16, r28
    4c9a:	0f 5b       	subi	r16, 0xBF	; 191
    4c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c9e:	fe 01       	movw	r30, r28
    4ca0:	eb 5b       	subi	r30, 0xBB	; 187
    4ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca4:	60 81       	ld	r22, Z
    4ca6:	71 81       	ldd	r23, Z+1	; 0x01
    4ca8:	82 81       	ldd	r24, Z+2	; 0x02
    4caa:	93 81       	ldd	r25, Z+3	; 0x03
    4cac:	2b ea       	ldi	r18, 0xAB	; 171
    4cae:	3a ea       	ldi	r19, 0xAA	; 170
    4cb0:	4a e2       	ldi	r20, 0x2A	; 42
    4cb2:	50 e4       	ldi	r21, 0x40	; 64
    4cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb8:	dc 01       	movw	r26, r24
    4cba:	cb 01       	movw	r24, r22
    4cbc:	f8 01       	movw	r30, r16
    4cbe:	80 83       	st	Z, r24
    4cc0:	91 83       	std	Z+1, r25	; 0x01
    4cc2:	a2 83       	std	Z+2, r26	; 0x02
    4cc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cc6:	fe 01       	movw	r30, r28
    4cc8:	ef 5b       	subi	r30, 0xBF	; 191
    4cca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ccc:	60 81       	ld	r22, Z
    4cce:	71 81       	ldd	r23, Z+1	; 0x01
    4cd0:	82 81       	ldd	r24, Z+2	; 0x02
    4cd2:	93 81       	ldd	r25, Z+3	; 0x03
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	40 e8       	ldi	r20, 0x80	; 128
    4cda:	5f e3       	ldi	r21, 0x3F	; 63
    4cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ce0:	88 23       	and	r24, r24
    4ce2:	34 f4       	brge	.+12     	; 0x4cf0 <CLCD_SendCommand+0xd4>
		__ticks = 1;
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	e0 5c       	subi	r30, 0xC0	; 192
    4cea:	ff 4f       	sbci	r31, 0xFF	; 255
    4cec:	80 83       	st	Z, r24
    4cee:	9d c0       	rjmp	.+314    	; 0x4e2a <CLCD_SendCommand+0x20e>
	else if (__tmp > 255)
    4cf0:	fe 01       	movw	r30, r28
    4cf2:	ef 5b       	subi	r30, 0xBF	; 191
    4cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf6:	60 81       	ld	r22, Z
    4cf8:	71 81       	ldd	r23, Z+1	; 0x01
    4cfa:	82 81       	ldd	r24, Z+2	; 0x02
    4cfc:	93 81       	ldd	r25, Z+3	; 0x03
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	4f e7       	ldi	r20, 0x7F	; 127
    4d04:	53 e4       	ldi	r21, 0x43	; 67
    4d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d0a:	18 16       	cp	r1, r24
    4d0c:	0c f0       	brlt	.+2      	; 0x4d10 <CLCD_SendCommand+0xf4>
    4d0e:	7e c0       	rjmp	.+252    	; 0x4e0c <CLCD_SendCommand+0x1f0>
	{
		_delay_ms(__us / 1000.0);
    4d10:	fe 01       	movw	r30, r28
    4d12:	eb 5b       	subi	r30, 0xBB	; 187
    4d14:	ff 4f       	sbci	r31, 0xFF	; 255
    4d16:	60 81       	ld	r22, Z
    4d18:	71 81       	ldd	r23, Z+1	; 0x01
    4d1a:	82 81       	ldd	r24, Z+2	; 0x02
    4d1c:	93 81       	ldd	r25, Z+3	; 0x03
    4d1e:	20 e0       	ldi	r18, 0x00	; 0
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	4a e7       	ldi	r20, 0x7A	; 122
    4d24:	54 e4       	ldi	r21, 0x44	; 68
    4d26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	8c af       	std	Y+60, r24	; 0x3c
    4d30:	9d af       	std	Y+61, r25	; 0x3d
    4d32:	ae af       	std	Y+62, r26	; 0x3e
    4d34:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d36:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d38:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d3e:	20 e0       	ldi	r18, 0x00	; 0
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	4a ef       	ldi	r20, 0xFA	; 250
    4d44:	54 e4       	ldi	r21, 0x44	; 68
    4d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	cb 01       	movw	r24, r22
    4d4e:	88 af       	std	Y+56, r24	; 0x38
    4d50:	99 af       	std	Y+57, r25	; 0x39
    4d52:	aa af       	std	Y+58, r26	; 0x3a
    4d54:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4d56:	68 ad       	ldd	r22, Y+56	; 0x38
    4d58:	79 ad       	ldd	r23, Y+57	; 0x39
    4d5a:	8a ad       	ldd	r24, Y+58	; 0x3a
    4d5c:	9b ad       	ldd	r25, Y+59	; 0x3b
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	40 e8       	ldi	r20, 0x80	; 128
    4d64:	5f e3       	ldi	r21, 0x3F	; 63
    4d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d6a:	88 23       	and	r24, r24
    4d6c:	2c f4       	brge	.+10     	; 0x4d78 <CLCD_SendCommand+0x15c>
		__ticks = 1;
    4d6e:	81 e0       	ldi	r24, 0x01	; 1
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	9f ab       	std	Y+55, r25	; 0x37
    4d74:	8e ab       	std	Y+54, r24	; 0x36
    4d76:	3f c0       	rjmp	.+126    	; 0x4df6 <CLCD_SendCommand+0x1da>
	else if (__tmp > 65535)
    4d78:	68 ad       	ldd	r22, Y+56	; 0x38
    4d7a:	79 ad       	ldd	r23, Y+57	; 0x39
    4d7c:	8a ad       	ldd	r24, Y+58	; 0x3a
    4d7e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	3f ef       	ldi	r19, 0xFF	; 255
    4d84:	4f e7       	ldi	r20, 0x7F	; 127
    4d86:	57 e4       	ldi	r21, 0x47	; 71
    4d88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d8c:	18 16       	cp	r1, r24
    4d8e:	4c f5       	brge	.+82     	; 0x4de2 <CLCD_SendCommand+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d90:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d92:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d94:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d96:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d98:	20 e0       	ldi	r18, 0x00	; 0
    4d9a:	30 e0       	ldi	r19, 0x00	; 0
    4d9c:	40 e2       	ldi	r20, 0x20	; 32
    4d9e:	51 e4       	ldi	r21, 0x41	; 65
    4da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4da4:	dc 01       	movw	r26, r24
    4da6:	cb 01       	movw	r24, r22
    4da8:	bc 01       	movw	r22, r24
    4daa:	cd 01       	movw	r24, r26
    4dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db0:	dc 01       	movw	r26, r24
    4db2:	cb 01       	movw	r24, r22
    4db4:	9f ab       	std	Y+55, r25	; 0x37
    4db6:	8e ab       	std	Y+54, r24	; 0x36
    4db8:	0f c0       	rjmp	.+30     	; 0x4dd8 <CLCD_SendCommand+0x1bc>
    4dba:	88 ec       	ldi	r24, 0xC8	; 200
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	9d ab       	std	Y+53, r25	; 0x35
    4dc0:	8c ab       	std	Y+52, r24	; 0x34
    4dc2:	8c a9       	ldd	r24, Y+52	; 0x34
    4dc4:	9d a9       	ldd	r25, Y+53	; 0x35
    4dc6:	01 97       	sbiw	r24, 0x01	; 1
    4dc8:	f1 f7       	brne	.-4      	; 0x4dc6 <CLCD_SendCommand+0x1aa>
    4dca:	9d ab       	std	Y+53, r25	; 0x35
    4dcc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dce:	8e a9       	ldd	r24, Y+54	; 0x36
    4dd0:	9f a9       	ldd	r25, Y+55	; 0x37
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	9f ab       	std	Y+55, r25	; 0x37
    4dd6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dd8:	8e a9       	ldd	r24, Y+54	; 0x36
    4dda:	9f a9       	ldd	r25, Y+55	; 0x37
    4ddc:	00 97       	sbiw	r24, 0x00	; 0
    4dde:	69 f7       	brne	.-38     	; 0x4dba <CLCD_SendCommand+0x19e>
    4de0:	2d c0       	rjmp	.+90     	; 0x4e3c <CLCD_SendCommand+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4de2:	68 ad       	ldd	r22, Y+56	; 0x38
    4de4:	79 ad       	ldd	r23, Y+57	; 0x39
    4de6:	8a ad       	ldd	r24, Y+58	; 0x3a
    4de8:	9b ad       	ldd	r25, Y+59	; 0x3b
    4dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dee:	dc 01       	movw	r26, r24
    4df0:	cb 01       	movw	r24, r22
    4df2:	9f ab       	std	Y+55, r25	; 0x37
    4df4:	8e ab       	std	Y+54, r24	; 0x36
    4df6:	8e a9       	ldd	r24, Y+54	; 0x36
    4df8:	9f a9       	ldd	r25, Y+55	; 0x37
    4dfa:	9b ab       	std	Y+51, r25	; 0x33
    4dfc:	8a ab       	std	Y+50, r24	; 0x32
    4dfe:	8a a9       	ldd	r24, Y+50	; 0x32
    4e00:	9b a9       	ldd	r25, Y+51	; 0x33
    4e02:	01 97       	sbiw	r24, 0x01	; 1
    4e04:	f1 f7       	brne	.-4      	; 0x4e02 <CLCD_SendCommand+0x1e6>
    4e06:	9b ab       	std	Y+51, r25	; 0x33
    4e08:	8a ab       	std	Y+50, r24	; 0x32
    4e0a:	18 c0       	rjmp	.+48     	; 0x4e3c <CLCD_SendCommand+0x220>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4e0c:	fe 01       	movw	r30, r28
    4e0e:	ef 5b       	subi	r30, 0xBF	; 191
    4e10:	ff 4f       	sbci	r31, 0xFF	; 255
    4e12:	60 81       	ld	r22, Z
    4e14:	71 81       	ldd	r23, Z+1	; 0x01
    4e16:	82 81       	ldd	r24, Z+2	; 0x02
    4e18:	93 81       	ldd	r25, Z+3	; 0x03
    4e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e1e:	dc 01       	movw	r26, r24
    4e20:	cb 01       	movw	r24, r22
    4e22:	fe 01       	movw	r30, r28
    4e24:	e0 5c       	subi	r30, 0xC0	; 192
    4e26:	ff 4f       	sbci	r31, 0xFF	; 255
    4e28:	80 83       	st	Z, r24
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	e0 5c       	subi	r30, 0xC0	; 192
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	80 81       	ld	r24, Z
    4e32:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4e34:	89 a9       	ldd	r24, Y+49	; 0x31
    4e36:	8a 95       	dec	r24
    4e38:	f1 f7       	brne	.-4      	; 0x4e36 <CLCD_SendCommand+0x21a>
    4e3a:	89 ab       	std	Y+49, r24	; 0x31

		_delay_us(50);
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	62 e0       	ldi	r22, 0x02	; 2
    4e40:	40 e0       	ldi	r20, 0x00	; 0
    4e42:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	a8 e4       	ldi	r26, 0x48	; 72
    4e4c:	b3 e4       	ldi	r27, 0x43	; 67
    4e4e:	8d a7       	std	Y+45, r24	; 0x2d
    4e50:	9e a7       	std	Y+46, r25	; 0x2e
    4e52:	af a7       	std	Y+47, r26	; 0x2f
    4e54:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4e56:	6d a5       	ldd	r22, Y+45	; 0x2d
    4e58:	7e a5       	ldd	r23, Y+46	; 0x2e
    4e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e5c:	98 a9       	ldd	r25, Y+48	; 0x30
    4e5e:	2b ea       	ldi	r18, 0xAB	; 171
    4e60:	3a ea       	ldi	r19, 0xAA	; 170
    4e62:	4a e2       	ldi	r20, 0x2A	; 42
    4e64:	50 e4       	ldi	r21, 0x40	; 64
    4e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e6a:	dc 01       	movw	r26, r24
    4e6c:	cb 01       	movw	r24, r22
    4e6e:	89 a7       	std	Y+41, r24	; 0x29
    4e70:	9a a7       	std	Y+42, r25	; 0x2a
    4e72:	ab a7       	std	Y+43, r26	; 0x2b
    4e74:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4e76:	69 a5       	ldd	r22, Y+41	; 0x29
    4e78:	7a a5       	ldd	r23, Y+42	; 0x2a
    4e7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e7e:	20 e0       	ldi	r18, 0x00	; 0
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	40 e8       	ldi	r20, 0x80	; 128
    4e84:	5f e3       	ldi	r21, 0x3F	; 63
    4e86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e8a:	88 23       	and	r24, r24
    4e8c:	1c f4       	brge	.+6      	; 0x4e94 <CLCD_SendCommand+0x278>
		__ticks = 1;
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	88 a7       	std	Y+40, r24	; 0x28
    4e92:	91 c0       	rjmp	.+290    	; 0x4fb6 <CLCD_SendCommand+0x39a>
	else if (__tmp > 255)
    4e94:	69 a5       	ldd	r22, Y+41	; 0x29
    4e96:	7a a5       	ldd	r23, Y+42	; 0x2a
    4e98:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e9c:	20 e0       	ldi	r18, 0x00	; 0
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	4f e7       	ldi	r20, 0x7F	; 127
    4ea2:	53 e4       	ldi	r21, 0x43	; 67
    4ea4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ea8:	18 16       	cp	r1, r24
    4eaa:	0c f0       	brlt	.+2      	; 0x4eae <CLCD_SendCommand+0x292>
    4eac:	7b c0       	rjmp	.+246    	; 0x4fa4 <CLCD_SendCommand+0x388>
	{
		_delay_ms(__us / 1000.0);
    4eae:	6d a5       	ldd	r22, Y+45	; 0x2d
    4eb0:	7e a5       	ldd	r23, Y+46	; 0x2e
    4eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4eb4:	98 a9       	ldd	r25, Y+48	; 0x30
    4eb6:	20 e0       	ldi	r18, 0x00	; 0
    4eb8:	30 e0       	ldi	r19, 0x00	; 0
    4eba:	4a e7       	ldi	r20, 0x7A	; 122
    4ebc:	54 e4       	ldi	r21, 0x44	; 68
    4ebe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	8c a3       	std	Y+36, r24	; 0x24
    4ec8:	9d a3       	std	Y+37, r25	; 0x25
    4eca:	ae a3       	std	Y+38, r26	; 0x26
    4ecc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ece:	6c a1       	ldd	r22, Y+36	; 0x24
    4ed0:	7d a1       	ldd	r23, Y+37	; 0x25
    4ed2:	8e a1       	ldd	r24, Y+38	; 0x26
    4ed4:	9f a1       	ldd	r25, Y+39	; 0x27
    4ed6:	20 e0       	ldi	r18, 0x00	; 0
    4ed8:	30 e0       	ldi	r19, 0x00	; 0
    4eda:	4a ef       	ldi	r20, 0xFA	; 250
    4edc:	54 e4       	ldi	r21, 0x44	; 68
    4ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	88 a3       	std	Y+32, r24	; 0x20
    4ee8:	99 a3       	std	Y+33, r25	; 0x21
    4eea:	aa a3       	std	Y+34, r26	; 0x22
    4eec:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4eee:	68 a1       	ldd	r22, Y+32	; 0x20
    4ef0:	79 a1       	ldd	r23, Y+33	; 0x21
    4ef2:	8a a1       	ldd	r24, Y+34	; 0x22
    4ef4:	9b a1       	ldd	r25, Y+35	; 0x23
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	40 e8       	ldi	r20, 0x80	; 128
    4efc:	5f e3       	ldi	r21, 0x3F	; 63
    4efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f02:	88 23       	and	r24, r24
    4f04:	2c f4       	brge	.+10     	; 0x4f10 <CLCD_SendCommand+0x2f4>
		__ticks = 1;
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	9f 8f       	std	Y+31, r25	; 0x1f
    4f0c:	8e 8f       	std	Y+30, r24	; 0x1e
    4f0e:	3f c0       	rjmp	.+126    	; 0x4f8e <CLCD_SendCommand+0x372>
	else if (__tmp > 65535)
    4f10:	68 a1       	ldd	r22, Y+32	; 0x20
    4f12:	79 a1       	ldd	r23, Y+33	; 0x21
    4f14:	8a a1       	ldd	r24, Y+34	; 0x22
    4f16:	9b a1       	ldd	r25, Y+35	; 0x23
    4f18:	20 e0       	ldi	r18, 0x00	; 0
    4f1a:	3f ef       	ldi	r19, 0xFF	; 255
    4f1c:	4f e7       	ldi	r20, 0x7F	; 127
    4f1e:	57 e4       	ldi	r21, 0x47	; 71
    4f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f24:	18 16       	cp	r1, r24
    4f26:	4c f5       	brge	.+82     	; 0x4f7a <CLCD_SendCommand+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f28:	6c a1       	ldd	r22, Y+36	; 0x24
    4f2a:	7d a1       	ldd	r23, Y+37	; 0x25
    4f2c:	8e a1       	ldd	r24, Y+38	; 0x26
    4f2e:	9f a1       	ldd	r25, Y+39	; 0x27
    4f30:	20 e0       	ldi	r18, 0x00	; 0
    4f32:	30 e0       	ldi	r19, 0x00	; 0
    4f34:	40 e2       	ldi	r20, 0x20	; 32
    4f36:	51 e4       	ldi	r21, 0x41	; 65
    4f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f3c:	dc 01       	movw	r26, r24
    4f3e:	cb 01       	movw	r24, r22
    4f40:	bc 01       	movw	r22, r24
    4f42:	cd 01       	movw	r24, r26
    4f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	cb 01       	movw	r24, r22
    4f4c:	9f 8f       	std	Y+31, r25	; 0x1f
    4f4e:	8e 8f       	std	Y+30, r24	; 0x1e
    4f50:	0f c0       	rjmp	.+30     	; 0x4f70 <CLCD_SendCommand+0x354>
    4f52:	88 ec       	ldi	r24, 0xC8	; 200
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	9d 8f       	std	Y+29, r25	; 0x1d
    4f58:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4f5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4f5c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4f5e:	01 97       	sbiw	r24, 0x01	; 1
    4f60:	f1 f7       	brne	.-4      	; 0x4f5e <CLCD_SendCommand+0x342>
    4f62:	9d 8f       	std	Y+29, r25	; 0x1d
    4f64:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f68:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4f6a:	01 97       	sbiw	r24, 0x01	; 1
    4f6c:	9f 8f       	std	Y+31, r25	; 0x1f
    4f6e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f72:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4f74:	00 97       	sbiw	r24, 0x00	; 0
    4f76:	69 f7       	brne	.-38     	; 0x4f52 <CLCD_SendCommand+0x336>
    4f78:	24 c0       	rjmp	.+72     	; 0x4fc2 <CLCD_SendCommand+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f7a:	68 a1       	ldd	r22, Y+32	; 0x20
    4f7c:	79 a1       	ldd	r23, Y+33	; 0x21
    4f7e:	8a a1       	ldd	r24, Y+34	; 0x22
    4f80:	9b a1       	ldd	r25, Y+35	; 0x23
    4f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	9f 8f       	std	Y+31, r25	; 0x1f
    4f8c:	8e 8f       	std	Y+30, r24	; 0x1e
    4f8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4f92:	9b 8f       	std	Y+27, r25	; 0x1b
    4f94:	8a 8f       	std	Y+26, r24	; 0x1a
    4f96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4f98:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4f9a:	01 97       	sbiw	r24, 0x01	; 1
    4f9c:	f1 f7       	brne	.-4      	; 0x4f9a <CLCD_SendCommand+0x37e>
    4f9e:	9b 8f       	std	Y+27, r25	; 0x1b
    4fa0:	8a 8f       	std	Y+26, r24	; 0x1a
    4fa2:	0f c0       	rjmp	.+30     	; 0x4fc2 <CLCD_SendCommand+0x3a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4fa4:	69 a5       	ldd	r22, Y+41	; 0x29
    4fa6:	7a a5       	ldd	r23, Y+42	; 0x2a
    4fa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4faa:	9c a5       	ldd	r25, Y+44	; 0x2c
    4fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb0:	dc 01       	movw	r26, r24
    4fb2:	cb 01       	movw	r24, r22
    4fb4:	88 a7       	std	Y+40, r24	; 0x28
    4fb6:	88 a5       	ldd	r24, Y+40	; 0x28
    4fb8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4fba:	89 8d       	ldd	r24, Y+25	; 0x19
    4fbc:	8a 95       	dec	r24
    4fbe:	f1 f7       	brne	.-4      	; 0x4fbc <CLCD_SendCommand+0x3a0>
    4fc0:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(200);

		DataPort =  (DataPort & 0x0F)| (LowerNibble_BitMask_Command);	//send lower 4 bit
    4fc2:	a5 e3       	ldi	r26, 0x35	; 53
    4fc4:	b0 e0       	ldi	r27, 0x00	; 0
    4fc6:	e5 e3       	ldi	r30, 0x35	; 53
    4fc8:	f0 e0       	ldi	r31, 0x00	; 0
    4fca:	80 81       	ld	r24, Z
    4fcc:	28 2f       	mov	r18, r24
    4fce:	2f 70       	andi	r18, 0x0F	; 15
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	e7 5b       	subi	r30, 0xB7	; 183
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	80 81       	ld	r24, Z
    4fd8:	88 2f       	mov	r24, r24
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	82 95       	swap	r24
    4fde:	92 95       	swap	r25
    4fe0:	90 7f       	andi	r25, 0xF0	; 240
    4fe2:	98 27       	eor	r25, r24
    4fe4:	80 7f       	andi	r24, 0xF0	; 240
    4fe6:	98 27       	eor	r25, r24
    4fe8:	82 2b       	or	r24, r18
    4fea:	8c 93       	st	X, r24

		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    4fec:	81 e0       	ldi	r24, 0x01	; 1
    4fee:	62 e0       	ldi	r22, 0x02	; 2
    4ff0:	41 e0       	ldi	r20, 0x01	; 1
    4ff2:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	aa ef       	ldi	r26, 0xFA	; 250
    4ffc:	b4 e4       	ldi	r27, 0x44	; 68
    4ffe:	8d 8b       	std	Y+21, r24	; 0x15
    5000:	9e 8b       	std	Y+22, r25	; 0x16
    5002:	af 8b       	std	Y+23, r26	; 0x17
    5004:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5006:	6d 89       	ldd	r22, Y+21	; 0x15
    5008:	7e 89       	ldd	r23, Y+22	; 0x16
    500a:	8f 89       	ldd	r24, Y+23	; 0x17
    500c:	98 8d       	ldd	r25, Y+24	; 0x18
    500e:	2b ea       	ldi	r18, 0xAB	; 171
    5010:	3a ea       	ldi	r19, 0xAA	; 170
    5012:	4a e2       	ldi	r20, 0x2A	; 42
    5014:	50 e4       	ldi	r21, 0x40	; 64
    5016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501a:	dc 01       	movw	r26, r24
    501c:	cb 01       	movw	r24, r22
    501e:	89 8b       	std	Y+17, r24	; 0x11
    5020:	9a 8b       	std	Y+18, r25	; 0x12
    5022:	ab 8b       	std	Y+19, r26	; 0x13
    5024:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5026:	69 89       	ldd	r22, Y+17	; 0x11
    5028:	7a 89       	ldd	r23, Y+18	; 0x12
    502a:	8b 89       	ldd	r24, Y+19	; 0x13
    502c:	9c 89       	ldd	r25, Y+20	; 0x14
    502e:	20 e0       	ldi	r18, 0x00	; 0
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	40 e8       	ldi	r20, 0x80	; 128
    5034:	5f e3       	ldi	r21, 0x3F	; 63
    5036:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    503a:	88 23       	and	r24, r24
    503c:	1c f4       	brge	.+6      	; 0x5044 <CLCD_SendCommand+0x428>
		__ticks = 1;
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	88 8b       	std	Y+16, r24	; 0x10
    5042:	91 c0       	rjmp	.+290    	; 0x5166 <CLCD_SendCommand+0x54a>
	else if (__tmp > 255)
    5044:	69 89       	ldd	r22, Y+17	; 0x11
    5046:	7a 89       	ldd	r23, Y+18	; 0x12
    5048:	8b 89       	ldd	r24, Y+19	; 0x13
    504a:	9c 89       	ldd	r25, Y+20	; 0x14
    504c:	20 e0       	ldi	r18, 0x00	; 0
    504e:	30 e0       	ldi	r19, 0x00	; 0
    5050:	4f e7       	ldi	r20, 0x7F	; 127
    5052:	53 e4       	ldi	r21, 0x43	; 67
    5054:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5058:	18 16       	cp	r1, r24
    505a:	0c f0       	brlt	.+2      	; 0x505e <CLCD_SendCommand+0x442>
    505c:	7b c0       	rjmp	.+246    	; 0x5154 <CLCD_SendCommand+0x538>
	{
		_delay_ms(__us / 1000.0);
    505e:	6d 89       	ldd	r22, Y+21	; 0x15
    5060:	7e 89       	ldd	r23, Y+22	; 0x16
    5062:	8f 89       	ldd	r24, Y+23	; 0x17
    5064:	98 8d       	ldd	r25, Y+24	; 0x18
    5066:	20 e0       	ldi	r18, 0x00	; 0
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	4a e7       	ldi	r20, 0x7A	; 122
    506c:	54 e4       	ldi	r21, 0x44	; 68
    506e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5072:	dc 01       	movw	r26, r24
    5074:	cb 01       	movw	r24, r22
    5076:	8c 87       	std	Y+12, r24	; 0x0c
    5078:	9d 87       	std	Y+13, r25	; 0x0d
    507a:	ae 87       	std	Y+14, r26	; 0x0e
    507c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    507e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5080:	7d 85       	ldd	r23, Y+13	; 0x0d
    5082:	8e 85       	ldd	r24, Y+14	; 0x0e
    5084:	9f 85       	ldd	r25, Y+15	; 0x0f
    5086:	20 e0       	ldi	r18, 0x00	; 0
    5088:	30 e0       	ldi	r19, 0x00	; 0
    508a:	4a ef       	ldi	r20, 0xFA	; 250
    508c:	54 e4       	ldi	r21, 0x44	; 68
    508e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5092:	dc 01       	movw	r26, r24
    5094:	cb 01       	movw	r24, r22
    5096:	88 87       	std	Y+8, r24	; 0x08
    5098:	99 87       	std	Y+9, r25	; 0x09
    509a:	aa 87       	std	Y+10, r26	; 0x0a
    509c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    509e:	68 85       	ldd	r22, Y+8	; 0x08
    50a0:	79 85       	ldd	r23, Y+9	; 0x09
    50a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    50a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    50a6:	20 e0       	ldi	r18, 0x00	; 0
    50a8:	30 e0       	ldi	r19, 0x00	; 0
    50aa:	40 e8       	ldi	r20, 0x80	; 128
    50ac:	5f e3       	ldi	r21, 0x3F	; 63
    50ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50b2:	88 23       	and	r24, r24
    50b4:	2c f4       	brge	.+10     	; 0x50c0 <CLCD_SendCommand+0x4a4>
		__ticks = 1;
    50b6:	81 e0       	ldi	r24, 0x01	; 1
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	9f 83       	std	Y+7, r25	; 0x07
    50bc:	8e 83       	std	Y+6, r24	; 0x06
    50be:	3f c0       	rjmp	.+126    	; 0x513e <CLCD_SendCommand+0x522>
	else if (__tmp > 65535)
    50c0:	68 85       	ldd	r22, Y+8	; 0x08
    50c2:	79 85       	ldd	r23, Y+9	; 0x09
    50c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    50c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    50c8:	20 e0       	ldi	r18, 0x00	; 0
    50ca:	3f ef       	ldi	r19, 0xFF	; 255
    50cc:	4f e7       	ldi	r20, 0x7F	; 127
    50ce:	57 e4       	ldi	r21, 0x47	; 71
    50d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50d4:	18 16       	cp	r1, r24
    50d6:	4c f5       	brge	.+82     	; 0x512a <CLCD_SendCommand+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    50da:	7d 85       	ldd	r23, Y+13	; 0x0d
    50dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    50de:	9f 85       	ldd	r25, Y+15	; 0x0f
    50e0:	20 e0       	ldi	r18, 0x00	; 0
    50e2:	30 e0       	ldi	r19, 0x00	; 0
    50e4:	40 e2       	ldi	r20, 0x20	; 32
    50e6:	51 e4       	ldi	r21, 0x41	; 65
    50e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ec:	dc 01       	movw	r26, r24
    50ee:	cb 01       	movw	r24, r22
    50f0:	bc 01       	movw	r22, r24
    50f2:	cd 01       	movw	r24, r26
    50f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f8:	dc 01       	movw	r26, r24
    50fa:	cb 01       	movw	r24, r22
    50fc:	9f 83       	std	Y+7, r25	; 0x07
    50fe:	8e 83       	std	Y+6, r24	; 0x06
    5100:	0f c0       	rjmp	.+30     	; 0x5120 <CLCD_SendCommand+0x504>
    5102:	88 ec       	ldi	r24, 0xC8	; 200
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	9d 83       	std	Y+5, r25	; 0x05
    5108:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    510a:	8c 81       	ldd	r24, Y+4	; 0x04
    510c:	9d 81       	ldd	r25, Y+5	; 0x05
    510e:	01 97       	sbiw	r24, 0x01	; 1
    5110:	f1 f7       	brne	.-4      	; 0x510e <CLCD_SendCommand+0x4f2>
    5112:	9d 83       	std	Y+5, r25	; 0x05
    5114:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5116:	8e 81       	ldd	r24, Y+6	; 0x06
    5118:	9f 81       	ldd	r25, Y+7	; 0x07
    511a:	01 97       	sbiw	r24, 0x01	; 1
    511c:	9f 83       	std	Y+7, r25	; 0x07
    511e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5120:	8e 81       	ldd	r24, Y+6	; 0x06
    5122:	9f 81       	ldd	r25, Y+7	; 0x07
    5124:	00 97       	sbiw	r24, 0x00	; 0
    5126:	69 f7       	brne	.-38     	; 0x5102 <CLCD_SendCommand+0x4e6>
    5128:	24 c0       	rjmp	.+72     	; 0x5172 <CLCD_SendCommand+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    512a:	68 85       	ldd	r22, Y+8	; 0x08
    512c:	79 85       	ldd	r23, Y+9	; 0x09
    512e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5130:	9b 85       	ldd	r25, Y+11	; 0x0b
    5132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5136:	dc 01       	movw	r26, r24
    5138:	cb 01       	movw	r24, r22
    513a:	9f 83       	std	Y+7, r25	; 0x07
    513c:	8e 83       	std	Y+6, r24	; 0x06
    513e:	8e 81       	ldd	r24, Y+6	; 0x06
    5140:	9f 81       	ldd	r25, Y+7	; 0x07
    5142:	9b 83       	std	Y+3, r25	; 0x03
    5144:	8a 83       	std	Y+2, r24	; 0x02
    5146:	8a 81       	ldd	r24, Y+2	; 0x02
    5148:	9b 81       	ldd	r25, Y+3	; 0x03
    514a:	01 97       	sbiw	r24, 0x01	; 1
    514c:	f1 f7       	brne	.-4      	; 0x514a <CLCD_SendCommand+0x52e>
    514e:	9b 83       	std	Y+3, r25	; 0x03
    5150:	8a 83       	std	Y+2, r24	; 0x02
    5152:	0f c0       	rjmp	.+30     	; 0x5172 <CLCD_SendCommand+0x556>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5154:	69 89       	ldd	r22, Y+17	; 0x11
    5156:	7a 89       	ldd	r23, Y+18	; 0x12
    5158:	8b 89       	ldd	r24, Y+19	; 0x13
    515a:	9c 89       	ldd	r25, Y+20	; 0x14
    515c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5160:	dc 01       	movw	r26, r24
    5162:	cb 01       	movw	r24, r22
    5164:	88 8b       	std	Y+16, r24	; 0x10
    5166:	88 89       	ldd	r24, Y+16	; 0x10
    5168:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    516a:	89 81       	ldd	r24, Y+1	; 0x01
    516c:	8a 95       	dec	r24
    516e:	f1 f7       	brne	.-4      	; 0x516c <CLCD_SendCommand+0x550>
    5170:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(2000);
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	62 e0       	ldi	r22, 0x02	; 2
    5176:	40 e0       	ldi	r20, 0x00	; 0
    5178:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
#endif
}
    517c:	c7 5b       	subi	r28, 0xB7	; 183
    517e:	df 4f       	sbci	r29, 0xFF	; 255
    5180:	0f b6       	in	r0, 0x3f	; 63
    5182:	f8 94       	cli
    5184:	de bf       	out	0x3e, r29	; 62
    5186:	0f be       	out	0x3f, r0	; 63
    5188:	cd bf       	out	0x3d, r28	; 61
    518a:	cf 91       	pop	r28
    518c:	df 91       	pop	r29
    518e:	1f 91       	pop	r17
    5190:	0f 91       	pop	r16
    5192:	08 95       	ret

00005194 <CLCD_SendData>:

void CLCD_SendData(u8 Data)
{
    5194:	0f 93       	push	r16
    5196:	1f 93       	push	r17
    5198:	df 93       	push	r29
    519a:	cf 93       	push	r28
    519c:	cd b7       	in	r28, 0x3d	; 61
    519e:	de b7       	in	r29, 0x3e	; 62
    51a0:	c9 54       	subi	r28, 0x49	; 73
    51a2:	d0 40       	sbci	r29, 0x00	; 0
    51a4:	0f b6       	in	r0, 0x3f	; 63
    51a6:	f8 94       	cli
    51a8:	de bf       	out	0x3e, r29	; 62
    51aa:	0f be       	out	0x3f, r0	; 63
    51ac:	cd bf       	out	0x3d, r28	; 61
    51ae:	fe 01       	movw	r30, r28
    51b0:	e7 5b       	subi	r30, 0xB7	; 183
    51b2:	ff 4f       	sbci	r31, 0xFF	; 255
    51b4:	80 83       	st	Z, r24
	/*Set RS pin to High for Data*/
    DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	60 e0       	ldi	r22, 0x00	; 0
    51ba:	41 e0       	ldi	r20, 0x01	; 1
    51bc:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>

    /*Set RW pin to low for write*/
    DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	61 e0       	ldi	r22, 0x01	; 1
    51c4:	40 e0       	ldi	r20, 0x00	; 0
    51c6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
       DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
       _delay_ms(2);
       DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);

	#elif defined CLCD_4_BitMode
		DataPort = (DataPort & 0x0F) | (UpperNibble_BitMask_Data);	//send upper 4 bit
    51ca:	a5 e3       	ldi	r26, 0x35	; 53
    51cc:	b0 e0       	ldi	r27, 0x00	; 0
    51ce:	e5 e3       	ldi	r30, 0x35	; 53
    51d0:	f0 e0       	ldi	r31, 0x00	; 0
    51d2:	80 81       	ld	r24, Z
    51d4:	98 2f       	mov	r25, r24
    51d6:	9f 70       	andi	r25, 0x0F	; 15
    51d8:	fe 01       	movw	r30, r28
    51da:	e7 5b       	subi	r30, 0xB7	; 183
    51dc:	ff 4f       	sbci	r31, 0xFF	; 255
    51de:	80 81       	ld	r24, Z
    51e0:	80 7f       	andi	r24, 0xF0	; 240
    51e2:	89 2b       	or	r24, r25
    51e4:	8c 93       	st	X, r24

		DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	60 e0       	ldi	r22, 0x00	; 0
    51ea:	41 e0       	ldi	r20, 0x01	; 1
    51ec:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	62 e0       	ldi	r22, 0x02	; 2
    51f4:	41 e0       	ldi	r20, 0x01	; 1
    51f6:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    51fa:	fe 01       	movw	r30, r28
    51fc:	eb 5b       	subi	r30, 0xBB	; 187
    51fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	90 e0       	ldi	r25, 0x00	; 0
    5204:	a8 e4       	ldi	r26, 0x48	; 72
    5206:	b2 e4       	ldi	r27, 0x42	; 66
    5208:	80 83       	st	Z, r24
    520a:	91 83       	std	Z+1, r25	; 0x01
    520c:	a2 83       	std	Z+2, r26	; 0x02
    520e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5210:	8e 01       	movw	r16, r28
    5212:	0f 5b       	subi	r16, 0xBF	; 191
    5214:	1f 4f       	sbci	r17, 0xFF	; 255
    5216:	fe 01       	movw	r30, r28
    5218:	eb 5b       	subi	r30, 0xBB	; 187
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	60 81       	ld	r22, Z
    521e:	71 81       	ldd	r23, Z+1	; 0x01
    5220:	82 81       	ldd	r24, Z+2	; 0x02
    5222:	93 81       	ldd	r25, Z+3	; 0x03
    5224:	2b ea       	ldi	r18, 0xAB	; 171
    5226:	3a ea       	ldi	r19, 0xAA	; 170
    5228:	4a e2       	ldi	r20, 0x2A	; 42
    522a:	50 e4       	ldi	r21, 0x40	; 64
    522c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5230:	dc 01       	movw	r26, r24
    5232:	cb 01       	movw	r24, r22
    5234:	f8 01       	movw	r30, r16
    5236:	80 83       	st	Z, r24
    5238:	91 83       	std	Z+1, r25	; 0x01
    523a:	a2 83       	std	Z+2, r26	; 0x02
    523c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    523e:	fe 01       	movw	r30, r28
    5240:	ef 5b       	subi	r30, 0xBF	; 191
    5242:	ff 4f       	sbci	r31, 0xFF	; 255
    5244:	60 81       	ld	r22, Z
    5246:	71 81       	ldd	r23, Z+1	; 0x01
    5248:	82 81       	ldd	r24, Z+2	; 0x02
    524a:	93 81       	ldd	r25, Z+3	; 0x03
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	40 e8       	ldi	r20, 0x80	; 128
    5252:	5f e3       	ldi	r21, 0x3F	; 63
    5254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5258:	88 23       	and	r24, r24
    525a:	34 f4       	brge	.+12     	; 0x5268 <CLCD_SendData+0xd4>
		__ticks = 1;
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	fe 01       	movw	r30, r28
    5260:	e0 5c       	subi	r30, 0xC0	; 192
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	80 83       	st	Z, r24
    5266:	9d c0       	rjmp	.+314    	; 0x53a2 <CLCD_SendData+0x20e>
	else if (__tmp > 255)
    5268:	fe 01       	movw	r30, r28
    526a:	ef 5b       	subi	r30, 0xBF	; 191
    526c:	ff 4f       	sbci	r31, 0xFF	; 255
    526e:	60 81       	ld	r22, Z
    5270:	71 81       	ldd	r23, Z+1	; 0x01
    5272:	82 81       	ldd	r24, Z+2	; 0x02
    5274:	93 81       	ldd	r25, Z+3	; 0x03
    5276:	20 e0       	ldi	r18, 0x00	; 0
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	4f e7       	ldi	r20, 0x7F	; 127
    527c:	53 e4       	ldi	r21, 0x43	; 67
    527e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5282:	18 16       	cp	r1, r24
    5284:	0c f0       	brlt	.+2      	; 0x5288 <CLCD_SendData+0xf4>
    5286:	7e c0       	rjmp	.+252    	; 0x5384 <CLCD_SendData+0x1f0>
	{
		_delay_ms(__us / 1000.0);
    5288:	fe 01       	movw	r30, r28
    528a:	eb 5b       	subi	r30, 0xBB	; 187
    528c:	ff 4f       	sbci	r31, 0xFF	; 255
    528e:	60 81       	ld	r22, Z
    5290:	71 81       	ldd	r23, Z+1	; 0x01
    5292:	82 81       	ldd	r24, Z+2	; 0x02
    5294:	93 81       	ldd	r25, Z+3	; 0x03
    5296:	20 e0       	ldi	r18, 0x00	; 0
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	4a e7       	ldi	r20, 0x7A	; 122
    529c:	54 e4       	ldi	r21, 0x44	; 68
    529e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	8c af       	std	Y+60, r24	; 0x3c
    52a8:	9d af       	std	Y+61, r25	; 0x3d
    52aa:	ae af       	std	Y+62, r26	; 0x3e
    52ac:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    52b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    52b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    52b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    52b6:	20 e0       	ldi	r18, 0x00	; 0
    52b8:	30 e0       	ldi	r19, 0x00	; 0
    52ba:	4a ef       	ldi	r20, 0xFA	; 250
    52bc:	54 e4       	ldi	r21, 0x44	; 68
    52be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52c2:	dc 01       	movw	r26, r24
    52c4:	cb 01       	movw	r24, r22
    52c6:	88 af       	std	Y+56, r24	; 0x38
    52c8:	99 af       	std	Y+57, r25	; 0x39
    52ca:	aa af       	std	Y+58, r26	; 0x3a
    52cc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    52ce:	68 ad       	ldd	r22, Y+56	; 0x38
    52d0:	79 ad       	ldd	r23, Y+57	; 0x39
    52d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    52d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    52d6:	20 e0       	ldi	r18, 0x00	; 0
    52d8:	30 e0       	ldi	r19, 0x00	; 0
    52da:	40 e8       	ldi	r20, 0x80	; 128
    52dc:	5f e3       	ldi	r21, 0x3F	; 63
    52de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52e2:	88 23       	and	r24, r24
    52e4:	2c f4       	brge	.+10     	; 0x52f0 <CLCD_SendData+0x15c>
		__ticks = 1;
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	9f ab       	std	Y+55, r25	; 0x37
    52ec:	8e ab       	std	Y+54, r24	; 0x36
    52ee:	3f c0       	rjmp	.+126    	; 0x536e <CLCD_SendData+0x1da>
	else if (__tmp > 65535)
    52f0:	68 ad       	ldd	r22, Y+56	; 0x38
    52f2:	79 ad       	ldd	r23, Y+57	; 0x39
    52f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    52f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	3f ef       	ldi	r19, 0xFF	; 255
    52fc:	4f e7       	ldi	r20, 0x7F	; 127
    52fe:	57 e4       	ldi	r21, 0x47	; 71
    5300:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5304:	18 16       	cp	r1, r24
    5306:	4c f5       	brge	.+82     	; 0x535a <CLCD_SendData+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5308:	6c ad       	ldd	r22, Y+60	; 0x3c
    530a:	7d ad       	ldd	r23, Y+61	; 0x3d
    530c:	8e ad       	ldd	r24, Y+62	; 0x3e
    530e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5310:	20 e0       	ldi	r18, 0x00	; 0
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	40 e2       	ldi	r20, 0x20	; 32
    5316:	51 e4       	ldi	r21, 0x41	; 65
    5318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    531c:	dc 01       	movw	r26, r24
    531e:	cb 01       	movw	r24, r22
    5320:	bc 01       	movw	r22, r24
    5322:	cd 01       	movw	r24, r26
    5324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5328:	dc 01       	movw	r26, r24
    532a:	cb 01       	movw	r24, r22
    532c:	9f ab       	std	Y+55, r25	; 0x37
    532e:	8e ab       	std	Y+54, r24	; 0x36
    5330:	0f c0       	rjmp	.+30     	; 0x5350 <CLCD_SendData+0x1bc>
    5332:	88 ec       	ldi	r24, 0xC8	; 200
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	9d ab       	std	Y+53, r25	; 0x35
    5338:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    533a:	8c a9       	ldd	r24, Y+52	; 0x34
    533c:	9d a9       	ldd	r25, Y+53	; 0x35
    533e:	01 97       	sbiw	r24, 0x01	; 1
    5340:	f1 f7       	brne	.-4      	; 0x533e <CLCD_SendData+0x1aa>
    5342:	9d ab       	std	Y+53, r25	; 0x35
    5344:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5346:	8e a9       	ldd	r24, Y+54	; 0x36
    5348:	9f a9       	ldd	r25, Y+55	; 0x37
    534a:	01 97       	sbiw	r24, 0x01	; 1
    534c:	9f ab       	std	Y+55, r25	; 0x37
    534e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5350:	8e a9       	ldd	r24, Y+54	; 0x36
    5352:	9f a9       	ldd	r25, Y+55	; 0x37
    5354:	00 97       	sbiw	r24, 0x00	; 0
    5356:	69 f7       	brne	.-38     	; 0x5332 <CLCD_SendData+0x19e>
    5358:	2d c0       	rjmp	.+90     	; 0x53b4 <CLCD_SendData+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    535a:	68 ad       	ldd	r22, Y+56	; 0x38
    535c:	79 ad       	ldd	r23, Y+57	; 0x39
    535e:	8a ad       	ldd	r24, Y+58	; 0x3a
    5360:	9b ad       	ldd	r25, Y+59	; 0x3b
    5362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5366:	dc 01       	movw	r26, r24
    5368:	cb 01       	movw	r24, r22
    536a:	9f ab       	std	Y+55, r25	; 0x37
    536c:	8e ab       	std	Y+54, r24	; 0x36
    536e:	8e a9       	ldd	r24, Y+54	; 0x36
    5370:	9f a9       	ldd	r25, Y+55	; 0x37
    5372:	9b ab       	std	Y+51, r25	; 0x33
    5374:	8a ab       	std	Y+50, r24	; 0x32
    5376:	8a a9       	ldd	r24, Y+50	; 0x32
    5378:	9b a9       	ldd	r25, Y+51	; 0x33
    537a:	01 97       	sbiw	r24, 0x01	; 1
    537c:	f1 f7       	brne	.-4      	; 0x537a <CLCD_SendData+0x1e6>
    537e:	9b ab       	std	Y+51, r25	; 0x33
    5380:	8a ab       	std	Y+50, r24	; 0x32
    5382:	18 c0       	rjmp	.+48     	; 0x53b4 <CLCD_SendData+0x220>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5384:	fe 01       	movw	r30, r28
    5386:	ef 5b       	subi	r30, 0xBF	; 191
    5388:	ff 4f       	sbci	r31, 0xFF	; 255
    538a:	60 81       	ld	r22, Z
    538c:	71 81       	ldd	r23, Z+1	; 0x01
    538e:	82 81       	ldd	r24, Z+2	; 0x02
    5390:	93 81       	ldd	r25, Z+3	; 0x03
    5392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5396:	dc 01       	movw	r26, r24
    5398:	cb 01       	movw	r24, r22
    539a:	fe 01       	movw	r30, r28
    539c:	e0 5c       	subi	r30, 0xC0	; 192
    539e:	ff 4f       	sbci	r31, 0xFF	; 255
    53a0:	80 83       	st	Z, r24
    53a2:	fe 01       	movw	r30, r28
    53a4:	e0 5c       	subi	r30, 0xC0	; 192
    53a6:	ff 4f       	sbci	r31, 0xFF	; 255
    53a8:	80 81       	ld	r24, Z
    53aa:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    53ac:	89 a9       	ldd	r24, Y+49	; 0x31
    53ae:	8a 95       	dec	r24
    53b0:	f1 f7       	brne	.-4      	; 0x53ae <CLCD_SendData+0x21a>
    53b2:	89 ab       	std	Y+49, r24	; 0x31

		_delay_us(50);
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    53b4:	81 e0       	ldi	r24, 0x01	; 1
    53b6:	62 e0       	ldi	r22, 0x02	; 2
    53b8:	40 e0       	ldi	r20, 0x00	; 0
    53ba:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    53be:	80 e0       	ldi	r24, 0x00	; 0
    53c0:	90 e0       	ldi	r25, 0x00	; 0
    53c2:	aa ef       	ldi	r26, 0xFA	; 250
    53c4:	b4 e4       	ldi	r27, 0x44	; 68
    53c6:	8d a7       	std	Y+45, r24	; 0x2d
    53c8:	9e a7       	std	Y+46, r25	; 0x2e
    53ca:	af a7       	std	Y+47, r26	; 0x2f
    53cc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    53ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    53d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    53d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    53d4:	98 a9       	ldd	r25, Y+48	; 0x30
    53d6:	2b ea       	ldi	r18, 0xAB	; 171
    53d8:	3a ea       	ldi	r19, 0xAA	; 170
    53da:	4a e2       	ldi	r20, 0x2A	; 42
    53dc:	50 e4       	ldi	r21, 0x40	; 64
    53de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53e2:	dc 01       	movw	r26, r24
    53e4:	cb 01       	movw	r24, r22
    53e6:	89 a7       	std	Y+41, r24	; 0x29
    53e8:	9a a7       	std	Y+42, r25	; 0x2a
    53ea:	ab a7       	std	Y+43, r26	; 0x2b
    53ec:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    53ee:	69 a5       	ldd	r22, Y+41	; 0x29
    53f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    53f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    53f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    53f6:	20 e0       	ldi	r18, 0x00	; 0
    53f8:	30 e0       	ldi	r19, 0x00	; 0
    53fa:	40 e8       	ldi	r20, 0x80	; 128
    53fc:	5f e3       	ldi	r21, 0x3F	; 63
    53fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5402:	88 23       	and	r24, r24
    5404:	1c f4       	brge	.+6      	; 0x540c <CLCD_SendData+0x278>
		__ticks = 1;
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	88 a7       	std	Y+40, r24	; 0x28
    540a:	91 c0       	rjmp	.+290    	; 0x552e <CLCD_SendData+0x39a>
	else if (__tmp > 255)
    540c:	69 a5       	ldd	r22, Y+41	; 0x29
    540e:	7a a5       	ldd	r23, Y+42	; 0x2a
    5410:	8b a5       	ldd	r24, Y+43	; 0x2b
    5412:	9c a5       	ldd	r25, Y+44	; 0x2c
    5414:	20 e0       	ldi	r18, 0x00	; 0
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	4f e7       	ldi	r20, 0x7F	; 127
    541a:	53 e4       	ldi	r21, 0x43	; 67
    541c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5420:	18 16       	cp	r1, r24
    5422:	0c f0       	brlt	.+2      	; 0x5426 <CLCD_SendData+0x292>
    5424:	7b c0       	rjmp	.+246    	; 0x551c <CLCD_SendData+0x388>
	{
		_delay_ms(__us / 1000.0);
    5426:	6d a5       	ldd	r22, Y+45	; 0x2d
    5428:	7e a5       	ldd	r23, Y+46	; 0x2e
    542a:	8f a5       	ldd	r24, Y+47	; 0x2f
    542c:	98 a9       	ldd	r25, Y+48	; 0x30
    542e:	20 e0       	ldi	r18, 0x00	; 0
    5430:	30 e0       	ldi	r19, 0x00	; 0
    5432:	4a e7       	ldi	r20, 0x7A	; 122
    5434:	54 e4       	ldi	r21, 0x44	; 68
    5436:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    543a:	dc 01       	movw	r26, r24
    543c:	cb 01       	movw	r24, r22
    543e:	8c a3       	std	Y+36, r24	; 0x24
    5440:	9d a3       	std	Y+37, r25	; 0x25
    5442:	ae a3       	std	Y+38, r26	; 0x26
    5444:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5446:	6c a1       	ldd	r22, Y+36	; 0x24
    5448:	7d a1       	ldd	r23, Y+37	; 0x25
    544a:	8e a1       	ldd	r24, Y+38	; 0x26
    544c:	9f a1       	ldd	r25, Y+39	; 0x27
    544e:	20 e0       	ldi	r18, 0x00	; 0
    5450:	30 e0       	ldi	r19, 0x00	; 0
    5452:	4a ef       	ldi	r20, 0xFA	; 250
    5454:	54 e4       	ldi	r21, 0x44	; 68
    5456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    545a:	dc 01       	movw	r26, r24
    545c:	cb 01       	movw	r24, r22
    545e:	88 a3       	std	Y+32, r24	; 0x20
    5460:	99 a3       	std	Y+33, r25	; 0x21
    5462:	aa a3       	std	Y+34, r26	; 0x22
    5464:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5466:	68 a1       	ldd	r22, Y+32	; 0x20
    5468:	79 a1       	ldd	r23, Y+33	; 0x21
    546a:	8a a1       	ldd	r24, Y+34	; 0x22
    546c:	9b a1       	ldd	r25, Y+35	; 0x23
    546e:	20 e0       	ldi	r18, 0x00	; 0
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	40 e8       	ldi	r20, 0x80	; 128
    5474:	5f e3       	ldi	r21, 0x3F	; 63
    5476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    547a:	88 23       	and	r24, r24
    547c:	2c f4       	brge	.+10     	; 0x5488 <CLCD_SendData+0x2f4>
		__ticks = 1;
    547e:	81 e0       	ldi	r24, 0x01	; 1
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	9f 8f       	std	Y+31, r25	; 0x1f
    5484:	8e 8f       	std	Y+30, r24	; 0x1e
    5486:	3f c0       	rjmp	.+126    	; 0x5506 <CLCD_SendData+0x372>
	else if (__tmp > 65535)
    5488:	68 a1       	ldd	r22, Y+32	; 0x20
    548a:	79 a1       	ldd	r23, Y+33	; 0x21
    548c:	8a a1       	ldd	r24, Y+34	; 0x22
    548e:	9b a1       	ldd	r25, Y+35	; 0x23
    5490:	20 e0       	ldi	r18, 0x00	; 0
    5492:	3f ef       	ldi	r19, 0xFF	; 255
    5494:	4f e7       	ldi	r20, 0x7F	; 127
    5496:	57 e4       	ldi	r21, 0x47	; 71
    5498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    549c:	18 16       	cp	r1, r24
    549e:	4c f5       	brge	.+82     	; 0x54f2 <CLCD_SendData+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54a0:	6c a1       	ldd	r22, Y+36	; 0x24
    54a2:	7d a1       	ldd	r23, Y+37	; 0x25
    54a4:	8e a1       	ldd	r24, Y+38	; 0x26
    54a6:	9f a1       	ldd	r25, Y+39	; 0x27
    54a8:	20 e0       	ldi	r18, 0x00	; 0
    54aa:	30 e0       	ldi	r19, 0x00	; 0
    54ac:	40 e2       	ldi	r20, 0x20	; 32
    54ae:	51 e4       	ldi	r21, 0x41	; 65
    54b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54b4:	dc 01       	movw	r26, r24
    54b6:	cb 01       	movw	r24, r22
    54b8:	bc 01       	movw	r22, r24
    54ba:	cd 01       	movw	r24, r26
    54bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c0:	dc 01       	movw	r26, r24
    54c2:	cb 01       	movw	r24, r22
    54c4:	9f 8f       	std	Y+31, r25	; 0x1f
    54c6:	8e 8f       	std	Y+30, r24	; 0x1e
    54c8:	0f c0       	rjmp	.+30     	; 0x54e8 <CLCD_SendData+0x354>
    54ca:	88 ec       	ldi	r24, 0xC8	; 200
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	9d 8f       	std	Y+29, r25	; 0x1d
    54d0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    54d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    54d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    54d6:	01 97       	sbiw	r24, 0x01	; 1
    54d8:	f1 f7       	brne	.-4      	; 0x54d6 <CLCD_SendData+0x342>
    54da:	9d 8f       	std	Y+29, r25	; 0x1d
    54dc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    54e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    54e2:	01 97       	sbiw	r24, 0x01	; 1
    54e4:	9f 8f       	std	Y+31, r25	; 0x1f
    54e6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    54ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    54ec:	00 97       	sbiw	r24, 0x00	; 0
    54ee:	69 f7       	brne	.-38     	; 0x54ca <CLCD_SendData+0x336>
    54f0:	24 c0       	rjmp	.+72     	; 0x553a <CLCD_SendData+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54f2:	68 a1       	ldd	r22, Y+32	; 0x20
    54f4:	79 a1       	ldd	r23, Y+33	; 0x21
    54f6:	8a a1       	ldd	r24, Y+34	; 0x22
    54f8:	9b a1       	ldd	r25, Y+35	; 0x23
    54fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54fe:	dc 01       	movw	r26, r24
    5500:	cb 01       	movw	r24, r22
    5502:	9f 8f       	std	Y+31, r25	; 0x1f
    5504:	8e 8f       	std	Y+30, r24	; 0x1e
    5506:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5508:	9f 8d       	ldd	r25, Y+31	; 0x1f
    550a:	9b 8f       	std	Y+27, r25	; 0x1b
    550c:	8a 8f       	std	Y+26, r24	; 0x1a
    550e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5510:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5512:	01 97       	sbiw	r24, 0x01	; 1
    5514:	f1 f7       	brne	.-4      	; 0x5512 <CLCD_SendData+0x37e>
    5516:	9b 8f       	std	Y+27, r25	; 0x1b
    5518:	8a 8f       	std	Y+26, r24	; 0x1a
    551a:	0f c0       	rjmp	.+30     	; 0x553a <CLCD_SendData+0x3a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    551c:	69 a5       	ldd	r22, Y+41	; 0x29
    551e:	7a a5       	ldd	r23, Y+42	; 0x2a
    5520:	8b a5       	ldd	r24, Y+43	; 0x2b
    5522:	9c a5       	ldd	r25, Y+44	; 0x2c
    5524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5528:	dc 01       	movw	r26, r24
    552a:	cb 01       	movw	r24, r22
    552c:	88 a7       	std	Y+40, r24	; 0x28
    552e:	88 a5       	ldd	r24, Y+40	; 0x28
    5530:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5532:	89 8d       	ldd	r24, Y+25	; 0x19
    5534:	8a 95       	dec	r24
    5536:	f1 f7       	brne	.-4      	; 0x5534 <CLCD_SendData+0x3a0>
    5538:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(2000);

		DataPort = (DataPort & 0x0F) | (LowerNibble_BitMask_Data); 	//send lower 4 bit
    553a:	a5 e3       	ldi	r26, 0x35	; 53
    553c:	b0 e0       	ldi	r27, 0x00	; 0
    553e:	e5 e3       	ldi	r30, 0x35	; 53
    5540:	f0 e0       	ldi	r31, 0x00	; 0
    5542:	80 81       	ld	r24, Z
    5544:	28 2f       	mov	r18, r24
    5546:	2f 70       	andi	r18, 0x0F	; 15
    5548:	fe 01       	movw	r30, r28
    554a:	e7 5b       	subi	r30, 0xB7	; 183
    554c:	ff 4f       	sbci	r31, 0xFF	; 255
    554e:	80 81       	ld	r24, Z
    5550:	88 2f       	mov	r24, r24
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	82 95       	swap	r24
    5556:	92 95       	swap	r25
    5558:	90 7f       	andi	r25, 0xF0	; 240
    555a:	98 27       	eor	r25, r24
    555c:	80 7f       	andi	r24, 0xF0	; 240
    555e:	98 27       	eor	r25, r24
    5560:	82 2b       	or	r24, r18
    5562:	8c 93       	st	X, r24

		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    5564:	81 e0       	ldi	r24, 0x01	; 1
    5566:	62 e0       	ldi	r22, 0x02	; 2
    5568:	41 e0       	ldi	r20, 0x01	; 1
    556a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
    556e:	80 e0       	ldi	r24, 0x00	; 0
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	aa ef       	ldi	r26, 0xFA	; 250
    5574:	b4 e4       	ldi	r27, 0x44	; 68
    5576:	8d 8b       	std	Y+21, r24	; 0x15
    5578:	9e 8b       	std	Y+22, r25	; 0x16
    557a:	af 8b       	std	Y+23, r26	; 0x17
    557c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    557e:	6d 89       	ldd	r22, Y+21	; 0x15
    5580:	7e 89       	ldd	r23, Y+22	; 0x16
    5582:	8f 89       	ldd	r24, Y+23	; 0x17
    5584:	98 8d       	ldd	r25, Y+24	; 0x18
    5586:	2b ea       	ldi	r18, 0xAB	; 171
    5588:	3a ea       	ldi	r19, 0xAA	; 170
    558a:	4a e2       	ldi	r20, 0x2A	; 42
    558c:	50 e4       	ldi	r21, 0x40	; 64
    558e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5592:	dc 01       	movw	r26, r24
    5594:	cb 01       	movw	r24, r22
    5596:	89 8b       	std	Y+17, r24	; 0x11
    5598:	9a 8b       	std	Y+18, r25	; 0x12
    559a:	ab 8b       	std	Y+19, r26	; 0x13
    559c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    559e:	69 89       	ldd	r22, Y+17	; 0x11
    55a0:	7a 89       	ldd	r23, Y+18	; 0x12
    55a2:	8b 89       	ldd	r24, Y+19	; 0x13
    55a4:	9c 89       	ldd	r25, Y+20	; 0x14
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	40 e8       	ldi	r20, 0x80	; 128
    55ac:	5f e3       	ldi	r21, 0x3F	; 63
    55ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55b2:	88 23       	and	r24, r24
    55b4:	1c f4       	brge	.+6      	; 0x55bc <CLCD_SendData+0x428>
		__ticks = 1;
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	88 8b       	std	Y+16, r24	; 0x10
    55ba:	91 c0       	rjmp	.+290    	; 0x56de <CLCD_SendData+0x54a>
	else if (__tmp > 255)
    55bc:	69 89       	ldd	r22, Y+17	; 0x11
    55be:	7a 89       	ldd	r23, Y+18	; 0x12
    55c0:	8b 89       	ldd	r24, Y+19	; 0x13
    55c2:	9c 89       	ldd	r25, Y+20	; 0x14
    55c4:	20 e0       	ldi	r18, 0x00	; 0
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	4f e7       	ldi	r20, 0x7F	; 127
    55ca:	53 e4       	ldi	r21, 0x43	; 67
    55cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55d0:	18 16       	cp	r1, r24
    55d2:	0c f0       	brlt	.+2      	; 0x55d6 <CLCD_SendData+0x442>
    55d4:	7b c0       	rjmp	.+246    	; 0x56cc <CLCD_SendData+0x538>
	{
		_delay_ms(__us / 1000.0);
    55d6:	6d 89       	ldd	r22, Y+21	; 0x15
    55d8:	7e 89       	ldd	r23, Y+22	; 0x16
    55da:	8f 89       	ldd	r24, Y+23	; 0x17
    55dc:	98 8d       	ldd	r25, Y+24	; 0x18
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    55e2:	4a e7       	ldi	r20, 0x7A	; 122
    55e4:	54 e4       	ldi	r21, 0x44	; 68
    55e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    55ea:	dc 01       	movw	r26, r24
    55ec:	cb 01       	movw	r24, r22
    55ee:	8c 87       	std	Y+12, r24	; 0x0c
    55f0:	9d 87       	std	Y+13, r25	; 0x0d
    55f2:	ae 87       	std	Y+14, r26	; 0x0e
    55f4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    55f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    55fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    55fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    55fe:	20 e0       	ldi	r18, 0x00	; 0
    5600:	30 e0       	ldi	r19, 0x00	; 0
    5602:	4a ef       	ldi	r20, 0xFA	; 250
    5604:	54 e4       	ldi	r21, 0x44	; 68
    5606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    560a:	dc 01       	movw	r26, r24
    560c:	cb 01       	movw	r24, r22
    560e:	88 87       	std	Y+8, r24	; 0x08
    5610:	99 87       	std	Y+9, r25	; 0x09
    5612:	aa 87       	std	Y+10, r26	; 0x0a
    5614:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5616:	68 85       	ldd	r22, Y+8	; 0x08
    5618:	79 85       	ldd	r23, Y+9	; 0x09
    561a:	8a 85       	ldd	r24, Y+10	; 0x0a
    561c:	9b 85       	ldd	r25, Y+11	; 0x0b
    561e:	20 e0       	ldi	r18, 0x00	; 0
    5620:	30 e0       	ldi	r19, 0x00	; 0
    5622:	40 e8       	ldi	r20, 0x80	; 128
    5624:	5f e3       	ldi	r21, 0x3F	; 63
    5626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    562a:	88 23       	and	r24, r24
    562c:	2c f4       	brge	.+10     	; 0x5638 <CLCD_SendData+0x4a4>
		__ticks = 1;
    562e:	81 e0       	ldi	r24, 0x01	; 1
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	9f 83       	std	Y+7, r25	; 0x07
    5634:	8e 83       	std	Y+6, r24	; 0x06
    5636:	3f c0       	rjmp	.+126    	; 0x56b6 <CLCD_SendData+0x522>
	else if (__tmp > 65535)
    5638:	68 85       	ldd	r22, Y+8	; 0x08
    563a:	79 85       	ldd	r23, Y+9	; 0x09
    563c:	8a 85       	ldd	r24, Y+10	; 0x0a
    563e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5640:	20 e0       	ldi	r18, 0x00	; 0
    5642:	3f ef       	ldi	r19, 0xFF	; 255
    5644:	4f e7       	ldi	r20, 0x7F	; 127
    5646:	57 e4       	ldi	r21, 0x47	; 71
    5648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    564c:	18 16       	cp	r1, r24
    564e:	4c f5       	brge	.+82     	; 0x56a2 <CLCD_SendData+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5650:	6c 85       	ldd	r22, Y+12	; 0x0c
    5652:	7d 85       	ldd	r23, Y+13	; 0x0d
    5654:	8e 85       	ldd	r24, Y+14	; 0x0e
    5656:	9f 85       	ldd	r25, Y+15	; 0x0f
    5658:	20 e0       	ldi	r18, 0x00	; 0
    565a:	30 e0       	ldi	r19, 0x00	; 0
    565c:	40 e2       	ldi	r20, 0x20	; 32
    565e:	51 e4       	ldi	r21, 0x41	; 65
    5660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5664:	dc 01       	movw	r26, r24
    5666:	cb 01       	movw	r24, r22
    5668:	bc 01       	movw	r22, r24
    566a:	cd 01       	movw	r24, r26
    566c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5670:	dc 01       	movw	r26, r24
    5672:	cb 01       	movw	r24, r22
    5674:	9f 83       	std	Y+7, r25	; 0x07
    5676:	8e 83       	std	Y+6, r24	; 0x06
    5678:	0f c0       	rjmp	.+30     	; 0x5698 <CLCD_SendData+0x504>
    567a:	88 ec       	ldi	r24, 0xC8	; 200
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	9d 83       	std	Y+5, r25	; 0x05
    5680:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5682:	8c 81       	ldd	r24, Y+4	; 0x04
    5684:	9d 81       	ldd	r25, Y+5	; 0x05
    5686:	01 97       	sbiw	r24, 0x01	; 1
    5688:	f1 f7       	brne	.-4      	; 0x5686 <CLCD_SendData+0x4f2>
    568a:	9d 83       	std	Y+5, r25	; 0x05
    568c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    568e:	8e 81       	ldd	r24, Y+6	; 0x06
    5690:	9f 81       	ldd	r25, Y+7	; 0x07
    5692:	01 97       	sbiw	r24, 0x01	; 1
    5694:	9f 83       	std	Y+7, r25	; 0x07
    5696:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5698:	8e 81       	ldd	r24, Y+6	; 0x06
    569a:	9f 81       	ldd	r25, Y+7	; 0x07
    569c:	00 97       	sbiw	r24, 0x00	; 0
    569e:	69 f7       	brne	.-38     	; 0x567a <CLCD_SendData+0x4e6>
    56a0:	24 c0       	rjmp	.+72     	; 0x56ea <CLCD_SendData+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56a2:	68 85       	ldd	r22, Y+8	; 0x08
    56a4:	79 85       	ldd	r23, Y+9	; 0x09
    56a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    56a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    56aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56ae:	dc 01       	movw	r26, r24
    56b0:	cb 01       	movw	r24, r22
    56b2:	9f 83       	std	Y+7, r25	; 0x07
    56b4:	8e 83       	std	Y+6, r24	; 0x06
    56b6:	8e 81       	ldd	r24, Y+6	; 0x06
    56b8:	9f 81       	ldd	r25, Y+7	; 0x07
    56ba:	9b 83       	std	Y+3, r25	; 0x03
    56bc:	8a 83       	std	Y+2, r24	; 0x02
    56be:	8a 81       	ldd	r24, Y+2	; 0x02
    56c0:	9b 81       	ldd	r25, Y+3	; 0x03
    56c2:	01 97       	sbiw	r24, 0x01	; 1
    56c4:	f1 f7       	brne	.-4      	; 0x56c2 <CLCD_SendData+0x52e>
    56c6:	9b 83       	std	Y+3, r25	; 0x03
    56c8:	8a 83       	std	Y+2, r24	; 0x02
    56ca:	0f c0       	rjmp	.+30     	; 0x56ea <CLCD_SendData+0x556>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    56cc:	69 89       	ldd	r22, Y+17	; 0x11
    56ce:	7a 89       	ldd	r23, Y+18	; 0x12
    56d0:	8b 89       	ldd	r24, Y+19	; 0x13
    56d2:	9c 89       	ldd	r25, Y+20	; 0x14
    56d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d8:	dc 01       	movw	r26, r24
    56da:	cb 01       	movw	r24, r22
    56dc:	88 8b       	std	Y+16, r24	; 0x10
    56de:	88 89       	ldd	r24, Y+16	; 0x10
    56e0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    56e2:	89 81       	ldd	r24, Y+1	; 0x01
    56e4:	8a 95       	dec	r24
    56e6:	f1 f7       	brne	.-4      	; 0x56e4 <CLCD_SendData+0x550>
    56e8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(2000);
		DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    56ea:	81 e0       	ldi	r24, 0x01	; 1
    56ec:	62 e0       	ldi	r22, 0x02	; 2
    56ee:	40 e0       	ldi	r20, 0x00	; 0
    56f0:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>
#endif
}
    56f4:	c7 5b       	subi	r28, 0xB7	; 183
    56f6:	df 4f       	sbci	r29, 0xFF	; 255
    56f8:	0f b6       	in	r0, 0x3f	; 63
    56fa:	f8 94       	cli
    56fc:	de bf       	out	0x3e, r29	; 62
    56fe:	0f be       	out	0x3f, r0	; 63
    5700:	cd bf       	out	0x3d, r28	; 61
    5702:	cf 91       	pop	r28
    5704:	df 91       	pop	r29
    5706:	1f 91       	pop	r17
    5708:	0f 91       	pop	r16
    570a:	08 95       	ret

0000570c <CLCD_SendWord>:

void CLCD_SendWord(u8 *Word)
{
    570c:	df 93       	push	r29
    570e:	cf 93       	push	r28
    5710:	00 d0       	rcall	.+0      	; 0x5712 <CLCD_SendWord+0x6>
    5712:	0f 92       	push	r0
    5714:	cd b7       	in	r28, 0x3d	; 61
    5716:	de b7       	in	r29, 0x3e	; 62
    5718:	9b 83       	std	Y+3, r25	; 0x03
    571a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    571c:	19 82       	std	Y+1, r1	; 0x01
    571e:	15 c0       	rjmp	.+42     	; 0x574a <CLCD_SendWord+0x3e>
	while(Word[Counter]!='\0')
	{
		CLCD_SendData(Word[Counter]);
    5720:	89 81       	ldd	r24, Y+1	; 0x01
    5722:	28 2f       	mov	r18, r24
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	8a 81       	ldd	r24, Y+2	; 0x02
    5728:	9b 81       	ldd	r25, Y+3	; 0x03
    572a:	fc 01       	movw	r30, r24
    572c:	e2 0f       	add	r30, r18
    572e:	f3 1f       	adc	r31, r19
    5730:	80 81       	ld	r24, Z
    5732:	0e 94 ca 28 	call	0x5194	; 0x5194 <CLCD_SendData>
		Counter++;
    5736:	89 81       	ldd	r24, Y+1	; 0x01
    5738:	8f 5f       	subi	r24, 0xFF	; 255
    573a:	89 83       	std	Y+1, r24	; 0x01
		if(Counter==16)
    573c:	89 81       	ldd	r24, Y+1	; 0x01
    573e:	80 31       	cpi	r24, 0x10	; 16
    5740:	21 f4       	brne	.+8      	; 0x574a <CLCD_SendWord+0x3e>
			CLCD_GoToXY(1,0);
    5742:	81 e0       	ldi	r24, 0x01	; 1
    5744:	60 e0       	ldi	r22, 0x00	; 0
    5746:	0e 94 b6 2b 	call	0x576c	; 0x576c <CLCD_GoToXY>
}

void CLCD_SendWord(u8 *Word)
{
	u8 Counter=0;
	while(Word[Counter]!='\0')
    574a:	89 81       	ldd	r24, Y+1	; 0x01
    574c:	28 2f       	mov	r18, r24
    574e:	30 e0       	ldi	r19, 0x00	; 0
    5750:	8a 81       	ldd	r24, Y+2	; 0x02
    5752:	9b 81       	ldd	r25, Y+3	; 0x03
    5754:	fc 01       	movw	r30, r24
    5756:	e2 0f       	add	r30, r18
    5758:	f3 1f       	adc	r31, r19
    575a:	80 81       	ld	r24, Z
    575c:	88 23       	and	r24, r24
    575e:	01 f7       	brne	.-64     	; 0x5720 <CLCD_SendWord+0x14>
		CLCD_SendData(Word[Counter]);
		Counter++;
		if(Counter==16)
			CLCD_GoToXY(1,0);
	}
}
    5760:	0f 90       	pop	r0
    5762:	0f 90       	pop	r0
    5764:	0f 90       	pop	r0
    5766:	cf 91       	pop	r28
    5768:	df 91       	pop	r29
    576a:	08 95       	ret

0000576c <CLCD_GoToXY>:

void CLCD_GoToXY(u8 X_Position,u8 Y_Position)
{
    576c:	df 93       	push	r29
    576e:	cf 93       	push	r28
    5770:	00 d0       	rcall	.+0      	; 0x5772 <CLCD_GoToXY+0x6>
    5772:	0f 92       	push	r0
    5774:	cd b7       	in	r28, 0x3d	; 61
    5776:	de b7       	in	r29, 0x3e	; 62
    5778:	8a 83       	std	Y+2, r24	; 0x02
    577a:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_address;
	if(Y_Position == 0)
    577c:	8b 81       	ldd	r24, Y+3	; 0x03
    577e:	88 23       	and	r24, r24
    5780:	39 f4       	brne	.+14     	; 0x5790 <CLCD_GoToXY+0x24>
		{
			DDRAM_address = X_Position;
    5782:	8a 81       	ldd	r24, Y+2	; 0x02
    5784:	89 83       	std	Y+1, r24	; 0x01
			CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    5786:	89 81       	ldd	r24, Y+1	; 0x01
    5788:	80 58       	subi	r24, 0x80	; 128
    578a:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <CLCD_SendCommand>
    578e:	0a c0       	rjmp	.+20     	; 0x57a4 <CLCD_GoToXY+0x38>
		}
	else if (Y_Position == 1)
    5790:	8b 81       	ldd	r24, Y+3	; 0x03
    5792:	81 30       	cpi	r24, 0x01	; 1
    5794:	39 f4       	brne	.+14     	; 0x57a4 <CLCD_GoToXY+0x38>
		{
		DDRAM_address = X_Position + FirstLoc_SecondLine;
    5796:	8a 81       	ldd	r24, Y+2	; 0x02
    5798:	80 5c       	subi	r24, 0xC0	; 192
    579a:	89 83       	std	Y+1, r24	; 0x01
		CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    579c:	89 81       	ldd	r24, Y+1	; 0x01
    579e:	80 58       	subi	r24, 0x80	; 128
    57a0:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <CLCD_SendCommand>
		}
}
    57a4:	0f 90       	pop	r0
    57a6:	0f 90       	pop	r0
    57a8:	0f 90       	pop	r0
    57aa:	cf 91       	pop	r28
    57ac:	df 91       	pop	r29
    57ae:	08 95       	ret

000057b0 <CLCD_SendSpecialChar>:

void CLCD_SendSpecialChar(u8 *Pattern,u8 BlockNumber,u8 X_Position,u8 Y_Position)
{
    57b0:	df 93       	push	r29
    57b2:	cf 93       	push	r28
    57b4:	cd b7       	in	r28, 0x3d	; 61
    57b6:	de b7       	in	r29, 0x3e	; 62
    57b8:	27 97       	sbiw	r28, 0x07	; 7
    57ba:	0f b6       	in	r0, 0x3f	; 63
    57bc:	f8 94       	cli
    57be:	de bf       	out	0x3e, r29	; 62
    57c0:	0f be       	out	0x3f, r0	; 63
    57c2:	cd bf       	out	0x3d, r28	; 61
    57c4:	9c 83       	std	Y+4, r25	; 0x04
    57c6:	8b 83       	std	Y+3, r24	; 0x03
    57c8:	6d 83       	std	Y+5, r22	; 0x05
    57ca:	4e 83       	std	Y+6, r20	; 0x06
    57cc:	2f 83       	std	Y+7, r18	; 0x07
	u8 Counter,CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	CGRAM_Address = BlockNumber*8;
    57ce:	8d 81       	ldd	r24, Y+5	; 0x05
    57d0:	88 2f       	mov	r24, r24
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	88 0f       	add	r24, r24
    57d6:	99 1f       	adc	r25, r25
    57d8:	88 0f       	add	r24, r24
    57da:	99 1f       	adc	r25, r25
    57dc:	88 0f       	add	r24, r24
    57de:	99 1f       	adc	r25, r25
    57e0:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_SendCommand(CGRAM_Address+Set_Bit6);
    57e2:	89 81       	ldd	r24, Y+1	; 0x01
    57e4:	80 5c       	subi	r24, 0xC0	; 192
    57e6:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <CLCD_SendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Counter=0;Counter<8;Counter++)
    57ea:	1a 82       	std	Y+2, r1	; 0x02
    57ec:	0e c0       	rjmp	.+28     	; 0x580a <CLCD_SendSpecialChar+0x5a>
		{
			CLCD_SendData(Pattern[Counter]);
    57ee:	8a 81       	ldd	r24, Y+2	; 0x02
    57f0:	28 2f       	mov	r18, r24
    57f2:	30 e0       	ldi	r19, 0x00	; 0
    57f4:	8b 81       	ldd	r24, Y+3	; 0x03
    57f6:	9c 81       	ldd	r25, Y+4	; 0x04
    57f8:	fc 01       	movw	r30, r24
    57fa:	e2 0f       	add	r30, r18
    57fc:	f3 1f       	adc	r31, r19
    57fe:	80 81       	ld	r24, Z
    5800:	0e 94 ca 28 	call	0x5194	; 0x5194 <CLCD_SendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_SendCommand(CGRAM_Address+Set_Bit6);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Counter=0;Counter<8;Counter++)
    5804:	8a 81       	ldd	r24, Y+2	; 0x02
    5806:	8f 5f       	subi	r24, 0xFF	; 255
    5808:	8a 83       	std	Y+2, r24	; 0x02
    580a:	8a 81       	ldd	r24, Y+2	; 0x02
    580c:	88 30       	cpi	r24, 0x08	; 8
    580e:	78 f3       	brcs	.-34     	; 0x57ee <CLCD_SendSpecialChar+0x3e>
		{
			CLCD_SendData(Pattern[Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_GoToXY(X_Position,Y_Position);
    5810:	8e 81       	ldd	r24, Y+6	; 0x06
    5812:	6f 81       	ldd	r22, Y+7	; 0x07
    5814:	0e 94 b6 2b 	call	0x576c	; 0x576c <CLCD_GoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_SendData(BlockNumber);
    5818:	8d 81       	ldd	r24, Y+5	; 0x05
    581a:	0e 94 ca 28 	call	0x5194	; 0x5194 <CLCD_SendData>
}
    581e:	27 96       	adiw	r28, 0x07	; 7
    5820:	0f b6       	in	r0, 0x3f	; 63
    5822:	f8 94       	cli
    5824:	de bf       	out	0x3e, r29	; 62
    5826:	0f be       	out	0x3f, r0	; 63
    5828:	cd bf       	out	0x3d, r28	; 61
    582a:	cf 91       	pop	r28
    582c:	df 91       	pop	r29
    582e:	08 95       	ret

00005830 <CLCD_Display_Decimal_Number>:


void CLCD_Display_Decimal_Number(s32 num)
{
    5830:	df 93       	push	r29
    5832:	cf 93       	push	r28
    5834:	cd b7       	in	r28, 0x3d	; 61
    5836:	de b7       	in	r29, 0x3e	; 62
    5838:	61 97       	sbiw	r28, 0x11	; 17
    583a:	0f b6       	in	r0, 0x3f	; 63
    583c:	f8 94       	cli
    583e:	de bf       	out	0x3e, r29	; 62
    5840:	0f be       	out	0x3f, r0	; 63
    5842:	cd bf       	out	0x3d, r28	; 61
    5844:	6e 87       	std	Y+14, r22	; 0x0e
    5846:	7f 87       	std	Y+15, r23	; 0x0f
    5848:	88 8b       	std	Y+16, r24	; 0x10
    584a:	99 8b       	std	Y+17, r25	; 0x11
	u8 i = 0, j, digit, str[10];
    584c:	1b 82       	std	Y+3, r1	; 0x03

	/* if number 0 */
	if (0 == num)
    584e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5850:	9f 85       	ldd	r25, Y+15	; 0x0f
    5852:	a8 89       	ldd	r26, Y+16	; 0x10
    5854:	b9 89       	ldd	r27, Y+17	; 0x11
    5856:	00 97       	sbiw	r24, 0x00	; 0
    5858:	a1 05       	cpc	r26, r1
    585a:	b1 05       	cpc	r27, r1
    585c:	19 f4       	brne	.+6      	; 0x5864 <CLCD_Display_Decimal_Number+0x34>
	{
		CLCD_SendData('0');
    585e:	80 e3       	ldi	r24, 0x30	; 48
    5860:	0e 94 ca 28 	call	0x5194	; 0x5194 <CLCD_SendData>
	}

	/* if the number is negative */
	if (num < 0)
    5864:	8e 85       	ldd	r24, Y+14	; 0x0e
    5866:	9f 85       	ldd	r25, Y+15	; 0x0f
    5868:	a8 89       	ldd	r26, Y+16	; 0x10
    586a:	b9 89       	ldd	r27, Y+17	; 0x11
    586c:	bb 23       	and	r27, r27
    586e:	0c f0       	brlt	.+2      	; 0x5872 <CLCD_Display_Decimal_Number+0x42>
    5870:	42 c0       	rjmp	.+132    	; 0x58f6 <CLCD_Display_Decimal_Number+0xc6>
	{
		CLCD_SendData('-');
    5872:	8d e2       	ldi	r24, 0x2D	; 45
    5874:	0e 94 ca 28 	call	0x5194	; 0x5194 <CLCD_SendData>

		/* convert to positive form */
		num = num * -1;
    5878:	8e 85       	ldd	r24, Y+14	; 0x0e
    587a:	9f 85       	ldd	r25, Y+15	; 0x0f
    587c:	a8 89       	ldd	r26, Y+16	; 0x10
    587e:	b9 89       	ldd	r27, Y+17	; 0x11
    5880:	b0 95       	com	r27
    5882:	a0 95       	com	r26
    5884:	90 95       	com	r25
    5886:	81 95       	neg	r24
    5888:	9f 4f       	sbci	r25, 0xFF	; 255
    588a:	af 4f       	sbci	r26, 0xFF	; 255
    588c:	bf 4f       	sbci	r27, 0xFF	; 255
    588e:	8e 87       	std	Y+14, r24	; 0x0e
    5890:	9f 87       	std	Y+15, r25	; 0x0f
    5892:	a8 8b       	std	Y+16, r26	; 0x10
    5894:	b9 8b       	std	Y+17, r27	; 0x11
    5896:	2f c0       	rjmp	.+94     	; 0x58f6 <CLCD_Display_Decimal_Number+0xc6>
	}

	/* loop on digits of the number */
	while (num > 0)
	{
		digit = (num % 10) + '0';
    5898:	8e 85       	ldd	r24, Y+14	; 0x0e
    589a:	9f 85       	ldd	r25, Y+15	; 0x0f
    589c:	a8 89       	ldd	r26, Y+16	; 0x10
    589e:	b9 89       	ldd	r27, Y+17	; 0x11
    58a0:	2a e0       	ldi	r18, 0x0A	; 10
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	40 e0       	ldi	r20, 0x00	; 0
    58a6:	50 e0       	ldi	r21, 0x00	; 0
    58a8:	bc 01       	movw	r22, r24
    58aa:	cd 01       	movw	r24, r26
    58ac:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__divmodsi4>
    58b0:	dc 01       	movw	r26, r24
    58b2:	cb 01       	movw	r24, r22
    58b4:	80 5d       	subi	r24, 0xD0	; 208
    58b6:	89 83       	std	Y+1, r24	; 0x01
		str[i] = digit;
    58b8:	8b 81       	ldd	r24, Y+3	; 0x03
    58ba:	28 2f       	mov	r18, r24
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	ce 01       	movw	r24, r28
    58c0:	04 96       	adiw	r24, 0x04	; 4
    58c2:	fc 01       	movw	r30, r24
    58c4:	e2 0f       	add	r30, r18
    58c6:	f3 1f       	adc	r31, r19
    58c8:	89 81       	ldd	r24, Y+1	; 0x01
    58ca:	80 83       	st	Z, r24
		num /= 10;
    58cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    58ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    58d0:	a8 89       	ldd	r26, Y+16	; 0x10
    58d2:	b9 89       	ldd	r27, Y+17	; 0x11
    58d4:	2a e0       	ldi	r18, 0x0A	; 10
    58d6:	30 e0       	ldi	r19, 0x00	; 0
    58d8:	40 e0       	ldi	r20, 0x00	; 0
    58da:	50 e0       	ldi	r21, 0x00	; 0
    58dc:	bc 01       	movw	r22, r24
    58de:	cd 01       	movw	r24, r26
    58e0:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__divmodsi4>
    58e4:	da 01       	movw	r26, r20
    58e6:	c9 01       	movw	r24, r18
    58e8:	8e 87       	std	Y+14, r24	; 0x0e
    58ea:	9f 87       	std	Y+15, r25	; 0x0f
    58ec:	a8 8b       	std	Y+16, r26	; 0x10
    58ee:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    58f0:	8b 81       	ldd	r24, Y+3	; 0x03
    58f2:	8f 5f       	subi	r24, 0xFF	; 255
    58f4:	8b 83       	std	Y+3, r24	; 0x03
		/* convert to positive form */
		num = num * -1;
	}

	/* loop on digits of the number */
	while (num > 0)
    58f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    58f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    58fa:	a8 89       	ldd	r26, Y+16	; 0x10
    58fc:	b9 89       	ldd	r27, Y+17	; 0x11
    58fe:	18 16       	cp	r1, r24
    5900:	19 06       	cpc	r1, r25
    5902:	1a 06       	cpc	r1, r26
    5904:	1b 06       	cpc	r1, r27
    5906:	44 f2       	brlt	.-112    	; 0x5898 <CLCD_Display_Decimal_Number+0x68>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    5908:	8b 81       	ldd	r24, Y+3	; 0x03
    590a:	8a 83       	std	Y+2, r24	; 0x02
    590c:	11 c0       	rjmp	.+34     	; 0x5930 <CLCD_Display_Decimal_Number+0x100>
	{
		CLCD_SendData(str[j - 1]);
    590e:	8a 81       	ldd	r24, Y+2	; 0x02
    5910:	88 2f       	mov	r24, r24
    5912:	90 e0       	ldi	r25, 0x00	; 0
    5914:	9c 01       	movw	r18, r24
    5916:	21 50       	subi	r18, 0x01	; 1
    5918:	30 40       	sbci	r19, 0x00	; 0
    591a:	ce 01       	movw	r24, r28
    591c:	04 96       	adiw	r24, 0x04	; 4
    591e:	fc 01       	movw	r30, r24
    5920:	e2 0f       	add	r30, r18
    5922:	f3 1f       	adc	r31, r19
    5924:	80 81       	ld	r24, Z
    5926:	0e 94 ca 28 	call	0x5194	; 0x5194 <CLCD_SendData>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    592a:	8a 81       	ldd	r24, Y+2	; 0x02
    592c:	81 50       	subi	r24, 0x01	; 1
    592e:	8a 83       	std	Y+2, r24	; 0x02
    5930:	8a 81       	ldd	r24, Y+2	; 0x02
    5932:	88 23       	and	r24, r24
    5934:	61 f7       	brne	.-40     	; 0x590e <CLCD_Display_Decimal_Number+0xde>
	{
		CLCD_SendData(str[j - 1]);
	}
}
    5936:	61 96       	adiw	r28, 0x11	; 17
    5938:	0f b6       	in	r0, 0x3f	; 63
    593a:	f8 94       	cli
    593c:	de bf       	out	0x3e, r29	; 62
    593e:	0f be       	out	0x3f, r0	; 63
    5940:	cd bf       	out	0x3d, r28	; 61
    5942:	cf 91       	pop	r28
    5944:	df 91       	pop	r29
    5946:	08 95       	ret

00005948 <CLCD_Display_RealNumber>:

void CLCD_Display_RealNumber(f32 num)
{
    5948:	df 93       	push	r29
    594a:	cf 93       	push	r28
    594c:	cd b7       	in	r28, 0x3d	; 61
    594e:	de b7       	in	r29, 0x3e	; 62
    5950:	29 97       	sbiw	r28, 0x09	; 9
    5952:	0f b6       	in	r0, 0x3f	; 63
    5954:	f8 94       	cli
    5956:	de bf       	out	0x3e, r29	; 62
    5958:	0f be       	out	0x3f, r0	; 63
    595a:	cd bf       	out	0x3d, r28	; 61
    595c:	6e 83       	std	Y+6, r22	; 0x06
    595e:	7f 83       	std	Y+7, r23	; 0x07
    5960:	88 87       	std	Y+8, r24	; 0x08
    5962:	99 87       	std	Y+9, r25	; 0x09
	//Left number to the decimal point
	s32 left = (s32)num;
    5964:	6e 81       	ldd	r22, Y+6	; 0x06
    5966:	7f 81       	ldd	r23, Y+7	; 0x07
    5968:	88 85       	ldd	r24, Y+8	; 0x08
    596a:	99 85       	ldd	r25, Y+9	; 0x09
    596c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5970:	dc 01       	movw	r26, r24
    5972:	cb 01       	movw	r24, r22
    5974:	8a 83       	std	Y+2, r24	; 0x02
    5976:	9b 83       	std	Y+3, r25	; 0x03
    5978:	ac 83       	std	Y+4, r26	; 0x04
    597a:	bd 83       	std	Y+5, r27	; 0x05
	//calculation to the Right number to the decimal point
	u8 right = (f32)(num - left) * 100;
    597c:	6a 81       	ldd	r22, Y+2	; 0x02
    597e:	7b 81       	ldd	r23, Y+3	; 0x03
    5980:	8c 81       	ldd	r24, Y+4	; 0x04
    5982:	9d 81       	ldd	r25, Y+5	; 0x05
    5984:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5988:	9b 01       	movw	r18, r22
    598a:	ac 01       	movw	r20, r24
    598c:	6e 81       	ldd	r22, Y+6	; 0x06
    598e:	7f 81       	ldd	r23, Y+7	; 0x07
    5990:	88 85       	ldd	r24, Y+8	; 0x08
    5992:	99 85       	ldd	r25, Y+9	; 0x09
    5994:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5998:	dc 01       	movw	r26, r24
    599a:	cb 01       	movw	r24, r22
    599c:	bc 01       	movw	r22, r24
    599e:	cd 01       	movw	r24, r26
    59a0:	20 e0       	ldi	r18, 0x00	; 0
    59a2:	30 e0       	ldi	r19, 0x00	; 0
    59a4:	48 ec       	ldi	r20, 0xC8	; 200
    59a6:	52 e4       	ldi	r21, 0x42	; 66
    59a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59ac:	dc 01       	movw	r26, r24
    59ae:	cb 01       	movw	r24, r22
    59b0:	bc 01       	movw	r22, r24
    59b2:	cd 01       	movw	r24, r26
    59b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59b8:	dc 01       	movw	r26, r24
    59ba:	cb 01       	movw	r24, r22
    59bc:	89 83       	std	Y+1, r24	; 0x01
	//Display Left number to the decimal point
	CLCD_Display_Decimal_Number(left);
    59be:	8a 81       	ldd	r24, Y+2	; 0x02
    59c0:	9b 81       	ldd	r25, Y+3	; 0x03
    59c2:	ac 81       	ldd	r26, Y+4	; 0x04
    59c4:	bd 81       	ldd	r27, Y+5	; 0x05
    59c6:	bc 01       	movw	r22, r24
    59c8:	cd 01       	movw	r24, r26
    59ca:	0e 94 18 2c 	call	0x5830	; 0x5830 <CLCD_Display_Decimal_Number>
	//Display the decimal point
	CLCD_SendData('.');
    59ce:	8e e2       	ldi	r24, 0x2E	; 46
    59d0:	0e 94 ca 28 	call	0x5194	; 0x5194 <CLCD_SendData>
	//Display the Right number to the decimal point
	CLCD_Display_Decimal_Number(right);
    59d4:	89 81       	ldd	r24, Y+1	; 0x01
    59d6:	88 2f       	mov	r24, r24
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	a0 e0       	ldi	r26, 0x00	; 0
    59dc:	b0 e0       	ldi	r27, 0x00	; 0
    59de:	bc 01       	movw	r22, r24
    59e0:	cd 01       	movw	r24, r26
    59e2:	0e 94 18 2c 	call	0x5830	; 0x5830 <CLCD_Display_Decimal_Number>
}
    59e6:	29 96       	adiw	r28, 0x09	; 9
    59e8:	0f b6       	in	r0, 0x3f	; 63
    59ea:	f8 94       	cli
    59ec:	de bf       	out	0x3e, r29	; 62
    59ee:	0f be       	out	0x3f, r0	; 63
    59f0:	cd bf       	out	0x3d, r28	; 61
    59f2:	cf 91       	pop	r28
    59f4:	df 91       	pop	r29
    59f6:	08 95       	ret

000059f8 <KeyPad_Pressed_Key>:
 * Description          : function to define which switch is pressed in the keypad
 * 
 * @return u8           : return the value of the pressed switch 
 */
u8 KeyPad_Pressed_Key(void)
{
    59f8:	df 93       	push	r29
    59fa:	cf 93       	push	r28
    59fc:	00 d0       	rcall	.+0      	; 0x59fe <KeyPad_Pressed_Key+0x6>
    59fe:	00 d0       	rcall	.+0      	; 0x5a00 <KeyPad_Pressed_Key+0x8>
    5a00:	0f 92       	push	r0
    5a02:	cd b7       	in	r28, 0x3d	; 61
    5a04:	de b7       	in	r29, 0x3e	; 62
	u8 ColumnIndex,RowIndex,PinState,PressedKey;

	PressedKey=Key_Not_Pressed;
    5a06:	8f ef       	ldi	r24, 0xFF	; 255
    5a08:	89 83       	std	Y+1, r24	; 0x01

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    5a0a:	1b 82       	std	Y+3, r1	; 0x03
    5a0c:	7a c0       	rjmp	.+244    	; 0x5b02 <KeyPad_Pressed_Key+0x10a>
	{
		//Set column of Keypad Output
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
    5a0e:	81 e0       	ldi	r24, 0x01	; 1
    5a10:	6f ef       	ldi	r22, 0xFF	; 255
    5a12:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);
    5a16:	8b 81       	ldd	r24, Y+3	; 0x03
    5a18:	88 2f       	mov	r24, r24
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	fc 01       	movw	r30, r24
    5a1e:	e8 59       	subi	r30, 0x98	; 152
    5a20:	fe 4f       	sbci	r31, 0xFE	; 254
    5a22:	90 81       	ld	r25, Z
    5a24:	81 e0       	ldi	r24, 0x01	; 1
    5a26:	69 2f       	mov	r22, r25
    5a28:	40 e0       	ldi	r20, 0x00	; 0
    5a2a:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    5a2e:	1a 82       	std	Y+2, r1	; 0x02
    5a30:	55 c0       	rjmp	.+170    	; 0x5adc <KeyPad_Pressed_Key+0xe4>
		{
			//Set Row input and activate pull-up
			DIO_SetPinDirection(KeyPad_Port,KeyPad_Row_Arr[RowIndex],DIO_INPUT);
    5a32:	8a 81       	ldd	r24, Y+2	; 0x02
    5a34:	88 2f       	mov	r24, r24
    5a36:	90 e0       	ldi	r25, 0x00	; 0
    5a38:	fc 01       	movw	r30, r24
    5a3a:	e4 59       	subi	r30, 0x94	; 148
    5a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a3e:	90 81       	ld	r25, Z
    5a40:	81 e0       	ldi	r24, 0x01	; 1
    5a42:	69 2f       	mov	r22, r25
    5a44:	40 e0       	ldi	r20, 0x00	; 0
    5a46:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_SetPinDirection>
			DIO_EnablePullup(KeyPad_Port,KeyPad_Row_Arr[RowIndex],ENABLE_PullUp);
    5a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a4c:	88 2f       	mov	r24, r24
    5a4e:	90 e0       	ldi	r25, 0x00	; 0
    5a50:	fc 01       	movw	r30, r24
    5a52:	e4 59       	subi	r30, 0x94	; 148
    5a54:	fe 4f       	sbci	r31, 0xFE	; 254
    5a56:	90 81       	ld	r25, Z
    5a58:	81 e0       	ldi	r24, 0x01	; 1
    5a5a:	69 2f       	mov	r22, r25
    5a5c:	40 e0       	ldi	r20, 0x00	; 0
    5a5e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <DIO_EnablePullup>

			//Read the current row
			DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    5a62:	8a 81       	ldd	r24, Y+2	; 0x02
    5a64:	88 2f       	mov	r24, r24
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	fc 01       	movw	r30, r24
    5a6a:	e4 59       	subi	r30, 0x94	; 148
    5a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a6e:	90 81       	ld	r25, Z
    5a70:	9e 01       	movw	r18, r28
    5a72:	2c 5f       	subi	r18, 0xFC	; 252
    5a74:	3f 4f       	sbci	r19, 0xFF	; 255
    5a76:	81 e0       	ldi	r24, 0x01	; 1
    5a78:	69 2f       	mov	r22, r25
    5a7a:	a9 01       	movw	r20, r18
    5a7c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <DIO_GetPinValue>

			//Check if switch is pressed
			if(PinState==DIO_LOW)
    5a80:	8c 81       	ldd	r24, Y+4	; 0x04
    5a82:	88 23       	and	r24, r24
    5a84:	41 f5       	brne	.+80     	; 0x5ad6 <KeyPad_Pressed_Key+0xde>
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];
    5a86:	8a 81       	ldd	r24, Y+2	; 0x02
    5a88:	48 2f       	mov	r20, r24
    5a8a:	50 e0       	ldi	r21, 0x00	; 0
    5a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a8e:	28 2f       	mov	r18, r24
    5a90:	30 e0       	ldi	r19, 0x00	; 0
    5a92:	ca 01       	movw	r24, r20
    5a94:	88 0f       	add	r24, r24
    5a96:	99 1f       	adc	r25, r25
    5a98:	88 0f       	add	r24, r24
    5a9a:	99 1f       	adc	r25, r25
    5a9c:	82 0f       	add	r24, r18
    5a9e:	93 1f       	adc	r25, r19
    5aa0:	fc 01       	movw	r30, r24
    5aa2:	e0 59       	subi	r30, 0x90	; 144
    5aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    5aa6:	80 81       	ld	r24, Z
    5aa8:	89 83       	std	Y+1, r24	; 0x01
    5aaa:	0f c0       	rjmp	.+30     	; 0x5aca <KeyPad_Pressed_Key+0xd2>

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    5aac:	8a 81       	ldd	r24, Y+2	; 0x02
    5aae:	88 2f       	mov	r24, r24
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	fc 01       	movw	r30, r24
    5ab4:	e4 59       	subi	r30, 0x94	; 148
    5ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ab8:	90 81       	ld	r25, Z
    5aba:	9e 01       	movw	r18, r28
    5abc:	2c 5f       	subi	r18, 0xFC	; 252
    5abe:	3f 4f       	sbci	r19, 0xFF	; 255
    5ac0:	81 e0       	ldi	r24, 0x01	; 1
    5ac2:	69 2f       	mov	r22, r25
    5ac4:	a9 01       	movw	r20, r18
    5ac6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <DIO_GetPinValue>
			if(PinState==DIO_LOW)
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
    5aca:	8c 81       	ldd	r24, Y+4	; 0x04
    5acc:	88 23       	and	r24, r24
    5ace:	71 f3       	breq	.-36     	; 0x5aac <KeyPad_Pressed_Key+0xb4>
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
				}
				return PressedKey;
    5ad0:	89 81       	ldd	r24, Y+1	; 0x01
    5ad2:	8d 83       	std	Y+5, r24	; 0x05
    5ad4:	1c c0       	rjmp	.+56     	; 0x5b0e <KeyPad_Pressed_Key+0x116>
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    5ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ad8:	8f 5f       	subi	r24, 0xFF	; 255
    5ada:	8a 83       	std	Y+2, r24	; 0x02
    5adc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ade:	84 30       	cpi	r24, 0x04	; 4
    5ae0:	08 f4       	brcc	.+2      	; 0x5ae4 <KeyPad_Pressed_Key+0xec>
    5ae2:	a7 cf       	rjmp	.-178    	; 0x5a32 <KeyPad_Pressed_Key+0x3a>
				}
				return PressedKey;
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
    5ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ae6:	88 2f       	mov	r24, r24
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	fc 01       	movw	r30, r24
    5aec:	e8 59       	subi	r30, 0x98	; 152
    5aee:	fe 4f       	sbci	r31, 0xFE	; 254
    5af0:	90 81       	ld	r25, Z
    5af2:	81 e0       	ldi	r24, 0x01	; 1
    5af4:	69 2f       	mov	r22, r25
    5af6:	41 e0       	ldi	r20, 0x01	; 1
    5af8:	0e 94 09 14 	call	0x2812	; 0x2812 <DIO_SetPinValue>

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    5afc:	8b 81       	ldd	r24, Y+3	; 0x03
    5afe:	8f 5f       	subi	r24, 0xFF	; 255
    5b00:	8b 83       	std	Y+3, r24	; 0x03
    5b02:	8b 81       	ldd	r24, Y+3	; 0x03
    5b04:	84 30       	cpi	r24, 0x04	; 4
    5b06:	08 f4       	brcc	.+2      	; 0x5b0a <KeyPad_Pressed_Key+0x112>
    5b08:	82 cf       	rjmp	.-252    	; 0x5a0e <KeyPad_Pressed_Key+0x16>
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
	}
	return PressedKey;
    5b0a:	89 81       	ldd	r24, Y+1	; 0x01
    5b0c:	8d 83       	std	Y+5, r24	; 0x05
    5b0e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5b10:	0f 90       	pop	r0
    5b12:	0f 90       	pop	r0
    5b14:	0f 90       	pop	r0
    5b16:	0f 90       	pop	r0
    5b18:	0f 90       	pop	r0
    5b1a:	cf 91       	pop	r28
    5b1c:	df 91       	pop	r29
    5b1e:	08 95       	ret

00005b20 <main>:
#include "MCAL/External_Interrupt/External_Interrupt.h"
#include "avr/delay.h"

u8 Svar;
void main (void)
{
    5b20:	df 93       	push	r29
    5b22:	cf 93       	push	r28
    5b24:	cd b7       	in	r28, 0x3d	; 61
    5b26:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    5b28:	80 e0       	ldi	r24, 0x00	; 0
    5b2a:	6f ef       	ldi	r22, 0xFF	; 255
    5b2c:	0e 94 c0 13 	call	0x2780	; 0x2780 <DIO_SetPortDirection>
	 DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    5b30:	80 e0       	ldi	r24, 0x00	; 0
    5b32:	60 e0       	ldi	r22, 0x00	; 0
    5b34:	0e 94 33 15 	call	0x2a66	; 0x2a66 <DIO_SetPortValue>

		//I2C_Interrupt_Enable(I2C_Enable);
		//Enable_Global_Interrupt(Enable_GIE_Interrupt);
	 I2C_init_Master(72,0x15); // the TWBR that made the required speed , and the address of the master
    5b38:	88 e4       	ldi	r24, 0x48	; 72
    5b3a:	65 e1       	ldi	r22, 0x15	; 21
    5b3c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <I2C_init_Master>

	 I2C_Start_Condtion_Polling();
    5b40:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <I2C_Start_Condtion_Polling>
	I2C_Slave_WriteAddress_Mode_Polling(0x20);
    5b44:	80 e2       	ldi	r24, 0x20	; 32
    5b46:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <I2C_Slave_WriteAddress_Mode_Polling>
	I2C_MasterWriteDataByte(0xF0);
    5b4a:	80 ef       	ldi	r24, 0xF0	; 240
    5b4c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <I2C_MasterWriteDataByte>
    5b50:	ff cf       	rjmp	.-2      	; 0x5b50 <main+0x30>

00005b52 <__divmodsi4>:
    5b52:	97 fb       	bst	r25, 7
    5b54:	09 2e       	mov	r0, r25
    5b56:	05 26       	eor	r0, r21
    5b58:	0e d0       	rcall	.+28     	; 0x5b76 <__divmodsi4_neg1>
    5b5a:	57 fd       	sbrc	r21, 7
    5b5c:	04 d0       	rcall	.+8      	; 0x5b66 <__divmodsi4_neg2>
    5b5e:	14 d0       	rcall	.+40     	; 0x5b88 <__udivmodsi4>
    5b60:	0a d0       	rcall	.+20     	; 0x5b76 <__divmodsi4_neg1>
    5b62:	00 1c       	adc	r0, r0
    5b64:	38 f4       	brcc	.+14     	; 0x5b74 <__divmodsi4_exit>

00005b66 <__divmodsi4_neg2>:
    5b66:	50 95       	com	r21
    5b68:	40 95       	com	r20
    5b6a:	30 95       	com	r19
    5b6c:	21 95       	neg	r18
    5b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b70:	4f 4f       	sbci	r20, 0xFF	; 255
    5b72:	5f 4f       	sbci	r21, 0xFF	; 255

00005b74 <__divmodsi4_exit>:
    5b74:	08 95       	ret

00005b76 <__divmodsi4_neg1>:
    5b76:	f6 f7       	brtc	.-4      	; 0x5b74 <__divmodsi4_exit>
    5b78:	90 95       	com	r25
    5b7a:	80 95       	com	r24
    5b7c:	70 95       	com	r23
    5b7e:	61 95       	neg	r22
    5b80:	7f 4f       	sbci	r23, 0xFF	; 255
    5b82:	8f 4f       	sbci	r24, 0xFF	; 255
    5b84:	9f 4f       	sbci	r25, 0xFF	; 255
    5b86:	08 95       	ret

00005b88 <__udivmodsi4>:
    5b88:	a1 e2       	ldi	r26, 0x21	; 33
    5b8a:	1a 2e       	mov	r1, r26
    5b8c:	aa 1b       	sub	r26, r26
    5b8e:	bb 1b       	sub	r27, r27
    5b90:	fd 01       	movw	r30, r26
    5b92:	0d c0       	rjmp	.+26     	; 0x5bae <__udivmodsi4_ep>

00005b94 <__udivmodsi4_loop>:
    5b94:	aa 1f       	adc	r26, r26
    5b96:	bb 1f       	adc	r27, r27
    5b98:	ee 1f       	adc	r30, r30
    5b9a:	ff 1f       	adc	r31, r31
    5b9c:	a2 17       	cp	r26, r18
    5b9e:	b3 07       	cpc	r27, r19
    5ba0:	e4 07       	cpc	r30, r20
    5ba2:	f5 07       	cpc	r31, r21
    5ba4:	20 f0       	brcs	.+8      	; 0x5bae <__udivmodsi4_ep>
    5ba6:	a2 1b       	sub	r26, r18
    5ba8:	b3 0b       	sbc	r27, r19
    5baa:	e4 0b       	sbc	r30, r20
    5bac:	f5 0b       	sbc	r31, r21

00005bae <__udivmodsi4_ep>:
    5bae:	66 1f       	adc	r22, r22
    5bb0:	77 1f       	adc	r23, r23
    5bb2:	88 1f       	adc	r24, r24
    5bb4:	99 1f       	adc	r25, r25
    5bb6:	1a 94       	dec	r1
    5bb8:	69 f7       	brne	.-38     	; 0x5b94 <__udivmodsi4_loop>
    5bba:	60 95       	com	r22
    5bbc:	70 95       	com	r23
    5bbe:	80 95       	com	r24
    5bc0:	90 95       	com	r25
    5bc2:	9b 01       	movw	r18, r22
    5bc4:	ac 01       	movw	r20, r24
    5bc6:	bd 01       	movw	r22, r26
    5bc8:	cf 01       	movw	r24, r30
    5bca:	08 95       	ret

00005bcc <__prologue_saves__>:
    5bcc:	2f 92       	push	r2
    5bce:	3f 92       	push	r3
    5bd0:	4f 92       	push	r4
    5bd2:	5f 92       	push	r5
    5bd4:	6f 92       	push	r6
    5bd6:	7f 92       	push	r7
    5bd8:	8f 92       	push	r8
    5bda:	9f 92       	push	r9
    5bdc:	af 92       	push	r10
    5bde:	bf 92       	push	r11
    5be0:	cf 92       	push	r12
    5be2:	df 92       	push	r13
    5be4:	ef 92       	push	r14
    5be6:	ff 92       	push	r15
    5be8:	0f 93       	push	r16
    5bea:	1f 93       	push	r17
    5bec:	cf 93       	push	r28
    5bee:	df 93       	push	r29
    5bf0:	cd b7       	in	r28, 0x3d	; 61
    5bf2:	de b7       	in	r29, 0x3e	; 62
    5bf4:	ca 1b       	sub	r28, r26
    5bf6:	db 0b       	sbc	r29, r27
    5bf8:	0f b6       	in	r0, 0x3f	; 63
    5bfa:	f8 94       	cli
    5bfc:	de bf       	out	0x3e, r29	; 62
    5bfe:	0f be       	out	0x3f, r0	; 63
    5c00:	cd bf       	out	0x3d, r28	; 61
    5c02:	09 94       	ijmp

00005c04 <__epilogue_restores__>:
    5c04:	2a 88       	ldd	r2, Y+18	; 0x12
    5c06:	39 88       	ldd	r3, Y+17	; 0x11
    5c08:	48 88       	ldd	r4, Y+16	; 0x10
    5c0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c10:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c12:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c14:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c16:	b9 84       	ldd	r11, Y+9	; 0x09
    5c18:	c8 84       	ldd	r12, Y+8	; 0x08
    5c1a:	df 80       	ldd	r13, Y+7	; 0x07
    5c1c:	ee 80       	ldd	r14, Y+6	; 0x06
    5c1e:	fd 80       	ldd	r15, Y+5	; 0x05
    5c20:	0c 81       	ldd	r16, Y+4	; 0x04
    5c22:	1b 81       	ldd	r17, Y+3	; 0x03
    5c24:	aa 81       	ldd	r26, Y+2	; 0x02
    5c26:	b9 81       	ldd	r27, Y+1	; 0x01
    5c28:	ce 0f       	add	r28, r30
    5c2a:	d1 1d       	adc	r29, r1
    5c2c:	0f b6       	in	r0, 0x3f	; 63
    5c2e:	f8 94       	cli
    5c30:	de bf       	out	0x3e, r29	; 62
    5c32:	0f be       	out	0x3f, r0	; 63
    5c34:	cd bf       	out	0x3d, r28	; 61
    5c36:	ed 01       	movw	r28, r26
    5c38:	08 95       	ret

00005c3a <_exit>:
    5c3a:	f8 94       	cli

00005c3c <__stop_program>:
    5c3c:	ff cf       	rjmp	.-2      	; 0x5c3c <__stop_program>
