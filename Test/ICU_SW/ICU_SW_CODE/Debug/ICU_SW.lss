
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00004488  0000451c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800196  00800196  00004652  2**0
                  ALLOC
  3 .stab         000049b0  00000000  00000000  00004654  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002492  00000000  00000000  00009004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000b496  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000b656  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000b86a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000de7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000f34a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00010658  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00010b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_1>
       8:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__vector_2>
       c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_3>
      10:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_4>
      14:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_10>
      2c:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 21 	call	0x42b0	; 0x42b0 <main>
      8a:	0c 94 42 22 	jmp	0x4484	; 0x4484 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 22 	jmp	0x444e	; 0x444e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 22 	jmp	0x442e	; 0x442e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 22 	jmp	0x442e	; 0x442e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 22 	jmp	0x444e	; 0x444e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e7       	ldi	r22, 0x76	; 118
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2f 22 	jmp	0x445e	; 0x445e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 17 22 	jmp	0x442e	; 0x442e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 17 22 	jmp	0x442e	; 0x442e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 17 22 	jmp	0x442e	; 0x442e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 1b 22 	jmp	0x4436	; 0x4436 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 37 22 	jmp	0x446e	; 0x446e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 2f 22 	jmp	0x445e	; 0x445e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e2 58       	subi	r30, 0x82	; 130
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Timer0_init>:
static void (*Timer0_CTC_CallBack_Func)(void);
static void (*Timer2_OVF_CallBack_Func)(void);
static void (*Timer2_CTC_CallBack_Func)(void);

void Timer0_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
						SET_BIT(TCCR0,COM00);
						SET_BIT(TCCR0,COM01);
		#endif

#elif  defined Timer0_Fast_PWM_Mode
		SET_BIT(TCCR0,WGM00);
     ef2:	a3 e5       	ldi	r26, 0x53	; 83
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e3 e5       	ldi	r30, 0x53	; 83
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
     f00:	a3 e5       	ldi	r26, 0x53	; 83
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e3 e5       	ldi	r30, 0x53	; 83
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,COM01);
		#elif defined ClearCompareMatch_SetTop_OCO	//Non_Inverted Mode
				CLEAR_BIT(TCCR0,COM00);
				SET_BIT(TCCR0,COM01);
		#elif defined SetCompareMatch_ClearTop_OCO 	//Inverted Mode
				SET_BIT(TCCR0,COM00);
     f0e:	a3 e5       	ldi	r26, 0x53	; 83
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e3 e5       	ldi	r30, 0x53	; 83
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 61       	ori	r24, 0x10	; 16
     f1a:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
     f1c:	a3 e5       	ldi	r26, 0x53	; 83
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e3 e5       	ldi	r30, 0x53	; 83
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 62       	ori	r24, 0x20	; 32
     f28:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_No_Prescaler
				SET_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
		#elif defined Timer0_CLK_8_Prescaler
				CLEAR_BIT(TCCR0,CS00);
     f2a:	a3 e5       	ldi	r26, 0x53	; 83
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e3 e5       	ldi	r30, 0x53	; 83
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
     f38:	a3 e5       	ldi	r26, 0x53	; 83
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e3 e5       	ldi	r30, 0x53	; 83
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
     f46:	a3 e5       	ldi	r26, 0x53	; 83
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e3 e5       	ldi	r30, 0x53	; 83
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8b 7f       	andi	r24, 0xFB	; 251
     f52:	8c 93       	st	X, r24
		#elif defined Timer0_CLK_External_RisingEdge_CounterMode //On Pin T0
				SET_BIT(TCCR0,CS00);
				SET_BIT(TCCR0,CS01);
				SET_BIT(TCCR0,CS02);
		#endif
}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <Timer0_SetValue>:
void Timer0_SetValue(u8 Value)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer0_CTC_Timer_Mode
	OCR0 = Value; //Set Compare Output Value
#elif defined Timer0_PhaseCorrect_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer0_Fast_PWM_Mode
	OCR0 = Value; //Set Compare Output Value to set the value of duty cycle
     f66:	ec e5       	ldi	r30, 0x5C	; 92
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	80 83       	st	Z, r24
#endif
}
     f6e:	0f 90       	pop	r0
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <Timer0_CallBack>:

void Timer0_CallBack(void (*FUNC_PTR)(void))
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <Timer0_CallBack+0x6>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer0_Normal_Timer_Mode
		Timer0_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer0_CTC_Timer_Mode
		Timer0_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <__vector_11>:
ISR(TIMER0_OVF_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	Timer0_OVF_CallBack_Func();
     fb8:	e0 91 96 01 	lds	r30, 0x0196
     fbc:	f0 91 97 01 	lds	r31, 0x0197
     fc0:	09 95       	icall
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_CallBack_Func();
    1012:	e0 91 98 01 	lds	r30, 0x0198
    1016:	f0 91 99 01 	lds	r31, 0x0199
    101a:	09 95       	icall
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <Timer1_init>:


void Timer1_init(void)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
	#elif defined Timer1_CLK_No_Prescaler
			SET_BIT(TCCR1B,CS10);
			CLEAR_BIT(TCCR1B,CS11);
			CLEAR_BIT(TCCR1B,CS12);
	#elif defined Timer1_CLK_8_Prescaler
			CLEAR_BIT(TCCR1B,CS10);
    104a:	ae e4       	ldi	r26, 0x4E	; 78
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ee e4       	ldi	r30, 0x4E	; 78
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8e 7f       	andi	r24, 0xFE	; 254
    1056:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    1058:	ae e4       	ldi	r26, 0x4E	; 78
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ee e4       	ldi	r30, 0x4E	; 78
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	82 60       	ori	r24, 0x02	; 2
    1064:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS12);
    1066:	ae e4       	ldi	r26, 0x4E	; 78
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ee e4       	ldi	r30, 0x4E	; 78
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8b 7f       	andi	r24, 0xFB	; 251
    1072:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
	#endif

/*********************************WaveMode Generation Mode Selection************************************/
#if defined Timer1_Normal_Timer_Mode
				CLEAR_BIT(TCCR1A,WGM10);
    1074:	af e4       	ldi	r26, 0x4F	; 79
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ef e4       	ldi	r30, 0x4F	; 79
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	8e 7f       	andi	r24, 0xFE	; 254
    1080:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    1082:	af e4       	ldi	r26, 0x4F	; 79
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ef e4       	ldi	r30, 0x4F	; 79
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8d 7f       	andi	r24, 0xFD	; 253
    108e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM12);
    1090:	ae e4       	ldi	r26, 0x4E	; 78
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ee e4       	ldi	r30, 0x4E	; 78
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	87 7f       	andi	r24, 0xF7	; 247
    109c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    109e:	ae e4       	ldi	r26, 0x4E	; 78
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ee e4       	ldi	r30, 0x4E	; 78
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7e       	andi	r24, 0xEF	; 239
    10aa:	8c 93       	st	X, r24
				SET_BIT(TIMSK,TOIE1);
    10ac:	a9 e5       	ldi	r26, 0x59	; 89
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e9 e5       	ldi	r30, 0x59	; 89
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	84 60       	ori	r24, 0x04	; 4
    10b8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
			CLEAR_BIT(TCCR1A,WGM11);
			SET_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
#endif
}
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <Timer1_SetValueChannelA>:

void Timer1_SetValueChannelA(u16 Value)	//to Set value of timer ChannelA
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <Timer1_SetValueChannelA+0x6>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01

	#if defined Timer1_Normal_Timer_Mode
		TCNT1 = Value; //Set Overflow Value
    10ce:	ec e4       	ldi	r30, 0x4C	; 76
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
		OCR1A = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelA
		OCR1A=Value;
	#endif
#endif
}
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <Timer1_SetValueChannelB>:
void Timer1_SetValueChannelB(u16 Value)	//to Set value of timer ChannelB
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <Timer1_SetValueChannelB+0x6>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	89 83       	std	Y+1, r24	; 0x01

	#if defined Timer1_Normal_Timer_Mode
	TCNT1 = Value; //Set Overflow Value
    10f2:	ec e4       	ldi	r30, 0x4C	; 76
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
	OCR1B = Value;
	#elif defined Timer1_VariableTopValue_ICR1_Fast_PWM_Mode	//Set Comp value for ChannelB
		OCR1B=Value;
	#endif
#endif
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <Timer1_ReadValueChannelA>:

void Timer1_ReadValueChannelA(u16 *value)	//to Read value of timer
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <Timer1_ReadValueChannelA+0x6>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
#if defined TIMER1_ChannelA
#if defined Timer1_Normal_Timer_Mode
	*value=TCNT1; //Set Overflow Value
    1116:	ec e4       	ldi	r30, 0x4C	; 76
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	e9 81       	ldd	r30, Y+1	; 0x01
    1120:	fa 81       	ldd	r31, Y+2	; 0x02
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	80 83       	st	Z, r24
			*value=OCR1A;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
			*value=OCR1A;
#endif
#endif
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <Timer1_ReadValueChannelB>:

void Timer1_ReadValueChannelB(u16 *value)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <Timer1_ReadValueChannelB+0x6>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
	*value=OCR1B;
#elif defined Timer1_FixedTopValue_PhaseCorrect_PWM_Mode
	*value=OCR1B;
#endif
#endif
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <Timer1_SetICR1_TopValue>:

void Timer1_SetICR1_TopValue(u16 Top_Value) //ICR1
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <Timer1_SetICR1_TopValue+0x6>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Top_Value;
    1156:	e6 e4       	ldi	r30, 0x46	; 70
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	80 83       	st	Z, r24
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <Timer2_init>:
void Timer2_init(void)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
		#elif defined Timer2_CLK_External_RisingEdge_CounterMode //On Pin T2
				SET_BIT(TCCR2,CS20);
				SET_BIT(TCCR2,CS21);
				SET_BIT(TCCR2,CS22);
		#endif
}
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <Timer2_SetValue>:
void Timer2_SetValue(u8 Value)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	0f 92       	push	r0
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	89 83       	std	Y+1, r24	; 0x01
#elif defined Timer2_PhaseCorrect_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#elif defined Timer2_Fast_PWM_Mode
	OCR2 = Value; //Set Compare Output Value to set the value of duty cycle
#endif
}
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <Timer2_CallBack>:

void Timer2_CallBack(void (*FUNC_PTR)(void))
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <Timer2_CallBack+0x6>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01
	#if defined Timer2_Normal_Timer_Mode
		Timer2_OVF_CallBack_Func = FUNC_PTR;
	#elif defined Timer2_CTC_Timer_Mode
		Timer2_CTC_CallBack_Func = FUNC_PTR;
	#endif
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	Timer2_OVF_CallBack_Func();
    11d0:	e0 91 9a 01 	lds	r30, 0x019A
    11d4:	f0 91 9b 01 	lds	r31, 0x019B
    11d8:	09 95       	icall
}
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	ff 91       	pop	r31
    11e0:	ef 91       	pop	r30
    11e2:	bf 91       	pop	r27
    11e4:	af 91       	pop	r26
    11e6:	9f 91       	pop	r25
    11e8:	8f 91       	pop	r24
    11ea:	7f 91       	pop	r23
    11ec:	6f 91       	pop	r22
    11ee:	5f 91       	pop	r21
    11f0:	4f 91       	pop	r20
    11f2:	3f 91       	pop	r19
    11f4:	2f 91       	pop	r18
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	2f 93       	push	r18
    120c:	3f 93       	push	r19
    120e:	4f 93       	push	r20
    1210:	5f 93       	push	r21
    1212:	6f 93       	push	r22
    1214:	7f 93       	push	r23
    1216:	8f 93       	push	r24
    1218:	9f 93       	push	r25
    121a:	af 93       	push	r26
    121c:	bf 93       	push	r27
    121e:	ef 93       	push	r30
    1220:	ff 93       	push	r31
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	Timer2_CTC_CallBack_Func();
    122a:	e0 91 9c 01 	lds	r30, 0x019C
    122e:	f0 91 9d 01 	lds	r31, 0x019D
    1232:	09 95       	icall
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	ff 91       	pop	r31
    123a:	ef 91       	pop	r30
    123c:	bf 91       	pop	r27
    123e:	af 91       	pop	r26
    1240:	9f 91       	pop	r25
    1242:	8f 91       	pop	r24
    1244:	7f 91       	pop	r23
    1246:	6f 91       	pop	r22
    1248:	5f 91       	pop	r21
    124a:	4f 91       	pop	r20
    124c:	3f 91       	pop	r19
    124e:	2f 91       	pop	r18
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	0f 90       	pop	r0
    1256:	1f 90       	pop	r1
    1258:	18 95       	reti

0000125a <__vector_1>:
static void (*External_Function0)(void);
static void (*External_Function1)(void);
static void (*External_Function2)(void);
/****************************************ISR for INT0*************************************************/
ISR(INT0_Vect)
{
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	(*External_Function0)();
    1284:	e0 91 9e 01 	lds	r30, 0x019E
    1288:	f0 91 9f 01 	lds	r31, 0x019F
    128c:	09 95       	icall
}
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	ff 91       	pop	r31
    1294:	ef 91       	pop	r30
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <__vector_2>:
/****************************************ISR for INT1*************************************************/
ISR(INT1_Vect)
{
    12b4:	1f 92       	push	r1
    12b6:	0f 92       	push	r0
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	0f 92       	push	r0
    12bc:	11 24       	eor	r1, r1
    12be:	2f 93       	push	r18
    12c0:	3f 93       	push	r19
    12c2:	4f 93       	push	r20
    12c4:	5f 93       	push	r21
    12c6:	6f 93       	push	r22
    12c8:	7f 93       	push	r23
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
	(*External_Function1)();
    12de:	e0 91 a0 01 	lds	r30, 0x01A0
    12e2:	f0 91 a1 01 	lds	r31, 0x01A1
    12e6:	09 95       	icall
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	ff 91       	pop	r31
    12ee:	ef 91       	pop	r30
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	7f 91       	pop	r23
    12fa:	6f 91       	pop	r22
    12fc:	5f 91       	pop	r21
    12fe:	4f 91       	pop	r20
    1300:	3f 91       	pop	r19
    1302:	2f 91       	pop	r18
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_3>:
/****************************************ISR for INT2*************************************************/
ISR(INT2_Vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
	(*External_Function2)();
    1338:	e0 91 a2 01 	lds	r30, 0x01A2
    133c:	f0 91 a3 01 	lds	r31, 0x01A3
    1340:	09 95       	icall
}
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	ff 91       	pop	r31
    1348:	ef 91       	pop	r30
    134a:	bf 91       	pop	r27
    134c:	af 91       	pop	r26
    134e:	9f 91       	pop	r25
    1350:	8f 91       	pop	r24
    1352:	7f 91       	pop	r23
    1354:	6f 91       	pop	r22
    1356:	5f 91       	pop	r21
    1358:	4f 91       	pop	r20
    135a:	3f 91       	pop	r19
    135c:	2f 91       	pop	r18
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <Enable_Global_Interrupt>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return Enable_Global_Interrupt(Global_Interrupt_State_t state)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <Enable_Global_Interrupt+0x6>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <Enable_Global_Interrupt+0x8>
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3c 83       	std	Y+4, r19	; 0x04
    137e:	2b 83       	std	Y+3, r18	; 0x03
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	31 f0       	breq	.+12     	; 0x1394 <Enable_Global_Interrupt+0x2c>
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	21 30       	cpi	r18, 0x01	; 1
    138e:	31 05       	cpc	r19, r1
    1390:	49 f0       	breq	.+18     	; 0x13a4 <Enable_Global_Interrupt+0x3c>
    1392:	10 c0       	rjmp	.+32     	; 0x13b4 <Enable_Global_Interrupt+0x4c>
		{
			case Enable_GIE_Interrupt:
				SET_BIT(SREG,GIE);
    1394:	af e5       	ldi	r26, 0x5F	; 95
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ef e5       	ldi	r30, 0x5F	; 95
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 68       	ori	r24, 0x80	; 128
    13a0:	8c 93       	st	X, r24
    13a2:	0a c0       	rjmp	.+20     	; 0x13b8 <Enable_Global_Interrupt+0x50>
				break;
			case Disable_GIE_Interrupt:
				CLEAR_BIT(SREG,GIE);
    13a4:	af e5       	ldi	r26, 0x5F	; 95
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ef e5       	ldi	r30, 0x5F	; 95
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 77       	andi	r24, 0x7F	; 127
    13b0:	8c 93       	st	X, r24
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <Enable_Global_Interrupt+0x50>
				break;
			default:
				return E_OK;
    13b4:	1a 82       	std	Y+2, r1	; 0x02
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <Enable_Global_Interrupt+0x54>
		}
	return E_NOK;
    13b8:	31 e0       	ldi	r19, 0x01	; 1
    13ba:	3a 83       	std	Y+2, r19	; 0x02
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <Enable_External_INT0>:
/*****************************************************************************************************/
STD_Return Enable_External_INT0(Peripheral_Interrupt_State_t State)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <Enable_External_INT0+0x6>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <Enable_External_INT0+0x8>
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3c 83       	std	Y+4, r19	; 0x04
    13e2:	2b 83       	std	Y+3, r18	; 0x03
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <Enable_External_INT0+0x2c>
    13ec:	2b 81       	ldd	r18, Y+3	; 0x03
    13ee:	3c 81       	ldd	r19, Y+4	; 0x04
    13f0:	21 30       	cpi	r18, 0x01	; 1
    13f2:	31 05       	cpc	r19, r1
    13f4:	49 f0       	breq	.+18     	; 0x1408 <Enable_External_INT0+0x3c>
    13f6:	10 c0       	rjmp	.+32     	; 0x1418 <Enable_External_INT0+0x4c>
	{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT0);
    13f8:	ab e5       	ldi	r26, 0x5B	; 91
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e5       	ldi	r30, 0x5B	; 91
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 64       	ori	r24, 0x40	; 64
    1404:	8c 93       	st	X, r24
    1406:	0a c0       	rjmp	.+20     	; 0x141c <Enable_External_INT0+0x50>

	break;
	case Disable_PIE_Interrupt:
		CLEAR_BIT(GICR,INT0);
    1408:	ab e5       	ldi	r26, 0x5B	; 91
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e5       	ldi	r30, 0x5B	; 91
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8f 7b       	andi	r24, 0xBF	; 191
    1414:	8c 93       	st	X, r24
    1416:	02 c0       	rjmp	.+4      	; 0x141c <Enable_External_INT0+0x50>
	break;
	default:
		return E_OK;
    1418:	1a 82       	std	Y+2, r1	; 0x02
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <Enable_External_INT0+0x54>
	}
	return E_NOK;
    141c:	31 e0       	ldi	r19, 0x01	; 1
    141e:	3a 83       	std	Y+2, r19	; 0x02
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <External_Int0_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int0_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <External_Int0_EdgeSelection+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <External_Int0_EdgeSelection+0x8>
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR,INT0);
    143e:	ab e5       	ldi	r26, 0x5B	; 91
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	eb e5       	ldi	r30, 0x5B	; 91
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	80 64       	ori	r24, 0x40	; 64
    144a:	8c 93       	st	X, r24

		switch(SenseLevel)
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3c 83       	std	Y+4, r19	; 0x04
    1454:	2b 83       	std	Y+3, r18	; 0x03
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	a1 f0       	breq	.+40     	; 0x1486 <External_Int0_EdgeSelection+0x56>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	21 30       	cpi	r18, 0x01	; 1
    1464:	31 05       	cpc	r19, r1
    1466:	f1 f4       	brne	.+60     	; 0x14a4 <External_Int0_EdgeSelection+0x74>
			{
				case Rising_Edge_Sense:
						SET_BIT(MCUCR,ISC00);
    1468:	a5 e5       	ldi	r26, 0x55	; 85
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e5       	ldi	r30, 0x55	; 85
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	8c 93       	st	X, r24
						SET_BIT(MCUCR,ISC01);
    1476:	a5 e5       	ldi	r26, 0x55	; 85
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e5       	ldi	r30, 0x55	; 85
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	82 60       	ori	r24, 0x02	; 2
    1482:	8c 93       	st	X, r24
    1484:	11 c0       	rjmp	.+34     	; 0x14a8 <External_Int0_EdgeSelection+0x78>
						break;
				case Falling_Edge_Sense:
						CLEAR_BIT(MCUCR,ISC00);
    1486:	a5 e5       	ldi	r26, 0x55	; 85
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e5 e5       	ldi	r30, 0x55	; 85
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8e 7f       	andi	r24, 0xFE	; 254
    1492:	8c 93       	st	X, r24
						SET_BIT(MCUCR,ISC01);
    1494:	a5 e5       	ldi	r26, 0x55	; 85
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e5 e5       	ldi	r30, 0x55	; 85
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	82 60       	ori	r24, 0x02	; 2
    14a0:	8c 93       	st	X, r24
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <External_Int0_EdgeSelection+0x78>
						break;
				default:
					return E_OK;
    14a4:	1a 82       	std	Y+2, r1	; 0x02
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <External_Int0_EdgeSelection+0x7c>
			}
		return E_NOK;
    14a8:	31 e0       	ldi	r19, 0x01	; 1
    14aa:	3a 83       	std	Y+2, r19	; 0x02
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <CallBack_Int0>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int0(void (*Func_Ptr)(void))
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <CallBack_Int0+0x6>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
	External_Function0=Func_Ptr;
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	90 93 9f 01 	sts	0x019F, r25
    14d2:	80 93 9e 01 	sts	0x019E, r24
	return E_NOK;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
}
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <Enable_External_INT1>:
/*****************************************************************************************************/
STD_Return Enable_External_INT1(Peripheral_Interrupt_State_t State)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <Enable_External_INT1+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <Enable_External_INT1+0x8>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3c 83       	std	Y+4, r19	; 0x04
    14f8:	2b 83       	std	Y+3, r18	; 0x03
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	31 f0       	breq	.+12     	; 0x150e <Enable_External_INT1+0x2c>
    1502:	2b 81       	ldd	r18, Y+3	; 0x03
    1504:	3c 81       	ldd	r19, Y+4	; 0x04
    1506:	21 30       	cpi	r18, 0x01	; 1
    1508:	31 05       	cpc	r19, r1
    150a:	49 f0       	breq	.+18     	; 0x151e <Enable_External_INT1+0x3c>
    150c:	10 c0       	rjmp	.+32     	; 0x152e <Enable_External_INT1+0x4c>
		{
		case Enable_PIE_Interrupt:
			SET_BIT(GICR,INT1);
    150e:	ab e5       	ldi	r26, 0x5B	; 91
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	eb e5       	ldi	r30, 0x5B	; 91
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	80 68       	ori	r24, 0x80	; 128
    151a:	8c 93       	st	X, r24
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <Enable_External_INT1+0x50>
		break;
		case Disable_PIE_Interrupt:
			CLEAR_BIT(GICR,INT1);
    151e:	ab e5       	ldi	r26, 0x5B	; 91
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e5       	ldi	r30, 0x5B	; 91
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8f 77       	andi	r24, 0x7F	; 127
    152a:	8c 93       	st	X, r24
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <Enable_External_INT1+0x50>
		break;
		default:
			return E_OK;
    152e:	1a 82       	std	Y+2, r1	; 0x02
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <Enable_External_INT1+0x54>
		}
	return E_NOK;
    1532:	31 e0       	ldi	r19, 0x01	; 1
    1534:	3a 83       	std	Y+2, r19	; 0x02
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <External_Int1_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int1_EdgeSelection(Int_Sense_Control_t SenseLevel)
	{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <External_Int1_EdgeSelection+0x6>
    154c:	00 d0       	rcall	.+0      	; 0x154e <External_Int1_EdgeSelection+0x8>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	89 83       	std	Y+1, r24	; 0x01
			switch(SenseLevel)
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3c 83       	std	Y+4, r19	; 0x04
    155c:	2b 83       	std	Y+3, r18	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	31 f0       	breq	.+12     	; 0x1572 <External_Int1_EdgeSelection+0x2c>
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	21 30       	cpi	r18, 0x01	; 1
    156c:	31 05       	cpc	r19, r1
    156e:	81 f0       	breq	.+32     	; 0x1590 <External_Int1_EdgeSelection+0x4a>
    1570:	1e c0       	rjmp	.+60     	; 0x15ae <External_Int1_EdgeSelection+0x68>
				{
			case Falling_Edge_Sense:
										CLEAR_BIT(MCUCR,ISC10);
    1572:	a5 e5       	ldi	r26, 0x55	; 85
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e5 e5       	ldi	r30, 0x55	; 85
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	8b 7f       	andi	r24, 0xFB	; 251
    157e:	8c 93       	st	X, r24
										SET_BIT(MCUCR,ISC11);
    1580:	a5 e5       	ldi	r26, 0x55	; 85
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e5 e5       	ldi	r30, 0x55	; 85
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	88 60       	ori	r24, 0x08	; 8
    158c:	8c 93       	st	X, r24
    158e:	11 c0       	rjmp	.+34     	; 0x15b2 <External_Int1_EdgeSelection+0x6c>
										break;
			case Rising_Edge_Sense:
							SET_BIT(MCUCR,ISC10);
    1590:	a5 e5       	ldi	r26, 0x55	; 85
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e5       	ldi	r30, 0x55	; 85
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	84 60       	ori	r24, 0x04	; 4
    159c:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC11);
    159e:	a5 e5       	ldi	r26, 0x55	; 85
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e5       	ldi	r30, 0x55	; 85
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	88 60       	ori	r24, 0x08	; 8
    15aa:	8c 93       	st	X, r24
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <External_Int1_EdgeSelection+0x6c>
							break;

					default:
						return E_OK;
    15ae:	1a 82       	std	Y+2, r1	; 0x02
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <External_Int1_EdgeSelection+0x70>
				}
			return E_NOK;
    15b2:	31 e0       	ldi	r19, 0x01	; 1
    15b4:	3a 83       	std	Y+2, r19	; 0x02
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <CallBack_Int1>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int1(void (*Func_Ptr)(void))
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <CallBack_Int1+0x6>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
	External_Function1=Func_Ptr;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	90 93 a1 01 	sts	0x01A1, r25
    15dc:	80 93 a0 01 	sts	0x01A0, r24
	return E_NOK;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
}
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <Enable_External_INT2>:
/*****************************************************************************************************/

STD_Return Enable_External_INT2(Peripheral_Interrupt_State_t State)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <Enable_External_INT2+0x6>
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <Enable_External_INT2+0x8>
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3c 83       	std	Y+4, r19	; 0x04
    1602:	2b 83       	std	Y+3, r18	; 0x03
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	31 f0       	breq	.+12     	; 0x1618 <Enable_External_INT2+0x2c>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	21 30       	cpi	r18, 0x01	; 1
    1612:	31 05       	cpc	r19, r1
    1614:	49 f0       	breq	.+18     	; 0x1628 <Enable_External_INT2+0x3c>
    1616:	10 c0       	rjmp	.+32     	; 0x1638 <Enable_External_INT2+0x4c>
		{
			case Enable_PIE_Interrupt:
				SET_BIT(GICR,INT2);
    1618:	ab e5       	ldi	r26, 0x5B	; 91
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e5       	ldi	r30, 0x5B	; 91
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	80 62       	ori	r24, 0x20	; 32
    1624:	8c 93       	st	X, r24
    1626:	0a c0       	rjmp	.+20     	; 0x163c <Enable_External_INT2+0x50>
				break;
				case Disable_PIE_Interrupt:
					CLEAR_BIT(GICR,INT2);
    1628:	ab e5       	ldi	r26, 0x5B	; 91
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	eb e5       	ldi	r30, 0x5B	; 91
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	8f 7d       	andi	r24, 0xDF	; 223
    1634:	8c 93       	st	X, r24
    1636:	02 c0       	rjmp	.+4      	; 0x163c <Enable_External_INT2+0x50>
				break;
				default:
					return E_OK;
    1638:	1a 82       	std	Y+2, r1	; 0x02
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <Enable_External_INT2+0x54>
		 	}
	return E_NOK;
    163c:	31 e0       	ldi	r19, 0x01	; 1
    163e:	3a 83       	std	Y+2, r19	; 0x02
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <External_Int2_EdgeSelection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return External_Int2_EdgeSelection(Int_Sense_Control_t SenseLevel)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <External_Int2_EdgeSelection+0x6>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <External_Int2_EdgeSelection+0x8>
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	89 83       	std	Y+1, r24	; 0x01
				switch(SenseLevel)
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3c 83       	std	Y+4, r19	; 0x04
    1666:	2b 83       	std	Y+3, r18	; 0x03
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	79 f0       	breq	.+30     	; 0x168e <External_Int2_EdgeSelection+0x3e>
    1670:	2b 81       	ldd	r18, Y+3	; 0x03
    1672:	3c 81       	ldd	r19, Y+4	; 0x04
    1674:	21 30       	cpi	r18, 0x01	; 1
    1676:	31 05       	cpc	r19, r1
    1678:	a1 f4       	brne	.+40     	; 0x16a2 <External_Int2_EdgeSelection+0x52>
					{
						case Rising_Edge_Sense:
								SET_BIT(MCUCSR,ISC2);
    167a:	a4 e5       	ldi	r26, 0x54	; 84
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e4 e5       	ldi	r30, 0x54	; 84
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 64       	ori	r24, 0x40	; 64
    1686:	8c 93       	st	X, r24
								return E_NOK;
    1688:	31 e0       	ldi	r19, 0x01	; 1
    168a:	3a 83       	std	Y+2, r19	; 0x02
    168c:	0b c0       	rjmp	.+22     	; 0x16a4 <External_Int2_EdgeSelection+0x54>
								break;
						case Falling_Edge_Sense:
								CLEAR_BIT(MCUCSR,ISC2);
    168e:	a4 e5       	ldi	r26, 0x54	; 84
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e4 e5       	ldi	r30, 0x54	; 84
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8f 7b       	andi	r24, 0xBF	; 191
    169a:	8c 93       	st	X, r24
								return E_NOK;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	8a 83       	std	Y+2, r24	; 0x02
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <External_Int2_EdgeSelection+0x54>
								break;
						default:
							return E_OK;
    16a2:	1a 82       	std	Y+2, r1	; 0x02
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
					}

		return E_NOK;
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <CallBack_Int2>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return CallBack_Int2(void (*Func_Ptr)(void))
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <CallBack_Int2+0x6>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	9a 83       	std	Y+2, r25	; 0x02
    16c0:	89 83       	std	Y+1, r24	; 0x01
	External_Function2=Func_Ptr;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	90 93 a3 01 	sts	0x01A3, r25
    16ca:	80 93 a2 01 	sts	0x01A2, r24
	return E_NOK;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <DIO_init>:
 * 
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 **/
void DIO_init(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    // initializing all pins are input
    DDRA=0;
    16e2:	ea e3       	ldi	r30, 0x3A	; 58
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	10 82       	st	Z, r1
    DDRB=0;
    16e8:	e7 e3       	ldi	r30, 0x37	; 55
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	10 82       	st	Z, r1
    DDRC=0;
    16ee:	e4 e3       	ldi	r30, 0x34	; 52
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	10 82       	st	Z, r1
    DDRD=0;
    16f4:	e1 e3       	ldi	r30, 0x31	; 49
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	10 82       	st	Z, r1

    PORTA=0;
    16fa:	eb e3       	ldi	r30, 0x3B	; 59
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	10 82       	st	Z, r1
    PORTB=0;
    1700:	e8 e3       	ldi	r30, 0x38	; 56
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	10 82       	st	Z, r1
    PORTC=0;
    1706:	e5 e3       	ldi	r30, 0x35	; 53
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	10 82       	st	Z, r1
    PORTD=0;
    170c:	e2 e3       	ldi	r30, 0x32	; 50
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	10 82       	st	Z, r1
    //enable the internal pull up resistor
    CLEAR_BIT(SFIOR,PUD);
    1712:	a0 e5       	ldi	r26, 0x50	; 80
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e0 e5       	ldi	r30, 0x50	; 80
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8b 7f       	andi	r24, 0xFB	; 251
    171e:	8c 93       	st	X, r24
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <DIO_SetPinDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinDirection(DIO_Ports_t PORT, u8 PIN, DIO_Direction_t Direction)
	{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	2e 97       	sbiw	r28, 0x0e	; 14
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	6a 83       	std	Y+2, r22	; 0x02
    173e:	4b 83       	std	Y+3, r20	; 0x03
		// check for safety
		if(PIN>MAX_PinNum)
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	88 30       	cpi	r24, 0x08	; 8
    1744:	10 f0       	brcs	.+4      	; 0x174a <DIO_SetPinDirection+0x24>
			{
				return E_OK;
    1746:	1e 86       	std	Y+14, r1	; 0x0e
    1748:	0e c1       	rjmp	.+540    	; 0x1966 <DIO_SetPinDirection+0x240>
			}
		else
			{
				switch(PORT)
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	3d 87       	std	Y+13, r19	; 0x0d
    1752:	2c 87       	std	Y+12, r18	; 0x0c
    1754:	8c 85       	ldd	r24, Y+12	; 0x0c
    1756:	9d 85       	ldd	r25, Y+13	; 0x0d
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <DIO_SetPinDirection+0x3a>
    175e:	51 c0       	rjmp	.+162    	; 0x1802 <DIO_SetPinDirection+0xdc>
    1760:	2c 85       	ldd	r18, Y+12	; 0x0c
    1762:	3d 85       	ldd	r19, Y+13	; 0x0d
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	2c f4       	brge	.+10     	; 0x1774 <DIO_SetPinDirection+0x4e>
    176a:	8c 85       	ldd	r24, Y+12	; 0x0c
    176c:	9d 85       	ldd	r25, Y+13	; 0x0d
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	71 f0       	breq	.+28     	; 0x178e <DIO_SetPinDirection+0x68>
    1772:	f5 c0       	rjmp	.+490    	; 0x195e <DIO_SetPinDirection+0x238>
    1774:	2c 85       	ldd	r18, Y+12	; 0x0c
    1776:	3d 85       	ldd	r19, Y+13	; 0x0d
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	09 f4       	brne	.+2      	; 0x1780 <DIO_SetPinDirection+0x5a>
    177e:	7b c0       	rjmp	.+246    	; 0x1876 <DIO_SetPinDirection+0x150>
    1780:	8c 85       	ldd	r24, Y+12	; 0x0c
    1782:	9d 85       	ldd	r25, Y+13	; 0x0d
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	91 05       	cpc	r25, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <DIO_SetPinDirection+0x66>
    178a:	af c0       	rjmp	.+350    	; 0x18ea <DIO_SetPinDirection+0x1c4>
    178c:	e8 c0       	rjmp	.+464    	; 0x195e <DIO_SetPinDirection+0x238>
					{
						case DIO_PORTA:
							switch (Direction)
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3b 87       	std	Y+11, r19	; 0x0b
    1796:	2a 87       	std	Y+10, r18	; 0x0a
    1798:	8a 85       	ldd	r24, Y+10	; 0x0a
    179a:	9b 85       	ldd	r25, Y+11	; 0x0b
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	31 f0       	breq	.+12     	; 0x17ac <DIO_SetPinDirection+0x86>
    17a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    17a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    17a4:	21 30       	cpi	r18, 0x01	; 1
    17a6:	31 05       	cpc	r19, r1
    17a8:	b1 f0       	breq	.+44     	; 0x17d6 <DIO_SetPinDirection+0xb0>
    17aa:	29 c0       	rjmp	.+82     	; 0x17fe <DIO_SetPinDirection+0xd8>
								{
									case DIO_INPUT:
									CLEAR_BIT(DDRA,PIN);
    17ac:	aa e3       	ldi	r26, 0x3A	; 58
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ea e3       	ldi	r30, 0x3A	; 58
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_SetPinDirection+0xa4>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_SetPinDirection+0xa0>
    17ce:	80 95       	com	r24
    17d0:	84 23       	and	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	c6 c0       	rjmp	.+396    	; 0x1962 <DIO_SetPinDirection+0x23c>
									break;
									case DIO_OUTPUT:
									SET_BIT(DDRA,PIN);
    17d6:	aa e3       	ldi	r26, 0x3A	; 58
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	ea e3       	ldi	r30, 0x3A	; 58
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_SetPinDirection+0xce>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <DIO_SetPinDirection+0xca>
    17f8:	84 2b       	or	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	b2 c0       	rjmp	.+356    	; 0x1962 <DIO_SetPinDirection+0x23c>
									break;
									default:
									return E_OK;
    17fe:	1e 86       	std	Y+14, r1	; 0x0e
    1800:	b2 c0       	rjmp	.+356    	; 0x1966 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTB:
							switch (Direction)
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	39 87       	std	Y+9, r19	; 0x09
    180a:	28 87       	std	Y+8, r18	; 0x08
    180c:	88 85       	ldd	r24, Y+8	; 0x08
    180e:	99 85       	ldd	r25, Y+9	; 0x09
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	31 f0       	breq	.+12     	; 0x1820 <DIO_SetPinDirection+0xfa>
    1814:	28 85       	ldd	r18, Y+8	; 0x08
    1816:	39 85       	ldd	r19, Y+9	; 0x09
    1818:	21 30       	cpi	r18, 0x01	; 1
    181a:	31 05       	cpc	r19, r1
    181c:	b1 f0       	breq	.+44     	; 0x184a <DIO_SetPinDirection+0x124>
    181e:	29 c0       	rjmp	.+82     	; 0x1872 <DIO_SetPinDirection+0x14c>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRB,PIN);
    1820:	a7 e3       	ldi	r26, 0x37	; 55
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e7 e3       	ldi	r30, 0x37	; 55
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_SetPinDirection+0x118>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_SetPinDirection+0x114>
    1842:	80 95       	com	r24
    1844:	84 23       	and	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	8c c0       	rjmp	.+280    	; 0x1962 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRB,PIN);
    184a:	a7 e3       	ldi	r26, 0x37	; 55
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e7 e3       	ldi	r30, 0x37	; 55
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_SetPinDirection+0x142>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_SetPinDirection+0x13e>
    186c:	84 2b       	or	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	78 c0       	rjmp	.+240    	; 0x1962 <DIO_SetPinDirection+0x23c>
										break;
									default:
									return E_OK;
    1872:	1e 86       	std	Y+14, r1	; 0x0e
    1874:	78 c0       	rjmp	.+240    	; 0x1966 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTC:
							switch (Direction)
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3f 83       	std	Y+7, r19	; 0x07
    187e:	2e 83       	std	Y+6, r18	; 0x06
    1880:	8e 81       	ldd	r24, Y+6	; 0x06
    1882:	9f 81       	ldd	r25, Y+7	; 0x07
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	31 f0       	breq	.+12     	; 0x1894 <DIO_SetPinDirection+0x16e>
    1888:	2e 81       	ldd	r18, Y+6	; 0x06
    188a:	3f 81       	ldd	r19, Y+7	; 0x07
    188c:	21 30       	cpi	r18, 0x01	; 1
    188e:	31 05       	cpc	r19, r1
    1890:	b1 f0       	breq	.+44     	; 0x18be <DIO_SetPinDirection+0x198>
    1892:	29 c0       	rjmp	.+82     	; 0x18e6 <DIO_SetPinDirection+0x1c0>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRC,PIN);
    1894:	a4 e3       	ldi	r26, 0x34	; 52
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e4 e3       	ldi	r30, 0x34	; 52
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <DIO_SetPinDirection+0x18c>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <DIO_SetPinDirection+0x188>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	52 c0       	rjmp	.+164    	; 0x1962 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRC,PIN);
    18be:	a4 e3       	ldi	r26, 0x34	; 52
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e4 e3       	ldi	r30, 0x34	; 52
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_SetPinDirection+0x1b6>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_SetPinDirection+0x1b2>
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	3e c0       	rjmp	.+124    	; 0x1962 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    18e6:	1e 86       	std	Y+14, r1	; 0x0e
    18e8:	3e c0       	rjmp	.+124    	; 0x1966 <DIO_SetPinDirection+0x240>
								}
						break;
						case DIO_PORTD:
							switch (Direction)
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3d 83       	std	Y+5, r19	; 0x05
    18f2:	2c 83       	std	Y+4, r18	; 0x04
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	31 f0       	breq	.+12     	; 0x1908 <DIO_SetPinDirection+0x1e2>
    18fc:	2c 81       	ldd	r18, Y+4	; 0x04
    18fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1900:	21 30       	cpi	r18, 0x01	; 1
    1902:	31 05       	cpc	r19, r1
    1904:	b1 f0       	breq	.+44     	; 0x1932 <DIO_SetPinDirection+0x20c>
    1906:	29 c0       	rjmp	.+82     	; 0x195a <DIO_SetPinDirection+0x234>
								{
									case DIO_INPUT:
										CLEAR_BIT(DDRD,PIN);
    1908:	a1 e3       	ldi	r26, 0x31	; 49
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e1 e3       	ldi	r30, 0x31	; 49
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <DIO_SetPinDirection+0x200>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <DIO_SetPinDirection+0x1fc>
    192a:	80 95       	com	r24
    192c:	84 23       	and	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	18 c0       	rjmp	.+48     	; 0x1962 <DIO_SetPinDirection+0x23c>
										break;
									case DIO_OUTPUT:
										SET_BIT(DDRD,PIN);
    1932:	a1 e3       	ldi	r26, 0x31	; 49
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e1 e3       	ldi	r30, 0x31	; 49
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <DIO_SetPinDirection+0x22a>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <DIO_SetPinDirection+0x226>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <DIO_SetPinDirection+0x23c>
										break;
									default:
										return E_OK;
    195a:	1e 86       	std	Y+14, r1	; 0x0e
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <DIO_SetPinDirection+0x240>
								}
							break;
							default:
								return E_OK;
    195e:	1e 86       	std	Y+14, r1	; 0x0e
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_SetPinDirection+0x240>
					}
			}
	return E_NOK;
    1962:	31 e0       	ldi	r19, 0x01	; 1
    1964:	3e 87       	std	Y+14, r19	; 0x0e
    1966:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    1968:	2e 96       	adiw	r28, 0x0e	; 14
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <DIO_SetPortDirection>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortDirection(DIO_Ports_t PORT,u8 Direction)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <DIO_SetPortDirection+0x6>
    1980:	00 d0       	rcall	.+0      	; 0x1982 <DIO_SetPortDirection+0x8>
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3d 83       	std	Y+5, r19	; 0x05
    1994:	2c 83       	std	Y+4, r18	; 0x04
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	d1 f0       	breq	.+52     	; 0x19d4 <DIO_SetPortDirection+0x5a>
    19a0:	2c 81       	ldd	r18, Y+4	; 0x04
    19a2:	3d 81       	ldd	r19, Y+5	; 0x05
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <DIO_SetPortDirection+0x3a>
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	61 f0       	breq	.+24     	; 0x19ca <DIO_SetPortDirection+0x50>
    19b2:	1f c0       	rjmp	.+62     	; 0x19f2 <DIO_SetPortDirection+0x78>
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	81 f0       	breq	.+32     	; 0x19de <DIO_SetPortDirection+0x64>
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	91 05       	cpc	r25, r1
    19c6:	81 f0       	breq	.+32     	; 0x19e8 <DIO_SetPortDirection+0x6e>
    19c8:	14 c0       	rjmp	.+40     	; 0x19f2 <DIO_SetPortDirection+0x78>
						{
							case DIO_PORTA:
								DDRA=Direction;
    19ca:	ea e3       	ldi	r30, 0x3A	; 58
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	80 83       	st	Z, r24
    19d2:	11 c0       	rjmp	.+34     	; 0x19f6 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTB:
								DDRB=Direction;
    19d4:	e7 e3       	ldi	r30, 0x37	; 55
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	80 83       	st	Z, r24
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTC:
								DDRC=Direction;
    19de:	e4 e3       	ldi	r30, 0x34	; 52
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	80 83       	st	Z, r24
    19e6:	07 c0       	rjmp	.+14     	; 0x19f6 <DIO_SetPortDirection+0x7c>
							break;
							case DIO_PORTD:
								DDRD=Direction;
    19e8:	e1 e3       	ldi	r30, 0x31	; 49
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	80 83       	st	Z, r24
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_SetPortDirection+0x7c>
							break;
							default:
							return E_OK;
    19f2:	1b 82       	std	Y+3, r1	; 0x03
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_SetPortDirection+0x80>

						}
	return E_NOK;
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	9b 83       	std	Y+3, r25	; 0x03
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <DIO_SetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 							return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t State)
	{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	2e 97       	sbiw	r28, 0x0e	; 14
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	6a 83       	std	Y+2, r22	; 0x02
    1a24:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	88 30       	cpi	r24, 0x08	; 8
    1a2a:	10 f0       	brcs	.+4      	; 0x1a30 <DIO_SetPinValue+0x24>
			{
				return E_OK;
    1a2c:	1e 86       	std	Y+14, r1	; 0x0e
    1a2e:	0e c1       	rjmp	.+540    	; 0x1c4c <DIO_SetPinValue+0x240>
			}
		else
			{
				switch(PORT)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3d 87       	std	Y+13, r19	; 0x0d
    1a38:	2c 87       	std	Y+12, r18	; 0x0c
    1a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <DIO_SetPinValue+0x3a>
    1a44:	51 c0       	rjmp	.+162    	; 0x1ae8 <DIO_SetPinValue+0xdc>
    1a46:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a48:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a4a:	22 30       	cpi	r18, 0x02	; 2
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <DIO_SetPinValue+0x4e>
    1a50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a52:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	71 f0       	breq	.+28     	; 0x1a74 <DIO_SetPinValue+0x68>
    1a58:	f5 c0       	rjmp	.+490    	; 0x1c44 <DIO_SetPinValue+0x238>
    1a5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a5c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <DIO_SetPinValue+0x5a>
    1a64:	7b c0       	rjmp	.+246    	; 0x1b5c <DIO_SetPinValue+0x150>
    1a66:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a68:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <DIO_SetPinValue+0x66>
    1a70:	af c0       	rjmp	.+350    	; 0x1bd0 <DIO_SetPinValue+0x1c4>
    1a72:	e8 c0       	rjmp	.+464    	; 0x1c44 <DIO_SetPinValue+0x238>
					{
						case DIO_PORTA:
							switch(State)
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	3b 87       	std	Y+11, r19	; 0x0b
    1a7c:	2a 87       	std	Y+10, r18	; 0x0a
    1a7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	31 f0       	breq	.+12     	; 0x1a92 <DIO_SetPinValue+0x86>
    1a86:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a88:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a8a:	21 30       	cpi	r18, 0x01	; 1
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	b1 f0       	breq	.+44     	; 0x1abc <DIO_SetPinValue+0xb0>
    1a90:	29 c0       	rjmp	.+82     	; 0x1ae4 <DIO_SetPinValue+0xd8>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTA,PIN);
    1a92:	ab e3       	ldi	r26, 0x3B	; 59
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	eb e3       	ldi	r30, 0x3B	; 59
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_SetPinValue+0xa4>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <DIO_SetPinValue+0xa0>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	c6 c0       	rjmp	.+396    	; 0x1c48 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTA,PIN);
    1abc:	ab e3       	ldi	r26, 0x3B	; 59
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	eb e3       	ldi	r30, 0x3B	; 59
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 2e       	mov	r0, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <DIO_SetPinValue+0xce>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <DIO_SetPinValue+0xca>
    1ade:	84 2b       	or	r24, r20
    1ae0:	8c 93       	st	X, r24
    1ae2:	b2 c0       	rjmp	.+356    	; 0x1c48 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1ae4:	1e 86       	std	Y+14, r1	; 0x0e
    1ae6:	b2 c0       	rjmp	.+356    	; 0x1c4c <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTB:
							switch(State)
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	39 87       	std	Y+9, r19	; 0x09
    1af0:	28 87       	std	Y+8, r18	; 0x08
    1af2:	88 85       	ldd	r24, Y+8	; 0x08
    1af4:	99 85       	ldd	r25, Y+9	; 0x09
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <DIO_SetPinValue+0xfa>
    1afa:	28 85       	ldd	r18, Y+8	; 0x08
    1afc:	39 85       	ldd	r19, Y+9	; 0x09
    1afe:	21 30       	cpi	r18, 0x01	; 1
    1b00:	31 05       	cpc	r19, r1
    1b02:	b1 f0       	breq	.+44     	; 0x1b30 <DIO_SetPinValue+0x124>
    1b04:	29 c0       	rjmp	.+82     	; 0x1b58 <DIO_SetPinValue+0x14c>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTB,PIN);
    1b06:	a8 e3       	ldi	r26, 0x38	; 56
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e8 e3       	ldi	r30, 0x38	; 56
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_SetPinValue+0x118>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_SetPinValue+0x114>
    1b28:	80 95       	com	r24
    1b2a:	84 23       	and	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	8c c0       	rjmp	.+280    	; 0x1c48 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTB,PIN);
    1b30:	a8 e3       	ldi	r26, 0x38	; 56
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e8 e3       	ldi	r30, 0x38	; 56
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <DIO_SetPinValue+0x142>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <DIO_SetPinValue+0x13e>
    1b52:	84 2b       	or	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	78 c0       	rjmp	.+240    	; 0x1c48 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1b58:	1e 86       	std	Y+14, r1	; 0x0e
    1b5a:	78 c0       	rjmp	.+240    	; 0x1c4c <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTC:
							switch(State)
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3f 83       	std	Y+7, r19	; 0x07
    1b64:	2e 83       	std	Y+6, r18	; 0x06
    1b66:	8e 81       	ldd	r24, Y+6	; 0x06
    1b68:	9f 81       	ldd	r25, Y+7	; 0x07
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	31 f0       	breq	.+12     	; 0x1b7a <DIO_SetPinValue+0x16e>
    1b6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b70:	3f 81       	ldd	r19, Y+7	; 0x07
    1b72:	21 30       	cpi	r18, 0x01	; 1
    1b74:	31 05       	cpc	r19, r1
    1b76:	b1 f0       	breq	.+44     	; 0x1ba4 <DIO_SetPinValue+0x198>
    1b78:	29 c0       	rjmp	.+82     	; 0x1bcc <DIO_SetPinValue+0x1c0>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTC,PIN);
    1b7a:	a5 e3       	ldi	r26, 0x35	; 53
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e5 e3       	ldi	r30, 0x35	; 53
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_SetPinValue+0x18c>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_SetPinValue+0x188>
    1b9c:	80 95       	com	r24
    1b9e:	84 23       	and	r24, r20
    1ba0:	8c 93       	st	X, r24
    1ba2:	52 c0       	rjmp	.+164    	; 0x1c48 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTC,PIN);
    1ba4:	a5 e3       	ldi	r26, 0x35	; 53
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e5 e3       	ldi	r30, 0x35	; 53
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	48 2f       	mov	r20, r24
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 2e       	mov	r0, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <DIO_SetPinValue+0x1b6>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	0a 94       	dec	r0
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <DIO_SetPinValue+0x1b2>
    1bc6:	84 2b       	or	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	3e c0       	rjmp	.+124    	; 0x1c48 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1bcc:	1e 86       	std	Y+14, r1	; 0x0e
    1bce:	3e c0       	rjmp	.+124    	; 0x1c4c <DIO_SetPinValue+0x240>
								}
						break;
						case DIO_PORTD:
							switch(State)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	3d 83       	std	Y+5, r19	; 0x05
    1bd8:	2c 83       	std	Y+4, r18	; 0x04
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	31 f0       	breq	.+12     	; 0x1bee <DIO_SetPinValue+0x1e2>
    1be2:	2c 81       	ldd	r18, Y+4	; 0x04
    1be4:	3d 81       	ldd	r19, Y+5	; 0x05
    1be6:	21 30       	cpi	r18, 0x01	; 1
    1be8:	31 05       	cpc	r19, r1
    1bea:	b1 f0       	breq	.+44     	; 0x1c18 <DIO_SetPinValue+0x20c>
    1bec:	29 c0       	rjmp	.+82     	; 0x1c40 <DIO_SetPinValue+0x234>
								{
									case DIO_LOW:
										CLEAR_BIT(PORTD,PIN);
    1bee:	a2 e3       	ldi	r26, 0x32	; 50
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e2 e3       	ldi	r30, 0x32	; 50
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_SetPinValue+0x200>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_SetPinValue+0x1fc>
    1c10:	80 95       	com	r24
    1c12:	84 23       	and	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	18 c0       	rjmp	.+48     	; 0x1c48 <DIO_SetPinValue+0x23c>
										break;
									case DIO_HIGH:
										SET_BIT(PORTD,PIN);
    1c18:	a2 e3       	ldi	r26, 0x32	; 50
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e2 e3       	ldi	r30, 0x32	; 50
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_SetPinValue+0x22a>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_SetPinValue+0x226>
    1c3a:	84 2b       	or	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <DIO_SetPinValue+0x23c>
										break;
									default:
										return E_OK;
    1c40:	1e 86       	std	Y+14, r1	; 0x0e
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <DIO_SetPinValue+0x240>
								}
						break;
							default:
							return E_OK;
    1c44:	1e 86       	std	Y+14, r1	; 0x0e
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_SetPinValue+0x240>
					}
			}
		return E_NOK;
    1c48:	31 e0       	ldi	r19, 0x01	; 1
    1c4a:	3e 87       	std	Y+14, r19	; 0x0e
    1c4c:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    1c4e:	2e 96       	adiw	r28, 0x0e	; 14
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <DIO_SetPortValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_SetPortValue(DIO_Ports_t PORT,u8 value)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <DIO_SetPortValue+0x6>
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <DIO_SetPortValue+0x8>
    1c68:	0f 92       	push	r0
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	6a 83       	std	Y+2, r22	; 0x02
					switch(PORT)
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3d 83       	std	Y+5, r19	; 0x05
    1c7a:	2c 83       	std	Y+4, r18	; 0x04
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	91 05       	cpc	r25, r1
    1c84:	d1 f0       	breq	.+52     	; 0x1cba <DIO_SetPortValue+0x5a>
    1c86:	2c 81       	ldd	r18, Y+4	; 0x04
    1c88:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <DIO_SetPortValue+0x3a>
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	61 f0       	breq	.+24     	; 0x1cb0 <DIO_SetPortValue+0x50>
    1c98:	1f c0       	rjmp	.+62     	; 0x1cd8 <DIO_SetPortValue+0x78>
    1c9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	81 f0       	breq	.+32     	; 0x1cc4 <DIO_SetPortValue+0x64>
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	91 05       	cpc	r25, r1
    1cac:	81 f0       	breq	.+32     	; 0x1cce <DIO_SetPortValue+0x6e>
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <DIO_SetPortValue+0x78>
						{
							case DIO_PORTA:
								PORTA=value;
    1cb0:	eb e3       	ldi	r30, 0x3B	; 59
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	80 83       	st	Z, r24
    1cb8:	11 c0       	rjmp	.+34     	; 0x1cdc <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTB:
								PORTB=value;
    1cba:	e8 e3       	ldi	r30, 0x38	; 56
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	80 83       	st	Z, r24
    1cc2:	0c c0       	rjmp	.+24     	; 0x1cdc <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTC:
								PORTC=value;
    1cc4:	e5 e3       	ldi	r30, 0x35	; 53
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	80 83       	st	Z, r24
    1ccc:	07 c0       	rjmp	.+14     	; 0x1cdc <DIO_SetPortValue+0x7c>
							break;
							case DIO_PORTD:
								PORTD=value;
    1cce:	e2 e3       	ldi	r30, 0x32	; 50
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	80 83       	st	Z, r24
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_SetPortValue+0x7c>

							break;
							default:
							return E_OK;
    1cd8:	1b 82       	std	Y+3, r1	; 0x03
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_SetPortValue+0x80>

						}
	return E_NOK;
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	9b 83       	std	Y+3, r25	; 0x03
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <DIO_GetPinValue>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_GetPinValue(DIO_Ports_t PORT,u8 PIN,DIO_State_t* State)
	{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	27 97       	sbiw	r28, 0x07	; 7
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	6a 83       	std	Y+2, r22	; 0x02
    1d0a:	5c 83       	std	Y+4, r21	; 0x04
    1d0c:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	88 30       	cpi	r24, 0x08	; 8
    1d12:	10 f0       	brcs	.+4      	; 0x1d18 <DIO_GetPinValue+0x26>
			{
				return E_OK;
    1d14:	1f 82       	std	Y+7, r1	; 0x07
    1d16:	75 c0       	rjmp	.+234    	; 0x1e02 <DIO_GetPinValue+0x110>
			}
		else
			{
					switch(PORT)
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	3e 83       	std	Y+6, r19	; 0x06
    1d20:	2d 83       	std	Y+5, r18	; 0x05
    1d22:	4d 81       	ldd	r20, Y+5	; 0x05
    1d24:	5e 81       	ldd	r21, Y+6	; 0x06
    1d26:	41 30       	cpi	r20, 0x01	; 1
    1d28:	51 05       	cpc	r21, r1
    1d2a:	59 f1       	breq	.+86     	; 0x1d82 <DIO_GetPinValue+0x90>
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	91 05       	cpc	r25, r1
    1d34:	34 f4       	brge	.+12     	; 0x1d42 <DIO_GetPinValue+0x50>
    1d36:	2d 81       	ldd	r18, Y+5	; 0x05
    1d38:	3e 81       	ldd	r19, Y+6	; 0x06
    1d3a:	21 15       	cp	r18, r1
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	69 f0       	breq	.+26     	; 0x1d5a <DIO_GetPinValue+0x68>
    1d40:	5c c0       	rjmp	.+184    	; 0x1dfa <DIO_GetPinValue+0x108>
    1d42:	4d 81       	ldd	r20, Y+5	; 0x05
    1d44:	5e 81       	ldd	r21, Y+6	; 0x06
    1d46:	42 30       	cpi	r20, 0x02	; 2
    1d48:	51 05       	cpc	r21, r1
    1d4a:	79 f1       	breq	.+94     	; 0x1daa <DIO_GetPinValue+0xb8>
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	91 05       	cpc	r25, r1
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <DIO_GetPinValue+0x66>
    1d56:	3d c0       	rjmp	.+122    	; 0x1dd2 <DIO_GetPinValue+0xe0>
    1d58:	50 c0       	rjmp	.+160    	; 0x1dfa <DIO_GetPinValue+0x108>
						{
							case DIO_PORTA:
								*State=GET_BIT(PINA,PIN);
    1d5a:	e9 e3       	ldi	r30, 0x39	; 57
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	88 2f       	mov	r24, r24
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a9 01       	movw	r20, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_GetPinValue+0x80>
    1d6e:	55 95       	asr	r21
    1d70:	47 95       	ror	r20
    1d72:	8a 95       	dec	r24
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_GetPinValue+0x7c>
    1d76:	ca 01       	movw	r24, r20
    1d78:	81 70       	andi	r24, 0x01	; 1
    1d7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d7e:	80 83       	st	Z, r24
    1d80:	3e c0       	rjmp	.+124    	; 0x1dfe <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTB:
								*State=GET_BIT(PINB,PIN);
    1d82:	e6 e3       	ldi	r30, 0x36	; 54
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a9 01       	movw	r20, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <DIO_GetPinValue+0xa8>
    1d96:	55 95       	asr	r21
    1d98:	47 95       	ror	r20
    1d9a:	8a 95       	dec	r24
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <DIO_GetPinValue+0xa4>
    1d9e:	ca 01       	movw	r24, r20
    1da0:	81 70       	andi	r24, 0x01	; 1
    1da2:	eb 81       	ldd	r30, Y+3	; 0x03
    1da4:	fc 81       	ldd	r31, Y+4	; 0x04
    1da6:	80 83       	st	Z, r24
    1da8:	2a c0       	rjmp	.+84     	; 0x1dfe <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTC:
								*State=GET_BIT(PINC,PIN);
    1daa:	e3 e3       	ldi	r30, 0x33	; 51
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	a9 01       	movw	r20, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_GetPinValue+0xd0>
    1dbe:	55 95       	asr	r21
    1dc0:	47 95       	ror	r20
    1dc2:	8a 95       	dec	r24
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <DIO_GetPinValue+0xcc>
    1dc6:	ca 01       	movw	r24, r20
    1dc8:	81 70       	andi	r24, 0x01	; 1
    1dca:	eb 81       	ldd	r30, Y+3	; 0x03
    1dcc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dce:	80 83       	st	Z, r24
    1dd0:	16 c0       	rjmp	.+44     	; 0x1dfe <DIO_GetPinValue+0x10c>
								break;
							case DIO_PORTD:
								*State=GET_BIT(PIND,PIN);
    1dd2:	e0 e3       	ldi	r30, 0x30	; 48
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a9 01       	movw	r20, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_GetPinValue+0xf8>
    1de6:	55 95       	asr	r21
    1de8:	47 95       	ror	r20
    1dea:	8a 95       	dec	r24
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_GetPinValue+0xf4>
    1dee:	ca 01       	movw	r24, r20
    1df0:	81 70       	andi	r24, 0x01	; 1
    1df2:	eb 81       	ldd	r30, Y+3	; 0x03
    1df4:	fc 81       	ldd	r31, Y+4	; 0x04
    1df6:	80 83       	st	Z, r24
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <DIO_GetPinValue+0x10c>
								break;
							default:
								return E_OK;
    1dfa:	1f 82       	std	Y+7, r1	; 0x07
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <DIO_GetPinValue+0x110>
						}
			}
		return E_NOK;
    1dfe:	51 e0       	ldi	r21, 0x01	; 1
    1e00:	5f 83       	std	Y+7, r21	; 0x07
    1e02:	8f 81       	ldd	r24, Y+7	; 0x07
	}
    1e04:	27 96       	adiw	r28, 0x07	; 7
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <DIO_togglePin>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_togglePin(DIO_Ports_t port,u8 pin)
 {
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <DIO_togglePin+0x6>
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <DIO_togglePin+0x8>
    1e1e:	0f 92       	push	r0
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PinNum)
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	88 30       	cpi	r24, 0x08	; 8
    1e2c:	10 f0       	brcs	.+4      	; 0x1e32 <DIO_togglePin+0x1c>
		{
			return E_OK;
    1e2e:	1d 82       	std	Y+5, r1	; 0x05
    1e30:	73 c0       	rjmp	.+230    	; 0x1f18 <DIO_togglePin+0x102>
		}
	else
		{
			switch (port)
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	3c 83       	std	Y+4, r19	; 0x04
    1e3a:	2b 83       	std	Y+3, r18	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	49 f1       	breq	.+82     	; 0x1e98 <DIO_togglePin+0x82>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <DIO_togglePin+0x44>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <DIO_togglePin+0x5a>
    1e58:	5b c0       	rjmp	.+182    	; 0x1f10 <DIO_togglePin+0xfa>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	71 f1       	breq	.+92     	; 0x1ec0 <DIO_togglePin+0xaa>
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	83 30       	cpi	r24, 0x03	; 3
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	e9 f1       	breq	.+122    	; 0x1ee8 <DIO_togglePin+0xd2>
    1e6e:	50 c0       	rjmp	.+160    	; 0x1f10 <DIO_togglePin+0xfa>
				{
					case DIO_PORTA:
						TOGGLE_BIT(PORTA, pin);
    1e70:	ab e3       	ldi	r26, 0x3B	; 59
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	eb e3       	ldi	r30, 0x3B	; 59
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	48 2f       	mov	r20, r24
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 2e       	mov	r0, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <DIO_togglePin+0x78>
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	0a 94       	dec	r0
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <DIO_togglePin+0x74>
    1e92:	84 27       	eor	r24, r20
    1e94:	8c 93       	st	X, r24
    1e96:	3e c0       	rjmp	.+124    	; 0x1f14 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTB:
						TOGGLE_BIT(PORTB, pin);
    1e98:	a8 e3       	ldi	r26, 0x38	; 56
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e8 e3       	ldi	r30, 0x38	; 56
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_togglePin+0xa0>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_togglePin+0x9c>
    1eba:	84 27       	eor	r24, r20
    1ebc:	8c 93       	st	X, r24
    1ebe:	2a c0       	rjmp	.+84     	; 0x1f14 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTC:
						TOGGLE_BIT(PORTC, pin);
    1ec0:	a5 e3       	ldi	r26, 0x35	; 53
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e5 e3       	ldi	r30, 0x35	; 53
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_togglePin+0xc8>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_togglePin+0xc4>
    1ee2:	84 27       	eor	r24, r20
    1ee4:	8c 93       	st	X, r24
    1ee6:	16 c0       	rjmp	.+44     	; 0x1f14 <DIO_togglePin+0xfe>
						break;
					case DIO_PORTD:
						TOGGLE_BIT(PORTD, pin);
    1ee8:	a2 e3       	ldi	r26, 0x32	; 50
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e2 e3       	ldi	r30, 0x32	; 50
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_togglePin+0xf0>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_togglePin+0xec>
    1f0a:	84 27       	eor	r24, r20
    1f0c:	8c 93       	st	X, r24
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <DIO_togglePin+0xfe>
						break;
					default:
						return E_OK;
    1f10:	1d 82       	std	Y+5, r1	; 0x05
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <DIO_togglePin+0x102>
				}
	}

	return E_NOK;
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	9d 83       	std	Y+5, r25	; 0x05
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <DIO_EnablePullup>:
 * @return STD_Return	: STD_Return for Error identification
 * 
 * 						  return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return DIO_EnablePullup(DIO_Ports_t PORT, u8 PIN, DIO_PullUpState_t Pullstate)
	{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	2e 97       	sbiw	r28, 0x0e	; 14
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	6a 83       	std	Y+2, r22	; 0x02
    1f42:	4b 83       	std	Y+3, r20	; 0x03
		if(PIN>MAX_PinNum)
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	88 30       	cpi	r24, 0x08	; 8
    1f48:	10 f0       	brcs	.+4      	; 0x1f4e <DIO_EnablePullup+0x24>
			{
				return E_OK;
    1f4a:	1e 86       	std	Y+14, r1	; 0x0e
    1f4c:	26 c1       	rjmp	.+588    	; 0x219a <DIO_EnablePullup+0x270>
			}
		else
			{
				switch(PORT)
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	3d 87       	std	Y+13, r19	; 0x0d
    1f56:	2c 87       	std	Y+12, r18	; 0x0c
    1f58:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	91 05       	cpc	r25, r1
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <DIO_EnablePullup+0x3a>
    1f62:	57 c0       	rjmp	.+174    	; 0x2012 <DIO_EnablePullup+0xe8>
    1f64:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f66:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f68:	22 30       	cpi	r18, 0x02	; 2
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <DIO_EnablePullup+0x4e>
    1f6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f70:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	71 f0       	breq	.+28     	; 0x1f92 <DIO_EnablePullup+0x68>
    1f76:	0d c1       	rjmp	.+538    	; 0x2192 <DIO_EnablePullup+0x268>
    1f78:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f7a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f7c:	22 30       	cpi	r18, 0x02	; 2
    1f7e:	31 05       	cpc	r19, r1
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <DIO_EnablePullup+0x5a>
    1f82:	87 c0       	rjmp	.+270    	; 0x2092 <DIO_EnablePullup+0x168>
    1f84:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f86:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f88:	83 30       	cpi	r24, 0x03	; 3
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <DIO_EnablePullup+0x66>
    1f8e:	c1 c0       	rjmp	.+386    	; 0x2112 <DIO_EnablePullup+0x1e8>
    1f90:	00 c1       	rjmp	.+512    	; 0x2192 <DIO_EnablePullup+0x268>
				{
					case DIO_PORTA:
						switch(Pullstate)
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	3b 87       	std	Y+11, r19	; 0x0b
    1f9a:	2a 87       	std	Y+10, r18	; 0x0a
    1f9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	31 f0       	breq	.+12     	; 0x1fb0 <DIO_EnablePullup+0x86>
    1fa4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fa6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1fa8:	21 30       	cpi	r18, 0x01	; 1
    1faa:	31 05       	cpc	r19, r1
    1fac:	41 f1       	breq	.+80     	; 0x1ffe <DIO_EnablePullup+0xd4>
    1fae:	2f c0       	rjmp	.+94     	; 0x200e <DIO_EnablePullup+0xe4>
							{
								case ENABLE_PullUp:
									CLEAR_BIT(DDRA,PIN);
    1fb0:	aa e3       	ldi	r26, 0x3A	; 58
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	ea e3       	ldi	r30, 0x3A	; 58
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <DIO_EnablePullup+0xa2>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	2a 95       	dec	r18
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <DIO_EnablePullup+0x9e>
    1fd0:	80 95       	com	r24
    1fd2:	84 23       	and	r24, r20
    1fd4:	8c 93       	st	X, r24
									SET_BIT(PORTA,PIN);
    1fd6:	ab e3       	ldi	r26, 0x3B	; 59
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	eb e3       	ldi	r30, 0x3B	; 59
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <DIO_EnablePullup+0xca>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <DIO_EnablePullup+0xc6>
    1ff8:	84 2b       	or	r24, r20
    1ffa:	8c 93       	st	X, r24
    1ffc:	cc c0       	rjmp	.+408    	; 0x2196 <DIO_EnablePullup+0x26c>
									break;
								case DISABLE_PullUp:
									SET_BIT(SFIOR,PUD);
    1ffe:	a0 e5       	ldi	r26, 0x50	; 80
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e0 e5       	ldi	r30, 0x50	; 80
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	84 60       	ori	r24, 0x04	; 4
    200a:	8c 93       	st	X, r24
    200c:	c4 c0       	rjmp	.+392    	; 0x2196 <DIO_EnablePullup+0x26c>
									break;
								default:
									return E_OK;
    200e:	1e 86       	std	Y+14, r1	; 0x0e
    2010:	c4 c0       	rjmp	.+392    	; 0x219a <DIO_EnablePullup+0x270>
							}
						break;
						case DIO_PORTB:
							switch(Pullstate)
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	39 87       	std	Y+9, r19	; 0x09
    201a:	28 87       	std	Y+8, r18	; 0x08
    201c:	88 85       	ldd	r24, Y+8	; 0x08
    201e:	99 85       	ldd	r25, Y+9	; 0x09
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	31 f0       	breq	.+12     	; 0x2030 <DIO_EnablePullup+0x106>
    2024:	28 85       	ldd	r18, Y+8	; 0x08
    2026:	39 85       	ldd	r19, Y+9	; 0x09
    2028:	21 30       	cpi	r18, 0x01	; 1
    202a:	31 05       	cpc	r19, r1
    202c:	41 f1       	breq	.+80     	; 0x207e <DIO_EnablePullup+0x154>
    202e:	2f c0       	rjmp	.+94     	; 0x208e <DIO_EnablePullup+0x164>
								{
									case ENABLE_PullUp:
										CLEAR_BIT(DDRB,PIN);
    2030:	a7 e3       	ldi	r26, 0x37	; 55
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e7 e3       	ldi	r30, 0x37	; 55
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	48 2f       	mov	r20, r24
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	02 c0       	rjmp	.+4      	; 0x204c <DIO_EnablePullup+0x122>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	2a 95       	dec	r18
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <DIO_EnablePullup+0x11e>
    2050:	80 95       	com	r24
    2052:	84 23       	and	r24, r20
    2054:	8c 93       	st	X, r24
										SET_BIT(PORTB,PIN);
    2056:	a8 e3       	ldi	r26, 0x38	; 56
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e8 e3       	ldi	r30, 0x38	; 56
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	48 2f       	mov	r20, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <DIO_EnablePullup+0x14a>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <DIO_EnablePullup+0x146>
    2078:	84 2b       	or	r24, r20
    207a:	8c 93       	st	X, r24
    207c:	8c c0       	rjmp	.+280    	; 0x2196 <DIO_EnablePullup+0x26c>
										break;
									case DISABLE_PullUp:
										SET_BIT(SFIOR,PUD);
    207e:	a0 e5       	ldi	r26, 0x50	; 80
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e0 e5       	ldi	r30, 0x50	; 80
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	84 60       	ori	r24, 0x04	; 4
    208a:	8c 93       	st	X, r24
    208c:	84 c0       	rjmp	.+264    	; 0x2196 <DIO_EnablePullup+0x26c>
										break;
									default:
										return E_OK;
    208e:	1e 86       	std	Y+14, r1	; 0x0e
    2090:	84 c0       	rjmp	.+264    	; 0x219a <DIO_EnablePullup+0x270>
								}
							break;
							case DIO_PORTC:
								switch(Pullstate)
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	3f 83       	std	Y+7, r19	; 0x07
    209a:	2e 83       	std	Y+6, r18	; 0x06
    209c:	8e 81       	ldd	r24, Y+6	; 0x06
    209e:	9f 81       	ldd	r25, Y+7	; 0x07
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	31 f0       	breq	.+12     	; 0x20b0 <DIO_EnablePullup+0x186>
    20a4:	2e 81       	ldd	r18, Y+6	; 0x06
    20a6:	3f 81       	ldd	r19, Y+7	; 0x07
    20a8:	21 30       	cpi	r18, 0x01	; 1
    20aa:	31 05       	cpc	r19, r1
    20ac:	41 f1       	breq	.+80     	; 0x20fe <DIO_EnablePullup+0x1d4>
    20ae:	2f c0       	rjmp	.+94     	; 0x210e <DIO_EnablePullup+0x1e4>
									{
										case ENABLE_PullUp:
											CLEAR_BIT(DDRC,PIN);
    20b0:	a4 e3       	ldi	r26, 0x34	; 52
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e4 e3       	ldi	r30, 0x34	; 52
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	48 2f       	mov	r20, r24
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <DIO_EnablePullup+0x1a2>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	2a 95       	dec	r18
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <DIO_EnablePullup+0x19e>
    20d0:	80 95       	com	r24
    20d2:	84 23       	and	r24, r20
    20d4:	8c 93       	st	X, r24
											SET_BIT(PORTC,PIN);
    20d6:	a5 e3       	ldi	r26, 0x35	; 53
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e5 e3       	ldi	r30, 0x35	; 53
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	48 2f       	mov	r20, r24
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	02 2e       	mov	r0, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <DIO_EnablePullup+0x1ca>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	0a 94       	dec	r0
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <DIO_EnablePullup+0x1c6>
    20f8:	84 2b       	or	r24, r20
    20fa:	8c 93       	st	X, r24
    20fc:	4c c0       	rjmp	.+152    	; 0x2196 <DIO_EnablePullup+0x26c>
											break;
										case DISABLE_PullUp:
											SET_BIT(SFIOR,PUD);
    20fe:	a0 e5       	ldi	r26, 0x50	; 80
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e0 e5       	ldi	r30, 0x50	; 80
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	84 60       	ori	r24, 0x04	; 4
    210a:	8c 93       	st	X, r24
    210c:	44 c0       	rjmp	.+136    	; 0x2196 <DIO_EnablePullup+0x26c>
											break;
										default:
											return E_OK;
    210e:	1e 86       	std	Y+14, r1	; 0x0e
    2110:	44 c0       	rjmp	.+136    	; 0x219a <DIO_EnablePullup+0x270>
									}
								break;
								case DIO_PORTD:
									switch(Pullstate)
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	3d 83       	std	Y+5, r19	; 0x05
    211a:	2c 83       	std	Y+4, r18	; 0x04
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	9d 81       	ldd	r25, Y+5	; 0x05
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	31 f0       	breq	.+12     	; 0x2130 <DIO_EnablePullup+0x206>
    2124:	2c 81       	ldd	r18, Y+4	; 0x04
    2126:	3d 81       	ldd	r19, Y+5	; 0x05
    2128:	21 30       	cpi	r18, 0x01	; 1
    212a:	31 05       	cpc	r19, r1
    212c:	41 f1       	breq	.+80     	; 0x217e <DIO_EnablePullup+0x254>
    212e:	2f c0       	rjmp	.+94     	; 0x218e <DIO_EnablePullup+0x264>
										{
											case ENABLE_PullUp:
												CLEAR_BIT(DDRD,PIN);
    2130:	a1 e3       	ldi	r26, 0x31	; 49
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e1 e3       	ldi	r30, 0x31	; 49
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	48 2f       	mov	r20, r24
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	02 c0       	rjmp	.+4      	; 0x214c <DIO_EnablePullup+0x222>
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	2a 95       	dec	r18
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <DIO_EnablePullup+0x21e>
    2150:	80 95       	com	r24
    2152:	84 23       	and	r24, r20
    2154:	8c 93       	st	X, r24
												SET_BIT(PORTD,PIN);
    2156:	a2 e3       	ldi	r26, 0x32	; 50
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e2 e3       	ldi	r30, 0x32	; 50
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	48 2f       	mov	r20, r24
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	02 2e       	mov	r0, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <DIO_EnablePullup+0x24a>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	0a 94       	dec	r0
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <DIO_EnablePullup+0x246>
    2178:	84 2b       	or	r24, r20
    217a:	8c 93       	st	X, r24
    217c:	0c c0       	rjmp	.+24     	; 0x2196 <DIO_EnablePullup+0x26c>
												break;
											case DISABLE_PullUp:
												SET_BIT(SFIOR,PUD);
    217e:	a0 e5       	ldi	r26, 0x50	; 80
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e0 e5       	ldi	r30, 0x50	; 80
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	84 60       	ori	r24, 0x04	; 4
    218a:	8c 93       	st	X, r24
    218c:	04 c0       	rjmp	.+8      	; 0x2196 <DIO_EnablePullup+0x26c>
												break;
											default:
												return E_OK;
    218e:	1e 86       	std	Y+14, r1	; 0x0e
    2190:	04 c0       	rjmp	.+8      	; 0x219a <DIO_EnablePullup+0x270>
										}
									break;
									default:
									return E_OK;
    2192:	1e 86       	std	Y+14, r1	; 0x0e
    2194:	02 c0       	rjmp	.+4      	; 0x219a <DIO_EnablePullup+0x270>

				}
			}
		return E_NOK;
    2196:	31 e0       	ldi	r19, 0x01	; 1
    2198:	3e 87       	std	Y+14, r19	; 0x0e
    219a:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
    219c:	2e 96       	adiw	r28, 0x0e	; 14
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <ADC_Init>:
 * @param   	void 	:  		has no input paramater
 * @return  	void 	:		Return nothing
 */
 /*****************************************************************************************************/
STD_Return ADC_Init(ADC__State_t State)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <ADC_Init+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <ADC_Init+0x8>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	89 83       	std	Y+1, r24	; 0x01
	//Resolution Selection
	#if defined Resolution_8_Bit
	SET_BIT(ADMUX,ADLAR);
	#elif defined Resolution_10_Bit
	CLEAR_BIT(ADMUX,ADLAR);
    21bc:	a7 e2       	ldi	r26, 0x27	; 39
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e7 e2       	ldi	r30, 0x27	; 39
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	8f 7d       	andi	r24, 0xDF	; 223
    21c8:	8c 93       	st	X, r24
	//Voltage Reference Selection
	#if defined AREF_Internal_VREF
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
	#elif defined AREF_External_VREF
	SET_BIT(ADMUX,REFS0);
    21ca:	a7 e2       	ldi	r26, 0x27	; 39
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e7 e2       	ldi	r30, 0x27	; 39
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	80 64       	ori	r24, 0x40	; 64
    21d6:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    21d8:	a7 e2       	ldi	r26, 0x27	; 39
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e7 e2       	ldi	r30, 0x27	; 39
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	8f 77       	andi	r24, 0x7F	; 127
    21e4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_64
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	#elif defined ADC_Prescaler_128
		SET_BIT(ADCSRA,ADPS0);
    21e6:	a6 e2       	ldi	r26, 0x26	; 38
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e6 e2       	ldi	r30, 0x26	; 38
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	81 60       	ori	r24, 0x01	; 1
    21f2:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    21f4:	a6 e2       	ldi	r26, 0x26	; 38
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e6 e2       	ldi	r30, 0x26	; 38
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	82 60       	ori	r24, 0x02	; 2
    2200:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    2202:	a6 e2       	ldi	r26, 0x26	; 38
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e6 e2       	ldi	r30, 0x26	; 38
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	84 60       	ori	r24, 0x04	; 4
    220e:	8c 93       	st	X, r24
	#endif
	switch (State)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3c 83       	std	Y+4, r19	; 0x04
    2218:	2b 83       	std	Y+3, r18	; 0x03
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	31 f0       	breq	.+12     	; 0x222e <ADC_Init+0x80>
    2222:	2b 81       	ldd	r18, Y+3	; 0x03
    2224:	3c 81       	ldd	r19, Y+4	; 0x04
    2226:	21 30       	cpi	r18, 0x01	; 1
    2228:	31 05       	cpc	r19, r1
    222a:	49 f0       	breq	.+18     	; 0x223e <ADC_Init+0x90>
    222c:	10 c0       	rjmp	.+32     	; 0x224e <ADC_Init+0xa0>
		{
			case ADC_ENABLE:
				SET_BIT(ADCSRA,ADEN);
    222e:	a6 e2       	ldi	r26, 0x26	; 38
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e6 e2       	ldi	r30, 0x26	; 38
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	80 68       	ori	r24, 0x80	; 128
    223a:	8c 93       	st	X, r24
    223c:	0a c0       	rjmp	.+20     	; 0x2252 <ADC_Init+0xa4>
				break;
			case ADC_DISABLE:
				CLEAR_BIT(ADCSRA,ADEN);
    223e:	a6 e2       	ldi	r26, 0x26	; 38
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e6 e2       	ldi	r30, 0x26	; 38
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8f 77       	andi	r24, 0x7F	; 127
    224a:	8c 93       	st	X, r24
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <ADC_Init+0xa4>
				break;
			default:
				return E_OK;
    224e:	1a 82       	std	Y+2, r1	; 0x02
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <ADC_Init+0xa8>
		}
		return E_NOK;
    2252:	31 e0       	ldi	r19, 0x01	; 1
    2254:	3a 83       	std	Y+2, r19	; 0x02
    2256:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <ADC_SetInterrupt_Enable>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 */
STD_Return ADC_SetInterrupt_Enable(ADC_Interrupt_State_t State)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <ADC_SetInterrupt_Enable+0x6>
    226c:	00 d0       	rcall	.+0      	; 0x226e <ADC_SetInterrupt_Enable+0x8>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	89 83       	std	Y+1, r24	; 0x01
	switch (State)
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	3c 83       	std	Y+4, r19	; 0x04
    227c:	2b 83       	std	Y+3, r18	; 0x03
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	31 f0       	breq	.+12     	; 0x2292 <ADC_SetInterrupt_Enable+0x2c>
    2286:	2b 81       	ldd	r18, Y+3	; 0x03
    2288:	3c 81       	ldd	r19, Y+4	; 0x04
    228a:	21 30       	cpi	r18, 0x01	; 1
    228c:	31 05       	cpc	r19, r1
    228e:	49 f0       	breq	.+18     	; 0x22a2 <ADC_SetInterrupt_Enable+0x3c>
    2290:	10 c0       	rjmp	.+32     	; 0x22b2 <ADC_SetInterrupt_Enable+0x4c>
	{
		case ADC_Interrupt_ENABLE:
			SET_BIT(ADCSRA,ADIE);
    2292:	a6 e2       	ldi	r26, 0x26	; 38
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e6 e2       	ldi	r30, 0x26	; 38
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	88 60       	ori	r24, 0x08	; 8
    229e:	8c 93       	st	X, r24
    22a0:	0a c0       	rjmp	.+20     	; 0x22b6 <ADC_SetInterrupt_Enable+0x50>
			break;
		case ADC_Interrupt_DISABLE:
			CLEAR_BIT(ADCSRA,ADIE);
    22a2:	a6 e2       	ldi	r26, 0x26	; 38
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e6 e2       	ldi	r30, 0x26	; 38
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	87 7f       	andi	r24, 0xF7	; 247
    22ae:	8c 93       	st	X, r24
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <ADC_SetInterrupt_Enable+0x50>
			break;
		default:
			return E_OK;
    22b2:	1a 82       	std	Y+2, r1	; 0x02
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <ADC_SetInterrupt_Enable+0x54>
	}
	return E_NOK;
    22b6:	31 e0       	ldi	r19, 0x01	; 1
    22b8:	3a 83       	std	Y+2, r19	; 0x02
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <ADC_Start_conversion>:
 * @return STD_Return	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Start_conversion(u8 channel)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <ADC_Start_conversion+0x6>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	89 83       	std	Y+1, r24	; 0x01
	if (channel>MaxPinNum)
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	88 30       	cpi	r24, 0x08	; 8
    22da:	10 f0       	brcs	.+4      	; 0x22e0 <ADC_Start_conversion+0x16>
	{
		return E_OK;
    22dc:	1a 82       	std	Y+2, r1	; 0x02
    22de:	21 c0       	rjmp	.+66     	; 0x2322 <ADC_Start_conversion+0x58>
	}
	else
	{

			//Mask for non used bits of the 8 bits of the Regsiter
			ADMUX &= Unselected_Channel_MASK;
    22e0:	a7 e2       	ldi	r26, 0x27	; 39
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e7 e2       	ldi	r30, 0x27	; 39
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	88 7f       	andi	r24, 0xF8	; 248
    22ec:	8c 93       	st	X, r24

			//Mask for the usage 3 bits of the 8 bits
			ADMUX |= channel;
    22ee:	a7 e2       	ldi	r26, 0x27	; 39
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e7 e2       	ldi	r30, 0x27	; 39
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	90 81       	ld	r25, Z
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	89 2b       	or	r24, r25
    22fc:	8c 93       	st	X, r24

			//Set the AdcStartConversion
			SET_BIT(ADCSRA,ADSC);
    22fe:	a6 e2       	ldi	r26, 0x26	; 38
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e6 e2       	ldi	r30, 0x26	; 38
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	80 64       	ori	r24, 0x40	; 64
    230a:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA,ADSC) == 1);
    230c:	e6 e2       	ldi	r30, 0x26	; 38
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	80 74       	andi	r24, 0x40	; 64
    2318:	90 70       	andi	r25, 0x00	; 0
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	b9 f7       	brne	.-18     	; 0x230c <ADC_Start_conversion+0x42>
		 //Wait conversion to finish
	}
	return E_NOK;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	8a 83       	std	Y+2, r24	; 0x02
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <ADC_Get_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Get_Value(u16 *AdcResult)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <ADC_Get_Value+0x6>
    2334:	00 d0       	rcall	.+0      	; 0x2336 <ADC_Get_Value+0x8>
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03
		u16 AdcResult_Temp=0;
    233e:	1a 82       	std	Y+2, r1	; 0x02
    2340:	19 82       	std	Y+1, r1	; 0x01
	#if defined Resolution_8_Bit
		*AdcResult=ADCH;
	#elif defined Resolution_10_Bit
		AdcResult_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    2342:	e4 e2       	ldi	r30, 0x24	; 36
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	e5 e2       	ldi	r30, 0x25	; 37
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	88 2f       	mov	r24, r24
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	98 2f       	mov	r25, r24
    2358:	88 27       	eor	r24, r24
    235a:	82 0f       	add	r24, r18
    235c:	93 1f       	adc	r25, r19
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
		*AdcResult = (AdcResult_Temp & Resolution_10Bit_MASK);//Mask higher bits in ADCH and read only the 10 bits for the ADC
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	93 70       	andi	r25, 0x03	; 3
    2368:	eb 81       	ldd	r30, Y+3	; 0x03
    236a:	fc 81       	ldd	r31, Y+4	; 0x04
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	80 83       	st	Z, r24
	#endif
		return E_NOK;
    2370:	81 e0       	ldi	r24, 0x01	; 1
}
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <ADC_Read_Value>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_Read_Value(u8 channel,u16 *AdcValue)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <ADC_Read_Value+0x6>
    2386:	00 d0       	rcall	.+0      	; 0x2388 <ADC_Read_Value+0x8>
    2388:	00 d0       	rcall	.+0      	; 0x238a <ADC_Read_Value+0xa>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	8b 83       	std	Y+3, r24	; 0x03
    2390:	7d 83       	std	Y+5, r23	; 0x05
    2392:	6c 83       	std	Y+4, r22	; 0x04
	u16 AdcValue_Temp=0;
    2394:	1a 82       	std	Y+2, r1	; 0x02
    2396:	19 82       	std	Y+1, r1	; 0x01
	if (channel>MaxPinNum)
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	88 30       	cpi	r24, 0x08	; 8
    239c:	c0 f0       	brcs	.+48     	; 0x23ce <ADC_Read_Value+0x4e>
		{
			return E_OK;
    239e:	1e 82       	std	Y+6, r1	; 0x06
    23a0:	38 c0       	rjmp	.+112    	; 0x2412 <ADC_Read_Value+0x92>
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
			{
				//Mask for non used bits of the 8 bits of the Regsiter
				ADMUX &= Unselected_Channel_MASK;
    23a2:	a7 e2       	ldi	r26, 0x27	; 39
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e7 e2       	ldi	r30, 0x27	; 39
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	88 7f       	andi	r24, 0xF8	; 248
    23ae:	8c 93       	st	X, r24

				//Mask for the usage 3 bits of the 8 bits
				ADMUX |= channel;
    23b0:	a7 e2       	ldi	r26, 0x27	; 39
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e7 e2       	ldi	r30, 0x27	; 39
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	90 81       	ld	r25, Z
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	89 2b       	or	r24, r25
    23be:	8c 93       	st	X, r24

				//Set the AdcStartConversion
				SET_BIT(ADCSRA,ADSC);
    23c0:	a6 e2       	ldi	r26, 0x26	; 38
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e6 e2       	ldi	r30, 0x26	; 38
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	80 64       	ori	r24, 0x40	; 64
    23cc:	8c 93       	st	X, r24
		}
		else
		{
			 // combine between start conversion and get value

			while(GET_BIT(ADCSRA,ADSC) == 1)
    23ce:	e6 e2       	ldi	r30, 0x26	; 38
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	80 74       	andi	r24, 0x40	; 64
    23da:	90 70       	andi	r25, 0x00	; 0
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	09 f7       	brne	.-62     	; 0x23a2 <ADC_Read_Value+0x22>
			//return the read value

			#if defined Resolution_8_Bit
				*AdcValue=ADCH;
			#elif defined Resolution_10_Bit
				AdcValue_Temp= ADCL + (ADCH<<8); //Get the values of the two ADC registers
    23e0:	e4 e2       	ldi	r30, 0x24	; 36
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	e5 e2       	ldi	r30, 0x25	; 37
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	98 2f       	mov	r25, r24
    23f6:	88 27       	eor	r24, r24
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
				*AdcValue = (AdcValue_Temp & Resolution_10Bit_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	93 70       	andi	r25, 0x03	; 3
    2406:	ec 81       	ldd	r30, Y+4	; 0x04
    2408:	fd 81       	ldd	r31, Y+5	; 0x05
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	80 83       	st	Z, r24
			#endif
		}
	return E_NOK;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	8e 83       	std	Y+6, r24	; 0x06
    2412:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2414:	26 96       	adiw	r28, 0x06	; 6
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <ADC_ReadVolt>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return ADC_ReadVolt (u8 channel,f32 *AdcVolt)
	{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <ADC_ReadVolt+0x6>
    242c:	00 d0       	rcall	.+0      	; 0x242e <ADC_ReadVolt+0x8>
    242e:	00 d0       	rcall	.+0      	; 0x2430 <ADC_ReadVolt+0xa>
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	8b 83       	std	Y+3, r24	; 0x03
    2436:	7d 83       	std	Y+5, r23	; 0x05
    2438:	6c 83       	std	Y+4, r22	; 0x04
		u16 AdcValue_Temp=0;
    243a:	1a 82       	std	Y+2, r1	; 0x02
    243c:	19 82       	std	Y+1, r1	; 0x01
		if(channel>MaxPinNum)
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	88 30       	cpi	r24, 0x08	; 8
    2442:	10 f0       	brcs	.+4      	; 0x2448 <ADC_ReadVolt+0x22>
			{
				return E_OK;
    2444:	1e 82       	std	Y+6, r1	; 0x06
    2446:	2e c0       	rjmp	.+92     	; 0x24a4 <ADC_ReadVolt+0x7e>
			}
		else
			{
				ADC_Read_Value(channel,&AdcValue_Temp);
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9e 01       	movw	r18, r28
    244c:	2f 5f       	subi	r18, 0xFF	; 255
    244e:	3f 4f       	sbci	r19, 0xFF	; 255
    2450:	b9 01       	movw	r22, r18
    2452:	0e 94 c0 11 	call	0x2380	; 0x2380 <ADC_Read_Value>
				*AdcVolt= (((f32)AdcValue_Temp)*((f32)VREF))/((f32)(ADC_MAX));
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	cc 01       	movw	r24, r24
    245c:	a0 e0       	ldi	r26, 0x00	; 0
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 ea       	ldi	r20, 0xA0	; 160
    2476:	50 e4       	ldi	r21, 0x40	; 64
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	54 e4       	ldi	r21, 0x44	; 68
    248c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	ec 81       	ldd	r30, Y+4	; 0x04
    2496:	fd 81       	ldd	r31, Y+5	; 0x05
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
			}
		return E_NOK;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	8e 83       	std	Y+6, r24	; 0x06
    24a4:	8e 81       	ldd	r24, Y+6	; 0x06
	}
    24a6:	26 96       	adiw	r28, 0x06	; 6
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <ADC_CallBack>:
 * 
 * @param func_ptr 		 :		pointer to function that points to the user/ External function
 * @return void			 : 		return nothing
 **/
void ADC_CallBack(void (*func_ptr)(void))
	{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	00 d0       	rcall	.+0      	; 0x24be <ADC_CallBack+0x6>
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
		User_Function = func_ptr;
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	90 93 a5 01 	sts	0x01A5, r25
    24ce:	80 93 a4 01 	sts	0x01A4, r24
	}
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <__vector_16>:
/*********************************ISR ADC Vector******************************************************/
ISR(ADC_Vect)
{
    24dc:	1f 92       	push	r1
    24de:	0f 92       	push	r0
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	0f 92       	push	r0
    24e4:	11 24       	eor	r1, r1
    24e6:	2f 93       	push	r18
    24e8:	3f 93       	push	r19
    24ea:	4f 93       	push	r20
    24ec:	5f 93       	push	r21
    24ee:	6f 93       	push	r22
    24f0:	7f 93       	push	r23
    24f2:	8f 93       	push	r24
    24f4:	9f 93       	push	r25
    24f6:	af 93       	push	r26
    24f8:	bf 93       	push	r27
    24fa:	ef 93       	push	r30
    24fc:	ff 93       	push	r31
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
	(*User_Function)();
    2506:	e0 91 a4 01 	lds	r30, 0x01A4
    250a:	f0 91 a5 01 	lds	r31, 0x01A5
    250e:	09 95       	icall
}
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	ff 91       	pop	r31
    2516:	ef 91       	pop	r30
    2518:	bf 91       	pop	r27
    251a:	af 91       	pop	r26
    251c:	9f 91       	pop	r25
    251e:	8f 91       	pop	r24
    2520:	7f 91       	pop	r23
    2522:	6f 91       	pop	r22
    2524:	5f 91       	pop	r21
    2526:	4f 91       	pop	r20
    2528:	3f 91       	pop	r19
    252a:	2f 91       	pop	r18
    252c:	0f 90       	pop	r0
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	0f 90       	pop	r0
    2532:	1f 90       	pop	r1
    2534:	18 95       	reti

00002536 <TimingSelection>:
 * @param TYPE 						: takes the sevensegment types CommonAnode/CommonCathode
 * @param Time 						: take which time will activated Sec01/Sec10/Min01/Min10			
 * @return STD_Return 
 */
STD_Return TimingSelection(u8 StopWatch_ControlPort,SevenSegment_Type_t TYPE,SevenSegment_Sel_t Time)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	2a 97       	sbiw	r28, 0x0a	; 10
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	6a 83       	std	Y+2, r22	; 0x02
    254e:	4b 83       	std	Y+3, r20	; 0x03
	#ifdef StopWatch_ControlPort_A
	switch(TYPE)
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	3a 87       	std	Y+10, r19	; 0x0a
    2558:	29 87       	std	Y+9, r18	; 0x09
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	39 f0       	breq	.+14     	; 0x2570 <TimingSelection+0x3a>
    2562:	29 85       	ldd	r18, Y+9	; 0x09
    2564:	3a 85       	ldd	r19, Y+10	; 0x0a
    2566:	21 30       	cpi	r18, 0x01	; 1
    2568:	31 05       	cpc	r19, r1
    256a:	09 f4       	brne	.+2      	; 0x256e <TimingSelection+0x38>
    256c:	77 c0       	rjmp	.+238    	; 0x265c <TimingSelection+0x126>
    256e:	ec c0       	rjmp	.+472    	; 0x2748 <TimingSelection+0x212>
	{
		case CommonCathod:
			switch(Time)
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	38 87       	std	Y+8, r19	; 0x08
    2578:	2f 83       	std	Y+7, r18	; 0x07
    257a:	8f 81       	ldd	r24, Y+7	; 0x07
    257c:	98 85       	ldd	r25, Y+8	; 0x08
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	91 05       	cpc	r25, r1
    2582:	59 f1       	breq	.+86     	; 0x25da <TimingSelection+0xa4>
    2584:	2f 81       	ldd	r18, Y+7	; 0x07
    2586:	38 85       	ldd	r19, Y+8	; 0x08
    2588:	22 30       	cpi	r18, 0x02	; 2
    258a:	31 05       	cpc	r19, r1
    258c:	2c f4       	brge	.+10     	; 0x2598 <TimingSelection+0x62>
    258e:	8f 81       	ldd	r24, Y+7	; 0x07
    2590:	98 85       	ldd	r25, Y+8	; 0x08
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	69 f0       	breq	.+26     	; 0x25b0 <TimingSelection+0x7a>
    2596:	60 c0       	rjmp	.+192    	; 0x2658 <TimingSelection+0x122>
    2598:	2f 81       	ldd	r18, Y+7	; 0x07
    259a:	38 85       	ldd	r19, Y+8	; 0x08
    259c:	22 30       	cpi	r18, 0x02	; 2
    259e:	31 05       	cpc	r19, r1
    25a0:	89 f1       	breq	.+98     	; 0x2604 <TimingSelection+0xce>
    25a2:	8f 81       	ldd	r24, Y+7	; 0x07
    25a4:	98 85       	ldd	r25, Y+8	; 0x08
    25a6:	83 30       	cpi	r24, 0x03	; 3
    25a8:	91 05       	cpc	r25, r1
    25aa:	09 f4       	brne	.+2      	; 0x25ae <TimingSelection+0x78>
    25ac:	40 c0       	rjmp	.+128    	; 0x262e <TimingSelection+0xf8>
    25ae:	54 c0       	rjmp	.+168    	; 0x2658 <TimingSelection+0x122>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    25d8:	b9 c0       	rjmp	.+370    	; 0x274c <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	61 e0       	ldi	r22, 0x01	; 1
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2602:	a4 c0       	rjmp	.+328    	; 0x274c <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	41 e0       	ldi	r20, 0x01	; 1
    260a:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	41 e0       	ldi	r20, 0x01	; 1
    2614:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	41 e0       	ldi	r20, 0x01	; 1
    261e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	61 e0       	ldi	r22, 0x01	; 1
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    262c:	8f c0       	rjmp	.+286    	; 0x274c <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	61 e0       	ldi	r22, 0x01	; 1
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	61 e0       	ldi	r22, 0x01	; 1
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2656:	7a c0       	rjmp	.+244    	; 0x274c <TimingSelection+0x216>
						break;
					default: return E_OK;
    2658:	1e 82       	std	Y+6, r1	; 0x06
    265a:	7a c0       	rjmp	.+244    	; 0x2750 <TimingSelection+0x21a>
				}
		break;
		case CommonAnode:
			switch(Time)
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	3d 83       	std	Y+5, r19	; 0x05
    2664:	2c 83       	std	Y+4, r18	; 0x04
    2666:	8c 81       	ldd	r24, Y+4	; 0x04
    2668:	9d 81       	ldd	r25, Y+5	; 0x05
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	91 05       	cpc	r25, r1
    266e:	59 f1       	breq	.+86     	; 0x26c6 <TimingSelection+0x190>
    2670:	2c 81       	ldd	r18, Y+4	; 0x04
    2672:	3d 81       	ldd	r19, Y+5	; 0x05
    2674:	22 30       	cpi	r18, 0x02	; 2
    2676:	31 05       	cpc	r19, r1
    2678:	2c f4       	brge	.+10     	; 0x2684 <TimingSelection+0x14e>
    267a:	8c 81       	ldd	r24, Y+4	; 0x04
    267c:	9d 81       	ldd	r25, Y+5	; 0x05
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f0       	breq	.+26     	; 0x269c <TimingSelection+0x166>
    2682:	60 c0       	rjmp	.+192    	; 0x2744 <TimingSelection+0x20e>
    2684:	2c 81       	ldd	r18, Y+4	; 0x04
    2686:	3d 81       	ldd	r19, Y+5	; 0x05
    2688:	22 30       	cpi	r18, 0x02	; 2
    268a:	31 05       	cpc	r19, r1
    268c:	89 f1       	breq	.+98     	; 0x26f0 <TimingSelection+0x1ba>
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	9d 81       	ldd	r25, Y+5	; 0x05
    2692:	83 30       	cpi	r24, 0x03	; 3
    2694:	91 05       	cpc	r25, r1
    2696:	09 f4       	brne	.+2      	; 0x269a <TimingSelection+0x164>
    2698:	40 c0       	rjmp	.+128    	; 0x271a <TimingSelection+0x1e4>
    269a:	54 c0       	rjmp	.+168    	; 0x2744 <TimingSelection+0x20e>
				{
					case Sec01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	61 e0       	ldi	r22, 0x01	; 1
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	61 e0       	ldi	r22, 0x01	; 1
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    26c4:	43 c0       	rjmp	.+134    	; 0x274c <TimingSelection+0x216>
						break;
					case Sec10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_LOW);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    26ee:	2e c0       	rjmp	.+92     	; 0x274c <TimingSelection+0x216>
						break;
					case Min01:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	61 e0       	ldi	r22, 0x01	; 1
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_LOW);
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_1,DIO_HIGH);
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	61 e0       	ldi	r22, 0x01	; 1
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2718:	19 c0       	rjmp	.+50     	; 0x274c <TimingSelection+0x216>
						break;
					case Min10:
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_0,DIO_OUTPUT);
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	60 e0       	ldi	r22, 0x00	; 0
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinDirection(StopWatch_ControlPort_A,Control_SEL_1,DIO_OUTPUT);
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						DIO_SetPinValue(StopWatch_ControlPort_A,Control_SEL_0,DIO_HIGH);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2742:	04 c0       	rjmp	.+8      	; 0x274c <TimingSelection+0x216>
						break;
					default: return E_OK;
    2744:	1e 82       	std	Y+6, r1	; 0x06
    2746:	04 c0       	rjmp	.+8      	; 0x2750 <TimingSelection+0x21a>
				}
		break;
		default:
		return E_OK;
    2748:	1e 82       	std	Y+6, r1	; 0x06
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <TimingSelection+0x21a>
			break;
			default:
			return E_OK;
		}
#endif
	return E_NOK;
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2752:	2a 96       	adiw	r28, 0x0a	; 10
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <SevenSegment_Display>:
 * @return STD_Return 	 :		STD_Return for Error identification
 * 
 * 								return 0 mean Error is found , return 1 mean Error is not found
 **/
STD_Return SevenSegment_Display(DIO_Ports_t PORT,SevenSegment_Type_t TYPE,Display_Number_t NUM)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	6e 97       	sbiw	r28, 0x1e	; 30
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	6a 83       	std	Y+2, r22	; 0x02
    277c:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT)
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	3e 8f       	std	Y+30, r19	; 0x1e
    2786:	2d 8f       	std	Y+29, r18	; 0x1d
    2788:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	91 05       	cpc	r25, r1
    2790:	09 f4       	brne	.+2      	; 0x2794 <SevenSegment_Display+0x30>
    2792:	4f c2       	rjmp	.+1182   	; 0x2c32 <SevenSegment_Display+0x4ce>
    2794:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2796:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2798:	22 30       	cpi	r18, 0x02	; 2
    279a:	31 05       	cpc	r19, r1
    279c:	34 f4       	brge	.+12     	; 0x27aa <SevenSegment_Display+0x46>
    279e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	81 f0       	breq	.+32     	; 0x27c6 <SevenSegment_Display+0x62>
    27a6:	0c 94 97 1c 	jmp	0x392e	; 0x392e <SevenSegment_Display+0x11ca>
    27aa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    27ac:	3e 8d       	ldd	r19, Y+30	; 0x1e
    27ae:	22 30       	cpi	r18, 0x02	; 2
    27b0:	31 05       	cpc	r19, r1
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <SevenSegment_Display+0x52>
    27b4:	68 c4       	rjmp	.+2256   	; 0x3086 <SevenSegment_Display+0x922>
    27b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ba:	83 30       	cpi	r24, 0x03	; 3
    27bc:	91 05       	cpc	r25, r1
    27be:	09 f4       	brne	.+2      	; 0x27c2 <SevenSegment_Display+0x5e>
    27c0:	8c c6       	rjmp	.+3352   	; 0x34da <SevenSegment_Display+0xd76>
    27c2:	0c 94 97 1c 	jmp	0x392e	; 0x392e <SevenSegment_Display+0x11ca>
	{
		case DIO_PORTA:
		switch(TYPE)
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	3c 8f       	std	Y+28, r19	; 0x1c
    27ce:	2b 8f       	std	Y+27, r18	; 0x1b
    27d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	39 f0       	breq	.+14     	; 0x27e6 <SevenSegment_Display+0x82>
    27d8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    27da:	3c 8d       	ldd	r19, Y+28	; 0x1c
    27dc:	21 30       	cpi	r18, 0x01	; 1
    27de:	31 05       	cpc	r19, r1
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <SevenSegment_Display+0x80>
    27e2:	18 c1       	rjmp	.+560    	; 0x2a14 <SevenSegment_Display+0x2b0>
    27e4:	24 c2       	rjmp	.+1096   	; 0x2c2e <SevenSegment_Display+0x4ca>
			{
				case CommonCathod:
					DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	6f ef       	ldi	r22, 0xFF	; 255
    27ea:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_LOW);
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	67 e0       	ldi	r22, 0x07	; 7
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
					switch(NUM)
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	3a 8f       	std	Y+26, r19	; 0x1a
    2800:	29 8f       	std	Y+25, r18	; 0x19
    2802:	89 8d       	ldd	r24, Y+25	; 0x19
    2804:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2806:	84 30       	cpi	r24, 0x04	; 4
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <SevenSegment_Display+0xaa>
    280c:	92 c0       	rjmp	.+292    	; 0x2932 <SevenSegment_Display+0x1ce>
    280e:	29 8d       	ldd	r18, Y+25	; 0x19
    2810:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2812:	25 30       	cpi	r18, 0x05	; 5
    2814:	31 05       	cpc	r19, r1
    2816:	ec f4       	brge	.+58     	; 0x2852 <SevenSegment_Display+0xee>
    2818:	89 8d       	ldd	r24, Y+25	; 0x19
    281a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    281c:	81 30       	cpi	r24, 0x01	; 1
    281e:	91 05       	cpc	r25, r1
    2820:	09 f4       	brne	.+2      	; 0x2824 <SevenSegment_Display+0xc0>
    2822:	4b c0       	rjmp	.+150    	; 0x28ba <SevenSegment_Display+0x156>
    2824:	29 8d       	ldd	r18, Y+25	; 0x19
    2826:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2828:	22 30       	cpi	r18, 0x02	; 2
    282a:	31 05       	cpc	r19, r1
    282c:	2c f4       	brge	.+10     	; 0x2838 <SevenSegment_Display+0xd4>
    282e:	89 8d       	ldd	r24, Y+25	; 0x19
    2830:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	99 f1       	breq	.+102    	; 0x289c <SevenSegment_Display+0x138>
    2836:	eb c0       	rjmp	.+470    	; 0x2a0e <SevenSegment_Display+0x2aa>
    2838:	29 8d       	ldd	r18, Y+25	; 0x19
    283a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    283c:	22 30       	cpi	r18, 0x02	; 2
    283e:	31 05       	cpc	r19, r1
    2840:	09 f4       	brne	.+2      	; 0x2844 <SevenSegment_Display+0xe0>
    2842:	4f c0       	rjmp	.+158    	; 0x28e2 <SevenSegment_Display+0x17e>
    2844:	89 8d       	ldd	r24, Y+25	; 0x19
    2846:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2848:	83 30       	cpi	r24, 0x03	; 3
    284a:	91 05       	cpc	r25, r1
    284c:	09 f4       	brne	.+2      	; 0x2850 <SevenSegment_Display+0xec>
    284e:	5d c0       	rjmp	.+186    	; 0x290a <SevenSegment_Display+0x1a6>
    2850:	de c0       	rjmp	.+444    	; 0x2a0e <SevenSegment_Display+0x2aa>
    2852:	29 8d       	ldd	r18, Y+25	; 0x19
    2854:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2856:	27 30       	cpi	r18, 0x07	; 7
    2858:	31 05       	cpc	r19, r1
    285a:	09 f4       	brne	.+2      	; 0x285e <SevenSegment_Display+0xfa>
    285c:	a6 c0       	rjmp	.+332    	; 0x29aa <SevenSegment_Display+0x246>
    285e:	89 8d       	ldd	r24, Y+25	; 0x19
    2860:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2862:	88 30       	cpi	r24, 0x08	; 8
    2864:	91 05       	cpc	r25, r1
    2866:	6c f4       	brge	.+26     	; 0x2882 <SevenSegment_Display+0x11e>
    2868:	29 8d       	ldd	r18, Y+25	; 0x19
    286a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    286c:	25 30       	cpi	r18, 0x05	; 5
    286e:	31 05       	cpc	r19, r1
    2870:	09 f4       	brne	.+2      	; 0x2874 <SevenSegment_Display+0x110>
    2872:	78 c0       	rjmp	.+240    	; 0x2964 <SevenSegment_Display+0x200>
    2874:	89 8d       	ldd	r24, Y+25	; 0x19
    2876:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2878:	86 30       	cpi	r24, 0x06	; 6
    287a:	91 05       	cpc	r25, r1
    287c:	09 f4       	brne	.+2      	; 0x2880 <SevenSegment_Display+0x11c>
    287e:	86 c0       	rjmp	.+268    	; 0x298c <SevenSegment_Display+0x228>
    2880:	c6 c0       	rjmp	.+396    	; 0x2a0e <SevenSegment_Display+0x2aa>
    2882:	29 8d       	ldd	r18, Y+25	; 0x19
    2884:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2886:	28 30       	cpi	r18, 0x08	; 8
    2888:	31 05       	cpc	r19, r1
    288a:	09 f4       	brne	.+2      	; 0x288e <SevenSegment_Display+0x12a>
    288c:	a7 c0       	rjmp	.+334    	; 0x29dc <SevenSegment_Display+0x278>
    288e:	89 8d       	ldd	r24, Y+25	; 0x19
    2890:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2892:	89 30       	cpi	r24, 0x09	; 9
    2894:	91 05       	cpc	r25, r1
    2896:	09 f4       	brne	.+2      	; 0x289a <SevenSegment_Display+0x136>
    2898:	ab c0       	rjmp	.+342    	; 0x29f0 <SevenSegment_Display+0x28c>
    289a:	b9 c0       	rjmp	.+370    	; 0x2a0e <SevenSegment_Display+0x2aa>
						{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	6f ef       	ldi	r22, 0xFF	; 255
    28a0:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	6f ef       	ldi	r22, 0xFF	; 255
    28a8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_LOW);
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	66 e0       	ldi	r22, 0x06	; 6
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    28b6:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	6f ef       	ldi	r22, 0xFF	; 255
    28be:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	60 e0       	ldi	r22, 0x00	; 0
    28c6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	62 e0       	ldi	r22, 0x02	; 2
    28d8:	41 e0       	ldi	r20, 0x01	; 1
    28da:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    28de:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	6f ef       	ldi	r22, 0xFF	; 255
    28e6:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	6f ef       	ldi	r22, 0xFF	; 255
    28ee:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	62 e0       	ldi	r22, 0x02	; 2
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	65 e0       	ldi	r22, 0x05	; 5
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2906:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	6f ef       	ldi	r22, 0xFF	; 255
    290e:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	6f ef       	ldi	r22, 0xFF	; 255
    2916:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	64 e0       	ldi	r22, 0x04	; 4
    291e:	40 e0       	ldi	r20, 0x00	; 0
    2920:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_LOW);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	65 e0       	ldi	r22, 0x05	; 5
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    292e:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	6f ef       	ldi	r22, 0xFF	; 255
    2936:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	6f ef       	ldi	r22, 0xFF	; 255
    293e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_LOW);
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	63 e0       	ldi	r22, 0x03	; 3
    2950:	40 e0       	ldi	r20, 0x00	; 0
    2952:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	64 e0       	ldi	r22, 0x04	; 4
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2960:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	6f ef       	ldi	r22, 0xFF	; 255
    2968:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	6f ef       	ldi	r22, 0xFF	; 255
    2970:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	64 e0       	ldi	r22, 0x04	; 4
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2988:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	6f ef       	ldi	r22, 0xFF	; 255
    2990:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	6f ef       	ldi	r22, 0xFF	; 255
    2998:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    29a6:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	6f ef       	ldi	r22, 0xFF	; 255
    29ae:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	60 e0       	ldi	r22, 0x00	; 0
    29b6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	41 e0       	ldi	r20, 0x01	; 1
    29ca:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	62 e0       	ldi	r22, 0x02	; 2
    29d2:	41 e0       	ldi	r20, 0x01	; 1
    29d4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    29d8:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	6f ef       	ldi	r22, 0xFF	; 255
    29e0:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	6f ef       	ldi	r22, 0xFF	; 255
    29e8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
    29ec:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	6f ef       	ldi	r22, 0xFF	; 255
    29f4:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	6f ef       	ldi	r22, 0xFF	; 255
    29fc:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_LOW);
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	64 e0       	ldi	r22, 0x04	; 4
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2a0a:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    2a0e:	18 8e       	std	Y+24, r1	; 0x18
    2a10:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <SevenSegment_Display+0x11d2>
					}
					break;
			case CommonAnode:
				DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	6f ef       	ldi	r22, 0xFF	; 255
    2a18:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
				DIO_SetPinValue(DIO_PORTA,Common_PIN,DIO_HIGH);
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	67 e0       	ldi	r22, 0x07	; 7
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
				switch(NUM)
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	28 2f       	mov	r18, r24
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	3f 8b       	std	Y+23, r19	; 0x17
    2a2e:	2e 8b       	std	Y+22, r18	; 0x16
    2a30:	8e 89       	ldd	r24, Y+22	; 0x16
    2a32:	9f 89       	ldd	r25, Y+23	; 0x17
    2a34:	84 30       	cpi	r24, 0x04	; 4
    2a36:	91 05       	cpc	r25, r1
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <SevenSegment_Display+0x2d8>
    2a3a:	8f c0       	rjmp	.+286    	; 0x2b5a <SevenSegment_Display+0x3f6>
    2a3c:	2e 89       	ldd	r18, Y+22	; 0x16
    2a3e:	3f 89       	ldd	r19, Y+23	; 0x17
    2a40:	25 30       	cpi	r18, 0x05	; 5
    2a42:	31 05       	cpc	r19, r1
    2a44:	ec f4       	brge	.+58     	; 0x2a80 <SevenSegment_Display+0x31c>
    2a46:	8e 89       	ldd	r24, Y+22	; 0x16
    2a48:	9f 89       	ldd	r25, Y+23	; 0x17
    2a4a:	81 30       	cpi	r24, 0x01	; 1
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <SevenSegment_Display+0x2ee>
    2a50:	4b c0       	rjmp	.+150    	; 0x2ae8 <SevenSegment_Display+0x384>
    2a52:	2e 89       	ldd	r18, Y+22	; 0x16
    2a54:	3f 89       	ldd	r19, Y+23	; 0x17
    2a56:	22 30       	cpi	r18, 0x02	; 2
    2a58:	31 05       	cpc	r19, r1
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <SevenSegment_Display+0x302>
    2a5c:	8e 89       	ldd	r24, Y+22	; 0x16
    2a5e:	9f 89       	ldd	r25, Y+23	; 0x17
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	99 f1       	breq	.+102    	; 0x2aca <SevenSegment_Display+0x366>
    2a64:	e2 c0       	rjmp	.+452    	; 0x2c2a <SevenSegment_Display+0x4c6>
    2a66:	2e 89       	ldd	r18, Y+22	; 0x16
    2a68:	3f 89       	ldd	r19, Y+23	; 0x17
    2a6a:	22 30       	cpi	r18, 0x02	; 2
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <SevenSegment_Display+0x30e>
    2a70:	4e c0       	rjmp	.+156    	; 0x2b0e <SevenSegment_Display+0x3aa>
    2a72:	8e 89       	ldd	r24, Y+22	; 0x16
    2a74:	9f 89       	ldd	r25, Y+23	; 0x17
    2a76:	83 30       	cpi	r24, 0x03	; 3
    2a78:	91 05       	cpc	r25, r1
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <SevenSegment_Display+0x31a>
    2a7c:	5b c0       	rjmp	.+182    	; 0x2b34 <SevenSegment_Display+0x3d0>
    2a7e:	d5 c0       	rjmp	.+426    	; 0x2c2a <SevenSegment_Display+0x4c6>
    2a80:	2e 89       	ldd	r18, Y+22	; 0x16
    2a82:	3f 89       	ldd	r19, Y+23	; 0x17
    2a84:	27 30       	cpi	r18, 0x07	; 7
    2a86:	31 05       	cpc	r19, r1
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <SevenSegment_Display+0x328>
    2a8a:	a0 c0       	rjmp	.+320    	; 0x2bcc <SevenSegment_Display+0x468>
    2a8c:	8e 89       	ldd	r24, Y+22	; 0x16
    2a8e:	9f 89       	ldd	r25, Y+23	; 0x17
    2a90:	88 30       	cpi	r24, 0x08	; 8
    2a92:	91 05       	cpc	r25, r1
    2a94:	6c f4       	brge	.+26     	; 0x2ab0 <SevenSegment_Display+0x34c>
    2a96:	2e 89       	ldd	r18, Y+22	; 0x16
    2a98:	3f 89       	ldd	r19, Y+23	; 0x17
    2a9a:	25 30       	cpi	r18, 0x05	; 5
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <SevenSegment_Display+0x33e>
    2aa0:	74 c0       	rjmp	.+232    	; 0x2b8a <SevenSegment_Display+0x426>
    2aa2:	8e 89       	ldd	r24, Y+22	; 0x16
    2aa4:	9f 89       	ldd	r25, Y+23	; 0x17
    2aa6:	86 30       	cpi	r24, 0x06	; 6
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <SevenSegment_Display+0x34a>
    2aac:	81 c0       	rjmp	.+258    	; 0x2bb0 <SevenSegment_Display+0x44c>
    2aae:	bd c0       	rjmp	.+378    	; 0x2c2a <SevenSegment_Display+0x4c6>
    2ab0:	2e 89       	ldd	r18, Y+22	; 0x16
    2ab2:	3f 89       	ldd	r19, Y+23	; 0x17
    2ab4:	28 30       	cpi	r18, 0x08	; 8
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <SevenSegment_Display+0x358>
    2aba:	a0 c0       	rjmp	.+320    	; 0x2bfc <SevenSegment_Display+0x498>
    2abc:	8e 89       	ldd	r24, Y+22	; 0x16
    2abe:	9f 89       	ldd	r25, Y+23	; 0x17
    2ac0:	89 30       	cpi	r24, 0x09	; 9
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <SevenSegment_Display+0x364>
    2ac6:	a3 c0       	rjmp	.+326    	; 0x2c0e <SevenSegment_Display+0x4aa>
    2ac8:	b0 c0       	rjmp	.+352    	; 0x2c2a <SevenSegment_Display+0x4c6>
					{
						case Zero:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	6f ef       	ldi	r22, 0xFF	; 255
    2ace:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	60 e0       	ldi	r22, 0x00	; 0
    2ad6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,G,DIO_HIGH);
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	66 e0       	ldi	r22, 0x06	; 6
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2ae4:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case One:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	6f ef       	ldi	r22, 0xFF	; 255
    2aec:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	6f ef       	ldi	r22, 0xFF	; 255
    2af4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	62 e0       	ldi	r22, 0x02	; 2
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2b0c:	12 c7       	rjmp	.+3620   	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Two:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	6f ef       	ldi	r22, 0xFF	; 255
    2b12:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_HIGH);
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	62 e0       	ldi	r22, 0x02	; 2
    2b22:	41 e0       	ldi	r20, 0x01	; 1
    2b24:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	65 e0       	ldi	r22, 0x05	; 5
    2b2c:	41 e0       	ldi	r20, 0x01	; 1
    2b2e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2b32:	ff c6       	rjmp	.+3582   	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Three:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	6f ef       	ldi	r22, 0xFF	; 255
    2b38:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	64 e0       	ldi	r22, 0x04	; 4
    2b48:	41 e0       	ldi	r20, 0x01	; 1
    2b4a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,F,DIO_HIGH);
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	65 e0       	ldi	r22, 0x05	; 5
    2b52:	41 e0       	ldi	r20, 0x01	; 1
    2b54:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2b58:	ec c6       	rjmp	.+3544   	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Four:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	6f ef       	ldi	r22, 0xFF	; 255
    2b5e:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_HIGH);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,D,DIO_HIGH);
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	63 e0       	ldi	r22, 0x03	; 3
    2b78:	41 e0       	ldi	r20, 0x01	; 1
    2b7a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	64 e0       	ldi	r22, 0x04	; 4
    2b82:	41 e0       	ldi	r20, 0x01	; 1
    2b84:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2b88:	d4 c6       	rjmp	.+3496   	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Five:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	6f ef       	ldi	r22, 0xFF	; 255
    2b8e:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	60 e0       	ldi	r22, 0x00	; 0
    2b96:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	61 e0       	ldi	r22, 0x01	; 1
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	64 e0       	ldi	r22, 0x04	; 4
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2bae:	c1 c6       	rjmp	.+3458   	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Six:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	6f ef       	ldi	r22, 0xFF	; 255
    2bb4:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_HIGH);
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	61 e0       	ldi	r22, 0x01	; 1
    2bc4:	41 e0       	ldi	r20, 0x01	; 1
    2bc6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2bca:	b3 c6       	rjmp	.+3430   	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Seven:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	6f ef       	ldi	r22, 0xFF	; 255
    2bd0:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_HIGH);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	6f ef       	ldi	r22, 0xFF	; 255
    2bd8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,A,DIO_LOW);
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,B,DIO_LOW);
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	61 e0       	ldi	r22, 0x01	; 1
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							DIO_SetPinValue(DIO_PORTA,C,DIO_LOW);
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	62 e0       	ldi	r22, 0x02	; 2
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2bfa:	9b c6       	rjmp	.+3382   	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Eight:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	6f ef       	ldi	r22, 0xFF	; 255
    2c00:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
    2c0c:	92 c6       	rjmp	.+3364   	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						case Nine:
							DIO_SetPortDirection(DIO_PORTA,PORT_OUTPUT);
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	6f ef       	ldi	r22, 0xFF	; 255
    2c12:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPortValue(DIO_PORTA,PORT_LOW);
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
							DIO_SetPinValue(DIO_PORTA,E,DIO_HIGH);
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	64 e0       	ldi	r22, 0x04	; 4
    2c22:	41 e0       	ldi	r20, 0x01	; 1
    2c24:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2c28:	84 c6       	rjmp	.+3336   	; 0x3932 <SevenSegment_Display+0x11ce>
							break;
						default:
						return E_OK;
    2c2a:	18 8e       	std	Y+24, r1	; 0x18
    2c2c:	84 c6       	rjmp	.+3336   	; 0x3936 <SevenSegment_Display+0x11d2>
					}
			break;
			default:
			return E_OK;
    2c2e:	18 8e       	std	Y+24, r1	; 0x18
    2c30:	82 c6       	rjmp	.+3332   	; 0x3936 <SevenSegment_Display+0x11d2>
		}
		break;
		case DIO_PORTB:
			switch(TYPE)
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	3d 8b       	std	Y+21, r19	; 0x15
    2c3a:	2c 8b       	std	Y+20, r18	; 0x14
    2c3c:	8c 89       	ldd	r24, Y+20	; 0x14
    2c3e:	9d 89       	ldd	r25, Y+21	; 0x15
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	39 f0       	breq	.+14     	; 0x2c52 <SevenSegment_Display+0x4ee>
    2c44:	2c 89       	ldd	r18, Y+20	; 0x14
    2c46:	3d 89       	ldd	r19, Y+21	; 0x15
    2c48:	21 30       	cpi	r18, 0x01	; 1
    2c4a:	31 05       	cpc	r19, r1
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <SevenSegment_Display+0x4ec>
    2c4e:	0d c1       	rjmp	.+538    	; 0x2e6a <SevenSegment_Display+0x706>
    2c50:	18 c2       	rjmp	.+1072   	; 0x3082 <SevenSegment_Display+0x91e>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	6f ef       	ldi	r22, 0xFF	; 255
    2c56:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_LOW);
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	67 e0       	ldi	r22, 0x07	; 7
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						switch(NUM)
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	3b 8b       	std	Y+19, r19	; 0x13
    2c6c:	2a 8b       	std	Y+18, r18	; 0x12
    2c6e:	8a 89       	ldd	r24, Y+18	; 0x12
    2c70:	9b 89       	ldd	r25, Y+19	; 0x13
    2c72:	84 30       	cpi	r24, 0x04	; 4
    2c74:	91 05       	cpc	r25, r1
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <SevenSegment_Display+0x516>
    2c78:	8e c0       	rjmp	.+284    	; 0x2d96 <SevenSegment_Display+0x632>
    2c7a:	2a 89       	ldd	r18, Y+18	; 0x12
    2c7c:	3b 89       	ldd	r19, Y+19	; 0x13
    2c7e:	25 30       	cpi	r18, 0x05	; 5
    2c80:	31 05       	cpc	r19, r1
    2c82:	ec f4       	brge	.+58     	; 0x2cbe <SevenSegment_Display+0x55a>
    2c84:	8a 89       	ldd	r24, Y+18	; 0x12
    2c86:	9b 89       	ldd	r25, Y+19	; 0x13
    2c88:	81 30       	cpi	r24, 0x01	; 1
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <SevenSegment_Display+0x52c>
    2c8e:	4a c0       	rjmp	.+148    	; 0x2d24 <SevenSegment_Display+0x5c0>
    2c90:	2a 89       	ldd	r18, Y+18	; 0x12
    2c92:	3b 89       	ldd	r19, Y+19	; 0x13
    2c94:	22 30       	cpi	r18, 0x02	; 2
    2c96:	31 05       	cpc	r19, r1
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <SevenSegment_Display+0x540>
    2c9a:	8a 89       	ldd	r24, Y+18	; 0x12
    2c9c:	9b 89       	ldd	r25, Y+19	; 0x13
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	99 f1       	breq	.+102    	; 0x2d08 <SevenSegment_Display+0x5a4>
    2ca2:	e1 c0       	rjmp	.+450    	; 0x2e66 <SevenSegment_Display+0x702>
    2ca4:	2a 89       	ldd	r18, Y+18	; 0x12
    2ca6:	3b 89       	ldd	r19, Y+19	; 0x13
    2ca8:	22 30       	cpi	r18, 0x02	; 2
    2caa:	31 05       	cpc	r19, r1
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <SevenSegment_Display+0x54c>
    2cae:	4d c0       	rjmp	.+154    	; 0x2d4a <SevenSegment_Display+0x5e6>
    2cb0:	8a 89       	ldd	r24, Y+18	; 0x12
    2cb2:	9b 89       	ldd	r25, Y+19	; 0x13
    2cb4:	83 30       	cpi	r24, 0x03	; 3
    2cb6:	91 05       	cpc	r25, r1
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <SevenSegment_Display+0x558>
    2cba:	5a c0       	rjmp	.+180    	; 0x2d70 <SevenSegment_Display+0x60c>
    2cbc:	d4 c0       	rjmp	.+424    	; 0x2e66 <SevenSegment_Display+0x702>
    2cbe:	2a 89       	ldd	r18, Y+18	; 0x12
    2cc0:	3b 89       	ldd	r19, Y+19	; 0x13
    2cc2:	27 30       	cpi	r18, 0x07	; 7
    2cc4:	31 05       	cpc	r19, r1
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <SevenSegment_Display+0x566>
    2cc8:	9f c0       	rjmp	.+318    	; 0x2e08 <SevenSegment_Display+0x6a4>
    2cca:	8a 89       	ldd	r24, Y+18	; 0x12
    2ccc:	9b 89       	ldd	r25, Y+19	; 0x13
    2cce:	88 30       	cpi	r24, 0x08	; 8
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	6c f4       	brge	.+26     	; 0x2cee <SevenSegment_Display+0x58a>
    2cd4:	2a 89       	ldd	r18, Y+18	; 0x12
    2cd6:	3b 89       	ldd	r19, Y+19	; 0x13
    2cd8:	25 30       	cpi	r18, 0x05	; 5
    2cda:	31 05       	cpc	r19, r1
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <SevenSegment_Display+0x57c>
    2cde:	73 c0       	rjmp	.+230    	; 0x2dc6 <SevenSegment_Display+0x662>
    2ce0:	8a 89       	ldd	r24, Y+18	; 0x12
    2ce2:	9b 89       	ldd	r25, Y+19	; 0x13
    2ce4:	86 30       	cpi	r24, 0x06	; 6
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <SevenSegment_Display+0x588>
    2cea:	80 c0       	rjmp	.+256    	; 0x2dec <SevenSegment_Display+0x688>
    2cec:	bc c0       	rjmp	.+376    	; 0x2e66 <SevenSegment_Display+0x702>
    2cee:	2a 89       	ldd	r18, Y+18	; 0x12
    2cf0:	3b 89       	ldd	r19, Y+19	; 0x13
    2cf2:	28 30       	cpi	r18, 0x08	; 8
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <SevenSegment_Display+0x596>
    2cf8:	9f c0       	rjmp	.+318    	; 0x2e38 <SevenSegment_Display+0x6d4>
    2cfa:	8a 89       	ldd	r24, Y+18	; 0x12
    2cfc:	9b 89       	ldd	r25, Y+19	; 0x13
    2cfe:	89 30       	cpi	r24, 0x09	; 9
    2d00:	91 05       	cpc	r25, r1
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <SevenSegment_Display+0x5a2>
    2d04:	a2 c0       	rjmp	.+324    	; 0x2e4a <SevenSegment_Display+0x6e6>
    2d06:	af c0       	rjmp	.+350    	; 0x2e66 <SevenSegment_Display+0x702>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	6f ef       	ldi	r22, 0xFF	; 255
    2d0c:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	6f ef       	ldi	r22, 0xFF	; 255
    2d14:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_LOW);
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	66 e0       	ldi	r22, 0x06	; 6
    2d1c:	40 e0       	ldi	r20, 0x00	; 0
    2d1e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2d22:	07 c6       	rjmp	.+3086   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	6f ef       	ldi	r22, 0xFF	; 255
    2d28:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	61 e0       	ldi	r22, 0x01	; 1
    2d38:	41 e0       	ldi	r20, 0x01	; 1
    2d3a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	62 e0       	ldi	r22, 0x02	; 2
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2d48:	f4 c5       	rjmp	.+3048   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	6f ef       	ldi	r22, 0xFF	; 255
    2d4e:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	6f ef       	ldi	r22, 0xFF	; 255
    2d56:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	62 e0       	ldi	r22, 0x02	; 2
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	65 e0       	ldi	r22, 0x05	; 5
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2d6e:	e1 c5       	rjmp	.+3010   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	6f ef       	ldi	r22, 0xFF	; 255
    2d74:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	6f ef       	ldi	r22, 0xFF	; 255
    2d7c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	64 e0       	ldi	r22, 0x04	; 4
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_LOW);
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	65 e0       	ldi	r22, 0x05	; 5
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2d94:	ce c5       	rjmp	.+2972   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	6f ef       	ldi	r22, 0xFF	; 255
    2d9a:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	6f ef       	ldi	r22, 0xFF	; 255
    2da2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_LOW);
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	63 e0       	ldi	r22, 0x03	; 3
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	64 e0       	ldi	r22, 0x04	; 4
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2dc4:	b6 c5       	rjmp	.+2924   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	6f ef       	ldi	r22, 0xFF	; 255
    2dca:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	6f ef       	ldi	r22, 0xFF	; 255
    2dd2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	61 e0       	ldi	r22, 0x01	; 1
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	64 e0       	ldi	r22, 0x04	; 4
    2de4:	40 e0       	ldi	r20, 0x00	; 0
    2de6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2dea:	a3 c5       	rjmp	.+2886   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	6f ef       	ldi	r22, 0xFF	; 255
    2df0:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	6f ef       	ldi	r22, 0xFF	; 255
    2df8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	61 e0       	ldi	r22, 0x01	; 1
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2e06:	95 c5       	rjmp	.+2858   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	6f ef       	ldi	r22, 0xFF	; 255
    2e0c:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	61 e0       	ldi	r22, 0x01	; 1
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	62 e0       	ldi	r22, 0x02	; 2
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2e36:	7d c5       	rjmp	.+2810   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	6f ef       	ldi	r22, 0xFF	; 255
    2e3c:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	6f ef       	ldi	r22, 0xFF	; 255
    2e44:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
    2e48:	74 c5       	rjmp	.+2792   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	6f ef       	ldi	r22, 0xFF	; 255
    2e4e:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	6f ef       	ldi	r22, 0xFF	; 255
    2e56:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_LOW);
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	64 e0       	ldi	r22, 0x04	; 4
    2e5e:	40 e0       	ldi	r20, 0x00	; 0
    2e60:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2e64:	66 c5       	rjmp	.+2764   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    2e66:	18 8e       	std	Y+24, r1	; 0x18
    2e68:	66 c5       	rjmp	.+2764   	; 0x3936 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	6f ef       	ldi	r22, 0xFF	; 255
    2e6e:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTB,Common_PIN,DIO_HIGH);
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	67 e0       	ldi	r22, 0x07	; 7
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
					switch(NUM)
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	39 8b       	std	Y+17, r19	; 0x11
    2e84:	28 8b       	std	Y+16, r18	; 0x10
    2e86:	88 89       	ldd	r24, Y+16	; 0x10
    2e88:	99 89       	ldd	r25, Y+17	; 0x11
    2e8a:	84 30       	cpi	r24, 0x04	; 4
    2e8c:	91 05       	cpc	r25, r1
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <SevenSegment_Display+0x72e>
    2e90:	8e c0       	rjmp	.+284    	; 0x2fae <SevenSegment_Display+0x84a>
    2e92:	28 89       	ldd	r18, Y+16	; 0x10
    2e94:	39 89       	ldd	r19, Y+17	; 0x11
    2e96:	25 30       	cpi	r18, 0x05	; 5
    2e98:	31 05       	cpc	r19, r1
    2e9a:	ec f4       	brge	.+58     	; 0x2ed6 <SevenSegment_Display+0x772>
    2e9c:	88 89       	ldd	r24, Y+16	; 0x10
    2e9e:	99 89       	ldd	r25, Y+17	; 0x11
    2ea0:	81 30       	cpi	r24, 0x01	; 1
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <SevenSegment_Display+0x744>
    2ea6:	4a c0       	rjmp	.+148    	; 0x2f3c <SevenSegment_Display+0x7d8>
    2ea8:	28 89       	ldd	r18, Y+16	; 0x10
    2eaa:	39 89       	ldd	r19, Y+17	; 0x11
    2eac:	22 30       	cpi	r18, 0x02	; 2
    2eae:	31 05       	cpc	r19, r1
    2eb0:	2c f4       	brge	.+10     	; 0x2ebc <SevenSegment_Display+0x758>
    2eb2:	88 89       	ldd	r24, Y+16	; 0x10
    2eb4:	99 89       	ldd	r25, Y+17	; 0x11
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	99 f1       	breq	.+102    	; 0x2f20 <SevenSegment_Display+0x7bc>
    2eba:	e1 c0       	rjmp	.+450    	; 0x307e <SevenSegment_Display+0x91a>
    2ebc:	28 89       	ldd	r18, Y+16	; 0x10
    2ebe:	39 89       	ldd	r19, Y+17	; 0x11
    2ec0:	22 30       	cpi	r18, 0x02	; 2
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <SevenSegment_Display+0x764>
    2ec6:	4d c0       	rjmp	.+154    	; 0x2f62 <SevenSegment_Display+0x7fe>
    2ec8:	88 89       	ldd	r24, Y+16	; 0x10
    2eca:	99 89       	ldd	r25, Y+17	; 0x11
    2ecc:	83 30       	cpi	r24, 0x03	; 3
    2ece:	91 05       	cpc	r25, r1
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <SevenSegment_Display+0x770>
    2ed2:	5a c0       	rjmp	.+180    	; 0x2f88 <SevenSegment_Display+0x824>
    2ed4:	d4 c0       	rjmp	.+424    	; 0x307e <SevenSegment_Display+0x91a>
    2ed6:	28 89       	ldd	r18, Y+16	; 0x10
    2ed8:	39 89       	ldd	r19, Y+17	; 0x11
    2eda:	27 30       	cpi	r18, 0x07	; 7
    2edc:	31 05       	cpc	r19, r1
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <SevenSegment_Display+0x77e>
    2ee0:	9f c0       	rjmp	.+318    	; 0x3020 <SevenSegment_Display+0x8bc>
    2ee2:	88 89       	ldd	r24, Y+16	; 0x10
    2ee4:	99 89       	ldd	r25, Y+17	; 0x11
    2ee6:	88 30       	cpi	r24, 0x08	; 8
    2ee8:	91 05       	cpc	r25, r1
    2eea:	6c f4       	brge	.+26     	; 0x2f06 <SevenSegment_Display+0x7a2>
    2eec:	28 89       	ldd	r18, Y+16	; 0x10
    2eee:	39 89       	ldd	r19, Y+17	; 0x11
    2ef0:	25 30       	cpi	r18, 0x05	; 5
    2ef2:	31 05       	cpc	r19, r1
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <SevenSegment_Display+0x794>
    2ef6:	73 c0       	rjmp	.+230    	; 0x2fde <SevenSegment_Display+0x87a>
    2ef8:	88 89       	ldd	r24, Y+16	; 0x10
    2efa:	99 89       	ldd	r25, Y+17	; 0x11
    2efc:	86 30       	cpi	r24, 0x06	; 6
    2efe:	91 05       	cpc	r25, r1
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <SevenSegment_Display+0x7a0>
    2f02:	80 c0       	rjmp	.+256    	; 0x3004 <SevenSegment_Display+0x8a0>
    2f04:	bc c0       	rjmp	.+376    	; 0x307e <SevenSegment_Display+0x91a>
    2f06:	28 89       	ldd	r18, Y+16	; 0x10
    2f08:	39 89       	ldd	r19, Y+17	; 0x11
    2f0a:	28 30       	cpi	r18, 0x08	; 8
    2f0c:	31 05       	cpc	r19, r1
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <SevenSegment_Display+0x7ae>
    2f10:	9f c0       	rjmp	.+318    	; 0x3050 <SevenSegment_Display+0x8ec>
    2f12:	88 89       	ldd	r24, Y+16	; 0x10
    2f14:	99 89       	ldd	r25, Y+17	; 0x11
    2f16:	89 30       	cpi	r24, 0x09	; 9
    2f18:	91 05       	cpc	r25, r1
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <SevenSegment_Display+0x7ba>
    2f1c:	a2 c0       	rjmp	.+324    	; 0x3062 <SevenSegment_Display+0x8fe>
    2f1e:	af c0       	rjmp	.+350    	; 0x307e <SevenSegment_Display+0x91a>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	6f ef       	ldi	r22, 0xFF	; 255
    2f24:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	60 e0       	ldi	r22, 0x00	; 0
    2f2c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,G,DIO_HIGH);
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	66 e0       	ldi	r22, 0x06	; 6
    2f34:	41 e0       	ldi	r20, 0x01	; 1
    2f36:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2f3a:	fb c4       	rjmp	.+2550   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	6f ef       	ldi	r22, 0xFF	; 255
    2f40:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	6f ef       	ldi	r22, 0xFF	; 255
    2f48:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	61 e0       	ldi	r22, 0x01	; 1
    2f50:	40 e0       	ldi	r20, 0x00	; 0
    2f52:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	62 e0       	ldi	r22, 0x02	; 2
    2f5a:	40 e0       	ldi	r20, 0x00	; 0
    2f5c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2f60:	e8 c4       	rjmp	.+2512   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	6f ef       	ldi	r22, 0xFF	; 255
    2f66:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_HIGH);
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	62 e0       	ldi	r22, 0x02	; 2
    2f76:	41 e0       	ldi	r20, 0x01	; 1
    2f78:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	65 e0       	ldi	r22, 0x05	; 5
    2f80:	41 e0       	ldi	r20, 0x01	; 1
    2f82:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2f86:	d5 c4       	rjmp	.+2474   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	6f ef       	ldi	r22, 0xFF	; 255
    2f8c:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	64 e0       	ldi	r22, 0x04	; 4
    2f9c:	41 e0       	ldi	r20, 0x01	; 1
    2f9e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,F,DIO_HIGH);
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	65 e0       	ldi	r22, 0x05	; 5
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2fac:	c2 c4       	rjmp	.+2436   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	6f ef       	ldi	r22, 0xFF	; 255
    2fb2:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_HIGH);
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	41 e0       	ldi	r20, 0x01	; 1
    2fc4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,D,DIO_HIGH);
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	63 e0       	ldi	r22, 0x03	; 3
    2fcc:	41 e0       	ldi	r20, 0x01	; 1
    2fce:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	64 e0       	ldi	r22, 0x04	; 4
    2fd6:	41 e0       	ldi	r20, 0x01	; 1
    2fd8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    2fdc:	aa c4       	rjmp	.+2388   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	6f ef       	ldi	r22, 0xFF	; 255
    2fe2:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	61 e0       	ldi	r22, 0x01	; 1
    2ff2:	41 e0       	ldi	r20, 0x01	; 1
    2ff4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	64 e0       	ldi	r22, 0x04	; 4
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3002:	97 c4       	rjmp	.+2350   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	6f ef       	ldi	r22, 0xFF	; 255
    3008:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_HIGH);
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	61 e0       	ldi	r22, 0x01	; 1
    3018:	41 e0       	ldi	r20, 0x01	; 1
    301a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    301e:	89 c4       	rjmp	.+2322   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	6f ef       	ldi	r22, 0xFF	; 255
    3024:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_HIGH);
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	6f ef       	ldi	r22, 0xFF	; 255
    302c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,A,DIO_LOW);
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	60 e0       	ldi	r22, 0x00	; 0
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,B,DIO_LOW);
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	61 e0       	ldi	r22, 0x01	; 1
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTB,C,DIO_LOW);
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    304e:	71 c4       	rjmp	.+2274   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	6f ef       	ldi	r22, 0xFF	; 255
    3054:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
    3060:	68 c4       	rjmp	.+2256   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTB,PORT_OUTPUT);
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	6f ef       	ldi	r22, 0xFF	; 255
    3066:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTB,PORT_LOW);
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTB,E,DIO_HIGH);
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	64 e0       	ldi	r22, 0x04	; 4
    3076:	41 e0       	ldi	r20, 0x01	; 1
    3078:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    307c:	5a c4       	rjmp	.+2228   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    307e:	18 8e       	std	Y+24, r1	; 0x18
    3080:	5a c4       	rjmp	.+2228   	; 0x3936 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    3082:	18 8e       	std	Y+24, r1	; 0x18
    3084:	58 c4       	rjmp	.+2224   	; 0x3936 <SevenSegment_Display+0x11d2>
			}
			break;
		case DIO_PORTC:
			switch(TYPE)
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	3f 87       	std	Y+15, r19	; 0x0f
    308e:	2e 87       	std	Y+14, r18	; 0x0e
    3090:	8e 85       	ldd	r24, Y+14	; 0x0e
    3092:	9f 85       	ldd	r25, Y+15	; 0x0f
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	39 f0       	breq	.+14     	; 0x30a6 <SevenSegment_Display+0x942>
    3098:	2e 85       	ldd	r18, Y+14	; 0x0e
    309a:	3f 85       	ldd	r19, Y+15	; 0x0f
    309c:	21 30       	cpi	r18, 0x01	; 1
    309e:	31 05       	cpc	r19, r1
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <SevenSegment_Display+0x940>
    30a2:	0d c1       	rjmp	.+538    	; 0x32be <SevenSegment_Display+0xb5a>
    30a4:	18 c2       	rjmp	.+1072   	; 0x34d6 <SevenSegment_Display+0xd72>
				{
					case CommonCathod:
						DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	6f ef       	ldi	r22, 0xFF	; 255
    30aa:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_LOW);
    30ae:	82 e0       	ldi	r24, 0x02	; 2
    30b0:	67 e0       	ldi	r22, 0x07	; 7
    30b2:	40 e0       	ldi	r20, 0x00	; 0
    30b4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						switch(NUM)
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	28 2f       	mov	r18, r24
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	3d 87       	std	Y+13, r19	; 0x0d
    30c0:	2c 87       	std	Y+12, r18	; 0x0c
    30c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    30c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    30c6:	84 30       	cpi	r24, 0x04	; 4
    30c8:	91 05       	cpc	r25, r1
    30ca:	09 f4       	brne	.+2      	; 0x30ce <SevenSegment_Display+0x96a>
    30cc:	8e c0       	rjmp	.+284    	; 0x31ea <SevenSegment_Display+0xa86>
    30ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    30d0:	3d 85       	ldd	r19, Y+13	; 0x0d
    30d2:	25 30       	cpi	r18, 0x05	; 5
    30d4:	31 05       	cpc	r19, r1
    30d6:	ec f4       	brge	.+58     	; 0x3112 <SevenSegment_Display+0x9ae>
    30d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    30da:	9d 85       	ldd	r25, Y+13	; 0x0d
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	91 05       	cpc	r25, r1
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <SevenSegment_Display+0x980>
    30e2:	4a c0       	rjmp	.+148    	; 0x3178 <SevenSegment_Display+0xa14>
    30e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    30e6:	3d 85       	ldd	r19, Y+13	; 0x0d
    30e8:	22 30       	cpi	r18, 0x02	; 2
    30ea:	31 05       	cpc	r19, r1
    30ec:	2c f4       	brge	.+10     	; 0x30f8 <SevenSegment_Display+0x994>
    30ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    30f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	99 f1       	breq	.+102    	; 0x315c <SevenSegment_Display+0x9f8>
    30f6:	e1 c0       	rjmp	.+450    	; 0x32ba <SevenSegment_Display+0xb56>
    30f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    30fa:	3d 85       	ldd	r19, Y+13	; 0x0d
    30fc:	22 30       	cpi	r18, 0x02	; 2
    30fe:	31 05       	cpc	r19, r1
    3100:	09 f4       	brne	.+2      	; 0x3104 <SevenSegment_Display+0x9a0>
    3102:	4d c0       	rjmp	.+154    	; 0x319e <SevenSegment_Display+0xa3a>
    3104:	8c 85       	ldd	r24, Y+12	; 0x0c
    3106:	9d 85       	ldd	r25, Y+13	; 0x0d
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	91 05       	cpc	r25, r1
    310c:	09 f4       	brne	.+2      	; 0x3110 <SevenSegment_Display+0x9ac>
    310e:	5a c0       	rjmp	.+180    	; 0x31c4 <SevenSegment_Display+0xa60>
    3110:	d4 c0       	rjmp	.+424    	; 0x32ba <SevenSegment_Display+0xb56>
    3112:	2c 85       	ldd	r18, Y+12	; 0x0c
    3114:	3d 85       	ldd	r19, Y+13	; 0x0d
    3116:	27 30       	cpi	r18, 0x07	; 7
    3118:	31 05       	cpc	r19, r1
    311a:	09 f4       	brne	.+2      	; 0x311e <SevenSegment_Display+0x9ba>
    311c:	9f c0       	rjmp	.+318    	; 0x325c <SevenSegment_Display+0xaf8>
    311e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3120:	9d 85       	ldd	r25, Y+13	; 0x0d
    3122:	88 30       	cpi	r24, 0x08	; 8
    3124:	91 05       	cpc	r25, r1
    3126:	6c f4       	brge	.+26     	; 0x3142 <SevenSegment_Display+0x9de>
    3128:	2c 85       	ldd	r18, Y+12	; 0x0c
    312a:	3d 85       	ldd	r19, Y+13	; 0x0d
    312c:	25 30       	cpi	r18, 0x05	; 5
    312e:	31 05       	cpc	r19, r1
    3130:	09 f4       	brne	.+2      	; 0x3134 <SevenSegment_Display+0x9d0>
    3132:	73 c0       	rjmp	.+230    	; 0x321a <SevenSegment_Display+0xab6>
    3134:	8c 85       	ldd	r24, Y+12	; 0x0c
    3136:	9d 85       	ldd	r25, Y+13	; 0x0d
    3138:	86 30       	cpi	r24, 0x06	; 6
    313a:	91 05       	cpc	r25, r1
    313c:	09 f4       	brne	.+2      	; 0x3140 <SevenSegment_Display+0x9dc>
    313e:	80 c0       	rjmp	.+256    	; 0x3240 <SevenSegment_Display+0xadc>
    3140:	bc c0       	rjmp	.+376    	; 0x32ba <SevenSegment_Display+0xb56>
    3142:	2c 85       	ldd	r18, Y+12	; 0x0c
    3144:	3d 85       	ldd	r19, Y+13	; 0x0d
    3146:	28 30       	cpi	r18, 0x08	; 8
    3148:	31 05       	cpc	r19, r1
    314a:	09 f4       	brne	.+2      	; 0x314e <SevenSegment_Display+0x9ea>
    314c:	9f c0       	rjmp	.+318    	; 0x328c <SevenSegment_Display+0xb28>
    314e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3150:	9d 85       	ldd	r25, Y+13	; 0x0d
    3152:	89 30       	cpi	r24, 0x09	; 9
    3154:	91 05       	cpc	r25, r1
    3156:	09 f4       	brne	.+2      	; 0x315a <SevenSegment_Display+0x9f6>
    3158:	a2 c0       	rjmp	.+324    	; 0x329e <SevenSegment_Display+0xb3a>
    315a:	af c0       	rjmp	.+350    	; 0x32ba <SevenSegment_Display+0xb56>
							{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    315c:	82 e0       	ldi	r24, 0x02	; 2
    315e:	6f ef       	ldi	r22, 0xFF	; 255
    3160:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	6f ef       	ldi	r22, 0xFF	; 255
    3168:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_LOW);
    316c:	82 e0       	ldi	r24, 0x02	; 2
    316e:	66 e0       	ldi	r22, 0x06	; 6
    3170:	40 e0       	ldi	r20, 0x00	; 0
    3172:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3176:	dd c3       	rjmp	.+1978   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3178:	82 e0       	ldi	r24, 0x02	; 2
    317a:	6f ef       	ldi	r22, 0xFF	; 255
    317c:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	60 e0       	ldi	r22, 0x00	; 0
    3184:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	61 e0       	ldi	r22, 0x01	; 1
    318c:	41 e0       	ldi	r20, 0x01	; 1
    318e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3192:	82 e0       	ldi	r24, 0x02	; 2
    3194:	62 e0       	ldi	r22, 0x02	; 2
    3196:	41 e0       	ldi	r20, 0x01	; 1
    3198:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    319c:	ca c3       	rjmp	.+1940   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	6f ef       	ldi	r22, 0xFF	; 255
    31a2:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    31a6:	82 e0       	ldi	r24, 0x02	; 2
    31a8:	6f ef       	ldi	r22, 0xFF	; 255
    31aa:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    31ae:	82 e0       	ldi	r24, 0x02	; 2
    31b0:	62 e0       	ldi	r22, 0x02	; 2
    31b2:	40 e0       	ldi	r20, 0x00	; 0
    31b4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	65 e0       	ldi	r22, 0x05	; 5
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    31c2:	b7 c3       	rjmp	.+1902   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31c4:	82 e0       	ldi	r24, 0x02	; 2
    31c6:	6f ef       	ldi	r22, 0xFF	; 255
    31c8:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	6f ef       	ldi	r22, 0xFF	; 255
    31d0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    31d4:	82 e0       	ldi	r24, 0x02	; 2
    31d6:	64 e0       	ldi	r22, 0x04	; 4
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_LOW);
    31de:	82 e0       	ldi	r24, 0x02	; 2
    31e0:	65 e0       	ldi	r22, 0x05	; 5
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    31e8:	a4 c3       	rjmp	.+1864   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	6f ef       	ldi	r22, 0xFF	; 255
    31ee:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    31f2:	82 e0       	ldi	r24, 0x02	; 2
    31f4:	6f ef       	ldi	r22, 0xFF	; 255
    31f6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	40 e0       	ldi	r20, 0x00	; 0
    3200:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_LOW);
    3204:	82 e0       	ldi	r24, 0x02	; 2
    3206:	63 e0       	ldi	r22, 0x03	; 3
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    320e:	82 e0       	ldi	r24, 0x02	; 2
    3210:	64 e0       	ldi	r22, 0x04	; 4
    3212:	40 e0       	ldi	r20, 0x00	; 0
    3214:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3218:	8c c3       	rjmp	.+1816   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    321a:	82 e0       	ldi	r24, 0x02	; 2
    321c:	6f ef       	ldi	r22, 0xFF	; 255
    321e:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3222:	82 e0       	ldi	r24, 0x02	; 2
    3224:	6f ef       	ldi	r22, 0xFF	; 255
    3226:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    322a:	82 e0       	ldi	r24, 0x02	; 2
    322c:	61 e0       	ldi	r22, 0x01	; 1
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	64 e0       	ldi	r22, 0x04	; 4
    3238:	40 e0       	ldi	r20, 0x00	; 0
    323a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    323e:	79 c3       	rjmp	.+1778   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3240:	82 e0       	ldi	r24, 0x02	; 2
    3242:	6f ef       	ldi	r22, 0xFF	; 255
    3244:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	6f ef       	ldi	r22, 0xFF	; 255
    324c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    3250:	82 e0       	ldi	r24, 0x02	; 2
    3252:	61 e0       	ldi	r22, 0x01	; 1
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    325a:	6b c3       	rjmp	.+1750   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    325c:	82 e0       	ldi	r24, 0x02	; 2
    325e:	6f ef       	ldi	r22, 0xFF	; 255
    3260:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3264:	82 e0       	ldi	r24, 0x02	; 2
    3266:	60 e0       	ldi	r22, 0x00	; 0
    3268:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    326c:	82 e0       	ldi	r24, 0x02	; 2
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	41 e0       	ldi	r20, 0x01	; 1
    3272:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3276:	82 e0       	ldi	r24, 0x02	; 2
    3278:	61 e0       	ldi	r22, 0x01	; 1
    327a:	41 e0       	ldi	r20, 0x01	; 1
    327c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    3280:	82 e0       	ldi	r24, 0x02	; 2
    3282:	62 e0       	ldi	r22, 0x02	; 2
    3284:	41 e0       	ldi	r20, 0x01	; 1
    3286:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    328a:	53 c3       	rjmp	.+1702   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    328c:	82 e0       	ldi	r24, 0x02	; 2
    328e:	6f ef       	ldi	r22, 0xFF	; 255
    3290:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3294:	82 e0       	ldi	r24, 0x02	; 2
    3296:	6f ef       	ldi	r22, 0xFF	; 255
    3298:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
    329c:	4a c3       	rjmp	.+1684   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    329e:	82 e0       	ldi	r24, 0x02	; 2
    32a0:	6f ef       	ldi	r22, 0xFF	; 255
    32a2:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    32a6:	82 e0       	ldi	r24, 0x02	; 2
    32a8:	6f ef       	ldi	r22, 0xFF	; 255
    32aa:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_LOW);
    32ae:	82 e0       	ldi	r24, 0x02	; 2
    32b0:	64 e0       	ldi	r22, 0x04	; 4
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    32b8:	3c c3       	rjmp	.+1656   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    32ba:	18 8e       	std	Y+24, r1	; 0x18
    32bc:	3c c3       	rjmp	.+1656   	; 0x3936 <SevenSegment_Display+0x11d2>
						}
						break;
				case CommonAnode:
					DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    32be:	82 e0       	ldi	r24, 0x02	; 2
    32c0:	6f ef       	ldi	r22, 0xFF	; 255
    32c2:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
					DIO_SetPinValue(DIO_PORTC,Common_PIN,DIO_HIGH);
    32c6:	82 e0       	ldi	r24, 0x02	; 2
    32c8:	67 e0       	ldi	r22, 0x07	; 7
    32ca:	41 e0       	ldi	r20, 0x01	; 1
    32cc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
					switch(NUM)
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	3b 87       	std	Y+11, r19	; 0x0b
    32d8:	2a 87       	std	Y+10, r18	; 0x0a
    32da:	8a 85       	ldd	r24, Y+10	; 0x0a
    32dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    32de:	84 30       	cpi	r24, 0x04	; 4
    32e0:	91 05       	cpc	r25, r1
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <SevenSegment_Display+0xb82>
    32e4:	8e c0       	rjmp	.+284    	; 0x3402 <SevenSegment_Display+0xc9e>
    32e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    32e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    32ea:	25 30       	cpi	r18, 0x05	; 5
    32ec:	31 05       	cpc	r19, r1
    32ee:	ec f4       	brge	.+58     	; 0x332a <SevenSegment_Display+0xbc6>
    32f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    32f4:	81 30       	cpi	r24, 0x01	; 1
    32f6:	91 05       	cpc	r25, r1
    32f8:	09 f4       	brne	.+2      	; 0x32fc <SevenSegment_Display+0xb98>
    32fa:	4a c0       	rjmp	.+148    	; 0x3390 <SevenSegment_Display+0xc2c>
    32fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    32fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    3300:	22 30       	cpi	r18, 0x02	; 2
    3302:	31 05       	cpc	r19, r1
    3304:	2c f4       	brge	.+10     	; 0x3310 <SevenSegment_Display+0xbac>
    3306:	8a 85       	ldd	r24, Y+10	; 0x0a
    3308:	9b 85       	ldd	r25, Y+11	; 0x0b
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	99 f1       	breq	.+102    	; 0x3374 <SevenSegment_Display+0xc10>
    330e:	e1 c0       	rjmp	.+450    	; 0x34d2 <SevenSegment_Display+0xd6e>
    3310:	2a 85       	ldd	r18, Y+10	; 0x0a
    3312:	3b 85       	ldd	r19, Y+11	; 0x0b
    3314:	22 30       	cpi	r18, 0x02	; 2
    3316:	31 05       	cpc	r19, r1
    3318:	09 f4       	brne	.+2      	; 0x331c <SevenSegment_Display+0xbb8>
    331a:	4d c0       	rjmp	.+154    	; 0x33b6 <SevenSegment_Display+0xc52>
    331c:	8a 85       	ldd	r24, Y+10	; 0x0a
    331e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3320:	83 30       	cpi	r24, 0x03	; 3
    3322:	91 05       	cpc	r25, r1
    3324:	09 f4       	brne	.+2      	; 0x3328 <SevenSegment_Display+0xbc4>
    3326:	5a c0       	rjmp	.+180    	; 0x33dc <SevenSegment_Display+0xc78>
    3328:	d4 c0       	rjmp	.+424    	; 0x34d2 <SevenSegment_Display+0xd6e>
    332a:	2a 85       	ldd	r18, Y+10	; 0x0a
    332c:	3b 85       	ldd	r19, Y+11	; 0x0b
    332e:	27 30       	cpi	r18, 0x07	; 7
    3330:	31 05       	cpc	r19, r1
    3332:	09 f4       	brne	.+2      	; 0x3336 <SevenSegment_Display+0xbd2>
    3334:	9f c0       	rjmp	.+318    	; 0x3474 <SevenSegment_Display+0xd10>
    3336:	8a 85       	ldd	r24, Y+10	; 0x0a
    3338:	9b 85       	ldd	r25, Y+11	; 0x0b
    333a:	88 30       	cpi	r24, 0x08	; 8
    333c:	91 05       	cpc	r25, r1
    333e:	6c f4       	brge	.+26     	; 0x335a <SevenSegment_Display+0xbf6>
    3340:	2a 85       	ldd	r18, Y+10	; 0x0a
    3342:	3b 85       	ldd	r19, Y+11	; 0x0b
    3344:	25 30       	cpi	r18, 0x05	; 5
    3346:	31 05       	cpc	r19, r1
    3348:	09 f4       	brne	.+2      	; 0x334c <SevenSegment_Display+0xbe8>
    334a:	73 c0       	rjmp	.+230    	; 0x3432 <SevenSegment_Display+0xcce>
    334c:	8a 85       	ldd	r24, Y+10	; 0x0a
    334e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3350:	86 30       	cpi	r24, 0x06	; 6
    3352:	91 05       	cpc	r25, r1
    3354:	09 f4       	brne	.+2      	; 0x3358 <SevenSegment_Display+0xbf4>
    3356:	80 c0       	rjmp	.+256    	; 0x3458 <SevenSegment_Display+0xcf4>
    3358:	bc c0       	rjmp	.+376    	; 0x34d2 <SevenSegment_Display+0xd6e>
    335a:	2a 85       	ldd	r18, Y+10	; 0x0a
    335c:	3b 85       	ldd	r19, Y+11	; 0x0b
    335e:	28 30       	cpi	r18, 0x08	; 8
    3360:	31 05       	cpc	r19, r1
    3362:	09 f4       	brne	.+2      	; 0x3366 <SevenSegment_Display+0xc02>
    3364:	9f c0       	rjmp	.+318    	; 0x34a4 <SevenSegment_Display+0xd40>
    3366:	8a 85       	ldd	r24, Y+10	; 0x0a
    3368:	9b 85       	ldd	r25, Y+11	; 0x0b
    336a:	89 30       	cpi	r24, 0x09	; 9
    336c:	91 05       	cpc	r25, r1
    336e:	09 f4       	brne	.+2      	; 0x3372 <SevenSegment_Display+0xc0e>
    3370:	a2 c0       	rjmp	.+324    	; 0x34b6 <SevenSegment_Display+0xd52>
    3372:	af c0       	rjmp	.+350    	; 0x34d2 <SevenSegment_Display+0xd6e>
						{
							case Zero:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	6f ef       	ldi	r22, 0xFF	; 255
    3378:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    337c:	82 e0       	ldi	r24, 0x02	; 2
    337e:	60 e0       	ldi	r22, 0x00	; 0
    3380:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,G,DIO_HIGH);
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	66 e0       	ldi	r22, 0x06	; 6
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    338e:	d1 c2       	rjmp	.+1442   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case One:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3390:	82 e0       	ldi	r24, 0x02	; 2
    3392:	6f ef       	ldi	r22, 0xFF	; 255
    3394:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    3398:	82 e0       	ldi	r24, 0x02	; 2
    339a:	6f ef       	ldi	r22, 0xFF	; 255
    339c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	61 e0       	ldi	r22, 0x01	; 1
    33a4:	40 e0       	ldi	r20, 0x00	; 0
    33a6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    33aa:	82 e0       	ldi	r24, 0x02	; 2
    33ac:	62 e0       	ldi	r22, 0x02	; 2
    33ae:	40 e0       	ldi	r20, 0x00	; 0
    33b0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    33b4:	be c2       	rjmp	.+1404   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Two:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    33b6:	82 e0       	ldi	r24, 0x02	; 2
    33b8:	6f ef       	ldi	r22, 0xFF	; 255
    33ba:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    33be:	82 e0       	ldi	r24, 0x02	; 2
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_HIGH);
    33c6:	82 e0       	ldi	r24, 0x02	; 2
    33c8:	62 e0       	ldi	r22, 0x02	; 2
    33ca:	41 e0       	ldi	r20, 0x01	; 1
    33cc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	65 e0       	ldi	r22, 0x05	; 5
    33d4:	41 e0       	ldi	r20, 0x01	; 1
    33d6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    33da:	ab c2       	rjmp	.+1366   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Three:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    33dc:	82 e0       	ldi	r24, 0x02	; 2
    33de:	6f ef       	ldi	r22, 0xFF	; 255
    33e0:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    33e4:	82 e0       	ldi	r24, 0x02	; 2
    33e6:	60 e0       	ldi	r22, 0x00	; 0
    33e8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    33ec:	82 e0       	ldi	r24, 0x02	; 2
    33ee:	64 e0       	ldi	r22, 0x04	; 4
    33f0:	41 e0       	ldi	r20, 0x01	; 1
    33f2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,F,DIO_HIGH);
    33f6:	82 e0       	ldi	r24, 0x02	; 2
    33f8:	65 e0       	ldi	r22, 0x05	; 5
    33fa:	41 e0       	ldi	r20, 0x01	; 1
    33fc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3400:	98 c2       	rjmp	.+1328   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Four:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3402:	82 e0       	ldi	r24, 0x02	; 2
    3404:	6f ef       	ldi	r22, 0xFF	; 255
    3406:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_HIGH);
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	60 e0       	ldi	r22, 0x00	; 0
    3416:	41 e0       	ldi	r20, 0x01	; 1
    3418:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,D,DIO_HIGH);
    341c:	82 e0       	ldi	r24, 0x02	; 2
    341e:	63 e0       	ldi	r22, 0x03	; 3
    3420:	41 e0       	ldi	r20, 0x01	; 1
    3422:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	64 e0       	ldi	r22, 0x04	; 4
    342a:	41 e0       	ldi	r20, 0x01	; 1
    342c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3430:	80 c2       	rjmp	.+1280   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Five:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3432:	82 e0       	ldi	r24, 0x02	; 2
    3434:	6f ef       	ldi	r22, 0xFF	; 255
    3436:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    343a:	82 e0       	ldi	r24, 0x02	; 2
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3442:	82 e0       	ldi	r24, 0x02	; 2
    3444:	61 e0       	ldi	r22, 0x01	; 1
    3446:	41 e0       	ldi	r20, 0x01	; 1
    3448:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    344c:	82 e0       	ldi	r24, 0x02	; 2
    344e:	64 e0       	ldi	r22, 0x04	; 4
    3450:	41 e0       	ldi	r20, 0x01	; 1
    3452:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3456:	6d c2       	rjmp	.+1242   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Six:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3458:	82 e0       	ldi	r24, 0x02	; 2
    345a:	6f ef       	ldi	r22, 0xFF	; 255
    345c:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    3460:	82 e0       	ldi	r24, 0x02	; 2
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_HIGH);
    3468:	82 e0       	ldi	r24, 0x02	; 2
    346a:	61 e0       	ldi	r22, 0x01	; 1
    346c:	41 e0       	ldi	r20, 0x01	; 1
    346e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3472:	5f c2       	rjmp	.+1214   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Seven:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    3474:	82 e0       	ldi	r24, 0x02	; 2
    3476:	6f ef       	ldi	r22, 0xFF	; 255
    3478:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_HIGH);
    347c:	82 e0       	ldi	r24, 0x02	; 2
    347e:	6f ef       	ldi	r22, 0xFF	; 255
    3480:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,A,DIO_LOW);
    3484:	82 e0       	ldi	r24, 0x02	; 2
    3486:	60 e0       	ldi	r22, 0x00	; 0
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,B,DIO_LOW);
    348e:	82 e0       	ldi	r24, 0x02	; 2
    3490:	61 e0       	ldi	r22, 0x01	; 1
    3492:	40 e0       	ldi	r20, 0x00	; 0
    3494:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
								DIO_SetPinValue(DIO_PORTC,C,DIO_LOW);
    3498:	82 e0       	ldi	r24, 0x02	; 2
    349a:	62 e0       	ldi	r22, 0x02	; 2
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    34a2:	47 c2       	rjmp	.+1166   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Eight:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    34a4:	82 e0       	ldi	r24, 0x02	; 2
    34a6:	6f ef       	ldi	r22, 0xFF	; 255
    34a8:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	60 e0       	ldi	r22, 0x00	; 0
    34b0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
    34b4:	3e c2       	rjmp	.+1148   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							case Nine:
								DIO_SetPortDirection(DIO_PORTC,PORT_OUTPUT);
    34b6:	82 e0       	ldi	r24, 0x02	; 2
    34b8:	6f ef       	ldi	r22, 0xFF	; 255
    34ba:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
								DIO_SetPortValue(DIO_PORTC,PORT_LOW);
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
								DIO_SetPinValue(DIO_PORTC,E,DIO_HIGH);
    34c6:	82 e0       	ldi	r24, 0x02	; 2
    34c8:	64 e0       	ldi	r22, 0x04	; 4
    34ca:	41 e0       	ldi	r20, 0x01	; 1
    34cc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    34d0:	30 c2       	rjmp	.+1120   	; 0x3932 <SevenSegment_Display+0x11ce>
								break;
							default:
							return E_OK;
    34d2:	18 8e       	std	Y+24, r1	; 0x18
    34d4:	30 c2       	rjmp	.+1120   	; 0x3936 <SevenSegment_Display+0x11d2>
						}
				break;
				default:
				return E_OK;
    34d6:	18 8e       	std	Y+24, r1	; 0x18
    34d8:	2e c2       	rjmp	.+1116   	; 0x3936 <SevenSegment_Display+0x11d2>
			}
			break;
			case DIO_PORTD:
				switch(TYPE)
    34da:	8a 81       	ldd	r24, Y+2	; 0x02
    34dc:	28 2f       	mov	r18, r24
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	39 87       	std	Y+9, r19	; 0x09
    34e2:	28 87       	std	Y+8, r18	; 0x08
    34e4:	88 85       	ldd	r24, Y+8	; 0x08
    34e6:	99 85       	ldd	r25, Y+9	; 0x09
    34e8:	00 97       	sbiw	r24, 0x00	; 0
    34ea:	39 f0       	breq	.+14     	; 0x34fa <SevenSegment_Display+0xd96>
    34ec:	28 85       	ldd	r18, Y+8	; 0x08
    34ee:	39 85       	ldd	r19, Y+9	; 0x09
    34f0:	21 30       	cpi	r18, 0x01	; 1
    34f2:	31 05       	cpc	r19, r1
    34f4:	09 f4       	brne	.+2      	; 0x34f8 <SevenSegment_Display+0xd94>
    34f6:	0d c1       	rjmp	.+538    	; 0x3712 <SevenSegment_Display+0xfae>
    34f8:	18 c2       	rjmp	.+1072   	; 0x392a <SevenSegment_Display+0x11c6>
					{
						case CommonCathod:
							DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    34fa:	83 e0       	ldi	r24, 0x03	; 3
    34fc:	6f ef       	ldi	r22, 0xFF	; 255
    34fe:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
							DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_LOW);
    3502:	83 e0       	ldi	r24, 0x03	; 3
    3504:	67 e0       	ldi	r22, 0x07	; 7
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
							switch(NUM)
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	3f 83       	std	Y+7, r19	; 0x07
    3514:	2e 83       	std	Y+6, r18	; 0x06
    3516:	8e 81       	ldd	r24, Y+6	; 0x06
    3518:	9f 81       	ldd	r25, Y+7	; 0x07
    351a:	84 30       	cpi	r24, 0x04	; 4
    351c:	91 05       	cpc	r25, r1
    351e:	09 f4       	brne	.+2      	; 0x3522 <SevenSegment_Display+0xdbe>
    3520:	8e c0       	rjmp	.+284    	; 0x363e <SevenSegment_Display+0xeda>
    3522:	2e 81       	ldd	r18, Y+6	; 0x06
    3524:	3f 81       	ldd	r19, Y+7	; 0x07
    3526:	25 30       	cpi	r18, 0x05	; 5
    3528:	31 05       	cpc	r19, r1
    352a:	ec f4       	brge	.+58     	; 0x3566 <SevenSegment_Display+0xe02>
    352c:	8e 81       	ldd	r24, Y+6	; 0x06
    352e:	9f 81       	ldd	r25, Y+7	; 0x07
    3530:	81 30       	cpi	r24, 0x01	; 1
    3532:	91 05       	cpc	r25, r1
    3534:	09 f4       	brne	.+2      	; 0x3538 <SevenSegment_Display+0xdd4>
    3536:	4a c0       	rjmp	.+148    	; 0x35cc <SevenSegment_Display+0xe68>
    3538:	2e 81       	ldd	r18, Y+6	; 0x06
    353a:	3f 81       	ldd	r19, Y+7	; 0x07
    353c:	22 30       	cpi	r18, 0x02	; 2
    353e:	31 05       	cpc	r19, r1
    3540:	2c f4       	brge	.+10     	; 0x354c <SevenSegment_Display+0xde8>
    3542:	8e 81       	ldd	r24, Y+6	; 0x06
    3544:	9f 81       	ldd	r25, Y+7	; 0x07
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	99 f1       	breq	.+102    	; 0x35b0 <SevenSegment_Display+0xe4c>
    354a:	e1 c0       	rjmp	.+450    	; 0x370e <SevenSegment_Display+0xfaa>
    354c:	2e 81       	ldd	r18, Y+6	; 0x06
    354e:	3f 81       	ldd	r19, Y+7	; 0x07
    3550:	22 30       	cpi	r18, 0x02	; 2
    3552:	31 05       	cpc	r19, r1
    3554:	09 f4       	brne	.+2      	; 0x3558 <SevenSegment_Display+0xdf4>
    3556:	4d c0       	rjmp	.+154    	; 0x35f2 <SevenSegment_Display+0xe8e>
    3558:	8e 81       	ldd	r24, Y+6	; 0x06
    355a:	9f 81       	ldd	r25, Y+7	; 0x07
    355c:	83 30       	cpi	r24, 0x03	; 3
    355e:	91 05       	cpc	r25, r1
    3560:	09 f4       	brne	.+2      	; 0x3564 <SevenSegment_Display+0xe00>
    3562:	5a c0       	rjmp	.+180    	; 0x3618 <SevenSegment_Display+0xeb4>
    3564:	d4 c0       	rjmp	.+424    	; 0x370e <SevenSegment_Display+0xfaa>
    3566:	2e 81       	ldd	r18, Y+6	; 0x06
    3568:	3f 81       	ldd	r19, Y+7	; 0x07
    356a:	27 30       	cpi	r18, 0x07	; 7
    356c:	31 05       	cpc	r19, r1
    356e:	09 f4       	brne	.+2      	; 0x3572 <SevenSegment_Display+0xe0e>
    3570:	9f c0       	rjmp	.+318    	; 0x36b0 <SevenSegment_Display+0xf4c>
    3572:	8e 81       	ldd	r24, Y+6	; 0x06
    3574:	9f 81       	ldd	r25, Y+7	; 0x07
    3576:	88 30       	cpi	r24, 0x08	; 8
    3578:	91 05       	cpc	r25, r1
    357a:	6c f4       	brge	.+26     	; 0x3596 <SevenSegment_Display+0xe32>
    357c:	2e 81       	ldd	r18, Y+6	; 0x06
    357e:	3f 81       	ldd	r19, Y+7	; 0x07
    3580:	25 30       	cpi	r18, 0x05	; 5
    3582:	31 05       	cpc	r19, r1
    3584:	09 f4       	brne	.+2      	; 0x3588 <SevenSegment_Display+0xe24>
    3586:	73 c0       	rjmp	.+230    	; 0x366e <SevenSegment_Display+0xf0a>
    3588:	8e 81       	ldd	r24, Y+6	; 0x06
    358a:	9f 81       	ldd	r25, Y+7	; 0x07
    358c:	86 30       	cpi	r24, 0x06	; 6
    358e:	91 05       	cpc	r25, r1
    3590:	09 f4       	brne	.+2      	; 0x3594 <SevenSegment_Display+0xe30>
    3592:	80 c0       	rjmp	.+256    	; 0x3694 <SevenSegment_Display+0xf30>
    3594:	bc c0       	rjmp	.+376    	; 0x370e <SevenSegment_Display+0xfaa>
    3596:	2e 81       	ldd	r18, Y+6	; 0x06
    3598:	3f 81       	ldd	r19, Y+7	; 0x07
    359a:	28 30       	cpi	r18, 0x08	; 8
    359c:	31 05       	cpc	r19, r1
    359e:	09 f4       	brne	.+2      	; 0x35a2 <SevenSegment_Display+0xe3e>
    35a0:	9f c0       	rjmp	.+318    	; 0x36e0 <SevenSegment_Display+0xf7c>
    35a2:	8e 81       	ldd	r24, Y+6	; 0x06
    35a4:	9f 81       	ldd	r25, Y+7	; 0x07
    35a6:	89 30       	cpi	r24, 0x09	; 9
    35a8:	91 05       	cpc	r25, r1
    35aa:	09 f4       	brne	.+2      	; 0x35ae <SevenSegment_Display+0xe4a>
    35ac:	a2 c0       	rjmp	.+324    	; 0x36f2 <SevenSegment_Display+0xf8e>
    35ae:	af c0       	rjmp	.+350    	; 0x370e <SevenSegment_Display+0xfaa>
								{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    35b0:	83 e0       	ldi	r24, 0x03	; 3
    35b2:	6f ef       	ldi	r22, 0xFF	; 255
    35b4:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    35b8:	83 e0       	ldi	r24, 0x03	; 3
    35ba:	6f ef       	ldi	r22, 0xFF	; 255
    35bc:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_LOW);
    35c0:	83 e0       	ldi	r24, 0x03	; 3
    35c2:	66 e0       	ldi	r22, 0x06	; 6
    35c4:	40 e0       	ldi	r20, 0x00	; 0
    35c6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    35ca:	b3 c1       	rjmp	.+870    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    35cc:	83 e0       	ldi	r24, 0x03	; 3
    35ce:	6f ef       	ldi	r22, 0xFF	; 255
    35d0:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    35d4:	83 e0       	ldi	r24, 0x03	; 3
    35d6:	60 e0       	ldi	r22, 0x00	; 0
    35d8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    35dc:	83 e0       	ldi	r24, 0x03	; 3
    35de:	61 e0       	ldi	r22, 0x01	; 1
    35e0:	41 e0       	ldi	r20, 0x01	; 1
    35e2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    35e6:	83 e0       	ldi	r24, 0x03	; 3
    35e8:	62 e0       	ldi	r22, 0x02	; 2
    35ea:	41 e0       	ldi	r20, 0x01	; 1
    35ec:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    35f0:	a0 c1       	rjmp	.+832    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    35f2:	83 e0       	ldi	r24, 0x03	; 3
    35f4:	6f ef       	ldi	r22, 0xFF	; 255
    35f6:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    35fa:	83 e0       	ldi	r24, 0x03	; 3
    35fc:	6f ef       	ldi	r22, 0xFF	; 255
    35fe:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    3602:	83 e0       	ldi	r24, 0x03	; 3
    3604:	62 e0       	ldi	r22, 0x02	; 2
    3606:	40 e0       	ldi	r20, 0x00	; 0
    3608:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    360c:	83 e0       	ldi	r24, 0x03	; 3
    360e:	65 e0       	ldi	r22, 0x05	; 5
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3616:	8d c1       	rjmp	.+794    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3618:	83 e0       	ldi	r24, 0x03	; 3
    361a:	6f ef       	ldi	r22, 0xFF	; 255
    361c:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3620:	83 e0       	ldi	r24, 0x03	; 3
    3622:	6f ef       	ldi	r22, 0xFF	; 255
    3624:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    3628:	83 e0       	ldi	r24, 0x03	; 3
    362a:	64 e0       	ldi	r22, 0x04	; 4
    362c:	40 e0       	ldi	r20, 0x00	; 0
    362e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_LOW);
    3632:	83 e0       	ldi	r24, 0x03	; 3
    3634:	65 e0       	ldi	r22, 0x05	; 5
    3636:	40 e0       	ldi	r20, 0x00	; 0
    3638:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    363c:	7a c1       	rjmp	.+756    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    363e:	83 e0       	ldi	r24, 0x03	; 3
    3640:	6f ef       	ldi	r22, 0xFF	; 255
    3642:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3646:	83 e0       	ldi	r24, 0x03	; 3
    3648:	6f ef       	ldi	r22, 0xFF	; 255
    364a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    364e:	83 e0       	ldi	r24, 0x03	; 3
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	40 e0       	ldi	r20, 0x00	; 0
    3654:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_LOW);
    3658:	83 e0       	ldi	r24, 0x03	; 3
    365a:	63 e0       	ldi	r22, 0x03	; 3
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    3662:	83 e0       	ldi	r24, 0x03	; 3
    3664:	64 e0       	ldi	r22, 0x04	; 4
    3666:	40 e0       	ldi	r20, 0x00	; 0
    3668:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    366c:	62 c1       	rjmp	.+708    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    366e:	83 e0       	ldi	r24, 0x03	; 3
    3670:	6f ef       	ldi	r22, 0xFF	; 255
    3672:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    3676:	83 e0       	ldi	r24, 0x03	; 3
    3678:	6f ef       	ldi	r22, 0xFF	; 255
    367a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    367e:	83 e0       	ldi	r24, 0x03	; 3
    3680:	61 e0       	ldi	r22, 0x01	; 1
    3682:	40 e0       	ldi	r20, 0x00	; 0
    3684:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    3688:	83 e0       	ldi	r24, 0x03	; 3
    368a:	64 e0       	ldi	r22, 0x04	; 4
    368c:	40 e0       	ldi	r20, 0x00	; 0
    368e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3692:	4f c1       	rjmp	.+670    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3694:	83 e0       	ldi	r24, 0x03	; 3
    3696:	6f ef       	ldi	r22, 0xFF	; 255
    3698:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    369c:	83 e0       	ldi	r24, 0x03	; 3
    369e:	6f ef       	ldi	r22, 0xFF	; 255
    36a0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    36a4:	83 e0       	ldi	r24, 0x03	; 3
    36a6:	61 e0       	ldi	r22, 0x01	; 1
    36a8:	40 e0       	ldi	r20, 0x00	; 0
    36aa:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    36ae:	41 c1       	rjmp	.+642    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    36b0:	83 e0       	ldi	r24, 0x03	; 3
    36b2:	6f ef       	ldi	r22, 0xFF	; 255
    36b4:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    36b8:	83 e0       	ldi	r24, 0x03	; 3
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    36c0:	83 e0       	ldi	r24, 0x03	; 3
    36c2:	60 e0       	ldi	r22, 0x00	; 0
    36c4:	41 e0       	ldi	r20, 0x01	; 1
    36c6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    36ca:	83 e0       	ldi	r24, 0x03	; 3
    36cc:	61 e0       	ldi	r22, 0x01	; 1
    36ce:	41 e0       	ldi	r20, 0x01	; 1
    36d0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    36d4:	83 e0       	ldi	r24, 0x03	; 3
    36d6:	62 e0       	ldi	r22, 0x02	; 2
    36d8:	41 e0       	ldi	r20, 0x01	; 1
    36da:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    36de:	29 c1       	rjmp	.+594    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    36e0:	83 e0       	ldi	r24, 0x03	; 3
    36e2:	6f ef       	ldi	r22, 0xFF	; 255
    36e4:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    36e8:	83 e0       	ldi	r24, 0x03	; 3
    36ea:	6f ef       	ldi	r22, 0xFF	; 255
    36ec:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
    36f0:	20 c1       	rjmp	.+576    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    36f2:	83 e0       	ldi	r24, 0x03	; 3
    36f4:	6f ef       	ldi	r22, 0xFF	; 255
    36f6:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    36fa:	83 e0       	ldi	r24, 0x03	; 3
    36fc:	6f ef       	ldi	r22, 0xFF	; 255
    36fe:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_LOW);
    3702:	83 e0       	ldi	r24, 0x03	; 3
    3704:	64 e0       	ldi	r22, 0x04	; 4
    3706:	40 e0       	ldi	r20, 0x00	; 0
    3708:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    370c:	12 c1       	rjmp	.+548    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    370e:	18 8e       	std	Y+24, r1	; 0x18
    3710:	12 c1       	rjmp	.+548    	; 0x3936 <SevenSegment_Display+0x11d2>
							}
							break;
					case CommonAnode:
						DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	6f ef       	ldi	r22, 0xFF	; 255
    3716:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
						DIO_SetPinValue(DIO_PORTD,Common_PIN,DIO_HIGH);
    371a:	83 e0       	ldi	r24, 0x03	; 3
    371c:	67 e0       	ldi	r22, 0x07	; 7
    371e:	41 e0       	ldi	r20, 0x01	; 1
    3720:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
						switch(NUM)
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	28 2f       	mov	r18, r24
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	3d 83       	std	Y+5, r19	; 0x05
    372c:	2c 83       	std	Y+4, r18	; 0x04
    372e:	8c 81       	ldd	r24, Y+4	; 0x04
    3730:	9d 81       	ldd	r25, Y+5	; 0x05
    3732:	84 30       	cpi	r24, 0x04	; 4
    3734:	91 05       	cpc	r25, r1
    3736:	09 f4       	brne	.+2      	; 0x373a <SevenSegment_Display+0xfd6>
    3738:	8e c0       	rjmp	.+284    	; 0x3856 <SevenSegment_Display+0x10f2>
    373a:	2c 81       	ldd	r18, Y+4	; 0x04
    373c:	3d 81       	ldd	r19, Y+5	; 0x05
    373e:	25 30       	cpi	r18, 0x05	; 5
    3740:	31 05       	cpc	r19, r1
    3742:	ec f4       	brge	.+58     	; 0x377e <SevenSegment_Display+0x101a>
    3744:	8c 81       	ldd	r24, Y+4	; 0x04
    3746:	9d 81       	ldd	r25, Y+5	; 0x05
    3748:	81 30       	cpi	r24, 0x01	; 1
    374a:	91 05       	cpc	r25, r1
    374c:	09 f4       	brne	.+2      	; 0x3750 <SevenSegment_Display+0xfec>
    374e:	4a c0       	rjmp	.+148    	; 0x37e4 <SevenSegment_Display+0x1080>
    3750:	2c 81       	ldd	r18, Y+4	; 0x04
    3752:	3d 81       	ldd	r19, Y+5	; 0x05
    3754:	22 30       	cpi	r18, 0x02	; 2
    3756:	31 05       	cpc	r19, r1
    3758:	2c f4       	brge	.+10     	; 0x3764 <SevenSegment_Display+0x1000>
    375a:	8c 81       	ldd	r24, Y+4	; 0x04
    375c:	9d 81       	ldd	r25, Y+5	; 0x05
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	99 f1       	breq	.+102    	; 0x37c8 <SevenSegment_Display+0x1064>
    3762:	e1 c0       	rjmp	.+450    	; 0x3926 <SevenSegment_Display+0x11c2>
    3764:	2c 81       	ldd	r18, Y+4	; 0x04
    3766:	3d 81       	ldd	r19, Y+5	; 0x05
    3768:	22 30       	cpi	r18, 0x02	; 2
    376a:	31 05       	cpc	r19, r1
    376c:	09 f4       	brne	.+2      	; 0x3770 <SevenSegment_Display+0x100c>
    376e:	4d c0       	rjmp	.+154    	; 0x380a <SevenSegment_Display+0x10a6>
    3770:	8c 81       	ldd	r24, Y+4	; 0x04
    3772:	9d 81       	ldd	r25, Y+5	; 0x05
    3774:	83 30       	cpi	r24, 0x03	; 3
    3776:	91 05       	cpc	r25, r1
    3778:	09 f4       	brne	.+2      	; 0x377c <SevenSegment_Display+0x1018>
    377a:	5a c0       	rjmp	.+180    	; 0x3830 <SevenSegment_Display+0x10cc>
    377c:	d4 c0       	rjmp	.+424    	; 0x3926 <SevenSegment_Display+0x11c2>
    377e:	2c 81       	ldd	r18, Y+4	; 0x04
    3780:	3d 81       	ldd	r19, Y+5	; 0x05
    3782:	27 30       	cpi	r18, 0x07	; 7
    3784:	31 05       	cpc	r19, r1
    3786:	09 f4       	brne	.+2      	; 0x378a <SevenSegment_Display+0x1026>
    3788:	9f c0       	rjmp	.+318    	; 0x38c8 <SevenSegment_Display+0x1164>
    378a:	8c 81       	ldd	r24, Y+4	; 0x04
    378c:	9d 81       	ldd	r25, Y+5	; 0x05
    378e:	88 30       	cpi	r24, 0x08	; 8
    3790:	91 05       	cpc	r25, r1
    3792:	6c f4       	brge	.+26     	; 0x37ae <SevenSegment_Display+0x104a>
    3794:	2c 81       	ldd	r18, Y+4	; 0x04
    3796:	3d 81       	ldd	r19, Y+5	; 0x05
    3798:	25 30       	cpi	r18, 0x05	; 5
    379a:	31 05       	cpc	r19, r1
    379c:	09 f4       	brne	.+2      	; 0x37a0 <SevenSegment_Display+0x103c>
    379e:	73 c0       	rjmp	.+230    	; 0x3886 <SevenSegment_Display+0x1122>
    37a0:	8c 81       	ldd	r24, Y+4	; 0x04
    37a2:	9d 81       	ldd	r25, Y+5	; 0x05
    37a4:	86 30       	cpi	r24, 0x06	; 6
    37a6:	91 05       	cpc	r25, r1
    37a8:	09 f4       	brne	.+2      	; 0x37ac <SevenSegment_Display+0x1048>
    37aa:	80 c0       	rjmp	.+256    	; 0x38ac <SevenSegment_Display+0x1148>
    37ac:	bc c0       	rjmp	.+376    	; 0x3926 <SevenSegment_Display+0x11c2>
    37ae:	2c 81       	ldd	r18, Y+4	; 0x04
    37b0:	3d 81       	ldd	r19, Y+5	; 0x05
    37b2:	28 30       	cpi	r18, 0x08	; 8
    37b4:	31 05       	cpc	r19, r1
    37b6:	09 f4       	brne	.+2      	; 0x37ba <SevenSegment_Display+0x1056>
    37b8:	9f c0       	rjmp	.+318    	; 0x38f8 <SevenSegment_Display+0x1194>
    37ba:	8c 81       	ldd	r24, Y+4	; 0x04
    37bc:	9d 81       	ldd	r25, Y+5	; 0x05
    37be:	89 30       	cpi	r24, 0x09	; 9
    37c0:	91 05       	cpc	r25, r1
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <SevenSegment_Display+0x1062>
    37c4:	a2 c0       	rjmp	.+324    	; 0x390a <SevenSegment_Display+0x11a6>
    37c6:	af c0       	rjmp	.+350    	; 0x3926 <SevenSegment_Display+0x11c2>
							{
								case Zero:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    37c8:	83 e0       	ldi	r24, 0x03	; 3
    37ca:	6f ef       	ldi	r22, 0xFF	; 255
    37cc:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	60 e0       	ldi	r22, 0x00	; 0
    37d4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,G,DIO_HIGH);
    37d8:	83 e0       	ldi	r24, 0x03	; 3
    37da:	66 e0       	ldi	r22, 0x06	; 6
    37dc:	41 e0       	ldi	r20, 0x01	; 1
    37de:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    37e2:	a7 c0       	rjmp	.+334    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case One:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	6f ef       	ldi	r22, 0xFF	; 255
    37e8:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    37ec:	83 e0       	ldi	r24, 0x03	; 3
    37ee:	6f ef       	ldi	r22, 0xFF	; 255
    37f0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    37f4:	83 e0       	ldi	r24, 0x03	; 3
    37f6:	61 e0       	ldi	r22, 0x01	; 1
    37f8:	40 e0       	ldi	r20, 0x00	; 0
    37fa:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    37fe:	83 e0       	ldi	r24, 0x03	; 3
    3800:	62 e0       	ldi	r22, 0x02	; 2
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3808:	94 c0       	rjmp	.+296    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Two:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    380a:	83 e0       	ldi	r24, 0x03	; 3
    380c:	6f ef       	ldi	r22, 0xFF	; 255
    380e:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3812:	83 e0       	ldi	r24, 0x03	; 3
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_HIGH);
    381a:	83 e0       	ldi	r24, 0x03	; 3
    381c:	62 e0       	ldi	r22, 0x02	; 2
    381e:	41 e0       	ldi	r20, 0x01	; 1
    3820:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    3824:	83 e0       	ldi	r24, 0x03	; 3
    3826:	65 e0       	ldi	r22, 0x05	; 5
    3828:	41 e0       	ldi	r20, 0x01	; 1
    382a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    382e:	81 c0       	rjmp	.+258    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Three:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3830:	83 e0       	ldi	r24, 0x03	; 3
    3832:	6f ef       	ldi	r22, 0xFF	; 255
    3834:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3838:	83 e0       	ldi	r24, 0x03	; 3
    383a:	60 e0       	ldi	r22, 0x00	; 0
    383c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    3840:	83 e0       	ldi	r24, 0x03	; 3
    3842:	64 e0       	ldi	r22, 0x04	; 4
    3844:	41 e0       	ldi	r20, 0x01	; 1
    3846:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,F,DIO_HIGH);
    384a:	83 e0       	ldi	r24, 0x03	; 3
    384c:	65 e0       	ldi	r22, 0x05	; 5
    384e:	41 e0       	ldi	r20, 0x01	; 1
    3850:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3854:	6e c0       	rjmp	.+220    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Four:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3856:	83 e0       	ldi	r24, 0x03	; 3
    3858:	6f ef       	ldi	r22, 0xFF	; 255
    385a:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    385e:	83 e0       	ldi	r24, 0x03	; 3
    3860:	60 e0       	ldi	r22, 0x00	; 0
    3862:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_HIGH);
    3866:	83 e0       	ldi	r24, 0x03	; 3
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	41 e0       	ldi	r20, 0x01	; 1
    386c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,D,DIO_HIGH);
    3870:	83 e0       	ldi	r24, 0x03	; 3
    3872:	63 e0       	ldi	r22, 0x03	; 3
    3874:	41 e0       	ldi	r20, 0x01	; 1
    3876:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    387a:	83 e0       	ldi	r24, 0x03	; 3
    387c:	64 e0       	ldi	r22, 0x04	; 4
    387e:	41 e0       	ldi	r20, 0x01	; 1
    3880:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3884:	56 c0       	rjmp	.+172    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Five:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    3886:	83 e0       	ldi	r24, 0x03	; 3
    3888:	6f ef       	ldi	r22, 0xFF	; 255
    388a:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	60 e0       	ldi	r22, 0x00	; 0
    3892:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    3896:	83 e0       	ldi	r24, 0x03	; 3
    3898:	61 e0       	ldi	r22, 0x01	; 1
    389a:	41 e0       	ldi	r20, 0x01	; 1
    389c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    38a0:	83 e0       	ldi	r24, 0x03	; 3
    38a2:	64 e0       	ldi	r22, 0x04	; 4
    38a4:	41 e0       	ldi	r20, 0x01	; 1
    38a6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    38aa:	43 c0       	rjmp	.+134    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Six:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    38ac:	83 e0       	ldi	r24, 0x03	; 3
    38ae:	6f ef       	ldi	r22, 0xFF	; 255
    38b0:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    38b4:	83 e0       	ldi	r24, 0x03	; 3
    38b6:	60 e0       	ldi	r22, 0x00	; 0
    38b8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_HIGH);
    38bc:	83 e0       	ldi	r24, 0x03	; 3
    38be:	61 e0       	ldi	r22, 0x01	; 1
    38c0:	41 e0       	ldi	r20, 0x01	; 1
    38c2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    38c6:	35 c0       	rjmp	.+106    	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Seven:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    38c8:	83 e0       	ldi	r24, 0x03	; 3
    38ca:	6f ef       	ldi	r22, 0xFF	; 255
    38cc:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_HIGH);
    38d0:	83 e0       	ldi	r24, 0x03	; 3
    38d2:	6f ef       	ldi	r22, 0xFF	; 255
    38d4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,A,DIO_LOW);
    38d8:	83 e0       	ldi	r24, 0x03	; 3
    38da:	60 e0       	ldi	r22, 0x00	; 0
    38dc:	40 e0       	ldi	r20, 0x00	; 0
    38de:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,B,DIO_LOW);
    38e2:	83 e0       	ldi	r24, 0x03	; 3
    38e4:	61 e0       	ldi	r22, 0x01	; 1
    38e6:	40 e0       	ldi	r20, 0x00	; 0
    38e8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
									DIO_SetPinValue(DIO_PORTD,C,DIO_LOW);
    38ec:	83 e0       	ldi	r24, 0x03	; 3
    38ee:	62 e0       	ldi	r22, 0x02	; 2
    38f0:	40 e0       	ldi	r20, 0x00	; 0
    38f2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    38f6:	1d c0       	rjmp	.+58     	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Eight:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    38f8:	83 e0       	ldi	r24, 0x03	; 3
    38fa:	6f ef       	ldi	r22, 0xFF	; 255
    38fc:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3900:	83 e0       	ldi	r24, 0x03	; 3
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
    3908:	14 c0       	rjmp	.+40     	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								case Nine:
									DIO_SetPortDirection(DIO_PORTD,PORT_OUTPUT);
    390a:	83 e0       	ldi	r24, 0x03	; 3
    390c:	6f ef       	ldi	r22, 0xFF	; 255
    390e:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
									DIO_SetPortValue(DIO_PORTD,PORT_LOW);
    3912:	83 e0       	ldi	r24, 0x03	; 3
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
									DIO_SetPinValue(DIO_PORTD,E,DIO_HIGH);
    391a:	83 e0       	ldi	r24, 0x03	; 3
    391c:	64 e0       	ldi	r22, 0x04	; 4
    391e:	41 e0       	ldi	r20, 0x01	; 1
    3920:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3924:	06 c0       	rjmp	.+12     	; 0x3932 <SevenSegment_Display+0x11ce>
									break;
								default:
								return E_OK;
    3926:	18 8e       	std	Y+24, r1	; 0x18
    3928:	06 c0       	rjmp	.+12     	; 0x3936 <SevenSegment_Display+0x11d2>
							}
					break;
					default:
					return E_OK;
    392a:	18 8e       	std	Y+24, r1	; 0x18
    392c:	04 c0       	rjmp	.+8      	; 0x3936 <SevenSegment_Display+0x11d2>
				}
				break;
	default:
	return E_OK;
    392e:	18 8e       	std	Y+24, r1	; 0x18
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <SevenSegment_Display+0x11d2>
}
	return E_NOK;
    3932:	91 e0       	ldi	r25, 0x01	; 1
    3934:	98 8f       	std	Y+24, r25	; 0x18
    3936:	88 8d       	ldd	r24, Y+24	; 0x18
}
    3938:	6e 96       	adiw	r28, 0x1e	; 30
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	de bf       	out	0x3e, r29	; 62
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	cf 91       	pop	r28
    3946:	df 91       	pop	r29
    3948:	08 95       	ret

0000394a <CLCD_init>:
#include "LCD_Config.h"
#include <stdio.h>
#include <util/delay.h>
#include <stdlib.h>
void CLCD_init(void)
{
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	2e 97       	sbiw	r28, 0x0e	; 14
    3954:	0f b6       	in	r0, 0x3f	; 63
    3956:	f8 94       	cli
    3958:	de bf       	out	0x3e, r29	; 62
    395a:	0f be       	out	0x3f, r0	; 63
    395c:	cd bf       	out	0x3d, r28	; 61
	//Initialize LCD pins direction
	DIO_SetPortDirection(CLCD_DataPort,DIO_OUTPUT);
    395e:	82 e0       	ldi	r24, 0x02	; 2
    3960:	61 e0       	ldi	r22, 0x01	; 1
    3962:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RS_PIN,DIO_OUTPUT);
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	41 e0       	ldi	r20, 0x01	; 1
    396c:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_RW_PIN,DIO_OUTPUT);
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	61 e0       	ldi	r22, 0x01	; 1
    3974:	41 e0       	ldi	r20, 0x01	; 1
    3976:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_ControlPort,CLCD_E_PIN,DIO_OUTPUT);
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	62 e0       	ldi	r22, 0x02	; 2
    397e:	41 e0       	ldi	r20, 0x01	; 1
    3980:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	a0 e2       	ldi	r26, 0x20	; 32
    398a:	b2 e4       	ldi	r27, 0x42	; 66
    398c:	8b 87       	std	Y+11, r24	; 0x0b
    398e:	9c 87       	std	Y+12, r25	; 0x0c
    3990:	ad 87       	std	Y+13, r26	; 0x0d
    3992:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3994:	6b 85       	ldd	r22, Y+11	; 0x0b
    3996:	7c 85       	ldd	r23, Y+12	; 0x0c
    3998:	8d 85       	ldd	r24, Y+13	; 0x0d
    399a:	9e 85       	ldd	r25, Y+14	; 0x0e
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	4a ef       	ldi	r20, 0xFA	; 250
    39a2:	54 e4       	ldi	r21, 0x44	; 68
    39a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	8f 83       	std	Y+7, r24	; 0x07
    39ae:	98 87       	std	Y+8, r25	; 0x08
    39b0:	a9 87       	std	Y+9, r26	; 0x09
    39b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39b4:	6f 81       	ldd	r22, Y+7	; 0x07
    39b6:	78 85       	ldd	r23, Y+8	; 0x08
    39b8:	89 85       	ldd	r24, Y+9	; 0x09
    39ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e8       	ldi	r20, 0x80	; 128
    39c2:	5f e3       	ldi	r21, 0x3F	; 63
    39c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39c8:	88 23       	and	r24, r24
    39ca:	2c f4       	brge	.+10     	; 0x39d6 <CLCD_init+0x8c>
		__ticks = 1;
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	9e 83       	std	Y+6, r25	; 0x06
    39d2:	8d 83       	std	Y+5, r24	; 0x05
    39d4:	3f c0       	rjmp	.+126    	; 0x3a54 <CLCD_init+0x10a>
	else if (__tmp > 65535)
    39d6:	6f 81       	ldd	r22, Y+7	; 0x07
    39d8:	78 85       	ldd	r23, Y+8	; 0x08
    39da:	89 85       	ldd	r24, Y+9	; 0x09
    39dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	3f ef       	ldi	r19, 0xFF	; 255
    39e2:	4f e7       	ldi	r20, 0x7F	; 127
    39e4:	57 e4       	ldi	r21, 0x47	; 71
    39e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ea:	18 16       	cp	r1, r24
    39ec:	4c f5       	brge	.+82     	; 0x3a40 <CLCD_init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e2       	ldi	r20, 0x20	; 32
    39fc:	51 e4       	ldi	r21, 0x41	; 65
    39fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	bc 01       	movw	r22, r24
    3a08:	cd 01       	movw	r24, r26
    3a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	9e 83       	std	Y+6, r25	; 0x06
    3a14:	8d 83       	std	Y+5, r24	; 0x05
    3a16:	0f c0       	rjmp	.+30     	; 0x3a36 <CLCD_init+0xec>
    3a18:	88 ec       	ldi	r24, 0xC8	; 200
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	9c 83       	std	Y+4, r25	; 0x04
    3a1e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a20:	8b 81       	ldd	r24, Y+3	; 0x03
    3a22:	9c 81       	ldd	r25, Y+4	; 0x04
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <CLCD_init+0xda>
    3a28:	9c 83       	std	Y+4, r25	; 0x04
    3a2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	9e 83       	std	Y+6, r25	; 0x06
    3a34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a36:	8d 81       	ldd	r24, Y+5	; 0x05
    3a38:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3a:	00 97       	sbiw	r24, 0x00	; 0
    3a3c:	69 f7       	brne	.-38     	; 0x3a18 <CLCD_init+0xce>
    3a3e:	14 c0       	rjmp	.+40     	; 0x3a68 <CLCD_init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a40:	6f 81       	ldd	r22, Y+7	; 0x07
    3a42:	78 85       	ldd	r23, Y+8	; 0x08
    3a44:	89 85       	ldd	r24, Y+9	; 0x09
    3a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	9e 83       	std	Y+6, r25	; 0x06
    3a52:	8d 83       	std	Y+5, r24	; 0x05
    3a54:	8d 81       	ldd	r24, Y+5	; 0x05
    3a56:	9e 81       	ldd	r25, Y+6	; 0x06
    3a58:	9a 83       	std	Y+2, r25	; 0x02
    3a5a:	89 83       	std	Y+1, r24	; 0x01
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <CLCD_init+0x116>
    3a64:	9a 83       	std	Y+2, r25	; 0x02
    3a66:	89 83       	std	Y+1, r24	; 0x01
	#ifdef CLCD_OneLine_5x8Size
	CLCD_SendCommand(CLCD_OneLine_5x8Size);
	#elif CLCD_OneLine_5x11Size
	CLCD_SendCommand(CLCD_OneLine_5x11Size );
	#elif  CLCD_TwoLines_5x8Size
	CLCD_SendCommand(CLCD_TwoLines_5x8Size);
    3a68:	88 e3       	ldi	r24, 0x38	; 56
    3a6a:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <CLCD_SendCommand>
	#elif CLCD_TwoLines_5x11Size
	CLCD_SendCommand(CLCD_TwoLines_5x11Size);
	#endif

	CLCD_SendCommand(CLCD_DISP_ON_CURSOR_BLINK);
    3a6e:	8f e0       	ldi	r24, 0x0F	; 15
    3a70:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <CLCD_SendCommand>

	CLCD_SendCommand(CLCD_CLEAR);
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <CLCD_SendCommand>
}
    3a7a:	2e 96       	adiw	r28, 0x0e	; 14
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	cf 91       	pop	r28
    3a88:	df 91       	pop	r29
    3a8a:	08 95       	ret

00003a8c <CLCD_SendCommand>:

void CLCD_SendCommand(u8 Command)
{
    3a8c:	df 93       	push	r29
    3a8e:	cf 93       	push	r28
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
    3a94:	2f 97       	sbiw	r28, 0x0f	; 15
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	cd bf       	out	0x3d, r28	; 61
    3aa0:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_LOW);
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	60 e0       	ldi	r22, 0x00	; 0
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
	//SET ReadWrite pin low to write
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	61 e0       	ldi	r22, 0x01	; 1
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
	//SET Data/Command Port value is the command
	DIO_SetPortValue(CLCD_DataPort,Command);
    3ab6:	82 e0       	ldi	r24, 0x02	; 2
    3ab8:	6f 85       	ldd	r22, Y+15	; 0x0f
    3aba:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	62 e0       	ldi	r22, 0x02	; 2
    3ac2:	41 e0       	ldi	r20, 0x01	; 1
    3ac4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	a0 e0       	ldi	r26, 0x00	; 0
    3ace:	b0 e4       	ldi	r27, 0x40	; 64
    3ad0:	8b 87       	std	Y+11, r24	; 0x0b
    3ad2:	9c 87       	std	Y+12, r25	; 0x0c
    3ad4:	ad 87       	std	Y+13, r26	; 0x0d
    3ad6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    3adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	4a ef       	ldi	r20, 0xFA	; 250
    3ae6:	54 e4       	ldi	r21, 0x44	; 68
    3ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	8f 83       	std	Y+7, r24	; 0x07
    3af2:	98 87       	std	Y+8, r25	; 0x08
    3af4:	a9 87       	std	Y+9, r26	; 0x09
    3af6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3af8:	6f 81       	ldd	r22, Y+7	; 0x07
    3afa:	78 85       	ldd	r23, Y+8	; 0x08
    3afc:	89 85       	ldd	r24, Y+9	; 0x09
    3afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e8       	ldi	r20, 0x80	; 128
    3b06:	5f e3       	ldi	r21, 0x3F	; 63
    3b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b0c:	88 23       	and	r24, r24
    3b0e:	2c f4       	brge	.+10     	; 0x3b1a <CLCD_SendCommand+0x8e>
		__ticks = 1;
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	9e 83       	std	Y+6, r25	; 0x06
    3b16:	8d 83       	std	Y+5, r24	; 0x05
    3b18:	3f c0       	rjmp	.+126    	; 0x3b98 <CLCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    3b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1c:	78 85       	ldd	r23, Y+8	; 0x08
    3b1e:	89 85       	ldd	r24, Y+9	; 0x09
    3b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	3f ef       	ldi	r19, 0xFF	; 255
    3b26:	4f e7       	ldi	r20, 0x7F	; 127
    3b28:	57 e4       	ldi	r21, 0x47	; 71
    3b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b2e:	18 16       	cp	r1, r24
    3b30:	4c f5       	brge	.+82     	; 0x3b84 <CLCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	40 e2       	ldi	r20, 0x20	; 32
    3b40:	51 e4       	ldi	r21, 0x41	; 65
    3b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	bc 01       	movw	r22, r24
    3b4c:	cd 01       	movw	r24, r26
    3b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	9e 83       	std	Y+6, r25	; 0x06
    3b58:	8d 83       	std	Y+5, r24	; 0x05
    3b5a:	0f c0       	rjmp	.+30     	; 0x3b7a <CLCD_SendCommand+0xee>
    3b5c:	88 ec       	ldi	r24, 0xC8	; 200
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	9c 83       	std	Y+4, r25	; 0x04
    3b62:	8b 83       	std	Y+3, r24	; 0x03
    3b64:	8b 81       	ldd	r24, Y+3	; 0x03
    3b66:	9c 81       	ldd	r25, Y+4	; 0x04
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	f1 f7       	brne	.-4      	; 0x3b68 <CLCD_SendCommand+0xdc>
    3b6c:	9c 83       	std	Y+4, r25	; 0x04
    3b6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b70:	8d 81       	ldd	r24, Y+5	; 0x05
    3b72:	9e 81       	ldd	r25, Y+6	; 0x06
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	9e 83       	std	Y+6, r25	; 0x06
    3b78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	69 f7       	brne	.-38     	; 0x3b5c <CLCD_SendCommand+0xd0>
    3b82:	14 c0       	rjmp	.+40     	; 0x3bac <CLCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b84:	6f 81       	ldd	r22, Y+7	; 0x07
    3b86:	78 85       	ldd	r23, Y+8	; 0x08
    3b88:	89 85       	ldd	r24, Y+9	; 0x09
    3b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	9e 83       	std	Y+6, r25	; 0x06
    3b96:	8d 83       	std	Y+5, r24	; 0x05
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9c:	9a 83       	std	Y+2, r25	; 0x02
    3b9e:	89 83       	std	Y+1, r24	; 0x01
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	f1 f7       	brne	.-4      	; 0x3ba4 <CLCD_SendCommand+0x118>
    3ba8:	9a 83       	std	Y+2, r25	; 0x02
    3baa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	62 e0       	ldi	r22, 0x02	; 2
    3bb0:	40 e0       	ldi	r20, 0x00	; 0
    3bb2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
}
    3bb6:	2f 96       	adiw	r28, 0x0f	; 15
    3bb8:	0f b6       	in	r0, 0x3f	; 63
    3bba:	f8 94       	cli
    3bbc:	de bf       	out	0x3e, r29	; 62
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	cd bf       	out	0x3d, r28	; 61
    3bc2:	cf 91       	pop	r28
    3bc4:	df 91       	pop	r29
    3bc6:	08 95       	ret

00003bc8 <CLCD_SendData>:

void CLCD_SendData(u8 Data)
{
    3bc8:	df 93       	push	r29
    3bca:	cf 93       	push	r28
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
    3bd0:	2f 97       	sbiw	r28, 0x0f	; 15
    3bd2:	0f b6       	in	r0, 0x3f	; 63
    3bd4:	f8 94       	cli
    3bd6:	de bf       	out	0x3e, r29	; 62
    3bd8:	0f be       	out	0x3f, r0	; 63
    3bda:	cd bf       	out	0x3d, r28	; 61
    3bdc:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RegisterSelect pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RS_PIN,DIO_HIGH);
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	41 e0       	ldi	r20, 0x01	; 1
    3be4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
	//SET ReadWrite pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_RW_PIN,DIO_LOW);
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	61 e0       	ldi	r22, 0x01	; 1
    3bec:	40 e0       	ldi	r20, 0x00	; 0
    3bee:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
	//SET Data/Command Port value is the Data
	DIO_SetPortValue(CLCD_DataPort,Data);
    3bf2:	82 e0       	ldi	r24, 0x02	; 2
    3bf4:	6f 85       	ldd	r22, Y+15	; 0x0f
    3bf6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <DIO_SetPortValue>
	//SET Enable pin high
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_HIGH);
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	62 e0       	ldi	r22, 0x02	; 2
    3bfe:	41 e0       	ldi	r20, 0x01	; 1
    3c00:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	a0 e0       	ldi	r26, 0x00	; 0
    3c0a:	b0 e4       	ldi	r27, 0x40	; 64
    3c0c:	8b 87       	std	Y+11, r24	; 0x0b
    3c0e:	9c 87       	std	Y+12, r25	; 0x0c
    3c10:	ad 87       	std	Y+13, r26	; 0x0d
    3c12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	4a ef       	ldi	r20, 0xFA	; 250
    3c22:	54 e4       	ldi	r21, 0x44	; 68
    3c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	8f 83       	std	Y+7, r24	; 0x07
    3c2e:	98 87       	std	Y+8, r25	; 0x08
    3c30:	a9 87       	std	Y+9, r26	; 0x09
    3c32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c34:	6f 81       	ldd	r22, Y+7	; 0x07
    3c36:	78 85       	ldd	r23, Y+8	; 0x08
    3c38:	89 85       	ldd	r24, Y+9	; 0x09
    3c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	40 e8       	ldi	r20, 0x80	; 128
    3c42:	5f e3       	ldi	r21, 0x3F	; 63
    3c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c48:	88 23       	and	r24, r24
    3c4a:	2c f4       	brge	.+10     	; 0x3c56 <CLCD_SendData+0x8e>
		__ticks = 1;
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	9e 83       	std	Y+6, r25	; 0x06
    3c52:	8d 83       	std	Y+5, r24	; 0x05
    3c54:	3f c0       	rjmp	.+126    	; 0x3cd4 <CLCD_SendData+0x10c>
	else if (__tmp > 65535)
    3c56:	6f 81       	ldd	r22, Y+7	; 0x07
    3c58:	78 85       	ldd	r23, Y+8	; 0x08
    3c5a:	89 85       	ldd	r24, Y+9	; 0x09
    3c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	3f ef       	ldi	r19, 0xFF	; 255
    3c62:	4f e7       	ldi	r20, 0x7F	; 127
    3c64:	57 e4       	ldi	r21, 0x47	; 71
    3c66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c6a:	18 16       	cp	r1, r24
    3c6c:	4c f5       	brge	.+82     	; 0x3cc0 <CLCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	40 e2       	ldi	r20, 0x20	; 32
    3c7c:	51 e4       	ldi	r21, 0x41	; 65
    3c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	bc 01       	movw	r22, r24
    3c88:	cd 01       	movw	r24, r26
    3c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	9e 83       	std	Y+6, r25	; 0x06
    3c94:	8d 83       	std	Y+5, r24	; 0x05
    3c96:	0f c0       	rjmp	.+30     	; 0x3cb6 <CLCD_SendData+0xee>
    3c98:	88 ec       	ldi	r24, 0xC8	; 200
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	9c 83       	std	Y+4, r25	; 0x04
    3c9e:	8b 83       	std	Y+3, r24	; 0x03
    3ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	f1 f7       	brne	.-4      	; 0x3ca4 <CLCD_SendData+0xdc>
    3ca8:	9c 83       	std	Y+4, r25	; 0x04
    3caa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cac:	8d 81       	ldd	r24, Y+5	; 0x05
    3cae:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cba:	00 97       	sbiw	r24, 0x00	; 0
    3cbc:	69 f7       	brne	.-38     	; 0x3c98 <CLCD_SendData+0xd0>
    3cbe:	14 c0       	rjmp	.+40     	; 0x3ce8 <CLCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc2:	78 85       	ldd	r23, Y+8	; 0x08
    3cc4:	89 85       	ldd	r24, Y+9	; 0x09
    3cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	9e 83       	std	Y+6, r25	; 0x06
    3cd2:	8d 83       	std	Y+5, r24	; 0x05
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	f1 f7       	brne	.-4      	; 0x3ce0 <CLCD_SendData+0x118>
    3ce4:	9a 83       	std	Y+2, r25	; 0x02
    3ce6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//SET Enable pin low
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	62 e0       	ldi	r22, 0x02	; 2
    3cec:	40 e0       	ldi	r20, 0x00	; 0
    3cee:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>
}
    3cf2:	2f 96       	adiw	r28, 0x0f	; 15
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	cf 91       	pop	r28
    3d00:	df 91       	pop	r29
    3d02:	08 95       	ret

00003d04 <CLCD_SendWord>:

void CLCD_SendWord(u8 *Word_PTR)
{
    3d04:	df 93       	push	r29
    3d06:	cf 93       	push	r28
    3d08:	00 d0       	rcall	.+0      	; 0x3d0a <CLCD_SendWord+0x6>
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	9a 83       	std	Y+2, r25	; 0x02
    3d10:	89 83       	std	Y+1, r24	; 0x01
    3d12:	0b c0       	rjmp	.+22     	; 0x3d2a <CLCD_SendWord+0x26>
	while(*Word_PTR) 		//Word = String = array of charaters
	{
		CLCD_SendData(*Word_PTR++);
    3d14:	e9 81       	ldd	r30, Y+1	; 0x01
    3d16:	fa 81       	ldd	r31, Y+2	; 0x02
    3d18:	20 81       	ld	r18, Z
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1e:	01 96       	adiw	r24, 0x01	; 1
    3d20:	9a 83       	std	Y+2, r25	; 0x02
    3d22:	89 83       	std	Y+1, r24	; 0x01
    3d24:	82 2f       	mov	r24, r18
    3d26:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <CLCD_SendData>
	DIO_SetPinValue(CLCD_ControlPort,CLCD_E_PIN,DIO_LOW);
}

void CLCD_SendWord(u8 *Word_PTR)
{
	while(*Word_PTR) 		//Word = String = array of charaters
    3d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d2e:	80 81       	ld	r24, Z
    3d30:	88 23       	and	r24, r24
    3d32:	81 f7       	brne	.-32     	; 0x3d14 <CLCD_SendWord+0x10>
	{
		CLCD_SendData(*Word_PTR++);
	}
}
    3d34:	0f 90       	pop	r0
    3d36:	0f 90       	pop	r0
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <CLCD_GoToXY>:

//to move from position to another in CLCD
STD_Return CLCD_GoToXY(u8 X_Position,u8 Y_Position)
{
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <CLCD_GoToXY+0x6>
    3d44:	00 d0       	rcall	.+0      	; 0x3d46 <CLCD_GoToXY+0x8>
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	8a 83       	std	Y+2, r24	; 0x02
    3d4c:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_address;
	if(X_Position == 0)
    3d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d50:	88 23       	and	r24, r24
    3d52:	49 f4       	brne	.+18     	; 0x3d66 <CLCD_GoToXY+0x28>
		{
			DDRAM_address = Y_Position;
    3d54:	8b 81       	ldd	r24, Y+3	; 0x03
    3d56:	89 83       	std	Y+1, r24	; 0x01
			CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    3d58:	89 81       	ldd	r24, Y+1	; 0x01
    3d5a:	80 58       	subi	r24, 0x80	; 128
    3d5c:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <CLCD_SendCommand>
			return E_NOK;
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	8c 83       	std	Y+4, r24	; 0x04
    3d64:	0e c0       	rjmp	.+28     	; 0x3d82 <CLCD_GoToXY+0x44>
		}
	else if (X_Position == 1)
    3d66:	8a 81       	ldd	r24, Y+2	; 0x02
    3d68:	81 30       	cpi	r24, 0x01	; 1
    3d6a:	51 f4       	brne	.+20     	; 0x3d80 <CLCD_GoToXY+0x42>
		{
		DDRAM_address = Y_Position + FirstLoc_SecondLine;
    3d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6e:	80 5c       	subi	r24, 0xC0	; 192
    3d70:	89 83       	std	Y+1, r24	; 0x01
		CLCD_SendCommand(DDRAM_address+Set_Bit7); //128 the value of bit 7 when it set high in DDRAM
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	80 58       	subi	r24, 0x80	; 128
    3d76:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <CLCD_SendCommand>
		return E_NOK;
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	8c 83       	std	Y+4, r24	; 0x04
    3d7e:	01 c0       	rjmp	.+2      	; 0x3d82 <CLCD_GoToXY+0x44>
		}
	else
	{
		return E_OK;
    3d80:	1c 82       	std	Y+4, r1	; 0x04
    3d82:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
    3d8c:	cf 91       	pop	r28
    3d8e:	df 91       	pop	r29
    3d90:	08 95       	ret

00003d92 <CLCD_SendSpecialChar>:
//to write special function by CGRAM
void CLCD_SendSpecialChar(u8 *Pattern,u8 BlockNumber,u8 X_Position,u8 Y_Position)
{
    3d92:	df 93       	push	r29
    3d94:	cf 93       	push	r28
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	27 97       	sbiw	r28, 0x07	; 7
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	f8 94       	cli
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	cd bf       	out	0x3d, r28	; 61
    3da6:	9c 83       	std	Y+4, r25	; 0x04
    3da8:	8b 83       	std	Y+3, r24	; 0x03
    3daa:	6d 83       	std	Y+5, r22	; 0x05
    3dac:	4e 83       	std	Y+6, r20	; 0x06
    3dae:	2f 83       	std	Y+7, r18	; 0x07
	u8 CGRAM_address=0;
    3db0:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter;
	CGRAM_address = BlockNumber*8;
    3db2:	8d 81       	ldd	r24, Y+5	; 0x05
    3db4:	88 2f       	mov	r24, r24
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	88 0f       	add	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	88 0f       	add	r24, r24
    3dc2:	99 1f       	adc	r25, r25
    3dc4:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_SendCommand(CGRAM_address+Set_Bit6);
    3dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc8:	80 5c       	subi	r24, 0xC0	; 192
    3dca:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <CLCD_SendCommand>

	for(counter=0;counter<8;counter++)
    3dce:	19 82       	std	Y+1, r1	; 0x01
    3dd0:	0e c0       	rjmp	.+28     	; 0x3dee <CLCD_SendSpecialChar+0x5c>
		{
			CLCD_SendData(Pattern[counter]);
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	28 2f       	mov	r18, r24
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dda:	9c 81       	ldd	r25, Y+4	; 0x04
    3ddc:	fc 01       	movw	r30, r24
    3dde:	e2 0f       	add	r30, r18
    3de0:	f3 1f       	adc	r31, r19
    3de2:	80 81       	ld	r24, Z
    3de4:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <CLCD_SendData>
	u8 CGRAM_address=0;
	u8 counter;
	CGRAM_address = BlockNumber*8;
	CLCD_SendCommand(CGRAM_address+Set_Bit6);

	for(counter=0;counter<8;counter++)
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
    3dea:	8f 5f       	subi	r24, 0xFF	; 255
    3dec:	89 83       	std	Y+1, r24	; 0x01
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
    3df0:	88 30       	cpi	r24, 0x08	; 8
    3df2:	78 f3       	brcs	.-34     	; 0x3dd2 <CLCD_SendSpecialChar+0x40>
		{
			CLCD_SendData(Pattern[counter]);
		}
	CLCD_GoToXY(X_Position,Y_Position);
    3df4:	8e 81       	ldd	r24, Y+6	; 0x06
    3df6:	6f 81       	ldd	r22, Y+7	; 0x07
    3df8:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <CLCD_GoToXY>
	CLCD_SendData(BlockNumber);
    3dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dfe:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <CLCD_SendData>
}
    3e02:	27 96       	adiw	r28, 0x07	; 7
    3e04:	0f b6       	in	r0, 0x3f	; 63
    3e06:	f8 94       	cli
    3e08:	de bf       	out	0x3e, r29	; 62
    3e0a:	0f be       	out	0x3f, r0	; 63
    3e0c:	cd bf       	out	0x3d, r28	; 61
    3e0e:	cf 91       	pop	r28
    3e10:	df 91       	pop	r29
    3e12:	08 95       	ret

00003e14 <CLCD_Display_Decimal_Number>:

void CLCD_Display_Decimal_Number(s32 num)
{
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	cd b7       	in	r28, 0x3d	; 61
    3e1a:	de b7       	in	r29, 0x3e	; 62
    3e1c:	61 97       	sbiw	r28, 0x11	; 17
    3e1e:	0f b6       	in	r0, 0x3f	; 63
    3e20:	f8 94       	cli
    3e22:	de bf       	out	0x3e, r29	; 62
    3e24:	0f be       	out	0x3f, r0	; 63
    3e26:	cd bf       	out	0x3d, r28	; 61
    3e28:	6e 87       	std	Y+14, r22	; 0x0e
    3e2a:	7f 87       	std	Y+15, r23	; 0x0f
    3e2c:	88 8b       	std	Y+16, r24	; 0x10
    3e2e:	99 8b       	std	Y+17, r25	; 0x11
	u8 i = 0, j, digit, str[10];
    3e30:	1b 82       	std	Y+3, r1	; 0x03

	/* if number 0 */
	if (0 == num)
    3e32:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e34:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e36:	a8 89       	ldd	r26, Y+16	; 0x10
    3e38:	b9 89       	ldd	r27, Y+17	; 0x11
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	a1 05       	cpc	r26, r1
    3e3e:	b1 05       	cpc	r27, r1
    3e40:	19 f4       	brne	.+6      	; 0x3e48 <CLCD_Display_Decimal_Number+0x34>
	{
		CLCD_SendData('0');
    3e42:	80 e3       	ldi	r24, 0x30	; 48
    3e44:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <CLCD_SendData>
	}

	/* if the number is negative */
	if (num < 0)
    3e48:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e4c:	a8 89       	ldd	r26, Y+16	; 0x10
    3e4e:	b9 89       	ldd	r27, Y+17	; 0x11
    3e50:	bb 23       	and	r27, r27
    3e52:	0c f0       	brlt	.+2      	; 0x3e56 <CLCD_Display_Decimal_Number+0x42>
    3e54:	42 c0       	rjmp	.+132    	; 0x3eda <CLCD_Display_Decimal_Number+0xc6>
	{
		CLCD_SendData('-');
    3e56:	8d e2       	ldi	r24, 0x2D	; 45
    3e58:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <CLCD_SendData>

		/* convert to positive form */
		num = num * -1;
    3e5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e60:	a8 89       	ldd	r26, Y+16	; 0x10
    3e62:	b9 89       	ldd	r27, Y+17	; 0x11
    3e64:	b0 95       	com	r27
    3e66:	a0 95       	com	r26
    3e68:	90 95       	com	r25
    3e6a:	81 95       	neg	r24
    3e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6e:	af 4f       	sbci	r26, 0xFF	; 255
    3e70:	bf 4f       	sbci	r27, 0xFF	; 255
    3e72:	8e 87       	std	Y+14, r24	; 0x0e
    3e74:	9f 87       	std	Y+15, r25	; 0x0f
    3e76:	a8 8b       	std	Y+16, r26	; 0x10
    3e78:	b9 8b       	std	Y+17, r27	; 0x11
    3e7a:	2f c0       	rjmp	.+94     	; 0x3eda <CLCD_Display_Decimal_Number+0xc6>
	}

	/* loop on digits of the number */
	while (num > 0)
	{
		digit = (num % 10) + '0';
    3e7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e80:	a8 89       	ldd	r26, Y+16	; 0x10
    3e82:	b9 89       	ldd	r27, Y+17	; 0x11
    3e84:	2a e0       	ldi	r18, 0x0A	; 10
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	40 e0       	ldi	r20, 0x00	; 0
    3e8a:	50 e0       	ldi	r21, 0x00	; 0
    3e8c:	bc 01       	movw	r22, r24
    3e8e:	cd 01       	movw	r24, r26
    3e90:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__divmodsi4>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	80 5d       	subi	r24, 0xD0	; 208
    3e9a:	89 83       	std	Y+1, r24	; 0x01
		str[i] = digit;
    3e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9e:	28 2f       	mov	r18, r24
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	ce 01       	movw	r24, r28
    3ea4:	04 96       	adiw	r24, 0x04	; 4
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	e2 0f       	add	r30, r18
    3eaa:	f3 1f       	adc	r31, r19
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	80 83       	st	Z, r24
		num /= 10;
    3eb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3eb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3eb4:	a8 89       	ldd	r26, Y+16	; 0x10
    3eb6:	b9 89       	ldd	r27, Y+17	; 0x11
    3eb8:	2a e0       	ldi	r18, 0x0A	; 10
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	40 e0       	ldi	r20, 0x00	; 0
    3ebe:	50 e0       	ldi	r21, 0x00	; 0
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__divmodsi4>
    3ec8:	da 01       	movw	r26, r20
    3eca:	c9 01       	movw	r24, r18
    3ecc:	8e 87       	std	Y+14, r24	; 0x0e
    3ece:	9f 87       	std	Y+15, r25	; 0x0f
    3ed0:	a8 8b       	std	Y+16, r26	; 0x10
    3ed2:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    3ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed6:	8f 5f       	subi	r24, 0xFF	; 255
    3ed8:	8b 83       	std	Y+3, r24	; 0x03
		/* convert to positive form */
		num = num * -1;
	}

	/* loop on digits of the number */
	while (num > 0)
    3eda:	8e 85       	ldd	r24, Y+14	; 0x0e
    3edc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ede:	a8 89       	ldd	r26, Y+16	; 0x10
    3ee0:	b9 89       	ldd	r27, Y+17	; 0x11
    3ee2:	18 16       	cp	r1, r24
    3ee4:	19 06       	cpc	r1, r25
    3ee6:	1a 06       	cpc	r1, r26
    3ee8:	1b 06       	cpc	r1, r27
    3eea:	44 f2       	brlt	.-112    	; 0x3e7c <CLCD_Display_Decimal_Number+0x68>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    3eec:	8b 81       	ldd	r24, Y+3	; 0x03
    3eee:	8a 83       	std	Y+2, r24	; 0x02
    3ef0:	11 c0       	rjmp	.+34     	; 0x3f14 <CLCD_Display_Decimal_Number+0x100>
	{
		CLCD_SendData(str[j - 1]);
    3ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef4:	88 2f       	mov	r24, r24
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	9c 01       	movw	r18, r24
    3efa:	21 50       	subi	r18, 0x01	; 1
    3efc:	30 40       	sbci	r19, 0x00	; 0
    3efe:	ce 01       	movw	r24, r28
    3f00:	04 96       	adiw	r24, 0x04	; 4
    3f02:	fc 01       	movw	r30, r24
    3f04:	e2 0f       	add	r30, r18
    3f06:	f3 1f       	adc	r31, r19
    3f08:	80 81       	ld	r24, Z
    3f0a:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <CLCD_SendData>
		num /= 10;
		i++;
	}

	/* print str on LCD */
	for (j = i; j > 0; j--)
    3f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f10:	81 50       	subi	r24, 0x01	; 1
    3f12:	8a 83       	std	Y+2, r24	; 0x02
    3f14:	8a 81       	ldd	r24, Y+2	; 0x02
    3f16:	88 23       	and	r24, r24
    3f18:	61 f7       	brne	.-40     	; 0x3ef2 <CLCD_Display_Decimal_Number+0xde>
	{
		CLCD_SendData(str[j - 1]);
	}
}
    3f1a:	61 96       	adiw	r28, 0x11	; 17
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	08 95       	ret

00003f2c <CLCD_Display_RealNumber>:
void CLCD_Display_RealNumber(f32 num)
{
    3f2c:	df 93       	push	r29
    3f2e:	cf 93       	push	r28
    3f30:	cd b7       	in	r28, 0x3d	; 61
    3f32:	de b7       	in	r29, 0x3e	; 62
    3f34:	29 97       	sbiw	r28, 0x09	; 9
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	f8 94       	cli
    3f3a:	de bf       	out	0x3e, r29	; 62
    3f3c:	0f be       	out	0x3f, r0	; 63
    3f3e:	cd bf       	out	0x3d, r28	; 61
    3f40:	6e 83       	std	Y+6, r22	; 0x06
    3f42:	7f 83       	std	Y+7, r23	; 0x07
    3f44:	88 87       	std	Y+8, r24	; 0x08
    3f46:	99 87       	std	Y+9, r25	; 0x09
	//Left number to the decimal point
	s32 left = (s32)num;
    3f48:	6e 81       	ldd	r22, Y+6	; 0x06
    3f4a:	7f 81       	ldd	r23, Y+7	; 0x07
    3f4c:	88 85       	ldd	r24, Y+8	; 0x08
    3f4e:	99 85       	ldd	r25, Y+9	; 0x09
    3f50:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	8a 83       	std	Y+2, r24	; 0x02
    3f5a:	9b 83       	std	Y+3, r25	; 0x03
    3f5c:	ac 83       	std	Y+4, r26	; 0x04
    3f5e:	bd 83       	std	Y+5, r27	; 0x05
	//calculation to the Right number to the decimal point
	u8 right = (f32)(num - left) * 100;
    3f60:	6a 81       	ldd	r22, Y+2	; 0x02
    3f62:	7b 81       	ldd	r23, Y+3	; 0x03
    3f64:	8c 81       	ldd	r24, Y+4	; 0x04
    3f66:	9d 81       	ldd	r25, Y+5	; 0x05
    3f68:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3f6c:	9b 01       	movw	r18, r22
    3f6e:	ac 01       	movw	r20, r24
    3f70:	6e 81       	ldd	r22, Y+6	; 0x06
    3f72:	7f 81       	ldd	r23, Y+7	; 0x07
    3f74:	88 85       	ldd	r24, Y+8	; 0x08
    3f76:	99 85       	ldd	r25, Y+9	; 0x09
    3f78:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	bc 01       	movw	r22, r24
    3f82:	cd 01       	movw	r24, r26
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	48 ec       	ldi	r20, 0xC8	; 200
    3f8a:	52 e4       	ldi	r21, 0x42	; 66
    3f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	bc 01       	movw	r22, r24
    3f96:	cd 01       	movw	r24, r26
    3f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	89 83       	std	Y+1, r24	; 0x01
	//Display Left number to the decimal point
	CLCD_Display_Decimal_Number(left);
    3fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa6:	ac 81       	ldd	r26, Y+4	; 0x04
    3fa8:	bd 81       	ldd	r27, Y+5	; 0x05
    3faa:	bc 01       	movw	r22, r24
    3fac:	cd 01       	movw	r24, r26
    3fae:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_Display_Decimal_Number>
	//Display the decimal point
	CLCD_SendData('.');
    3fb2:	8e e2       	ldi	r24, 0x2E	; 46
    3fb4:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <CLCD_SendData>
	//Display the Right number to the decimal point
	CLCD_Display_Decimal_Number(right);
    3fb8:	89 81       	ldd	r24, Y+1	; 0x01
    3fba:	88 2f       	mov	r24, r24
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	a0 e0       	ldi	r26, 0x00	; 0
    3fc0:	b0 e0       	ldi	r27, 0x00	; 0
    3fc2:	bc 01       	movw	r22, r24
    3fc4:	cd 01       	movw	r24, r26
    3fc6:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_Display_Decimal_Number>
}
    3fca:	29 96       	adiw	r28, 0x09	; 9
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	f8 94       	cli
    3fd0:	de bf       	out	0x3e, r29	; 62
    3fd2:	0f be       	out	0x3f, r0	; 63
    3fd4:	cd bf       	out	0x3d, r28	; 61
    3fd6:	cf 91       	pop	r28
    3fd8:	df 91       	pop	r29
    3fda:	08 95       	ret

00003fdc <CLCD_WriteNumber>:

void CLCD_WriteNumber(u32 Number)
{
    3fdc:	ef 92       	push	r14
    3fde:	ff 92       	push	r15
    3fe0:	0f 93       	push	r16
    3fe2:	1f 93       	push	r17
    3fe4:	df 93       	push	r29
    3fe6:	cf 93       	push	r28
    3fe8:	cd b7       	in	r28, 0x3d	; 61
    3fea:	de b7       	in	r29, 0x3e	; 62
    3fec:	28 97       	sbiw	r28, 0x08	; 8
    3fee:	0f b6       	in	r0, 0x3f	; 63
    3ff0:	f8 94       	cli
    3ff2:	de bf       	out	0x3e, r29	; 62
    3ff4:	0f be       	out	0x3f, r0	; 63
    3ff6:	cd bf       	out	0x3d, r28	; 61
    3ff8:	6d 83       	std	Y+5, r22	; 0x05
    3ffa:	7e 83       	std	Y+6, r23	; 0x06
    3ffc:	8f 83       	std	Y+7, r24	; 0x07
    3ffe:	98 87       	std	Y+8, r25	; 0x08
	u32 ReservedNumber=1;
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	a0 e0       	ldi	r26, 0x00	; 0
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	89 83       	std	Y+1, r24	; 0x01
    400a:	9a 83       	std	Y+2, r25	; 0x02
    400c:	ab 83       	std	Y+3, r26	; 0x03
    400e:	bc 83       	std	Y+4, r27	; 0x04
    4010:	36 c0       	rjmp	.+108    	; 0x407e <CLCD_WriteNumber+0xa2>
	while(Number!=0)
	{
		ReservedNumber=((ReservedNumber*10)+(Number%10));
    4012:	89 81       	ldd	r24, Y+1	; 0x01
    4014:	9a 81       	ldd	r25, Y+2	; 0x02
    4016:	ab 81       	ldd	r26, Y+3	; 0x03
    4018:	bc 81       	ldd	r27, Y+4	; 0x04
    401a:	2a e0       	ldi	r18, 0x0A	; 10
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	40 e0       	ldi	r20, 0x00	; 0
    4020:	50 e0       	ldi	r21, 0x00	; 0
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	0e 94 af 21 	call	0x435e	; 0x435e <__mulsi3>
    402a:	7b 01       	movw	r14, r22
    402c:	8c 01       	movw	r16, r24
    402e:	8d 81       	ldd	r24, Y+5	; 0x05
    4030:	9e 81       	ldd	r25, Y+6	; 0x06
    4032:	af 81       	ldd	r26, Y+7	; 0x07
    4034:	b8 85       	ldd	r27, Y+8	; 0x08
    4036:	2a e0       	ldi	r18, 0x0A	; 10
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	40 e0       	ldi	r20, 0x00	; 0
    403c:	50 e0       	ldi	r21, 0x00	; 0
    403e:	bc 01       	movw	r22, r24
    4040:	cd 01       	movw	r24, r26
    4042:	0e 94 ce 21 	call	0x439c	; 0x439c <__udivmodsi4>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	8e 0d       	add	r24, r14
    404c:	9f 1d       	adc	r25, r15
    404e:	a0 1f       	adc	r26, r16
    4050:	b1 1f       	adc	r27, r17
    4052:	89 83       	std	Y+1, r24	; 0x01
    4054:	9a 83       	std	Y+2, r25	; 0x02
    4056:	ab 83       	std	Y+3, r26	; 0x03
    4058:	bc 83       	std	Y+4, r27	; 0x04
		Number/=10;
    405a:	8d 81       	ldd	r24, Y+5	; 0x05
    405c:	9e 81       	ldd	r25, Y+6	; 0x06
    405e:	af 81       	ldd	r26, Y+7	; 0x07
    4060:	b8 85       	ldd	r27, Y+8	; 0x08
    4062:	2a e0       	ldi	r18, 0x0A	; 10
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	bc 01       	movw	r22, r24
    406c:	cd 01       	movw	r24, r26
    406e:	0e 94 ce 21 	call	0x439c	; 0x439c <__udivmodsi4>
    4072:	da 01       	movw	r26, r20
    4074:	c9 01       	movw	r24, r18
    4076:	8d 83       	std	Y+5, r24	; 0x05
    4078:	9e 83       	std	Y+6, r25	; 0x06
    407a:	af 83       	std	Y+7, r26	; 0x07
    407c:	b8 87       	std	Y+8, r27	; 0x08
}

void CLCD_WriteNumber(u32 Number)
{
	u32 ReservedNumber=1;
	while(Number!=0)
    407e:	8d 81       	ldd	r24, Y+5	; 0x05
    4080:	9e 81       	ldd	r25, Y+6	; 0x06
    4082:	af 81       	ldd	r26, Y+7	; 0x07
    4084:	b8 85       	ldd	r27, Y+8	; 0x08
    4086:	00 97       	sbiw	r24, 0x00	; 0
    4088:	a1 05       	cpc	r26, r1
    408a:	b1 05       	cpc	r27, r1
    408c:	11 f6       	brne	.-124    	; 0x4012 <CLCD_WriteNumber+0x36>
		Number/=10;
	}

	do
	{
		CLCD_SendData((ReservedNumber%10)+'0');
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	9a 81       	ldd	r25, Y+2	; 0x02
    4092:	ab 81       	ldd	r26, Y+3	; 0x03
    4094:	bc 81       	ldd	r27, Y+4	; 0x04
    4096:	2a e0       	ldi	r18, 0x0A	; 10
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	40 e0       	ldi	r20, 0x00	; 0
    409c:	50 e0       	ldi	r21, 0x00	; 0
    409e:	bc 01       	movw	r22, r24
    40a0:	cd 01       	movw	r24, r26
    40a2:	0e 94 ce 21 	call	0x439c	; 0x439c <__udivmodsi4>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	80 5d       	subi	r24, 0xD0	; 208
    40ac:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <CLCD_SendData>
		ReservedNumber/=10;
    40b0:	89 81       	ldd	r24, Y+1	; 0x01
    40b2:	9a 81       	ldd	r25, Y+2	; 0x02
    40b4:	ab 81       	ldd	r26, Y+3	; 0x03
    40b6:	bc 81       	ldd	r27, Y+4	; 0x04
    40b8:	2a e0       	ldi	r18, 0x0A	; 10
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	40 e0       	ldi	r20, 0x00	; 0
    40be:	50 e0       	ldi	r21, 0x00	; 0
    40c0:	bc 01       	movw	r22, r24
    40c2:	cd 01       	movw	r24, r26
    40c4:	0e 94 ce 21 	call	0x439c	; 0x439c <__udivmodsi4>
    40c8:	da 01       	movw	r26, r20
    40ca:	c9 01       	movw	r24, r18
    40cc:	89 83       	std	Y+1, r24	; 0x01
    40ce:	9a 83       	std	Y+2, r25	; 0x02
    40d0:	ab 83       	std	Y+3, r26	; 0x03
    40d2:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(ReservedNumber != 1);
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	9a 81       	ldd	r25, Y+2	; 0x02
    40d8:	ab 81       	ldd	r26, Y+3	; 0x03
    40da:	bc 81       	ldd	r27, Y+4	; 0x04
    40dc:	81 30       	cpi	r24, 0x01	; 1
    40de:	91 05       	cpc	r25, r1
    40e0:	a1 05       	cpc	r26, r1
    40e2:	b1 05       	cpc	r27, r1
    40e4:	a1 f6       	brne	.-88     	; 0x408e <CLCD_WriteNumber+0xb2>
}
    40e6:	28 96       	adiw	r28, 0x08	; 8
    40e8:	0f b6       	in	r0, 0x3f	; 63
    40ea:	f8 94       	cli
    40ec:	de bf       	out	0x3e, r29	; 62
    40ee:	0f be       	out	0x3f, r0	; 63
    40f0:	cd bf       	out	0x3d, r28	; 61
    40f2:	cf 91       	pop	r28
    40f4:	df 91       	pop	r29
    40f6:	1f 91       	pop	r17
    40f8:	0f 91       	pop	r16
    40fa:	ff 90       	pop	r15
    40fc:	ef 90       	pop	r14
    40fe:	08 95       	ret

00004100 <KeyPad_Pressed_Key>:
 * Description          : function to define which switch is pressed in the keypad
 * 
 * @return u8           : return the value of the pressed switch 
 */
u8 KeyPad_Pressed_Key(void)
{
    4100:	df 93       	push	r29
    4102:	cf 93       	push	r28
    4104:	00 d0       	rcall	.+0      	; 0x4106 <KeyPad_Pressed_Key+0x6>
    4106:	00 d0       	rcall	.+0      	; 0x4108 <KeyPad_Pressed_Key+0x8>
    4108:	0f 92       	push	r0
    410a:	cd b7       	in	r28, 0x3d	; 61
    410c:	de b7       	in	r29, 0x3e	; 62
	u8 ColumnIndex,RowIndex,PinState,PressedKey;

	PressedKey=Key_Not_Pressed;
    410e:	8f ef       	ldi	r24, 0xFF	; 255
    4110:	89 83       	std	Y+1, r24	; 0x01

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    4112:	1b 82       	std	Y+3, r1	; 0x03
    4114:	7a c0       	rjmp	.+244    	; 0x420a <KeyPad_Pressed_Key+0x10a>
	{
		//Set column of Keypad Output
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	6f ef       	ldi	r22, 0xFF	; 255
    411a:	0e 94 bd 0c 	call	0x197a	; 0x197a <DIO_SetPortDirection>
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);
    411e:	8b 81       	ldd	r24, Y+3	; 0x03
    4120:	88 2f       	mov	r24, r24
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	fc 01       	movw	r30, r24
    4126:	e2 58       	subi	r30, 0x82	; 130
    4128:	fe 4f       	sbci	r31, 0xFE	; 254
    412a:	90 81       	ld	r25, Z
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	69 2f       	mov	r22, r25
    4130:	40 e0       	ldi	r20, 0x00	; 0
    4132:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    4136:	1a 82       	std	Y+2, r1	; 0x02
    4138:	55 c0       	rjmp	.+170    	; 0x41e4 <KeyPad_Pressed_Key+0xe4>
		{
			//Set Row input and activate pull-up
			DIO_SetPinDirection(KeyPad_Port,KeyPad_Row_Arr[RowIndex],DIO_INPUT);
    413a:	8a 81       	ldd	r24, Y+2	; 0x02
    413c:	88 2f       	mov	r24, r24
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	fc 01       	movw	r30, r24
    4142:	ee 57       	subi	r30, 0x7E	; 126
    4144:	fe 4f       	sbci	r31, 0xFE	; 254
    4146:	90 81       	ld	r25, Z
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	69 2f       	mov	r22, r25
    414c:	40 e0       	ldi	r20, 0x00	; 0
    414e:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
			DIO_EnablePullup(KeyPad_Port,KeyPad_Row_Arr[RowIndex],ENABLE_PullUp);
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	88 2f       	mov	r24, r24
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	fc 01       	movw	r30, r24
    415a:	ee 57       	subi	r30, 0x7E	; 126
    415c:	fe 4f       	sbci	r31, 0xFE	; 254
    415e:	90 81       	ld	r25, Z
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	69 2f       	mov	r22, r25
    4164:	40 e0       	ldi	r20, 0x00	; 0
    4166:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_EnablePullup>

			//Read the current row
			DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    416a:	8a 81       	ldd	r24, Y+2	; 0x02
    416c:	88 2f       	mov	r24, r24
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	fc 01       	movw	r30, r24
    4172:	ee 57       	subi	r30, 0x7E	; 126
    4174:	fe 4f       	sbci	r31, 0xFE	; 254
    4176:	90 81       	ld	r25, Z
    4178:	9e 01       	movw	r18, r28
    417a:	2c 5f       	subi	r18, 0xFC	; 252
    417c:	3f 4f       	sbci	r19, 0xFF	; 255
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	69 2f       	mov	r22, r25
    4182:	a9 01       	movw	r20, r18
    4184:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <DIO_GetPinValue>

			//Check if switch is pressed
			if(PinState==DIO_LOW)
    4188:	8c 81       	ldd	r24, Y+4	; 0x04
    418a:	88 23       	and	r24, r24
    418c:	41 f5       	brne	.+80     	; 0x41de <KeyPad_Pressed_Key+0xde>
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];
    418e:	8a 81       	ldd	r24, Y+2	; 0x02
    4190:	48 2f       	mov	r20, r24
    4192:	50 e0       	ldi	r21, 0x00	; 0
    4194:	8b 81       	ldd	r24, Y+3	; 0x03
    4196:	28 2f       	mov	r18, r24
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	ca 01       	movw	r24, r20
    419c:	88 0f       	add	r24, r24
    419e:	99 1f       	adc	r25, r25
    41a0:	88 0f       	add	r24, r24
    41a2:	99 1f       	adc	r25, r25
    41a4:	82 0f       	add	r24, r18
    41a6:	93 1f       	adc	r25, r19
    41a8:	fc 01       	movw	r30, r24
    41aa:	ea 57       	subi	r30, 0x7A	; 122
    41ac:	fe 4f       	sbci	r31, 0xFE	; 254
    41ae:	80 81       	ld	r24, Z
    41b0:	89 83       	std	Y+1, r24	; 0x01
    41b2:	0f c0       	rjmp	.+30     	; 0x41d2 <KeyPad_Pressed_Key+0xd2>

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
    41b4:	8a 81       	ldd	r24, Y+2	; 0x02
    41b6:	88 2f       	mov	r24, r24
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	fc 01       	movw	r30, r24
    41bc:	ee 57       	subi	r30, 0x7E	; 126
    41be:	fe 4f       	sbci	r31, 0xFE	; 254
    41c0:	90 81       	ld	r25, Z
    41c2:	9e 01       	movw	r18, r28
    41c4:	2c 5f       	subi	r18, 0xFC	; 252
    41c6:	3f 4f       	sbci	r19, 0xFF	; 255
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	69 2f       	mov	r22, r25
    41cc:	a9 01       	movw	r20, r18
    41ce:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <DIO_GetPinValue>
			if(PinState==DIO_LOW)
			{
				PressedKey=KeyPad_Arr[RowIndex][ColumnIndex];

				//Polling (busy waiting) until the key is released
				while(PinState==DIO_LOW)
    41d2:	8c 81       	ldd	r24, Y+4	; 0x04
    41d4:	88 23       	and	r24, r24
    41d6:	71 f3       	breq	.-36     	; 0x41b4 <KeyPad_Pressed_Key+0xb4>
				{
					DIO_GetPinValue(KeyPad_Port,KeyPad_Row_Arr[RowIndex],&PinState);
				}
				return PressedKey;
    41d8:	89 81       	ldd	r24, Y+1	; 0x01
    41da:	8d 83       	std	Y+5, r24	; 0x05
    41dc:	1c c0       	rjmp	.+56     	; 0x4216 <KeyPad_Pressed_Key+0x116>
		DIO_SetPortDirection(KeyPad_Port,PORT_OUTPUT);
		//Activate current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_LOW);


		for(RowIndex=0;RowIndex<Row_NO;RowIndex++)
    41de:	8a 81       	ldd	r24, Y+2	; 0x02
    41e0:	8f 5f       	subi	r24, 0xFF	; 255
    41e2:	8a 83       	std	Y+2, r24	; 0x02
    41e4:	8a 81       	ldd	r24, Y+2	; 0x02
    41e6:	84 30       	cpi	r24, 0x04	; 4
    41e8:	08 f4       	brcc	.+2      	; 0x41ec <KeyPad_Pressed_Key+0xec>
    41ea:	a7 cf       	rjmp	.-178    	; 0x413a <KeyPad_Pressed_Key+0x3a>
				}
				return PressedKey;
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
    41ec:	8b 81       	ldd	r24, Y+3	; 0x03
    41ee:	88 2f       	mov	r24, r24
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	fc 01       	movw	r30, r24
    41f4:	e2 58       	subi	r30, 0x82	; 130
    41f6:	fe 4f       	sbci	r31, 0xFE	; 254
    41f8:	90 81       	ld	r25, Z
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	69 2f       	mov	r22, r25
    41fe:	41 e0       	ldi	r20, 0x01	; 1
    4200:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_SetPinValue>

	static u8 KeyPad_Arr[Row_NO][Column_NO]= KeyPad_Arr_Value;
	static u8 KeyPad_Row_Arr[Row_NO]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
	static u8 KeyPad_Column_Arr[Column_NO]={Column_PIN0,Column_PIN1,Column_PIN2,Column_PIN3};

	for(ColumnIndex=0;ColumnIndex<Column_NO;ColumnIndex++)
    4204:	8b 81       	ldd	r24, Y+3	; 0x03
    4206:	8f 5f       	subi	r24, 0xFF	; 255
    4208:	8b 83       	std	Y+3, r24	; 0x03
    420a:	8b 81       	ldd	r24, Y+3	; 0x03
    420c:	84 30       	cpi	r24, 0x04	; 4
    420e:	08 f4       	brcc	.+2      	; 0x4212 <KeyPad_Pressed_Key+0x112>
    4210:	82 cf       	rjmp	.-252    	; 0x4116 <KeyPad_Pressed_Key+0x16>
			}
		}
		//Deactivate the current column
		DIO_SetPinValue(KeyPad_Port,KeyPad_Column_Arr[ColumnIndex],DIO_HIGH);
	}
	return PressedKey;
    4212:	89 81       	ldd	r24, Y+1	; 0x01
    4214:	8d 83       	std	Y+5, r24	; 0x05
    4216:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4218:	0f 90       	pop	r0
    421a:	0f 90       	pop	r0
    421c:	0f 90       	pop	r0
    421e:	0f 90       	pop	r0
    4220:	0f 90       	pop	r0
    4222:	cf 91       	pop	r28
    4224:	df 91       	pop	r29
    4226:	08 95       	ret

00004228 <ICU_SW>:
	static	 u16	OnTicks=0;
	static	 u16	Reading1;
	static	 u16	Reading2;

void ICU_SW(void)
{
    4228:	df 93       	push	r29
    422a:	cf 93       	push	r28
    422c:	cd b7       	in	r28, 0x3d	; 61
    422e:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	counter++;
    4230:	80 91 aa 01 	lds	r24, 0x01AA
    4234:	8f 5f       	subi	r24, 0xFF	; 255
    4236:	80 93 aa 01 	sts	0x01AA, r24
	if (counter==1) // indicator for Position 1
    423a:	80 91 aa 01 	lds	r24, 0x01AA
    423e:	81 30       	cpi	r24, 0x01	; 1
    4240:	29 f4       	brne	.+10     	; 0x424c <ICU_SW+0x24>
	{
		Timer1_SetValueChannelA(0);
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	0e 94 60 08 	call	0x10c0	; 0x10c0 <Timer1_SetValueChannelA>
    424a:	2f c0       	rjmp	.+94     	; 0x42aa <ICU_SW+0x82>
	}
	else if (counter==2) // indicator for Position 2
    424c:	80 91 aa 01 	lds	r24, 0x01AA
    4250:	82 30       	cpi	r24, 0x02	; 2
    4252:	81 f4       	brne	.+32     	; 0x4274 <ICU_SW+0x4c>
		{
		Timer1_ReadValueChannelA(&Reading1);
    4254:	8b ea       	ldi	r24, 0xAB	; 171
    4256:	91 e0       	ldi	r25, 0x01	; 1
    4258:	0e 94 84 08 	call	0x1108	; 0x1108 <Timer1_ReadValueChannelA>
		PeriodTicks=Reading1;
    425c:	80 91 ab 01 	lds	r24, 0x01AB
    4260:	90 91 ac 01 	lds	r25, 0x01AC
    4264:	90 93 a7 01 	sts	0x01A7, r25
    4268:	80 93 a6 01 	sts	0x01A6, r24
		External_Int1_EdgeSelection(Falling_Edge_Sense);
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <External_Int1_EdgeSelection>
    4272:	1b c0       	rjmp	.+54     	; 0x42aa <ICU_SW+0x82>
		}
	else if (counter==3) // indicator for Position 3
    4274:	80 91 aa 01 	lds	r24, 0x01AA
    4278:	83 30       	cpi	r24, 0x03	; 3
    427a:	a9 f4       	brne	.+42     	; 0x42a6 <ICU_SW+0x7e>
	{
	Timer1_ReadValueChannelA(&Reading2);
    427c:	8d ea       	ldi	r24, 0xAD	; 173
    427e:	91 e0       	ldi	r25, 0x01	; 1
    4280:	0e 94 84 08 	call	0x1108	; 0x1108 <Timer1_ReadValueChannelA>
	OnTicks=Reading2-PeriodTicks;
    4284:	20 91 ad 01 	lds	r18, 0x01AD
    4288:	30 91 ae 01 	lds	r19, 0x01AE
    428c:	80 91 a6 01 	lds	r24, 0x01A6
    4290:	90 91 a7 01 	lds	r25, 0x01A7
    4294:	a9 01       	movw	r20, r18
    4296:	48 1b       	sub	r20, r24
    4298:	59 0b       	sbc	r21, r25
    429a:	ca 01       	movw	r24, r20
    429c:	90 93 a9 01 	sts	0x01A9, r25
    42a0:	80 93 a8 01 	sts	0x01A8, r24
    42a4:	02 c0       	rjmp	.+4      	; 0x42aa <ICU_SW+0x82>
	//Enable_External_INT0(Disable_PIE_Interrupt);
	}
	else
		counter=0;
    42a6:	10 92 aa 01 	sts	0x01AA, r1

}
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	08 95       	ret

000042b0 <main>:
void main()
	{
    42b0:	df 93       	push	r29
    42b2:	cf 93       	push	r28
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
			DIO_SetPinDirection(DIO_PORTB,3,DIO_OUTPUT); //TO GENERATE PWM TIMER0
    42b8:	81 e0       	ldi	r24, 0x01	; 1
    42ba:	63 e0       	ldi	r22, 0x03	; 3
    42bc:	41 e0       	ldi	r20, 0x01	; 1
    42be:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>
			DIO_SetPinDirection(DIO_PORTD,2,DIO_INPUT);  //FOR THE EXT INT & Read Timer1 from it
    42c2:	83 e0       	ldi	r24, 0x03	; 3
    42c4:	62 e0       	ldi	r22, 0x02	; 2
    42c6:	40 e0       	ldi	r20, 0x00	; 0
    42c8:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_SetPinDirection>

			CLCD_init();
    42cc:	0e 94 a5 1c 	call	0x394a	; 0x394a <CLCD_init>

			CallBack_Int1(&ICU_SW);
    42d0:	84 e1       	ldi	r24, 0x14	; 20
    42d2:	91 e2       	ldi	r25, 0x21	; 33
    42d4:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <CallBack_Int1>

			Enable_External_INT1(Enable_PIE_Interrupt);
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <Enable_External_INT1>
			External_Int1_EdgeSelection(Rising_Edge_Sense);
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <External_Int1_EdgeSelection>

			Timer1_init();
    42e4:	0e 94 21 08 	call	0x1042	; 0x1042 <Timer1_init>
			Timer0_SetValue(64);
    42e8:	80 e4       	ldi	r24, 0x40	; 64
    42ea:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Timer0_SetValue>
			Timer0_init();
    42ee:	0e 94 75 07 	call	0xeea	; 0xeea <Timer0_init>

			Enable_Global_Interrupt(Enable_GIE_Interrupt);
    42f2:	80 e0       	ldi	r24, 0x00	; 0
    42f4:	0e 94 b4 09 	call	0x1368	; 0x1368 <Enable_Global_Interrupt>
			while(1)
				{

				while((PeriodTicks==0)&&(OnTicks==0)); //infinity loop till period & On time measured
    42f8:	80 91 a6 01 	lds	r24, 0x01A6
    42fc:	90 91 a7 01 	lds	r25, 0x01A7
    4300:	00 97       	sbiw	r24, 0x00	; 0
    4302:	31 f4       	brne	.+12     	; 0x4310 <main+0x60>
    4304:	80 91 a8 01 	lds	r24, 0x01A8
    4308:	90 91 a9 01 	lds	r25, 0x01A9
    430c:	00 97       	sbiw	r24, 0x00	; 0
    430e:	a1 f3       	breq	.-24     	; 0x42f8 <main+0x48>
					CLCD_GoToXY(0,0);
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	60 e0       	ldi	r22, 0x00	; 0
    4314:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <CLCD_GoToXY>
					CLCD_SendWord("PeriodTicks=");
    4318:	80 e6       	ldi	r24, 0x60	; 96
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <CLCD_SendWord>
					CLCD_Display_Decimal_Number(PeriodTicks);
    4320:	80 91 a6 01 	lds	r24, 0x01A6
    4324:	90 91 a7 01 	lds	r25, 0x01A7
    4328:	cc 01       	movw	r24, r24
    432a:	a0 e0       	ldi	r26, 0x00	; 0
    432c:	b0 e0       	ldi	r27, 0x00	; 0
    432e:	bc 01       	movw	r22, r24
    4330:	cd 01       	movw	r24, r26
    4332:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_Display_Decimal_Number>
					CLCD_GoToXY(1,0);
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	60 e0       	ldi	r22, 0x00	; 0
    433a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <CLCD_GoToXY>
					CLCD_SendWord("OnTicks=");
    433e:	8d e6       	ldi	r24, 0x6D	; 109
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <CLCD_SendWord>
					CLCD_Display_Decimal_Number(OnTicks);
    4346:	80 91 a8 01 	lds	r24, 0x01A8
    434a:	90 91 a9 01 	lds	r25, 0x01A9
    434e:	cc 01       	movw	r24, r24
    4350:	a0 e0       	ldi	r26, 0x00	; 0
    4352:	b0 e0       	ldi	r27, 0x00	; 0
    4354:	bc 01       	movw	r22, r24
    4356:	cd 01       	movw	r24, r26
    4358:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_Display_Decimal_Number>
    435c:	cd cf       	rjmp	.-102    	; 0x42f8 <main+0x48>

0000435e <__mulsi3>:
    435e:	62 9f       	mul	r22, r18
    4360:	d0 01       	movw	r26, r0
    4362:	73 9f       	mul	r23, r19
    4364:	f0 01       	movw	r30, r0
    4366:	82 9f       	mul	r24, r18
    4368:	e0 0d       	add	r30, r0
    436a:	f1 1d       	adc	r31, r1
    436c:	64 9f       	mul	r22, r20
    436e:	e0 0d       	add	r30, r0
    4370:	f1 1d       	adc	r31, r1
    4372:	92 9f       	mul	r25, r18
    4374:	f0 0d       	add	r31, r0
    4376:	83 9f       	mul	r24, r19
    4378:	f0 0d       	add	r31, r0
    437a:	74 9f       	mul	r23, r20
    437c:	f0 0d       	add	r31, r0
    437e:	65 9f       	mul	r22, r21
    4380:	f0 0d       	add	r31, r0
    4382:	99 27       	eor	r25, r25
    4384:	72 9f       	mul	r23, r18
    4386:	b0 0d       	add	r27, r0
    4388:	e1 1d       	adc	r30, r1
    438a:	f9 1f       	adc	r31, r25
    438c:	63 9f       	mul	r22, r19
    438e:	b0 0d       	add	r27, r0
    4390:	e1 1d       	adc	r30, r1
    4392:	f9 1f       	adc	r31, r25
    4394:	bd 01       	movw	r22, r26
    4396:	cf 01       	movw	r24, r30
    4398:	11 24       	eor	r1, r1
    439a:	08 95       	ret

0000439c <__udivmodsi4>:
    439c:	a1 e2       	ldi	r26, 0x21	; 33
    439e:	1a 2e       	mov	r1, r26
    43a0:	aa 1b       	sub	r26, r26
    43a2:	bb 1b       	sub	r27, r27
    43a4:	fd 01       	movw	r30, r26
    43a6:	0d c0       	rjmp	.+26     	; 0x43c2 <__udivmodsi4_ep>

000043a8 <__udivmodsi4_loop>:
    43a8:	aa 1f       	adc	r26, r26
    43aa:	bb 1f       	adc	r27, r27
    43ac:	ee 1f       	adc	r30, r30
    43ae:	ff 1f       	adc	r31, r31
    43b0:	a2 17       	cp	r26, r18
    43b2:	b3 07       	cpc	r27, r19
    43b4:	e4 07       	cpc	r30, r20
    43b6:	f5 07       	cpc	r31, r21
    43b8:	20 f0       	brcs	.+8      	; 0x43c2 <__udivmodsi4_ep>
    43ba:	a2 1b       	sub	r26, r18
    43bc:	b3 0b       	sbc	r27, r19
    43be:	e4 0b       	sbc	r30, r20
    43c0:	f5 0b       	sbc	r31, r21

000043c2 <__udivmodsi4_ep>:
    43c2:	66 1f       	adc	r22, r22
    43c4:	77 1f       	adc	r23, r23
    43c6:	88 1f       	adc	r24, r24
    43c8:	99 1f       	adc	r25, r25
    43ca:	1a 94       	dec	r1
    43cc:	69 f7       	brne	.-38     	; 0x43a8 <__udivmodsi4_loop>
    43ce:	60 95       	com	r22
    43d0:	70 95       	com	r23
    43d2:	80 95       	com	r24
    43d4:	90 95       	com	r25
    43d6:	9b 01       	movw	r18, r22
    43d8:	ac 01       	movw	r20, r24
    43da:	bd 01       	movw	r22, r26
    43dc:	cf 01       	movw	r24, r30
    43de:	08 95       	ret

000043e0 <__divmodsi4>:
    43e0:	97 fb       	bst	r25, 7
    43e2:	09 2e       	mov	r0, r25
    43e4:	05 26       	eor	r0, r21
    43e6:	0e d0       	rcall	.+28     	; 0x4404 <__divmodsi4_neg1>
    43e8:	57 fd       	sbrc	r21, 7
    43ea:	04 d0       	rcall	.+8      	; 0x43f4 <__divmodsi4_neg2>
    43ec:	d7 df       	rcall	.-82     	; 0x439c <__udivmodsi4>
    43ee:	0a d0       	rcall	.+20     	; 0x4404 <__divmodsi4_neg1>
    43f0:	00 1c       	adc	r0, r0
    43f2:	38 f4       	brcc	.+14     	; 0x4402 <__divmodsi4_exit>

000043f4 <__divmodsi4_neg2>:
    43f4:	50 95       	com	r21
    43f6:	40 95       	com	r20
    43f8:	30 95       	com	r19
    43fa:	21 95       	neg	r18
    43fc:	3f 4f       	sbci	r19, 0xFF	; 255
    43fe:	4f 4f       	sbci	r20, 0xFF	; 255
    4400:	5f 4f       	sbci	r21, 0xFF	; 255

00004402 <__divmodsi4_exit>:
    4402:	08 95       	ret

00004404 <__divmodsi4_neg1>:
    4404:	f6 f7       	brtc	.-4      	; 0x4402 <__divmodsi4_exit>
    4406:	90 95       	com	r25
    4408:	80 95       	com	r24
    440a:	70 95       	com	r23
    440c:	61 95       	neg	r22
    440e:	7f 4f       	sbci	r23, 0xFF	; 255
    4410:	8f 4f       	sbci	r24, 0xFF	; 255
    4412:	9f 4f       	sbci	r25, 0xFF	; 255
    4414:	08 95       	ret

00004416 <__prologue_saves__>:
    4416:	2f 92       	push	r2
    4418:	3f 92       	push	r3
    441a:	4f 92       	push	r4
    441c:	5f 92       	push	r5
    441e:	6f 92       	push	r6
    4420:	7f 92       	push	r7
    4422:	8f 92       	push	r8
    4424:	9f 92       	push	r9
    4426:	af 92       	push	r10
    4428:	bf 92       	push	r11
    442a:	cf 92       	push	r12
    442c:	df 92       	push	r13
    442e:	ef 92       	push	r14
    4430:	ff 92       	push	r15
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	cf 93       	push	r28
    4438:	df 93       	push	r29
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
    443e:	ca 1b       	sub	r28, r26
    4440:	db 0b       	sbc	r29, r27
    4442:	0f b6       	in	r0, 0x3f	; 63
    4444:	f8 94       	cli
    4446:	de bf       	out	0x3e, r29	; 62
    4448:	0f be       	out	0x3f, r0	; 63
    444a:	cd bf       	out	0x3d, r28	; 61
    444c:	09 94       	ijmp

0000444e <__epilogue_restores__>:
    444e:	2a 88       	ldd	r2, Y+18	; 0x12
    4450:	39 88       	ldd	r3, Y+17	; 0x11
    4452:	48 88       	ldd	r4, Y+16	; 0x10
    4454:	5f 84       	ldd	r5, Y+15	; 0x0f
    4456:	6e 84       	ldd	r6, Y+14	; 0x0e
    4458:	7d 84       	ldd	r7, Y+13	; 0x0d
    445a:	8c 84       	ldd	r8, Y+12	; 0x0c
    445c:	9b 84       	ldd	r9, Y+11	; 0x0b
    445e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4460:	b9 84       	ldd	r11, Y+9	; 0x09
    4462:	c8 84       	ldd	r12, Y+8	; 0x08
    4464:	df 80       	ldd	r13, Y+7	; 0x07
    4466:	ee 80       	ldd	r14, Y+6	; 0x06
    4468:	fd 80       	ldd	r15, Y+5	; 0x05
    446a:	0c 81       	ldd	r16, Y+4	; 0x04
    446c:	1b 81       	ldd	r17, Y+3	; 0x03
    446e:	aa 81       	ldd	r26, Y+2	; 0x02
    4470:	b9 81       	ldd	r27, Y+1	; 0x01
    4472:	ce 0f       	add	r28, r30
    4474:	d1 1d       	adc	r29, r1
    4476:	0f b6       	in	r0, 0x3f	; 63
    4478:	f8 94       	cli
    447a:	de bf       	out	0x3e, r29	; 62
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	cd bf       	out	0x3d, r28	; 61
    4480:	ed 01       	movw	r28, r26
    4482:	08 95       	ret

00004484 <_exit>:
    4484:	f8 94       	cli

00004486 <__stop_program>:
    4486:	ff cf       	rjmp	.-2      	; 0x4486 <__stop_program>
